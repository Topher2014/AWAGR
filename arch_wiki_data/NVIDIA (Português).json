{
  "title": "NVIDIA (Português)",
  "url": "https://wiki.archlinux.org/title/NVIDIA_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **Este artigo ou esta seção precisa de tradução.** Este artigo ou esta seção precisa de tradução.\n\nEste artigo ou esta seção precisa de tradução.\n\nRelated articles\n\n- NVIDIA/Tips and tricks\n- NVIDIA/Troubleshooting\n- Nouveau\n- NVIDIA Optimus\n- PRIME\n- Bumblebee\n- nvidia-xrun\n- Xorg\n- Vulkan\n\nEste artigo cobre o driver de placa gráfica proprietário da NVIDIA. Para o driver de código aberto, consulte Nouveau. Se você têm um laptop com gráficos hiblidos intel/NVIIDA, consulte NVIDIA Optimus.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "Estas instruções são para aqueles que usam o pacote linux ou linux-lts. Para configurar um kernel customizado, pule para a próxima subseassão.\n\n1. Se você não sabe qual placa gráfica possui, descubre com o comando:\n\n```\n$ lspci -k | grep -A 2 -E \"(VGA|3D)\"\n```\n\n2. Determine a versão do driver necessária para a sua placa:\n\n- Visitando o site de download de driver da NVIDIA e use as listas suspensas.\n- Encontre o codinome (ex. NV50, NVC0, etc.) na página de codinomes do wiki da nouveau ou no GitLab do nouveau, em seguida buscando o nome na lista de placas legadas da NVIDIA: se sua placa não estiver lá, você pode usar o driver mais recente.\n\n3. Instale o driver apropriado para a sua placa:\n\n- Ao instalar dkms, consulte Dynamic Kernel Module Support (Português)#Instalação\n- nvidia não inicializa no Linux 5.18 em sistemas com CPUs Intel devido a FS#74886/FS#74891. Até que isso seja corrigido, uma solução alternativa é desabilitar a função de segurança indirect branch tracking da CPU, setando ibt=off Kernel parameters (Português) no gerenciador de boot. Esta função de segurança é responsável por mitigar uma classe de técnicas de exploração, mas é considerado seguro como uma solução temporária. Alternativamente você pode tentar nvidia-open e continuar usando IBT.\n- nvidia-open não funciona em sistemas que possuem GPUs integradas da AMD devido a questão nvidia-open #282.\n\n- Para a família Maxwell (NV110/GMXXX)[link inativo 2025-04-06 ⓘ] ou mais recente, install o pacote nvidia (para uso com o kernel linux) ou nvidia-lts (para usar com o kernel linux-lts). Se estes pacotes não funcionarem, nvidia-betaAUR pode oferecer suporte a novas versões de driver.\n- Alternativamente para a família Turing (NV160/TUXXX)[link inativo 2025-04-06 ⓘ] ou mais recente, o pacote nvidia-open pode ser instalado para módulos de kernel de código aberto no linux linux (em outros kernels, nvidia-open-dkms deve ser usado). No momento estamos na qualidade alfa em placas de desktop, portanto, poderá haver problemas.\n- Para a família Kepler (NVE0/GKXXX)[link inativo 2025-04-06 ⓘ], install o pacote nvidia-470xx-dkmsAUR.\n- Para a família Fermi (NVC0/GF1XX)[link inativo 2025-04-06 ⓘ], install o pacote nvidia-390xx-dkmsAUR.\n- Para placas mais antigas, dê uma olhada em #Drivers não suportados.\n\n- Se estes pacotes não funcionarem, nvidia-betaAUR pode oferecer suporte a novas versões de driver.\n\n- No momento estamos na qualidade alfa em placas de desktop, portanto, poderá haver problemas.\n\n4. Para suportar aplicativos de 32-bits, tambem instale o pacote lib32 correspondente através do repositório multilib (ex. lib32-nvidia-utils).\n\n5. Reinicie. O pacote nvidia possui um arquivo que adiciona o módulo nouveau na lista negra, então a reinicializaçãao se faz necessária.\n\nUma vez que o driver foi instalado, continue para #Configurações do Xorg ou #Wayland.\n\n"
    },
    {
      "title": "Drivers não suportados",
      "level": 3,
      "content": "Se você têm uma placa antiga, a NVIDIA não suporta mais ativamente o driver para a sua placa. Isso significa que estes driver não suportam oficialmente o a verão atual do Xorg. Assim pode ser mais fácil usar o driver nouveau, que suporta placas antigas com o XOrg atual.\n\nNo entanto, os drivers legados da NVIDIA ainda estão disponíveis e podem fornecer melhor desempenho 3D e estabilidade.\n\n- Para a família Tesla (NV50/G80-90-GT2XX)[link inativo 2025-04-06 ⓘ], install o pacote nvidia-340xx-dkmsAUR package.\n- Para a família Curie (NV40/G70)[link inativo 2025-04-06 ⓘ] e mais antigas, os drivers não são mais empacotados para o Arch Linux.\n\n"
    },
    {
      "title": "Kernel customizado",
      "level": 3,
      "content": "Se estiver usando um kernel customizado, a compila¸~ao dos modulos de kernel da NVIDIA podem ser automatizados com DKMS. Instale o pacote nvidia-dkms (ou uma branch específica).\n\nCertifique-se que seu kernel tenha CONFIG_DRM_SIMPLEDRM=y e, se está usando CONFIG_DEBUG_INFO_BTF isso é necessário no PKGBUILD (desde o kernel 5.16):\n\n```\ninstall -Dt \"$builddir/tools/bpf/resolve_btfids\" tools/bpf/resolve_btfids/resolve_btfids\n```\n\nO módulo NVIDIA irá ser reconstruido após cada atualização do pacote NVIDIA ou do kernel, graças ao pacman hook do DKMS.\n\n"
    },
    {
      "title": "Configuração do modo DRM no kernel",
      "level": 3,
      "content": "Para habilitar o DRM (Direct Rendering Manager) kernel mode setting, adicione o nvidia-drm.modeset=1 Kernel parameters (Português).\n\nNote: **não** \n\n- O driver NVIDIA não fornece um driver fbdev para o console de alta resolução para o modulo vesafb compilado no kernel. No entanto, o módulo efifb compilado pelo kernel suporta um console de alta resolução em sistemas EFI. Este método requer o GRUB ou rEFInd e está descrito em NVIDIA/Tips and tricks#Fixing terminal resolution.[1][2][3].\n- Drivers NVIDIA anteriores a versão 470 (ex. nvidia-390xx-dkmsAUR) não suportam aceleração de hardware Xwayland, fazendo com que aplicativos não nativos do Wayland sofram de baixo desempenho em sessões Wayland.\n\n"
    },
    {
      "title": "Carregamento antecipado",
      "level": 4,
      "content": "Para um funcionamento básico, somente adicionando o parametro no kernel deve ser o suficiente. Se você quiser garantir que ele seja carregado o mais antecipado possível, ou estiver percebendo problemas de inicialização (Como o modulo nvidia do kernel sendo carregado após o display manager) você pode adicionar nvidia, nvidia_modeset, nvidia_uvm e nvidia_drm no initramfs.\n\nSe você usa mkinitcpio initramfs, siga mkinitcpio#MODULES para adicionar os módulos.\n\nSe adicionado ao initramfs, não esqueça de executar mkinitcpio toda vez que um driver nvidia for atualizado. Consulte #pacman hook para automatizar esses passos.\n\nSe você usa Booster, Siga Booster#Early module loading.\n\nPara evitar a possibilidade de esquecer de atualizar o initramfs após uma atualização do driver NVIDIA, você talvés queira usar um pacman hook:\n\n```\n/etc/pacman.d/hooks/nvidia.hook\n```\n\n```\n[Trigger]\nOperation=Install\nOperation=Upgrade\nOperation=Remove\nType=Package\nTarget=nvidia\nTarget=linux\n# Change the linux part above and in the Exec line if a different kernel is used\n\n[Action]\nDescription=Update NVIDIA module in initcpio\nDepends=mkinitcpio\nWhen=PostTransaction\nNeedsTargets\nExec=/bin/sh -c 'while read -r trg; do case $trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -P'\n```\n\nTenha certeza que o pacote setado no Target neste hook é o que você instalou no passo anterior (ex. nvidia, nvidia-dkms, nvidia-lts ou nvidia-ck-something).\n\n"
    },
    {
      "title": "Decodificação de vídeo acelerada por hardware",
      "level": 3,
      "content": "A decodificação de vídeo acelerada com VDPAU é compatível com placas da família GeForce 8 e mais recentes. A decodificação de vídeo acelerada com NVDEC é suportada em placas Fermi (família ~400) e mais recentes. Consulte Hardware video acceleration para obter detalhes.\n\n"
    },
    {
      "title": "Codificação de vídeo acelerada por hardware com NVENC",
      "level": 3,
      "content": "NVENC requer o modulo nvidia_uvm e a criação de nós de dispositivos relacionados em /dev.\n\nO pacote de driver mais recente fornece uma udev rule que cria nós de dispositivo automaticamente, portanto, nenhuma ação adicional é necessária.\n\nSe você está usando um driver antigo (ex. nvidia-340xx-dkmsAUR), você precisa criar nós de dispositivo. Invocando o utilitário nvidia-modprobe os cria automaticamente. Você pode criar /etc/udev/rules.d/70-nvidia.rules para executá-lo automaticamente:\n\n```\n/etc/udev/rules.d/70-nvidia.rules\n```\n\n```\nACTION==\"add\", DEVPATH==\"/bus/pci/drivers/nvidia\", RUN+=\"/usr/bin/nvidia-modprobe -c0 -u\"\n```\n\n"
    },
    {
      "title": "Configurações do Xorg",
      "level": 2,
      "content": "O driver gráfico proprietário da NVIDIA não precisa qualquer arquivo de configuração do servidor Xorg. Você pode start X para ver se o servidor do Xorg irá funcionar coretamente sem o arquivo de configuração . No entanto, se faz necessário criar um arquivo de configuração (preferencialmente /etc/X11/xorg.conf.d/20-nvidia.conf do que /etc/X11/xorg.conf) para ajustar várias configurações. Estas configurações podem ser geradas pela ferramenta de configuração do Xorg da NVIDIA, ou isso pode ser criado manualmente. Se criadomanualmente, pode ser uma configuração mínima (no sentido de que passará apenas as opções básicas para o servidor Xorg), ou pode incluir várias configurações que podem ignorar as opções auto-descobertas ou pré-configuradas do Xorg.\n\n"
    },
    {
      "title": "Configuração automática",
      "level": 3,
      "content": "O pacote NVIDIA uma ferramenta de configuração automática para criar um arquivo de configuração do servidor Xorg (xorg.conf) e pode ser executado pelo comando:\n\n```\n# nvidia-xconfig\n```\n\nEste comando irá auto detectar e criar (ou editar, se já existente) o arquivo /etc/X11/xorg.conf de configuração levando em considera¸~ao o hardware atual.\n\nSe houver instâncias de DRI, certifique-se de que sejam comentadas:\n\n```\n#    Load        \"dri\"\n```\n\nVerifique novamente o arquivo /etc/X11/xorg.conf para garantir que sua profundidade padrão, sincronização horizontal, atualização vertical e resoluções sejam aceitáveis.\n\n"
    },
    {
      "title": "nvidia-settings",
      "level": 3,
      "content": "o ferramenta nvidia-settings permite que você configure muitas opções usando CLI ou GUI. A execução de nvidia-settings sem nenhuma opção inicia a GUI, para opções de CLI, consulte nvidia-settings(1).\n\nVocê pode executar a CLI/GUI como um usuário sem permissões de root e salvar as configurações em ~/.nvidia-settings-rc usando a opção Save Current Configuration na guia nvidia-settings Configuration.\n\nPara carregar o ~/.nvidia-settings-rc para o usuário padrão:\n\n```\n$ nvidia-settings --load-config-only\n```\n\nConsulte Autostarting para iniciar esse comando em cada boot.\n\n- O Xorg poderá não iniciar ou travar na inicialização após salvar as alterações na nvidia-settings. Ajustar ou apagar o arquivo ~/.nvidia-settings-rc e/ou os arquivos do Xorg deve recuperar a inicialização normal.\n- O desktop Cinnamon pode sobrescrever mudanção feitas através do nvidia-settings. Você pode ajustar o comportamento de inicialização do Cinnamon para evitar isso.\n\n"
    },
    {
      "title": "Configuração manual",
      "level": 3,
      "content": "Vários ajustes (que não podem ser ativados automaticamente ou com nvidia-settings) podem ser executados editando o arquivo de configuração. O servidor Xorg precisará ser reiniciado antes que qualquer alteração seja aplicada.\n\nConsulte NVIDIA Accelerated Linux Graphics Driver README and Installation Guide para detalhes adicionais e opções.\n\n"
    },
    {
      "title": "Configurações mínimas",
      "level": 4,
      "content": "Um bloco de configurações básicas existe em 20-nvidia.conf (ou depreciado em xorg.conf) deve se parecer com isso:\n\n```\n/etc/X11/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"NVIDIA Card\"\n        Driver \"nvidia\"\n        VendorName \"NVIDIA Corporation\"\n        BoardName \"GeForce GTX 1050 Ti\"\nEndSection\n```\n\n"
    },
    {
      "title": "Desabilitar o log na inicialização",
      "level": 4,
      "content": "Adicione a opção \"NoLogo\" na seção Device:\n\n```\nOption \"NoLogo\" \"1\"\n```\n\n"
    },
    {
      "title": "Sobrescrever a detecçãodo monitor",
      "level": 4,
      "content": "A opção \"ConnectedMonitor\" na sessão Device permite sobrescrever a detecção do monitorenquanto o servidor X inicializa, o que pode economizar uma quantidade significativa de tempo na inicialização. As opções disponíveis são: \"CRT\" para conexões analógicas, \"DFP\" para monitores digitais e \"TV\" para televisores.\n\nA declaração a seguir força o driver NVIDIA a ignorar as verificações de inicialização e reconhecer o monitor como DFP:\n\n```\nOption \"ConnectedMonitor\" \"DFP\"\n```\n\n"
    },
    {
      "title": "Habilitando o controle de brilho",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nAdicione os parametros do kernel:\n\n```\nnvidia.NVreg_RegistryDwords=EnableBrightnessControl=1\n```\n\nAlternativamente, adicione o seguinte na seção Device:\n\n```\nOption \"RegistryDwords\" \"EnableBrightnessControl=1\"\n```\n\nSe o controle de brilho continua sem funcionar mesmo com essas opções, tente instalar o pacote nvidia-bl-dkmsAUR.\n\n"
    },
    {
      "title": "Habilitando o SLI",
      "level": 4,
      "content": "Taken from the NVIDIA driver's README Appendix B: This option controls the configuration of SLI rendering in supported configurations. A \"supported configuration\" is a computer equipped with an SLI-Certified Motherboard and 2 or 3 SLI-Certified GeForce GPUs.\n\nFind the first GPU's PCI Bus ID using lspci:\n\n```\n# lspci | grep \"VGA|3D controller\"\n```\n\n```\n00:02.0 VGA compatible controller: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor Graphics Controller (rev 09)\n03:00.0 VGA compatible controller: NVIDIA Corporation GK107 [GeForce GTX 650] (rev a1)\n04:00.0 VGA compatible controller: NVIDIA Corporation GK107 [GeForce GTX 650] (rev a1)\n08:00.0 3D controller: NVIDIA Corporation GM108GLM [Quadro K620M / Quadro M500M] (rev a2)\n```\n\nAdd the BusID (3 in the previous example) under section Device:\n\n```\nBusID \"PCI:3:0:0\"\n```\n\nAdd the desired SLI rendering mode value under section Screen:\n\n```\nOption \"SLI\" \"AA\"\n```\n\nThe following table presents the available rendering modes.\n\nTable content:\nValue | Behavior\n0, no, off, false, Single | Use only a single GPU when rendering.\n1, yes, on, true, Auto | Enable SLI and allow the driver to automatically select the appropriate rendering mode.\nAFR | Enable SLI and use the alternate frame rendering mode.\nSFR | Enable SLI and use the split frame rendering mode.\nAA | Enable SLI and use SLI antialiasing. Use this in conjunction with full scene antialiasing to improve visual quality.\n\nAlternatively, you can use the nvidia-xconfig utility to insert these changes into xorg.conf with a single command:\n\n```\n# nvidia-xconfig --busid=PCI:3:0:0 --sli=AA\n```\n\nTo verify that SLI mode is enabled from a shell:\n\n```\n$ nvidia-settings -q all | grep SLIMode\n```\n\n```\nAttribute 'SLIMode' (arch:0.0): AA \n    'SLIMode' is a string attribute.\n    'SLIMode' is a read-only attribute.\n    'SLIMode' can use the following target types: X Screen.\n```\n\nIf this configuration does not work, you may need to use the PCI Bus ID provided by nvidia-settings,\n\n```\n$ nvidia-settings -q all | grep -i pcibus\n```\n\n```\nAttribute 'PCIBus' (host:0[gpu:0]): 101.\n  'PCIBus' is an integer attribute.\n  'PCIBus' is a read-only attribute.\n  'PCIBus' can use the following target types: GPU, SDI Input Device.\nAttribute 'PCIBus' (host:0[gpu:1]): 23.\n  'PCIBus' is an integer attribute.\n  'PCIBus' is a read-only attribute.\n  'PCIBus' can use the following target types: GPU, SDI Input Device.\n```\n\nand comment out the PrimaryGPU option in your xorg.d configuration,\n\n```\n/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf\n```\n\n```\n...\n\nSection \"OutputClass\"\n...\n    # Option \"PrimaryGPU\" \"yes\"\n...\n```\n\nUsing this configuration may also solve any graphical boot issues.\n\n"
    },
    {
      "title": "Multiple monitors",
      "level": 3,
      "content": "See Multihead for more general information.\n\n"
    },
    {
      "title": "Using nvidia-settings",
      "level": 4,
      "content": "The nvidia-settings tool can configure multiple monitors.\n\nFor CLI configuration, first get the CurrentMetaMode by running:\n\n```\n$ nvidia-settings -q CurrentMetaMode\n```\n\n```\nAttribute 'CurrentMetaMode' (hostnmae:0.0): id=50, switchable=no, source=nv-control :: DPY-1: 2880x1620 @2880x1620 +0+0 {ViewPortIn=2880x1620, ViewPortOut=2880x1620+0+0}\n```\n\nSave everything after the :: to the end of the attribute (in this case: DPY-1: 2880x1620 @2880x1620 +0+0 {ViewPortIn=2880x1620, ViewPortOut=2880x1620+0+0}) and use to reconfigure your displays with nvidia-settings --assign \"CurrentMetaMode=your_meta_mode\".\n\n"
    },
    {
      "title": "ConnectedMonitor",
      "level": 4,
      "content": "If the driver does not properly detect a second monitor, you can force it to do so with ConnectedMonitor.\n\n```\n/etc/X11/xorg.conf\n```\n\n```\nSection \"Monitor\"\n    Identifier     \"Monitor1\"\n    VendorName     \"Panasonic\"\n    ModelName      \"Panasonic MICRON 2100Ex\"\n    HorizSync       30.0 - 121.0 # this monitor has incorrect EDID, hence Option \"UseEDIDFreqs\" \"false\"\n    VertRefresh     50.0 - 160.0\n    Option         \"DPMS\"\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor2\"\n    VendorName     \"Gateway\"\n    ModelName      \"GatewayVX1120\"\n    HorizSync       30.0 - 121.0\n    VertRefresh     50.0 - 160.0\n    Option         \"DPMS\"\nEndSection\n\nSection \"Device\"\n    Identifier     \"Device1\"\n    Driver         \"nvidia\"\n    Option         \"NoLogo\"\n    Option         \"UseEDIDFreqs\" \"false\"\n    Option         \"ConnectedMonitor\" \"CRT,CRT\"\n    VendorName     \"NVIDIA Corporation\"\n    BoardName      \"GeForce 6200 LE\"\n    BusID          \"PCI:3:0:0\"\n    Screen          0\nEndSection\n\nSection \"Device\"\n    Identifier     \"Device2\"\n    Driver         \"nvidia\"\n    Option         \"NoLogo\"\n    Option         \"UseEDIDFreqs\" \"false\"\n    Option         \"ConnectedMonitor\" \"CRT,CRT\"\n    VendorName     \"NVIDIA Corporation\"\n    BoardName      \"GeForce 6200 LE\"\n    BusID          \"PCI:3:0:0\"\n    Screen          1\nEndSection\n```\n\nThe duplicated device with Screen is how you get X to use two monitors on one card without TwinView. Note that nvidia-settings will strip out any ConnectedMonitor options you have added.\n\n"
    },
    {
      "title": "TwinView",
      "level": 4,
      "content": "You want only one big screen instead of two. Set the TwinView argument to 1. This option should be used if you desire compositing. TwinView only works on a per card basis, when all participating monitors are connected to the same card.\n\n```\nOption \"TwinView\" \"1\"\n```\n\nExample configuration:\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"ServerLayout\"\n    Identifier     \"TwinLayout\"\n    Screen         0 \"metaScreen\" 0 0\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor0\"\n    Option         \"Enable\" \"true\"\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor1\"\n    Option         \"Enable\" \"true\"\nEndSection\n\nSection \"Device\"\n    Identifier     \"Card0\"\n    Driver         \"nvidia\"\n    VendorName     \"NVIDIA Corporation\"\n\n    #refer to the link below for more information on each of the following options.\n    Option         \"HorizSync\"          \"DFP-0: 28-33; DFP-1: 28-33\"\n    Option         \"VertRefresh\"        \"DFP-0: 43-73; DFP-1: 43-73\"\n    Option         \"MetaModes\"          \"1920x1080, 1920x1080\"\n    Option         \"ConnectedMonitor\"   \"DFP-0, DFP-1\"\n    Option         \"MetaModeOrientation\" \"DFP-1 LeftOf DFP-0\"\nEndSection\n\nSection \"Screen\"\n    Identifier     \"metaScreen\"\n    Device         \"Card0\"\n    Monitor        \"Monitor0\"\n    DefaultDepth    24\n    Option         \"TwinView\" \"True\"\n    SubSection \"Display\"\n        Modes          \"1920x1080\"\n    EndSubSection\nEndSection\n```\n\nDevice option information.\n\nIf you have multiple cards that are SLI capable, it is possible to run more than one monitor attached to separate cards (for example: two cards in SLI with one monitor attached to each). The \"MetaModes\" option in conjunction with SLI Mosaic mode enables this. Below is a configuration which works for the aforementioned example and runs GNOME flawlessly.\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"Device\"\n        Identifier      \"Card A\"\n        Driver          \"nvidia\"\n        BusID           \"PCI:1:00:0\"\nEndSection\n\nSection \"Device\"\n        Identifier      \"Card B\"\n        Driver          \"nvidia\"\n        BusID           \"PCI:2:00:0\"\nEndSection\n\nSection \"Monitor\"\n        Identifier      \"Right Monitor\"\nEndSection\n\nSection \"Monitor\"\n        Identifier      \"Left Monitor\"\nEndSection\n\nSection \"Screen\"\n        Identifier      \"Right Screen\"\n        Device          \"Card A\"\n        Monitor         \"Right Monitor\"\n        DefaultDepth    24\n        Option          \"SLI\" \"Mosaic\"\n        Option          \"Stereo\" \"0\"\n        Option          \"BaseMosaic\" \"True\"\n        Option          \"MetaModes\" \"GPU-0.DFP-0: 1920x1200+4480+0, GPU-1.DFP-0:1920x1200+0+0\"\n        SubSection      \"Display\"\n                        Depth           24\n        EndSubSection\nEndSection\n\nSection \"Screen\"\n        Identifier      \"Left Screen\"\n        Device          \"Card B\"\n        Monitor         \"Left Monitor\"\n        DefaultDepth    24\n        Option          \"SLI\" \"Mosaic\"\n        Option          \"Stereo\" \"0\"\n        Option          \"BaseMosaic\" \"True\"\n        Option          \"MetaModes\" \"GPU-0.DFP-0: 1920x1200+4480+0, GPU-1.DFP-0:1920x1200+0+0\"\n        SubSection      \"Display\"\n                        Depth           24\n        EndSubSection\nEndSection\n\nSection \"ServerLayout\"\n        Identifier      \"Default\"\n        Screen 0        \"Right Screen\" 0 0\n        Option          \"Xinerama\" \"0\"\nEndSection\n```\n\nIf you are using TwinView and vertical sync (the \"Sync to VBlank\" option in nvidia-settings), you will notice that only one screen is being properly synced, unless you have two identical monitors. Although nvidia-settings does offer an option to change which screen is being synced (the \"Sync to this display device\" option), this does not always work. A solution is to add the following environment variables at startup, for example append in /etc/profile:\n\n```\nexport __GL_SYNC_TO_VBLANK=1\nexport __GL_SYNC_DISPLAY_DEVICE=DFP-0\nexport VDPAU_NVIDIA_SYNC_DISPLAY_DEVICE=DFP-0\n```\n\nYou can change DFP-0 with your preferred screen (DFP-0 is the DVI port and CRT-0 is the VGA port). You can find the identifier for your display from nvidia-settings in the \"X Server XVideoSettings\" section.\n\nIn case you want to play fullscreen games when using TwinView, you will notice that games recognize the two screens as being one big screen. While this is technically correct (the virtual X screen really is the size of your screens combined), you probably do not want to play on both screens at the same time.\n\nTo correct this behavior for SDL, try:\n\n```\nexport SDL_VIDEO_FULLSCREEN_HEAD=1\n```\n\nFor OpenGL, add the appropriate Metamodes to your xorg.conf in section Device and restart X:\n\n```\nOption \"Metamodes\" \"1680x1050,1680x1050; 1280x1024,1280x1024; 1680x1050,NULL; 1280x1024,NULL;\"\n```\n\nAnother method that may either work alone or in conjunction with those mentioned above is starting games in a separate X server.\n\n"
    },
    {
      "title": "Mosaic mode",
      "level": 4,
      "content": "Mosaic mode is the only way to use more than 2 monitors across multiple graphics cards with compositing. Your window manager may or may not recognize the distinction between each monitor. Mosaic mode requires a valid SLI configuration. Even if using Base mode without SLI, the GPUs must still be SLI capable/compatible.\n\nBase Mosaic mode works on any set of Geforce 8000 series or higher GPUs. It cannot be enabled from within the nvidia-setting GUI. You must either use the nvidia-xconfig command line program or edit xorg.conf by hand. Metamodes must be specified. The following is an example for four DFPs in a 2x2 configuration, each running at 1920x1024, with two DFPs connected to two cards:\n\n```\n$ nvidia-xconfig --base-mosaic --metamodes=\"GPU-0.DFP-0: 1920x1024+0+0, GPU-0.DFP-1: 1920x1024+1920+0, GPU-1.DFP-0: 1920x1024+0+1024, GPU-1.DFP-1: 1920x1024+1920+1024\"\n```\n\nIf you have an SLI configuration and each GPU is a Quadro FX 5800, Quadro Fermi or newer then you can use SLI Mosaic mode. It can be enabled from within the nvidia-settings GUI or from the command line with:\n\n```\n$ nvidia-xconfig --sli=Mosaic --metamodes=\"GPU-0.DFP-0: 1920x1024+0+0, GPU-0.DFP-1: 1920x1024+1920+0, GPU-1.DFP-0: 1920x1024+0+1024, GPU-1.DFP-1: 1920x1024+1920+1024\"\n```\n\n"
    },
    {
      "title": "Wayland",
      "level": 2,
      "content": "See Wayland#Requirements for more information.\n\nFor further configuration options, take a look at the wiki pages or documentation of the respective compositor.\n\nRegarding Xwayland take a look at Wayland#Xwayland.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "See NVIDIA/Tips and tricks.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "See NVIDIA/Troubleshooting.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Current graphics driver releases in official NVIDIA Forum\n- NVIDIA Developers Forum - Linux Subforum\n\n"
    }
  ]
}