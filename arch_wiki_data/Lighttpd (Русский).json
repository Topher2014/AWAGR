{
  "title": "Lighttpd (Русский)",
  "url": "https://wiki.archlinux.org/title/Lighttpd_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "lighttpd - веб-сервер, разрабатываемый с расчётом на быстроту и защищённость, а также соответствие стандартам. В lighttpd есть поддержка сжатия отдаваемого содержимого «на лету», HTTP-аутентификации, перезаписи URL, SSL и автоматической балансировки нагрузки (нагрузка может автоматически распределяться по нескольким запущенным серверам lighttpd). Веб-сервер также поддерживает интерфейсы CGI, SCGI, FastCGI.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет lighttpd.\n\n"
    },
    {
      "title": "Базовая установка",
      "level": 3,
      "content": "Настройки lighttpd находятся в файле /etc/lighttpd/lighttpd.conf. Настройки по умолчанию позволяют проверить работоспособность сервера.\n\nПроверить правильность настроек и выявить ошибки можно с помощью команды:\n\n```\n$ lighttpd -t -f /etc/lighttpd/lighttpd.conf\n```\n\nТакже доступна более тщательная проверка:\n\n```\n$ lighttpd -tt -f /etc/lighttpd/lighttpd.conf\n```\n\nПо умолчанию в качестве document-root сервера служит директория /srv/http/. Для проверки установки создайте в ней файл главной страницы:\n\n```\n/srv/http/index.html\n```\n\n```\nHello world!\n```\n\nЗапустите/включите службу lighttpd.service. Затем откройте в своём браузере адрес http://localhost и вы должны увидеть тестовую страницу.\n\nПримеры конфигурационных файлов вы можете найти в /usr/share/doc/lighttpd/config/.\n\n"
    },
    {
      "title": "Настройка журналов",
      "level": 4,
      "content": "lighttpd может записывать журналы обращений (accesslog) и ошибок (errorlog). Журнал ошибок включен по умолчанию (настраивается опцией server.errorlog). Для включения журнала обращений отредактируйте файл /etc/lighttpd/lighttpd.conf:\n\n```\nserver.modules += (\n   \"mod_accesslog\",\n)\n\naccesslog.filename = \"/var/log/lighttpd/access.log\"\n```\n\n"
    },
    {
      "title": "Включение https",
      "level": 4,
      "content": "- Mozilla предоставляет генератор настроек, который можно использовать в том числе с lighttpd.\n- Для проверки корректности настроек можно использовать сервис SSL Server Check от Qualys SSL Labs.\n\nС помощью openssl можно сгенерировать самоподписанный SSL-сертификат.\n\nСоздаем директорию для хранения сертификатов:\n\n```\n# mkdir /etc/lighttpd/certs\n```\n\nГенерируем самоподписанный сертификат (пример команды):\n\n```\n# openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -sha256 -keyout /etc/lighttpd/certs/www.example.com.pem -out /etc/lighttpd/certs/www.example.com.pem\n```\n\nВыставляем владельца и нужные права:\n\n```\n# chown http:http /etc/lighttpd/certs/www.example.com.pem\n# chmod 600 /etc/lighttpd/certs/www.example.com.pem\n```\n\nТеперь нужно включить SSL в настройках lighttpd (в /etc/lighttpd/lighttpd.conf).\n\n```\nserver.modules += ( \"mod_openssl\" )\n\n$SERVER[\"socket\"] == \":443\" {\n   ssl.engine                  = \"enable\" \n   ssl.pemfile                 = \"/etc/lighttpd/certs/www.example.com.pem\" \n}\n```\n\nПодробнее о настройке можно почитать в документации: lighttpd TLS configuration.\n\nМожно использовать сертификаты, полученные от Let's Encrypt.\n\nВ файл /etc/lighttpd/lighttpd.conf добавьте следующие строки:\n\n```\n$SERVER[\"socket\"] == \":443\" {\n    ssl.engine                  = \"enable\"\n    ssl.privkey                 = \"/etc/letsencrypt/live/домен/privkey.pem\" \n    ssl.pemfile                 = \"/etc/letsencrypt/live/домен/fullchain.pem\"  \n}\n```\n\nПодробнее о настройке можно почитать в документации: bootstrap Let's Encrypt.\n\n"
    },
    {
      "title": "Перенаправление HTTP на HTTPS",
      "level": 4,
      "content": "mod_redirect должен быть включён:\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\nserver.modules += ( \"mod_redirect\" )\n```\n\nПеренаправляем трафик для домена example.org:\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\n$SERVER[\"socket\"] == \":80\" {\n   $HTTP[\"host\"] == \"example.org\" {\n      url.redirect = ( \"^/(.*)\" => \"https://example.org/$1\" )\n      server.name                 = \"example.org\" \n   }\n}\n```\n\nЧтобы перенаправить все хосты на их https-эквиваленты, используйте следующую конфигурацию сокета 80 вместо приведённой выше:\n\n```\n$SERVER[\"socket\"] == \":80\" {\n  $HTTP[\"host\"] =~ \".*\" {\n    url.redirect = (\".*\" => \"https://%0$0\")\n  }\n}\n```\n\nПеренаправляем запросы на HTTPS для части сайта (в примере ниже - /secure):\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\n$SERVER[\"socket\"] == \":80\" {\n   $HTTP[\"url\"] =~ \"^/secure\" {\n      url.redirect = ( \"^/(.*)\" => \"https://example.com/$1\" )\n   }\n}\n```\n\n"
    },
    {
      "title": "Защита каталога паролем",
      "level": 4,
      "content": "Обратите внимание, что этот модуль требует установки mariadb-libs. Для аутентификации пользователей необходим passwd-файл, который является lighttpd-эквивалентом системного /etc/passwd. Настройка требует определённого формата и хеширования пароля md5sum, но пользователи могут быстро и легко создать запись, используя в качестве примера следующее:\n\n```\n$ user=foo\n$ password=b@R102\n$ realm='Password Required'\n$ hash=`echo -n \"$user:$realm:$password\" | md5sum | cut -b -32`\n\n# echo \"$user:$realm:$hash\" >> /etc/lighttpd/lighttpd.user\n```\n\nИзмените /etc/lighttpd/lighttpd.conf, добавив в него строки, включающие защиту каталога:\n\n```\nserver.modules = (\n   \"mod_auth\",\n )\n\nauth.backend                = \"htdigest\"\nauth.backend.htdigest.userfile = \"/etc/lighttpd/lighttpd.user\"\n\n# note this entry is relative to the server.document-root\nauth.require = ( \"/secret\" =>\n   (\n    \"method\" => \"basic\",\n    \"realm\" => \"Password Required\",\n    \"require\" => \"valid-user\"\n   )\n)\n```\n\n"
    },
    {
      "title": "CGI",
      "level": 3,
      "content": "Скрипты Common Gateway Interface (CGI) работают с lighttpd из коробки, вам просто нужно включить модуль CGI, добавить файл настроек и убедиться, что выбранный вами интерпретатор языка программирования установлен. (например, для python установите пакет python).\n\nСоздайте файл /etc/lighttpd/conf.d/cgi.conf и добавьте в него следующее:\n\n```\n/etc/lighttpd/conf.d/cgi.conf\n```\n\n```\nserver.modules += ( \"mod_cgi\" )\n \n cgi.assign                 = ( \".pl\"  => \"/usr/bin/perl\",\n                                \".cgi\" => \"/usr/bin/perl\",\n                                \".rb\"  => \"/usr/bin/ruby\",\n                                \".erb\" => \"/usr/bin/eruby\",\n                                \".py\"  => \"/usr/bin/python\",\n                                \".php\" => \"/usr/bin/php-cgi\" )\n \n index-file.names           += ( \"index.pl\",   \"default.pl\",\n                                \"index.rb\",   \"default.rb\",\n                                \"index.erb\",  \"default.erb\",\n                                \"index.py\",   \"default.py\",\n                                \"index.php\",  \"default.php\" )\n}\n```\n\nДля php-скриптов в /etc/php/php.ini также добавьте:\n\n```\ncgi.fix_pathinfo = 1\n```\n\nВключаем эти настройки в /etc/lighttpd/lighttpd.conf:\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\ninclude \"conf.d/cgi.conf\"\n```\n\n"
    },
    {
      "title": "FastCGI",
      "level": 3,
      "content": "Установите fcgi. Теперь у вас есть lighttpd с поддержкой fcgi. Если это то, что вы хотели, то всё в порядке. Тем, кто хочет использовать Ruby on Rails, PHP или Python, нужно провести дополнительную настройку.\n\nСперва скопируйте пример настроек /usr/share/doc/lighttpd/config/conf.d/fastcgi.conf в /etc/lighttpd/conf.d\n\nСледующее содержимое нужно добавить в файл конфигурации\n\n```\n/etc/lighttpd/conf.d/fastcgi.conf\n```\n\n```\nserver.modules += ( \"mod_fastcgi\" )\n\n#server.indexfiles += ( \"dispatch.fcgi\" ) #this is deprecated\nindex-file.names += ( \"dispatch.fcgi\" ) #dispatch.fcgi if rails specified\n\nserver.error-handler-404   = \"/dispatch.fcgi\" #too\nfastcgi.server = (\n    \".fcgi\" => (\n      \"localhost\" => ( \n        \"socket\" => \"/run/lighttpd/rails-fastcgi.sock\",\n        \"bin-path\" => \"/path/to/rails/application/public/dispatch.fcgi\"\n      )\n    )\n)\n```\n\nВключаем этот конфиг в /etc/lighttpd/lighttpd.conf строкой\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\ninclude \"conf.d/fastcgi.conf\"\n```\n\nДля PHP и Ruby on Rails смотрите следующие разделы.\n\n"
    },
    {
      "title": "PHP",
      "level": 4,
      "content": "Установите пакеты php и php-cgi (смотрите также PHP и LAMP).\n\nПроверяем, что php-cgi работает:\n\n```\n$ php-cgi --version\n```\n\n```\nPHP 5.3.8 with Suhosin-Patch (cgi-fcgi) (built: Sep 11 2011 10:04:49)\nCopyright (c) 1997-2011 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2011 Zend Technologies\n```\n\nЕсли вы увидели похожий вывод, значит всё установлено правильно.\n\nСоздайте новый файл настроек:\n\n```\n/etc/lighttpd/conf.d/fastcgi.conf\n```\n\n```\nserver.modules += (\"mod_fastcgi\")\n\nindex-file.names += (\"index.php\")\nfastcgi.server = ( \n    # Распределение запросов к этому адресу...\n    \".php\" => (\n        # ... по следующим серверам FastCGI. Строка с именем сервера — это\n        # просто метка, которая позволяет идентифицировать сервер в журналах\n        \"localhost\" => ( \n            \"bin-path\" => \"/usr/bin/php-cgi\",\n            \"socket\" => \"/tmp/php-fastcgi.sock\",\n            # breaks SCRIPT_FILENAME in a way that PHP can extract PATH_INFO\n            # from it \n            \"broken-scriptfilename\" => \"enable\",\n            # Запуск (max-procs + (max-procs * PHP_FCGI_CHILDREN)) процессов, где\n            # max-procs это \"watchers\", а остальные это \"workers\". Смотрите:\n            # https://redmine.lighttpd.net/projects/1/wiki/frequentlyaskedquestions#How-many-php-CGI-processes-will-lighttpd-spawn\n            \"max-procs\" => \"4\", # значение по умолчанию\n            \"bin-environment\" => (\n                \"PHP_FCGI_CHILDREN\" => \"1\" # значение по умолчанию\n            )\n        )\n    )   \n)\n```\n\nВключаем этот конфиг в /etc/lighttpd/lighttpd.conf строкой\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\ninclude \"conf.d/fastcgi.conf\"\n```\n\nПерезагрузите службу lighttpd.service с новыми настройками (reload).\n\n- Если вы получаете ошибки, подобные этим \"No input file found\" при попытке получить доступ к вашему php файлу, у этого могут быть разные причины; смотрите этот FAQ.\n- Убедитесь, что нет других модулей (например, mod_cgi), которые будут пытаться обрабатывать .php файлы.\n\nУстановите пакет php-fpm и запустите/включите службу php-fpm.service.\n\nВ файл /etc/lighttpd/conf.d/fastcgi.conf добавьте:\n\n```\n/etc/lighttpd/conf.d/fastcgi.conf\n```\n\n```\nserver.modules += ( \"mod_fastcgi\" )\n\nindex-file.names += ( \"index.php\" ) \n\nfastcgi.server = (\n    \".php\" => (\n      \"localhost\" => ( \n        \"socket\" => \"/run/php-fpm/php-fpm.sock\",\n        \"broken-scriptfilename\" => \"enable\"\n      ))\n)\n)\n```\n\nАналогично предыдущему описанию включаем этот конфиг в /etc/lighttpd/lighttpd.conf строкой\n\n```\n/etc/lighttpd/lighttpd.conf\n```\n\n```\ninclude \"conf.d/fastcgi.conf\"\n```\n\n"
    },
    {
      "title": "uWSGI",
      "level": 3,
      "content": "В файл /etc/lighttpd/lighttpd.conf добавьте\n\n```\nserver.modules += (\"mod_scgi\")\n\n$HTTP[\"url\"] =~ \"^/uwsgi/\" {\n    scgi.protocol = \"uwsgi\"\n    scgi.server   = (\n        \"/uwsgi/foo\" => ((\n            \"socket\"            => \"/путь/к/сокету\",\n            \"check-local\"       => \"disable\"\n        )),\n        \"/uwsgi/bar\" => ((\n            \"host\"              => \"127.0.0.1\",\n            \"port\"              => \"8080\",\n            \"check-local\"       => \"disable\"\n        ))\n    )\n}\n```\n\nЗатем вы можете запустить приложение uwsgi либо как юнит systemd либо напрямую. Здесь руководство от digitalocean о том, как настроить приложение flask с нуля.\n\n"
    },
    {
      "title": "Сжатие исходящих данных",
      "level": 3,
      "content": "Сжатие исходящих данных уменьшает нагрузку на сеть и может улучшить общую пропускную способность веб-сервера.\n\nСкопируйте файл с примером настроек:\n\n```\n# mkdir /etc/lighttpd/conf.d\n# cp /usr/share/doc/lighttpd/config/conf.d/deflate.conf /etc/lighttpd/conf.d/\n```\n\nВключите настройки, добавив в /etc/lighttpd/lighttpd.conf:\n\n```\ninclude \"conf.d/deflate.conf\"\n```\n\nНаконец, перезапустите lighttpd.service с новыми настройками, и он будет динамически сжимать простой текст и html.\n\nТакже можно выбрать тип содержимого, которое должно быть сжато, изменив в файле /etc/lighttpd/conf.d/deflate.conf параметр deflate.mimetypes:\n\n```\ndeflate.mimetypes           = (\"text/plain\", \"text/html\", \"text/javascript\", \"text/css\", \"text/xml\")\n```\n\nМожно создать каталог для хранения сжатых файлов. Создаём нужную директорию и задаём владельца:\n\n```\n# mkdir /var/cache/lighttpd/compress/\n# chown http:http /var/cache/lighttpd/compress/\n```\n\nВ файле /etc/lighttpd/conf.d/deflate.conf раскомментируйте и измените параметр deflate.cache-dir:\n\n```\ndeflate.cache-dir = \"/var/cache/lighttpd/compress\"\n```\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Lighttpd wiki (англ.)\n\n"
    }
  ]
}