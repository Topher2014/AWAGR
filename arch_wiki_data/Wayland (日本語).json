{
  "title": "Wayland (日本語)",
  "url": "https://wiki.archlinux.org/title/Wayland_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- カーネルモード設定\n- Xorg\n- スクリーンショットの取得#Wayland\n\nWayland はディスプレイサーバープロトコルです。X Window System の後継となることを目指しています。Wikipedia に Wayland と Xorg の比較 が掲載されています。\n\nWayland プロトコルを使用するディスプレイサーバは、コンポジット型ウィンドウマネージャ としても機能するため、コンポジタ と呼ばれます。以下にWayland コンポジタのリストを示します。\n\nネイティブな X11 アプリケーションをシームレスに動かすための後方互換性として、Xwayland を使うことができます。これは Wayland に X サーバを提供します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 要件\n- 2 コンポジタ 2.1 スタック型 2.2 タイル型 2.3 ダイナミック型 2.4 その他\n- 3 ディスプレイマネージャ\n- 4 Xwayland 4.1 NVIDIA ドライバ 4.2 Kwin Wayland デバッグコンソール 4.3 Xwayland アプリケーションであることを視認する\n- 5 GUI ライブラリ 5.1 GTK 5.2 Qt 5.3 Clutter 5.4 SDL2 5.5 GLFW 5.6 GLEW 5.7 EFL 5.8 winit 5.9 Electron 5.9.1 環境変数 5.9.2 コマンドラインフラグ 5.9.3 設定ファイル 5.9.4 古い Electron バージョン 5.10 Java\n- 6 ヒントとテクニック 6.1 自動化 6.2 キーボードやマウスキーのリマップ 6.3 X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする 6.4 Chromium で完全に最大化出来ない 6.5 Waylandコンポジタをsystemdサービスとして自動的に起動する\n- 7 トラブルシューティング 7.1 色補正 7.2 動作が遅い、表示がおかしい、クラッシュする 7.3 リモートディスプレイ 7.4 ゲームやリモートデスクトップ、仮想マシンウィンドウでの入力捕捉 7.5 GTK テーマが動かない 7.6 NVIDIA モジュールを読み込まないようにする 7.7 拡大/サーフェススケーリング 7.8 カーネル 6.11.2 (AMD) 以降、Wayland にラグ/スタッタリングが発生する\n- 8 参照\n\n- 2.1 スタック型\n- 2.2 タイル型\n- 2.3 ダイナミック型\n- 2.4 その他\n\n- 4.1 NVIDIA ドライバ\n- 4.2 Kwin Wayland デバッグコンソール\n- 4.3 Xwayland アプリケーションであることを視認する\n\n- 5.1 GTK\n- 5.2 Qt\n- 5.3 Clutter\n- 5.4 SDL2\n- 5.5 GLFW\n- 5.6 GLEW\n- 5.7 EFL\n- 5.8 winit\n- 5.9 Electron 5.9.1 環境変数 5.9.2 コマンドラインフラグ 5.9.3 設定ファイル 5.9.4 古い Electron バージョン\n- 5.10 Java\n\n- 5.9.1 環境変数\n- 5.9.2 コマンドラインフラグ\n- 5.9.3 設定ファイル\n- 5.9.4 古い Electron バージョン\n\n- 6.1 自動化\n- 6.2 キーボードやマウスキーのリマップ\n- 6.3 X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする\n- 6.4 Chromium で完全に最大化出来ない\n- 6.5 Waylandコンポジタをsystemdサービスとして自動的に起動する\n\n- 7.1 色補正\n- 7.2 動作が遅い、表示がおかしい、クラッシュする\n- 7.3 リモートディスプレイ\n- 7.4 ゲームやリモートデスクトップ、仮想マシンウィンドウでの入力捕捉\n- 7.5 GTK テーマが動かない\n- 7.6 NVIDIA モジュールを読み込まないようにする\n- 7.7 拡大/サーフェススケーリング\n- 7.8 カーネル 6.11.2 (AMD) 以降、Wayland にラグ/スタッタリングが発生する\n\n"
    },
    {
      "title": "要件",
      "level": 2,
      "content": "ほとんどの Wayland コンポジタは、カーネルモード設定を利用しているシステムでのみ動作します。Wayland それ自体はグラフィカルな環境を提供しません。ゆえに、Wayland に加えてコンポジタ (以下のセクションを参照)、あるいは、コンポジタを含むデスクトップ環境 (例: GNOME、Plasma) が必要となります。\n\nGPU ドライバと Wayland コンポジタは、同一のバッファ API に対応している場合に互換性があります。主要な API は2つ存在します: GBM と EGLStreams です。\n\nTable content:\nバッファ API | GPU ドライバーのサポート | Wayland コンポジタのサポート\nGBM | NVIDIA < 495* 以外の全てのドライバー | 全て\nEGLStreams | NVIDIA | GNOME\n\nNVIDIA が GBM のサポートを導入して以来、NVIDIA ≥ 495 で多くのコンポジタ (Mutter と KWin を含む) がデフォルトで GBM を使用し始めました。GBM は一般的にベターでより幅広いサポートがあると考えられています。EGLStreams がサポートされていた理由は、NVIDIA GPU をプロプライエタリドライバで Wayland 下で使用する代替の方法を NVIDIA が提供しなかったからだけです。さらに、GBM が NVIDIA に導入された後、KWin は EGLStreams のサポートを打ち切りました。\n\n人気なデスクトップ環境/コンポジタと、NVIDIA によってまだサポートされている GPU を使用している場合、おそらくすでに GBM バックエンドを使用しています。確認するには、次を実行してください: journalctl -b 0 --grep \"renderer for\"。GBM をバックエンドとして強制的に使用させるには、次の環境変数を設定してください:\n\n```\nGBM_BACKEND=nvidia-drm\n__GLX_VENDOR_LIBRARY_NAME=nvidia\n```\n\n"
    },
    {
      "title": "コンポジタ",
      "level": 2,
      "content": "タイル型, スタック型, ダイナミック型 の違いについては、ウィンドウマネージャ#種類 を参照してください。\n\n"
    },
    {
      "title": "スタック型",
      "level": 3,
      "content": "- Enlightenment — Enlightenment\n\n- hikari — FreeBSD で活発に開発されている cwm にインスパイアされた wlroots ベースのコンポジタ。Linux もサポートしています。\n\n- KDE KWin — KDE#Plasma の起動 を参照。\n\n- Liri Shell — Liri の一部、しかし、QtQuick と QtCompositor を使って Wayland 用のコンポジタとして作られています。\n\n- labwc — Openbox にインスパイアされた wlroots ベースのコンポジタ。\n\n- Mutter — GNOME#GNOME の起動 を参照。\n\n- wayfire — Compiz にインスパイアされ、wlroots に基づく 3D コンポジタ。\n\n- Weston — 正しさ、信頼性、予測可能性、性能のために設計された Wayland コンポジタ。\n\n- wio — Plan 9 のリオデスクトップのルックアンドフィールを複製することを目的とする wlroots ベースのコンポジタ。\n\n"
    },
    {
      "title": "タイル型",
      "level": 3,
      "content": "- Cagebreak — cage をベースに、ratpoison にインスパイアされています。\n\n- niri — スクロール可能なタイル型 Wayland コンポジタ。\n\n- Polonium — KDE 6 上でタイル型ウィンドウを使用できる、Bismuth の後継。\n\n- Qtile — Python で記述および設定されたフル機能のハッキング可能なタイリングウィンドウマネージャーと Wayland コンポジタ。\n\n- Sway — wlroots ベースの i3 互換 Wayland コンポジタ。\n\n- SwayFx — 魅力的な視覚効果機能を追加した Sway。\n\n- Velox — swc ベースのシンプルなウィンドウマネージャです。dwm と xmonad の影響を受けています。\n\n"
    },
    {
      "title": "ダイナミック型",
      "level": 3,
      "content": "- dwl — wlroots ベースの dwm ライクな Wayland コンポジタ。\n\n- Hyprland — 見た目を犠牲にしないダイナミックなタイリング Wayland コンポジタ。\n\n- japokwm — wlroots ベースの、レイアウト作成を中心とした動的な Wayland タイリングコンポジタ。\n\n- river — dwm と bspwm にインスパイアされた動的なタイル型 Wayland コンポジタ。\n\n- Vivarium — wlroots を使用するダイナミックタイル型 Wayland コンポジタ。xmonad にインスパイアされたデスクトップセマンティクスを持ちます。\n\n"
    },
    {
      "title": "その他",
      "level": 3,
      "content": "- Cage — キオスクのような単一のフルスクリーンアプリケーションを表示します。\n\n- nwg-shell — Sway と Hyprland Wayland コンポジタのための GTK ベースシェル。\n\n- kiwmi — 完全にプログラミング可能な Wayland コンポジタ。\n\n- phoc — モバイル端末のための wlroots ベースの小さなコンポジタ。\n\n上記のいくつかは ディスプレイマネージャ をサポートする場合があります。 それらがどのように開始されるかを /usr/share/wayland-sessions/compositor.desktop を見て確認してください。\n\n"
    },
    {
      "title": "ディスプレイマネージャ",
      "level": 2,
      "content": "Wayland コンポジタの実行をサポートしているディスプレイマネージャは以下の表の通りです。\n\nTable content:\n名前 | 何で動作するか | 説明\nemptty | TTY | TTY で動作するシンプルな CLI ディスプレイマネージャ。\nGDM | Wayland/Xorg | GNOME ディスプレイマネージャ。\ngreetd | Wayland/Xorg/TTY | 最小でありながら柔軟なログインデーモン。\nlemurs | TTY | Rust で書かれた TUI ディスプレイマネージャ。\nLightDM | Xorg[4] | 様々なデスクトップに対応したディスプレイマネージャ。\nLy | TTY | C で書かれた TUI ディスプレイマネージャ。\nSDDM | Wayland/Xorg | QML ベースのディスプレイマネージャ。\ntbsm | TTY | bash のみに依存するシンプルな CLI セッションランチャー。\nUWSM | TTY | Systemd のメカニズムを使用するスタンドアローンなコンポジタのための、セッションと XDG autostart のマネージャ。\n\n"
    },
    {
      "title": "Xwayland",
      "level": 2,
      "content": "Xwayland は、Wayland の下で実行される X サーバーで、Wayland サポートをまだ提供していないネイティブな X11 アプリケーションに互換性を提供します。これを使用するには、xorg-xwayland パッケージをインストールします。\n\nXwayland はコンポジタを介して開始されるため、あなたの使用しているコンポジタのドキュメントを読み、Xwayland との互換性についてや、Xwayland の起動方法に関する指示を確認しておく必要があります。\n\n- セキュリティ: Xwayland は X サーバーであるため、 Wayland のセキュリティ機能はありません。\n- パフォーマンス: Xwayland は X11 とほぼ同等のパフォーマンスを発揮します。しかし、一部のケースで (特に NVIDIA カード上で) パフォーマンスの低下を感じるかもしれません。\n- 互換性: Xwayland は X11 と完全な後方互換性があるわけではありません。一部のアプリケーションは Xwayland 下では正しく動作しない場合があります。\n\n"
    },
    {
      "title": "NVIDIA ドライバ",
      "level": 3,
      "content": "なお、DRM KMS を有効にする必要があります。また、お使いのディスプレイマネージャ(例: GDM)の公式ドキュメントに記載されている情報も見てください。\n\n"
    },
    {
      "title": "Kwin Wayland デバッグコンソール",
      "level": 3,
      "content": "kwin を使用している場合、以下を実行すると、どのウィンドウが Xwayland とネイティブ Wayland を使用しているか、表面、入力イベント、クリップボードの内容などを確認することができます。\n\n```\n$ qdbus6 org.kde.KWin /KWin org.kde.KWin.showDebugConsole\n```\n\n"
    },
    {
      "title": "Xwayland アプリケーションであることを視認する",
      "level": 3,
      "content": "アプリケーションが Xwayland 経由で実行されているかどうかを判断するには、extramausAUR を使用します。 アプリケーションのウィンドウ上にマウスポインタを移動して、マウスポインタが赤くなる場合は、アプリケーションが Xwayland 経由で実行されています。\n\nまたは、xorg-xeyes を使用して、アプリケーションウィンドウ上でマウスポインタを移動するときに、目が動いているかどうかで確認することもできます。\n\n他の方法として、(xorg-xwininfo の) xwininfo をターミナルウィンドウで実行するというものがあります。Xwayland ウィンドウ上にマウスポインタをホバーすると、マウスポインタが + マークに変わります。ウィンドウをクリックすると、xwininfo は情報を表示して終了しますが、ネイティブな Wayland ウィンドウでは何も起こりません。Ctrl+C を押すことで xwininfo を終了できます。\n\nあるいは、xlsclients (xorg-xlsclients パッケージ) を使用することもできます。Xwayland で動作中のアプリケーションを全てリストアップするには、xlsclients -l を実行してください。\n\n"
    },
    {
      "title": "GUI ライブラリ",
      "level": 2,
      "content": "公式ウェブサイト で詳細を確認してください。\n\n"
    },
    {
      "title": "GTK",
      "level": 3,
      "content": "gtk3 と gtk4 パッケージは Wayland バックエンドが有効になっています。GTK ではデフォルトで Wayland バックエンドを使いますが、環境変数を設定することで Xwayland を使うように上書きできます: GDK_BACKEND=x11。\n\nテーマの問題は GTK#Wayland バックエンド を見てください。\n\n"
    },
    {
      "title": "Qt",
      "level": 3,
      "content": "Qt 5 または 6 で Wayland のサポートを有効化するには、Qt 5 と 6 に対してそれぞれ qt5-wayland または qt6-wayland パッケージをインストールしてください。これで、Qt アプリケーションは Wayland セッション上では Wayland で動作するようになります。\n\n必須ではないはずですが、明示的に Wayland プラグインを使って Qt 5 アプリケーションを動作させるには、[5] にあるように、-platform wayland を使用するか、環境変数 QT_QPA_PLATFORM=wayland をセットして下さい。\n\n一方、Wayland セッション上で X11 を使用させるには、QT_QPA_PLATFORM=xcb と設定してください。これは、システムの Qt の実装を使用しない一部のプロプライエタリアプリケーションで必要になる場合があります。 また、QT_QPA_PLATFORM=\"wayland;xcb\" を使用すると、Qt が Wayland を利用できない場合に、代わりに xcb (X11)プラグインを使用させることができます。[6]\n\nsway などの一部のコンポジターでは、ネイティブに実行されている Qt アプリケーションの機能が不足している場合があります。たとえば、KeepassXC はトレイに最小化できません。これは、アプリケーションを実行する前に qt5ct をインストールし、QT_QPA_PLATFORMTHEME=qt5ct を設定することで解決できます。\n\n"
    },
    {
      "title": "Clutter",
      "level": 3,
      "content": "Clutter ツールキットには Wayland バックエンドがあり、Clutter を Wayland のクライアントとして動作させることが可能です。このバックエンドは clutter パッケージで有効になっています。\n\nClutter アプリを Wayland 上で動作させるには、環境変数 CLUTTER_BACKEND=wayland を設定する必要があります。\n\n"
    },
    {
      "title": "SDL2",
      "level": 3,
      "content": "SDL2 アプリケーションを Wayland 上で動作させるには、SDL_VIDEODRIVER=wayland を設定してください。\n\nSDL_VIDEODRIVER=\"wayland,x11\" とすることにより、Wayland が利用できない場合に代わりに X11 ビデオドライバを使用するように SDL2 を設定できます [7]。ウィンドウ装飾を有効化するために libdecor をインストールすると良いかもしれません (例えば、GNOME で)。\n\n"
    },
    {
      "title": "GLFW",
      "level": 3,
      "content": "glfw パッケージには Wayland に対するサポートがあります。XDG_SESSION_TYPE が wayland に設定されていて、かつアプリケーションの開発者が特定のバックエンドを使用するようにしていなければ、Wayland バックエンドが使用されます。\n\n詳細は GLFW のソースコードを参照してください。\n\n"
    },
    {
      "title": "GLEW",
      "level": 3,
      "content": "glew-waylandAUR パッケージは現在のところ、多くの GLEW ベースのアプリケーションでまだ動作しませんので、唯一の選択肢は Xwayland で glew を使うことです。FS#62713 を参照してください。\n\n"
    },
    {
      "title": "EFL",
      "level": 3,
      "content": "EFL は Wayland を完全にサポートしています。Wayland で EFL アプリケーションを動かすには、Wayland の プロジェクトページ を見て下さい。\n\n"
    },
    {
      "title": "winit",
      "level": 3,
      "content": "Winit は Rust で書かれたウィンドウ管理ライブラリです。デフォルトでは Wayland が X11 より優先される仕様ですが、環境変数を設定することで Xwayland を使うように上書きすることができます:\n\n- バージョン 0.29.2 より前の場合、WINIT_UNIX_BACKEND=x11 を設定してください。\n- バージョン 0.29.2 以降の場合、WAYLAND_DISPLAY を unset してください。そうすることで、強制的に DISPLAY 変数を使用して X にフォールバックされます。[8]\n\n"
    },
    {
      "title": "Electron",
      "level": 3,
      "content": "Wayland サポートを有効化する方法は次の2つです: アプリケーションごとのコマンドラインフラグを使って有効化するか、設定ファイルを使ってグローバルに有効化するかです。\n\nアプリケーションがどの electron バージョンを使用しているか確認する方法については [9] を見てください。\n\n"
    },
    {
      "title": "環境変数",
      "level": 4,
      "content": "Electron 28 及びそれ以降を使用するアプリケーションは、環境変数 ELECTRON_OZONE_PLATFORM_HINT を auto または wayland に設定することで、Wayland モードを使用することができます。\n\nコマンドラインフラグは、この環境変数より優先されます。\n\n"
    },
    {
      "title": "コマンドラインフラグ",
      "level": 4,
      "content": "Electron がベースとしている Chromium とは異なり、Electron アプリケーションはデフォルトで PipeWire による WebRTC 画面共有を有効化しません。なので、Wayland 上で画面共有の問題を防ぐために --enable-features=WebRTCPipeWireCapturer を使用することが推奨されます。画面共有は xdg-desktop-portal をベースとしています。\n\n環境変数を使うことが望ましくない、または不可能である場合に、electron ベースのアプリケーションを Wayland でネイティブに使用するには、Electron 20 以降では --ozone-platform-hint=auto フラグを使用することで可能です。\n\nトップバーが消失してしまう場合、--enable-features=WaylandWindowDecorations フラグを使用することで解決します。これは、典型的には GNOME で必須です (electron17 からsパオートされています)。\n\nこれらのフラグを永続的に設定する方法は2つあります。1つ目は、アプリケーションの .desktop ファイルを変更して Exec= 行の末尾にフラグを追加する方法。もう一つは、以下で説明している設定ファイルを使用する方法で、こちらはよりきれいに設定できます。\n\n"
    },
    {
      "title": "設定ファイル",
      "level": 4,
      "content": "Electron 系のパッケージは ~/.config/electronXX-flags.conf を読み込みます。ここで、XX は Electron のバージョンです。該当するバージョンのファイルが存在しない場合、~/.config/electron-flags.conf を代わりに読み込みます。\n\n前述のフラグを一行ずつ書き込んでください:\n\n```\n~/.config/electron-flags.conf\n```\n\n```\n--enable-features=WaylandWindowDecorations\n--ozone-platform-hint=auto\n```\n\n"
    },
    {
      "title": "古い Electron バージョン",
      "level": 4,
      "content": "electron25-flags.conf は Electron バージョン 25 に対してだけ適用されます。それより古い Electron のバージョンは electron<バージョン>-flags.conf ファイルで設定できます。\n\n古いバージョンでは、対応する Chromium バージョンによって異なるフラグが必要になる場合があります。例えば、以下のフラグは Electron 13 で機能します:\n\n```\n~/.config/electron13-flags.conf\n```\n\n```\n--enable-features=UseOzonePlatform\n--ozone-platform=wayland\n```\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "Java プラットフォームのオープンソース実装である OpenJDK は、まだ Wayland のネイティブサポートを備えていません。 OpenJDK に Wayland を実装することを目的としたプロジェクトである Wakefield が実用できるようになるまでは、Xwayland を代わりに使用できます。\n\nDebian:Wayland#Java Programs (supported since OpenJDK 16?) を参照してください:\n\n"
    },
    {
      "title": "自動化",
      "level": 3,
      "content": "- ydotool (ydotool) - 汎用のコマンドラインツール (wayland 以外でも利用可能)。ydotool.service ユーザーユニットを起動/有効化してください。ydotoold(8)、ydotool(1) を参照。\n- wtype (wtype) - Wayland 用 xdotool type。wtype(1) を参照。\n- keyboard - Windows と Linux で動作する Python ライブラリ。実験的な OS X サポートあり。mouse ライブラリも参照。\n- wlrctl (wlrctlAUR) - 雑多な wlroots 拡張のためのコマンドラインユーティリティ (foreign-toplevel-management、virtual-keyboard、virtual-pointer をサポート)。\n\n"
    },
    {
      "title": "キーボードやマウスキーのリマップ",
      "level": 3,
      "content": "入力リマップユーティリティ を見てください。\n\n"
    },
    {
      "title": "X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする",
      "level": 3,
      "content": "スクリーンキャプチャ#X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする を見てください。\n\n"
    },
    {
      "title": "Chromium で完全に最大化出来ない",
      "level": 3,
      "content": "chrome://settings/appearance メニューから Use system title bar and borders を有効にする必要があります。\n\n"
    },
    {
      "title": "Waylandコンポジタをsystemdサービスとして自動的に起動する",
      "level": 3,
      "content": "ディスプレイマネージャーやシェルを使いたくなければ、Waylandコンポジタをsystemdサービスを使って自動的に起動できます。ExecStart行を使いたいコンポジタに変えて下さい:\n\n```\n/etc/systemd/system/wayland-compositor.service\n```\n\n```\n[Unit]\nAfter=graphical.target systemd-user-sessions.service modprobe@drm.service\nConflicts=getty@tty1.service\n\n[Service]\nUser=username\nWorkingDirectory=~\n\nPAMName=login\nTTYPath=/dev/tty1\nUnsetEnvironment=TERM\n\nStandardOutput=journal\nExecStart=/bin/labwc -s gtklock\n\n[Install]\nWantedBy=graphical.target\n```\n\n"
    },
    {
      "title": "色補正",
      "level": 3,
      "content": "バックライト#色補正を参照。\n\n"
    },
    {
      "title": "動作が遅い、表示がおかしい、クラッシュする",
      "level": 3,
      "content": "Gnome-shell で X から Wayland に切り替えるとグラフィック表示に問題が発生することがあります。原因として Xorg ベースの gnome-shell 用に CLUTTER_PAINT=disable-clipped-redraws:disable-culling が設定されている可能性があります。/etc/environment や rc ファイルから該当箇所を削除してみてください。\n\n"
    },
    {
      "title": "リモートディスプレイ",
      "level": 3,
      "content": "- (sway で使用されている) wlroots は、バージョン 0.10 より、wayvnc を使って VNC バックエンドを提供しています。RDP バックエンドは削除されました [10]。\n- mutter はコンパイル時にリモートデスクトップが有効化されています。詳細は [11] と gnome-remote-desktop を見てください。\n- krfb は kwin に VNC サーバを提供します。krfb-virtualmonitor を使えば、他のデバイスを外部モニタとしてセットアップすることが可能です。\n- 2013年に FreeRDP が Weston にマージされました。コンパイルフラグで有効化されています。weston パッケージは、バージョン 6.0.0 より、FreeRDP が有効化されています。\n- waypipe は Wayland アプリケーションの透過プロキシです。SSH 上で動作するラッパーコマンドあり。 以下は、Plasma デスクトップでリモートの KDE kcalc を起動する例です:\n\n- 以下は、Plasma デスクトップでリモートの KDE kcalc を起動する例です:\n\n```\n$ waypipe ssh example.local env QT_QPA_PLATFORM=wayland-egl QT_QPA_PLATFORMTHEME=KDE dbus-launch kcalc\n```\n\n"
    },
    {
      "title": "ゲームやリモートデスクトップ、仮想マシンウィンドウでの入力捕捉",
      "level": 3,
      "content": "Xorg と異なり、Wayland では入力デバイスを独占 (グラブ) することができません (例: キーボード、マウス)。キーボードショートカットやポインタデバイスをアプリケーションウィンドウに渡すのは Wayland コンポジタの役目となっています。\n\n入力グラブが変わったことで以下のように既存のアプリケーションで問題が発生します:\n\n- ホットキーや修飾キーがコンポジタによって認識されてしまい、リモートデスクトップや仮想マシンのウィンドウに送信されなくなります。\n- マウスポインタがアプリケーションウィンドウに制限されなくなるため、仮想マシンやリモートデスクトップのウィンドウ内のマウスポインタの位置がホスト環境のマウスポインタとずれるようになります。\n\nWayland と Xwayland にプロトコル拡張を追加することで解決を図っていますが、Wayland コンポジタが拡張をサポートしている必要があり、ネイティブの Wayland クライアントの場合、ウィジェットツールキット (例: GTK, Qt) やアプリケーション自身が拡張に対応していなければなりません。Xorg アプリケーションの場合、Xwayland のサポートで十分であるため、アプリケーションやウィジェット・ツールキットに変更を加える必要はありません。\n\nこれらの拡張はすでに wayland-protocols に含まれており、xorg-xwayland によってサポートされています。\n\n関連する拡張:\n\n- Xwayland keyboard grabbing protocol\n- Compositor shortcuts inhibit protocol\n- Relative pointer protocol\n- Pointer constraints protocol\n\nサポートしている Wayland コンポジタ:\n\n- Mutter, GNOME のコンポジタ (リリース 3.28 以降)。\n- wlroots (Relative pointer protocols と Pointer constraints protocol に対応)\n- Kwin KDE#Wayland で X11 のショートカットが衝突する Keyboard shortcuts inhibit\n\n- KDE#Wayland で X11 のショートカットが衝突する\n- Keyboard shortcuts inhibit\n\nサポートしているウィジェットツールキット:\n\n- GTK (リリース 3.22.18 以降)\n\n"
    },
    {
      "title": "GTK テーマが動かない",
      "level": 3,
      "content": "https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland を参照してください。\n\n"
    },
    {
      "title": "NVIDIA モジュールを読み込まないようにする",
      "level": 3,
      "content": "sway などの Wayland コンポジターを起動する前に __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json を 環境変数 として追加します。\n\n"
    },
    {
      "title": "拡大/サーフェススケーリング",
      "level": 3,
      "content": "スクリーンの拡大は、まだ解決していません。wp-surface-scale プロトコルを提供するプルリクエストが2022年半ばにマージされました。\n\n"
    },
    {
      "title": "カーネル 6.11.2 (AMD) 以降、Wayland にラグ/スタッタリングが発生する",
      "level": 3,
      "content": "将来のカーネルリリースでこの問題が修正されるまで、回避策は、コマンドラインに amdgpu.dcdebugmask=0x400 を追加することです。\n\nこちらを参照: https://community.frame.work/t/wayland-lag-stuttering-since-kernel-6-11-2/59422\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Wayland オンラインドキュメント\n- 公式リポジトリ\n- Fedora:How to debug Wayland problems\n- Are we Wayland yet?\n- Awesome Wayland projects\n- カーソルテーマ\n- Arch Linux forum discussion\n- i3 Migration Guide - Common X11 apps used on i3 with Wayland alternatives\n- Wayland Explorer - A better way to read Wayland documentation\n- How can I tell if an application is using XWayland\n\n"
    }
  ]
}