{
  "title": "Makepkg-optimize (Русский)",
  "url": "https://wiki.archlinux.org/title/Makepkg-optimize_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- DeveloperWiki:Building in a clean chroot\n- Arch User Repository (Русский)\n\nmakepkg-optimizeAUR — это коллекция дополнительных tidy, buildenv и executable скриптов для pacman, которые предоставляют макросы для нескольких видов оптимизации на этапах build() и package().\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет makepkg-optimizeAUR и, чтобы сделать доступными оптимизации, требующие их, установите бэкенды: openmp, upx, optipng, svgo и polly.\n\n"
    },
    {
      "title": "Настройка",
      "level": 3,
      "content": "makepkg-optimizeAUR генерирует избыточный файл настроек /etc/makepkg-optimize.conf, из вашего текущего makepkg.conf(5).\n\nВ файле присутствуют дополнительные опции: COMPILE FLAGS, BUILD ENVIRONMENT, GLOBAL PACKAGE OPTIONS, PACKAGE OUTPUT и COMPRESSION DEFAULTS — все они по умолчанию отключены.\n\n"
    },
    {
      "title": "Создание оптимизированного пакета",
      "level": 2,
      "content": "После выбора предпочтительных оптимизаций используйте этот файл настроек при сборке:\n\n```\n$ makepkg -c --config /etc/makepkg-optimize.conf\n```\n\n"
    },
    {
      "title": "Сборка оптимизированного пакета в чистом chroot",
      "level": 2,
      "content": "В качестве альтернативы makepkg-optimize можно использовать для сборки оптимизированных пакетов внутри chroot.\n\n"
    },
    {
      "title": "Настройка chroot",
      "level": 3,
      "content": "После настройки chroot необходимо выполнить несколько дополнительных шагов.\n\n"
    },
    {
      "title": "Установка makepkg-optimize и бэкендов",
      "level": 4,
      "content": "Сначала установите некоторые бэкенды для макросов оптимизации в базовый chroot:\n\n```\n$ arch-nspawn \"$CHROOT\"/root pacman -S openmp upx optipng polly\n```\n\nЗатем скачайте и соберите пакеты makepkg-optimizeAUR и svgo.\n\nЧтобы установить их в базовый chroot, скопируйте в него файлы пакетов и установите их, например:\n\n```\n# cp svgo-1.2.2-2-any.pkg.tar.xz \"$CHROOT\"/root/root/\n$ arch-nspawn \"$CHROOT\"/root pacman -U /root/svgo-1.2.2-2-any.pkg.tar.xz\n```\n\n"
    },
    {
      "title": "Сборка пакета",
      "level": 4,
      "content": "Сначала отредактируйте $CHROOT/root/etc/makepkg-optimize.conf и выберите предпочтительные оптимизации.\n\nПри сборке передайте файл настроек в makepkg:\n\n```\n$ makechrootpkg -c -r \"$CHROOT\" -- -c --config /etc/makepkg-optimize.conf\n```\n\nОпция pgo для BUILDENV включает генерацию или применение профилей в зависимости от того, выполняется ли первая или вторая сборка пакета с этим флагом. Сборка в чистом chroot усложняет эту задачу, поскольку программа запускается вне chroot для генерации профилей, но профили должны быть применены внутри chroot при последующей перекомпиляции. Решение состоит в объединении трёх файловых систем с помощью bind-монтирования.\n\nСоздайте каталог для хранения профилей и выполните bind-монтирование:\n\n```\n# mkdir -m 777 {\"$CHROOT\"/{root,\"$USER\"},}/mnt/pgo\n# mount -o bind {,\"$CHROOT\"/root}/mnt/pgo\n# mount -o bind \"$CHROOT\"/{root,\"$USER\"}/mnt/pgo\n```\n\n```\n#PGODEST\n/полный/путь/к/$CHROOT/$USER/mnt/pgo/ /mnt/pgo/ none bind,x-gvfs-hide 0 0\n/mnt/pgo/ /полный/путь/к/$CHROOT/root/mnt/pgo/ none bind,x-gvfs-hide 0 0\n```\n\nОтредактируйте $CHROOT/root/etc/makepkg-optimize.conf и установите PROFDEST=/mnt/pgo.\n\nСоберите, затем установите пакет и выполните тестовый запуск его исполняемых файлов.\n\nПосле тщательного использования программы закройте её, затем пересоберите и переустановите её пакет.\n\n"
    }
  ]
}