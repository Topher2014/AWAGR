{
  "title": "Taking a screenshot (日本語)",
  "url": "https://wiki.archlinux.org/title/Taking_a_screenshot_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- デスクトップ環境\n- キーバインド\n- アプリケーション一覧\n\nこの記事では、スクリーンショットとスクリーンキャストのソフトウェアを一覧にして解説しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 スクリーンショットソフトウェア 1.1 専用のソフトウェア 1.1.1 アプリケーションの一覧 1.1.2 使用法 1.1.2.1 maim 1.1.2.2 scrot 1.2 デスクトップ環境固有 1.2.1 Budgie 1.2.2 Cinnamon 1.2.3 GNOME 1.2.4 KDE 1.2.5 Xfce 1.2.6 他のデスクトップ環境やウィンドウマネージャ 1.3 スクリーンショットユーティリティが含まれているパッケージ 1.3.1 ImageMagick/GraphicsMagick 1.3.2 GIMP 1.3.3 imlib2 1.3.4 FFmpeg\n- 2 スクリーンキャストソフトウェア\n- 3 Wayland 3.1 スクリーンキャスト 3.1.1 GNOME screencast を使う 3.1.2 Hyprland を使う 3.1.3 仮想 Web カメラのビデオフィードを使う 3.1.3.1 個々のアプリケーションの共有 3.1.4 WebRTC プロトコルを使う 3.2 X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする\n- 4 ターミナル 4.1 ANSI コードでキャプチャする 4.2 フレームバッファ 4.3 仮想コンソール 4.3.1 スクリーンショット 4.3.2 コンソールのスクリーンキャスト\n- 5 トラブルシューティング 5.1 スクリーンショットで古い画面の状態が使われる 5.2 NVIDIA 環境で背景が切り取られる\n\n- 1.1 専用のソフトウェア 1.1.1 アプリケーションの一覧 1.1.2 使用法 1.1.2.1 maim 1.1.2.2 scrot\n- 1.2 デスクトップ環境固有 1.2.1 Budgie 1.2.2 Cinnamon 1.2.3 GNOME 1.2.4 KDE 1.2.5 Xfce 1.2.6 他のデスクトップ環境やウィンドウマネージャ\n- 1.3 スクリーンショットユーティリティが含まれているパッケージ 1.3.1 ImageMagick/GraphicsMagick 1.3.2 GIMP 1.3.3 imlib2 1.3.4 FFmpeg\n\n- 1.1.1 アプリケーションの一覧\n- 1.1.2 使用法 1.1.2.1 maim 1.1.2.2 scrot\n\n- 1.1.2.1 maim\n- 1.1.2.2 scrot\n\n- 1.2.1 Budgie\n- 1.2.2 Cinnamon\n- 1.2.3 GNOME\n- 1.2.4 KDE\n- 1.2.5 Xfce\n- 1.2.6 他のデスクトップ環境やウィンドウマネージャ\n\n- 1.3.1 ImageMagick/GraphicsMagick\n- 1.3.2 GIMP\n- 1.3.3 imlib2\n- 1.3.4 FFmpeg\n\n- 3.1 スクリーンキャスト 3.1.1 GNOME screencast を使う 3.1.2 Hyprland を使う 3.1.3 仮想 Web カメラのビデオフィードを使う 3.1.3.1 個々のアプリケーションの共有 3.1.4 WebRTC プロトコルを使う\n- 3.2 X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする\n\n- 3.1.1 GNOME screencast を使う\n- 3.1.2 Hyprland を使う\n- 3.1.3 仮想 Web カメラのビデオフィードを使う 3.1.3.1 個々のアプリケーションの共有\n- 3.1.4 WebRTC プロトコルを使う\n\n- 3.1.3.1 個々のアプリケーションの共有\n\n- 4.1 ANSI コードでキャプチャする\n- 4.2 フレームバッファ\n- 4.3 仮想コンソール 4.3.1 スクリーンショット 4.3.2 コンソールのスクリーンキャスト\n\n- 4.3.1 スクリーンショット\n- 4.3.2 コンソールのスクリーンキャスト\n\n- 5.1 スクリーンショットで古い画面の状態が使われる\n- 5.2 NVIDIA 環境で背景が切り取られる\n\n"
    },
    {
      "title": "アプリケーションの一覧",
      "level": 4,
      "content": "- CoreShot — Xorg 用のスクリーンキャプチャユーティリティ。C-Suite の一部。\n\n- Escrotum — scrot からインスパイアされた、PyGTK 製のスクリーンキャプチャツール。Scrot の代替として使えます。\n\n- Flameshot — インタラクティブにスクリーンショットを撮ることができる Qt ベースのソフトウェア。\n\n- GNOME Screenshot — GNOME デスクトップ環境用のスクリーンショットツール。\n\n- grim — Wayland コンポジタでスクリーンショットを撮ります。\n\n- gscreenshot — scrot、ImageMagick、PIL、imlib2、grim といった様々なスクリーンショットバックエンドのための GTK フロントエンド。遅延、領域選択、クリップボードへのコピーの機能があります。\n\n- HotShots — 画面をキャプチャし、様々な画像フォーマットに保存するだけでなく、注釈やグラフィカルなデータ (矢印、線、テキストなど) を加えることのできるアプリケーション。\n\n- imgur-screenshot — 選択した領域のスクリーンショットを撮り、imgur にアップロードしたりできるツール。\n\n- ksnip — Qt ベースのクロスプラットホームなスクリーンショットツールで、多くの注釈機能、基本的な画像編集、リモート (ftp、imgur、スクリプト) へのアップロード機能を提供します。\n\n- Lightscreen — スクリーンショットの保存や整理などの面倒な処理を自動化するシンプルなツール。このツールはバックグラウンドプロセスとして動作し、ユーザーの設定に応じて1つ (または複数) のホットキーでスクリーンショットを撮り、ディスクに保存することができます。\n\n- LXImage-Qt — LXImage イメージビューアとスクリーンショットツールの Qt 移植版。(lximage-qt --screenshot で実行します。)\n\n- maim — スクリーンショットを撮るシンプルなコマンドラインユーティリティ。Scrot を置き換えることを目的としており、多くの点で scrot より優れています。\n\n- MATE Screenshot — MATE デスクトップ用のスクリーンショットツール。\n\n- menyoki — 画像編集機能のある、コマンドラインのスクリーンショット及びスクリーンキャストツール。\n\n- mss — 最小限の CLI を備えた、xrandr 互換のスクリーンショット Python モジュール。\n\n- Pantheon Screenshot — Elementary OS のために設計されたスクリーンショットツール。\n\n- ScreenCloud — 画面全体または選択したエリアのスクリーンショットを撮り、imgur+auth にアップロードできます。プラグインやシステムトレイの機能があります。\n\n- ScreenGrab — 素早くスクリーンショットを撮るための Qt アプリケーション (開発は不活発)。\n\n- scrot — X 用のシンプルなスクリーンショットコマンドラインユーティリティ。\n\n- Shotgun — Rust で書かれた最小限の X スクリーンショットユーティリティ (作者によると、maim より2倍高速だそうです)。\n\n- Shutter — リッチなスクリーンショット及び編集プログラム (撮影を遅らせる機能があります)。\n\n- Spectacle — スクリーンキャプチャのための KDE アプリケーション。デスクトップ全体、単一のウィンドウ、ウィンドウの一セクション、選択した矩形領域、及びフリーハンドで選択した領域を撮影することができます。kde-graphics グループの一部です。\n\n- Xfce4-screenshooter — 画面全体、アクティブなウィンドウ、選択した領域を撮影できるアプリケーション及び Xfce パネルプラグイン。xfce4-goodies に含まれています。\n\n- xwd — X Window のキャプチャユーティリティ。\n\n"
    },
    {
      "title": "使用法",
      "level": 4,
      "content": "maim は scrot の改良版となることを目指しています。\n\n全画面をキャプチャしてファイルに保存するには:\n\n```\n$ maim filename\n```\n\n領域選択の UI を表示して、ファイルに保存するには:\n\n```\n$ maim --select filename\n```\n\nアクティブなウィンドウをファイルに保存するには (xdotool がインストールされていると仮定します):\n\n```\n$ maim --window $(xdotool getactivewindow) filename\n```\n\n領域選択の UI を表示し、カーソルを除いて撮影し、クリップボードに保存するには (xclip がインストールされていると仮定します):\n\n```\n$ maim -s | xclip -selection clipboard -t image/png -i\n```\n\nscrot は、CLI からスクリーンショットを撮ることができ、撮影の遅延などの機能があります。デフォルトでは、カレントディレクトリにスクリーンショットを保存します。\n\n```\n$ scrot -t 20 -d 5\n```\n\n上記のコマンドは、ウェブ投稿用にサムネイル付き (元画像の20%) の日付のつけられた .png ファイルに保存します。この例では、5秒経ってから撮影します。\n\nファイルへの保存時に標準的な日付と時間の形式を使うこともできます。例:\n\n```\n$ scrot ~/screenshots/%Y-%m-%d-%T-screenshot.png\n```\n\nこのコマンドは、ファイル名に現在の年、月、日、時、分、そして秒を付け、ホームディレクトリ内の \"screenshots\" という名前のフォルダ内にスクリーンショットを保存します。\n\n詳細は scrot(1) を参照してください。\n\n"
    },
    {
      "title": "Budgie",
      "level": 4,
      "content": "Budgie には BudgieScreenshot という独自のスクリーンショットユーティリティがあります。\n\nこのユーティリティは PrintScreen で画面全体、アクティブなウィンドウ、選択した領域をキャプチャできます。特定のアクションのショートカットは Keyboard Shortcuts を見てください。\n\n"
    },
    {
      "title": "Cinnamon",
      "level": 4,
      "content": "デフォルトの Cinnamon 環境では、スクリーンショットユーティリティが提供されていません。gnome-screenshot をインストールすることで、Menu > Accessories > Screenshot から、または PrintScreen を押してスクリーンショットを撮ることができるようになります。\n\n"
    },
    {
      "title": "GNOME",
      "level": 4,
      "content": "GNOME ユーザーは PrintScreen を押すか、システムメニューのカメラアイコンをクリックすることで、スクリーンショットを撮ることができます。任意で、gnome-screenshot をインストールすれば、Apps > Accessories > Take Screenshot からスクリーンショットツールを開くことができます。\n\nGNOME には、Ctrl+Shift+Alt+r を押すことで使用できる内臓のスクリーン録画ツールがあります。録画中は、画面右下の角に赤い丸が表示されます。録画が終わると、Screencast from %d%u-%c.webm という名前のファイルが Videos ディレクトリ内に作成されます。スクリーンキャスト機能を使用するには、gst-plugin-pipewire パッケージと gst-plugins-good パッケージをインストールする必要があります。\n\n"
    },
    {
      "title": "KDE",
      "level": 4,
      "content": "KDE を使っている場合、Spectacle を使用すると良いかもしれません。\n\nSpectacle は spectacle パッケージで提供されています。\n\n"
    },
    {
      "title": "Xfce",
      "level": 4,
      "content": "Xfce を使っている場合 xfce4-screenshooter をインストールしてキーボードバインディングを追加することができます:\n\nXfce Menu > Settings > Keyboard > Application Shortcuts\n\nScreenshot プロンプトをスキップしたい場合は、オプションのターミナルに $ xfce4-screenshooter -h と入力してください。\n\n"
    },
    {
      "title": "他のデスクトップ環境やウィンドウマネージャ",
      "level": 4,
      "content": "LXDE などの他のデスクトップ環境や、Openbox や Compiz といったウィンドウマネージャでは、先に挙げたコマンドをスクリーンショットを撮るホットキーに追加することができます。例えば:\n\n```\n$ import -window root ~/Pictures/$(date '+%Y%m%d-%H%M%S').png\n```\n\nimport は imagemagick パッケージに含まれています。Compiz で上記のコマンドを PrintScreen キーにに割り当てれば、日付と時間を含むファイル名でスクリーンショットを Pictures フォルダに保存することができます。\n\nOpenbox の rc.xml ファイルではコンマは認識されないことに注意してください。なので、Openbox で PrintScreen キーに先のコマンドをバインドするには、以下の記述を rc.xml ファイルの keyboard セクションに追加する必要があります:\n\n```\nrc.xml\n```\n\n```\n<!-- Screenshot -->\n    <keybind key=\"Print\">\n      <action name=\"Execute\">\n        <command>sh -c \"import -window root ~/Pictures/$(date '+%Y%m%d-%H%M%S').png\"</command>\n      </action>\n    </keybind>\n```\n\nPrintScreen でバインドできない場合は、キーボード入力 の記事を参照し、他の keysym または keycode を使ってください。\n\n"
    },
    {
      "title": "ImageMagick/GraphicsMagick",
      "level": 4,
      "content": "ImageMagick#スクリーンショットの取得 を参照。\n\n"
    },
    {
      "title": "GIMP",
      "level": 4,
      "content": "GIMP を使ってスクリーンショットを取得することもできます (File > Create > Screenshot...)。\n\n"
    },
    {
      "title": "imlib2",
      "level": 4,
      "content": "imlib2 にはスクリーンショットを取得するためのバイナリ imlib2_grab が含まれています。フルスクリーンのスクリーンショットを撮るには:\n\n```\n$ imlib2_grab screenshot.png\n```\n\n"
    },
    {
      "title": "FFmpeg",
      "level": 4,
      "content": "FFmpeg#スクリーンキャプチャ を参照。\n\n"
    },
    {
      "title": "スクリーンキャストソフトウェア",
      "level": 2,
      "content": "FFmpeg#スクリーンキャプチャ と Wikipedia:Comparison of screencasting software も参照してください。\n\nスクリーンキャストユーティリティは、デスクトップや個々のウィンドウのビデオを作成することができます。\n\n- Deepin Screen Recorder — Deepin デスクトップ用の画面録画アプリケーション。\n\n- FFcast — Bash で書かれた FFmpeg ベースのスクリーンキャストツール。\n\n- GPU Screen Recorder — パフォーマンスを大幅に向上させるために GPU で画面を録画するスクリーンレコーダー。そのパフォーマンスは NVIDIA ShadowPlay に匹敵します。ライブストリーミングや再生バッファもサポートしています。\n\n- Green Recorder — Linux システム用のシンプルかつ機能的なデスクトップレコーダー。\n\n- Kazam — デザイン性を念頭に置いたスクリーンキャストプログラム。マルチスクリーンの環境でも使えます。\n\n- Kooha — 最小限の GTK インターフェイスを備えたシンプルなスクリーンレコーダー。\n\n- menyoki — コマンドライン上でスクリーンキャプチャを撮り、ImageOps を実行します。X11 のみですが、Wayland のサポートも計画されています。\n\n- Open Broadcaster Software — 録画及びライブストリーミングのためのアプリケーション。\n\n- obs-gnome-screencastAUR – GNOME screencast 機能のためのプラグイン。Wayland をサポートしています。\n\n- Peek — GIF、APNG、WebM、MP4 のアニメーションを作成できるシンプルなスクリーンキャストツール。(2023年1月の時点で、開発は行われていません)。\n\n- RecApp — GTK で書かれたユーザーフレンドリーなスクリーンキャストツール。フリーな GStreamer モジュールを使用しており、FFmpeg には依存していません (もはや開発されていません)。\n\n- RecordMyDesktop — デスクトップを録画して ogg 形式に落とす、簡単に使えるユーティリティ。CLI、GTK、Qt のインターフェイスを利用可能。(開発は活発ではありません)\n\n- screencast — FFmpeg で X11 デスクトップを録画するコマンドラインインターフェイス。オフライン録画とライブストリーミングの両方をサポートしています。\n\n- Screencast — Elementary OS 用に設計されたシンプルなスクリーンキャストレコーダー。\n\n- SimpleScreenRecorder — C++/Qt5 で書かれた、機能が豊富な画面録画ツール。X11 と OpenGL をサポートしています。\n\n- Spectacle — スクリーンキャプチャのための KDE アプリケーション。Wayland でのデスクトップ全体や単一画面、単一ウィンドウの (無音声) 録画をサポートしています。kde-graphics グループの一部です (Kwin が有効化されている状態でのみ動作するため、他のウィンドウマネージャでは使用できません)。\n\n- VokoScreen — GStreamer を使用する強力な GUI スクリーンキャストツール。数々のコーデックをサポートし、内外 (マイクロカメラとウェブカメラ) 及び画面/ウィンドウ/ビューソースの音声付きの録画、ズーム、マウス領域とボタンのハイライトが可能です。ただし、Wayland サポートは限られています。\n\n- Wayfarer — Xorg 及び Pipewire が動作している Wayland 用の GTK4 スクリーンレコーダー。\n\n"
    },
    {
      "title": "Wayland",
      "level": 2,
      "content": "Wlroots ベースのコンポジタでは grim や grimshot (sway-contrib パッケージ) でスクリーンショットを撮ることができます。動画は、wf-recorder (または wf-recorder-gitAUR) で撮ることができます。さらに、wlrobs-hgAUR は、wlroot ベースのコンポジタでのスクリーンキャプチャーを可能にする obs-studioプラグインです。また任意で、キャプチャする画面領域を選択するために slurp を使用できます。GPU が VA-API エンコードをサポートしている場合、wf-recorder の代わりに wl-screenrec-gitAUR を使えば、より高速に動作する可能性があります。\n\n画面全体のスクリーンショットを撮る:\n\n```\n$ grim screenshot.png\n```\n\nSway で現在のウィンドウのスクリーンショットを撮る:\n\n```\n$ swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | \"\\(.x),\\(.y) \\(.width)x\\(.height)\"' | grim -g - screenshot.png\n```\n\nHyprland で現在のウィンドウのスクリーンショットを撮る:\n\n```\n$ hyprctl -j activewindow | jq -r '\"\\(.at[0]),\\(.at[1]) \\(.size[0])x\\(.size[1])\"' | grim -g - screenshot.png\n```\n\n画面の一部のスクリーンショットを撮る:\n\n```\n$ slurp | grim -g - screenshot.png\n```\n\n画面の一部のスクリーンショットを攝り、wl-clipboard を使ってクリップボートに貼り付ける:\n\n```\n$ slurp | grim -g - - | wl-copy\n```\n\n画面全体の動画を撮る:\n\n```\n$ wf-recorder -f recording.mp4\n```\n\n画面の一部の動画を撮る:\n\n```\n$ wf-recorder -g \"$(slurp)\"\n```\n\n- slurpshot は、bemenu を使用するインタラクティブなスクリーンショットスクリプトです。\n- swappy などの、スクリーンショット後に画像の編集・描画ツールを使うには: grim -g \"$(slurp)\" - | swappy -f -\n\nまた、上記の一部のプログラムは Wayland でのみ動作します (例: ksnip、green-recorderAUR)。\n\n"
    },
    {
      "title": "GNOME screencast を使う",
      "level": 4,
      "content": "green-recorderAUR、obs-gnome-screencastAUR、及び obs-studio は、GNOME screencast 機能を使用した Wayland での画面録画をサポートしています。\n\n"
    },
    {
      "title": "Hyprland を使う",
      "level": 4,
      "content": "Hyprland ウィンドウマネージャでは、xdg-desktop-portal-hyprland を使用している場合、OBS でスクリーンキャストと録画を行うことができます (個々のウィンドウやワークスペースの選択も可)。[1]\n\n"
    },
    {
      "title": "仮想 Web カメラのビデオフィードを使う",
      "level": 4,
      "content": "v4l2loopback#wf-recorder を使って Wayland をキャストする を参照してください。\n\n- この方法は、zoomAUR デスクトップクライアントを xorg-xwayland で動作させたケースと、BigBlueButton を chromium 内で動作させたケース (firefox では解像度が低い) でテストされました。skypeforlinux-binAUR は、仮想ビデオデバイス VirtualVideoDevice を検出しますが、空の画面しか出力しません。\n- この例では wf-recorder を使用していますが、その他のソフトウェアも使用できます。単に出力を仮想デバイスに流すだけです。\n\nwf-recorder (または wf-recorder-gitAUR) および v4l2loopback-dkms をインストールしてください。そして、以下のパラメータを指定して v4l2loopback カーネルモジュールをロードしてください:\n\n```\n# modprobe v4l2loopback exclusive_caps=1 card_label=VirtualVideoDevice\n```\n\n新しい仮想ビデオデバイス VirtualVideoDevice が作成されたことを確認してください:\n\n```\n$ v4l2-ctl --list-devices\n```\n\n```\n...\nVirtualVideoDevice (platform:v4l2loopback-000):\n\t/dev/video2\n...\n```\n\nwf-recorder で画面の録画を開始し、v4l2loopback によって作成された新しい仮想ビデオデバイス VirtualVideoDevice に出力を送ってください:\n\n```\n$ wf-recorder --muxer=v4l2 --codec=rawvideo --file=/dev/video2 -x yuv420p\n```\n\nここで yuv420p 色空間を使用しているのは、映像出力に Zoom との互換性を持たせるためです。[2]\n\nこれで、先の仮想ビデオデバイスをビデオ通話/ビデオ会議アプリケーションで \"ウェブカメラ\" として選択できるようになりました (デバイスは VirtualVideoDevice という名前です)。仮想ビデオデバイスがきちんとスクリーン共有を出力していることは、ffplay (ffmpeg の一部) や mpv、gst-launch (gstreamer の一部) を使用して確認できます:\n\n```\n$ ffplay /dev/video2\n```\n\n```\n$ mpv av://v4l2:/dev/video2\n```\n\n```\n$ gst-launch-1.0 -v v4l2src device=/dev/video2 ! glimagesink\n```\n\nFirefox がビデオストリームを読み取ることができず、\"AbortError: Starting video failed\" のようなメッセージを出力する場合、v4l2compat.so をプリロードしてみてください:\n\n```\n$ LD_PRELOAD=/usr/lib/v4l1compat.so firefox\n```\n\n先に説明した通り、wf-recorder は、slurp で事前に選択した画面領域のみを録画することができます。この機能を使って、特定の領域/アプリケーションウィンドウを共有して仮想ビデオデバイスに出力を流すには、以下のコマンドで画面の録画を開始してください:\n\n```\n$ wf-recorder -g \"$(slurp)\" --muxer=v4l2 --codec=rawvideo --file=/dev/video2 -x yuv420p\n```\n\n画面の領域を選択したら、先に説明したように仮想ビデオデバイス /dev/video2 経由でビデオフィードにアクセスできるようになります。\n\n"
    },
    {
      "title": "WebRTC プロトコルを使う",
      "level": 4,
      "content": "PipeWire#WebRTC 画面共有 を参照してください。\n\nChromium と Firefox は画面共有にアクセスできるはずです。Mozilla の getUserMedia / getDisplayMedia テストページでテストできます。\n\n"
    },
    {
      "title": "X11 アプリケーションで Wayland ウィンドウをスクリーンキャストする",
      "level": 3,
      "content": "ネイティブな Wayland ウィンドウ (あるいはスクリーン/ワークスペース全体) は X11 アプリケーションに共有することができます。そのためには xwaylandvideobridge アプリケーションを使う必要があります。詳細は Fixing Wayland: Xwayland screen casting を見てください。\n\n"
    },
    {
      "title": "ANSI コードでキャプチャする",
      "level": 3,
      "content": "util-linux パッケージに含まれている、script(1) コマンドを使うことができます。script を実行すればその瞬間から、全ての出力は (ANSI コードを含めて) typescript ファイルに保存されるようになります。\n\n終わったら、exit と入力するだけで typescript が作成されます。作成されたファイルは ansi2htmlAUR パッケージを使って HTML に変換できます (python-ansi2html の ansi2html と混同しないように)。\n\ntypescript ファイルを typescript.html に変換するには、次を実行:\n\n```\n$ ansi2html --bg=dark < typescript > typescript.html\n```\n\nまた、コマンドによっては直接 ansi2html にパイプで渡すこともできます:\n\n```\n$ ls --color|ansi2html --bg=dark >output.html\n```\n\nこれはどんなコマンドでも使えるというわけではないので、その場合は、script を使う必要があります。\n\n"
    },
    {
      "title": "フレームバッファ",
      "level": 3,
      "content": "何かしらのフレームバッファをインストールして、fbgrab か fbdumpAUR を使用してスクリーンショットを撮ることができます。\n\n"
    },
    {
      "title": "スクリーンショット",
      "level": 4,
      "content": "単にコンソールの文章を取得したいだけで実際の画像は要らない場合、util-linux パッケージに含まれている setterm を使うことができます。以下のコマンドは仮想コンソール 1 のテキストをカレントディレクトリの screen.dump ファイルに保存します:\n\n```\n# setterm -dump 1 -file screen.dump\n```\n\n/dev/vcs1 の中身を読まないといけないので root 権限が必要です。\n\n"
    },
    {
      "title": "コンソールのスクリーンキャスト",
      "level": 4,
      "content": "asciinema は、ターミナルセッションのアクティビティ全体を録画することができます。結果は、asciinema 独自の (オープンな) 形式でファイルに保存されます。このファイルは同ツールまたはツールの HTML5 バージョンで再生でき、このツールの公式ウェブサイト asciinema.org で共有することができますし、あるいは HTML バージョンを自身でホストして共有することもできます。\n\n使用方法は asciinema(1) や asciinema --help で確認できます。\n\n- asciinema rec output.cast はセッションを録画し、Ctrl+\\ でポーズ/再開、Ctrl-d/またはセッションを終了することで録画を停止できます。出力ファイル名は省略可能です。\n\n録画に関する有用な引数:\n\n- -c command: 特定のコマンドのアクション/出力だけを録画したい場合\n- -i 1.2: 1.2 秒だけ録画\n- -t \"beautiful title\": ターミナルキャストにタイトルを追加\n\n録画以外の機能:\n\n- asciinema play file.cast: asciinmea ファイルを再生\n- asciinema upload file.cast: ファイルを asciinema.org にアップロードして共有\n- asciinema auth: asciinema.org アカウント上の録画ファイルを管理\n\n"
    },
    {
      "title": "スクリーンショットで古い画面の状態が使われる",
      "level": 3,
      "content": "KDE#Spectacle のスクリーンショットでスクリーンの古い状態が使われてしまう を参照。\n\n"
    },
    {
      "title": "NVIDIA 環境で背景が切り取られる",
      "level": 3,
      "content": "プロプライエタリな nvidia ドライバを使用していて、画面録画中に背景が切り取られる場合、ForceCompositionPipeline 設定を有効化してください。詳細は NVIDIA/トラブルシューティング#画面のティアリングを抑える を参照。\n\n"
    }
  ]
}