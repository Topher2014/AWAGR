{
  "title": "Tmpfs (Русский)",
  "url": "https://wiki.archlinux.org/title/Tmpfs_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "tmpfs - это временная файловая система, которая находится в памяти и/или вашем разделе(ах) подкачки, в зависимости от того, насколько вы её заполнили. Монтирование каталогов как TMPFS - это эффективный способ ускорения доступа к своим файлам. Также это полезно, если вам нужно, чтобы содержимое каталогов автоматически удалялось при перезагрузке.\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Некоторые каталоги, где обычно используется tmpfs(5): /tmp, /var/lock и /var/run. Не используйте его на /var/tmp, так как этот каталог предназначен для временных файлов, которые сохраняются после перезагрузки.\n\nArch использует tmpfs в каталоге /run, с симлинками для совместимости /var/run и /var/lock. Он также используется для /tmp в настройках по умолчанию systemd и не требует записи в fstab, если не требуется конкрентная настройка.\n\nglibc 2.2 и выше ожидает что /dev/shm будет смонтирован tmpfs для POSIX разделяемой памяти. Монтирование /dev/shm в tmpfs выполняется автоматически systemd, поэтому ручная настройка в fstab больше не требуется.\n\nКак правило, задачи и программы, которые выполняют частые операции чтения/записи, могут выиграть от использования каталога tmpfs. Некоторые приложения могут даже получить существенную выгоду при переносе некоторых (или всех) их данных на общую память. Например, перемещение профиля Firefox в оперативную память показывает значительное улучшение производительности.\n\n"
    },
    {
      "title": "Примеры",
      "level": 2,
      "content": "По умолчанию раздел tmpfs имеет максимальный размер в половину от всей оперативной памяти, но это можно настроить. Чтобы точно установить максимальный размер, в данном примере, чтобы переопределить значение по умолчанию для монтирования /tmp, используем опцию монтирования size:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /tmp         tmpfs   rw,nodev,nosuid,size=2G          0  0\n```\n\nПример с опциями монтирования для большей безопасности:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /www/cache    tmpfs  rw,size=1G,nr_inodes=5k,noexec,nodev,nosuid,uid=пользователь,gid=группа,mode=1700 0 0\n```\n\nСмотрите tmpfs(5) и Безопасность#Файловые системы для более подробной информации.\n\nПерезагрузитесь, для того чтобы изменения вступили в силу. Обратите внимание, что может быть заманчивым, выполнить mount -a, чтобы сделанные изменения вступили в силу немедленно, это сделает недоступными какие-либо файлы, которые в настоящее время находятся в этих каталогах (например, особенно проблематично для запуска программ с файлами блокировки). Тем не менее, если все они пусты, она должна быть безопасной для запуска mount -a, вместо перезагрузки (или смонтируйте их в индивидуальном порядке).\n\nПосле применения изменений, вы можете убедиться в том, что они вступили в силу, посмотрев в /proc/mounts и используя findmnt:\n\n```\n$ findmnt /tmp\n```\n\n```\nTARGET SOURCE FSTYPE OPTIONS\n/tmp   tmpfs  tmpfs  rw,nosuid,nodev,relatime\n```\n\nTMPFS также может быть временно изменен, без необходимости в перезагрузке, например, когда в ближайшее время необходимо выполнить большую работу компиляции. В этом случае вы можете запустить:\n\n```\n# mount -o remount,size=4G /tmp\n```\n\n"
    },
    {
      "title": "Отключить автоматическое монтирование",
      "level": 2,
      "content": "systemd автоматически монтирует /tmp как tmpfs, даже если нет записи в /etc/fstab. Для отключения автоматического монтирования замаскируйте юнит tmp.mount.\n\nПосле этого файлы в /tmp станут храниться не в памяти, а на блочном устройстве. Содержимое /tmp теперь будет сохраняться между перезагрузками, что может быть нежелательно. Чтобы вернуть прежнее поведение и очищать каталог /tmp автоматически при перезагрузке, можно использовать tmpfiles.d(5):\n\n```\n/etc/tmpfiles.d/tmp.conf\n```\n\n```\n# смотрите tmpfiles.d(5)\n# очистка каталога /tmp всегда включена\nD! /tmp 1777 root root 0\n\n# удалить файлы в каталоге /var/tmp старше 10 дней\nD /var/tmp 1777 root root 10d\n\n# namespace mountpoints (PrivateTmp=yes) are excluded from removal\nx /tmp/systemd-private-*\nx /var/tmp/systemd-private-*\nX /tmp/systemd-private-*/tmp\nX /var/tmp/systemd-private-*/tmp\n```\n\n"
    },
    {
      "title": "Не получается открытие символьных ссылок в tmpfs от root",
      "level": 3,
      "content": "Предполагая, что /tmp использует tmpfs, измените текущий каталог на /tmp, а затем создайте файл и создайте символическую ссылку на этот файл в том же каталоге /tmp. При попытке прочитать файл по символической ссылке иногда может возникать ошибка «Отказано в доступе». Это ожидаемое поведение, так как /tmp имеет установленный sticky bit.\n\nПоведение можно настроить через /proc/sys/fs/protected_symlinks или просто с помощью sysctl: sysctl -w fs.protected_symlinks=0. Чтобы сделать изменение постоянным, смотрите sysctl (Русский)#Настройка.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Linux kernel documentation\n\n"
    }
  ]
}