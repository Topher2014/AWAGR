{
  "title": "PXE (日本語)",
  "url": "https://wiki.archlinux.org/title/PXE_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ディスクレスシステム\n\nWikipedia:ja:Preboot Execution Environment より:\n\nこのガイドでは、PXE を使って対象のマシンで PXE をサポートするオプション ROM でインストールメディアを起動します。既にサーバーをセットアップ済みでも上手く行くはずです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 準備 1.1 概要 1.2 インストールメディアからのブート 1.3 ネットブートからのブート\n- 2 Pixiecore\n- 3 サーバーのセットアップ 3.1 ネットワーク 3.2 DHCP + TFTP 3.2.1 インストールメディアからの BIOS ブート 3.2.2 ネットブートからの UEFI ブート 3.3 archiso ルートファイルシステムの転送 3.3.1 HTTP 3.3.2 NFS 3.3.3 NBD 3.4 既存の PXE サーバー\n- 4 インストール 4.1 起動 4.2 起動後 4.3 メモリの少ないシステム 4.4 PXE クライアントとのインターネット共有\n- 5 トラブルシューティング 5.1 DHCP インターフェースリネームバグ 5.2 仮想マシンではブートできるが実マシンではできない\n\n- 1.1 概要\n- 1.2 インストールメディアからのブート\n- 1.3 ネットブートからのブート\n\n- 3.1 ネットワーク\n- 3.2 DHCP + TFTP 3.2.1 インストールメディアからの BIOS ブート 3.2.2 ネットブートからの UEFI ブート\n- 3.3 archiso ルートファイルシステムの転送 3.3.1 HTTP 3.3.2 NFS 3.3.3 NBD\n- 3.4 既存の PXE サーバー\n\n- 3.2.1 インストールメディアからの BIOS ブート\n- 3.2.2 ネットブートからの UEFI ブート\n\n- 3.3.1 HTTP\n- 3.3.2 NFS\n- 3.3.3 NBD\n\n- 4.1 起動\n- 4.2 起動後\n- 4.3 メモリの少ないシステム\n- 4.4 PXE クライアントとのインターネット共有\n\n- 5.1 DHCP インターフェースリネームバグ\n- 5.2 仮想マシンではブートできるが実マシンではできない\n\n"
    },
    {
      "title": "概要",
      "level": 3,
      "content": "#サーバーのセットアップ、クライアント側の#インストール、および必要な Arch Linux ファイルを理解するために、PXE ブートプロセスの概要を説明することは有用です。\n\nクライアントは、特定の PXE オプションを含む DHCP サーバーを求めるパケットをブロードキャストすることから始まります。DHCP サーバーは、クライアントに割り当てられた IP アドレスなどのネットワーク情報で応答し、特定の ブートストラッププロトコル (BOOTP) パラメーターを使用して、TFTP サーバーのアドレス、ダウンロードする初期ネットワークブートプログラム (NBP) のパス、またはブート構成ファイル名などの追加情報を提供します。\n\nNBP は TFTP を使用して PXE サーバーからクライアントに転送され、メモリにロードされて実行されます。カーネルと initramfs もこの方法で転送されます。\n\nその後、ルートファイルシステムは HTTP、NFS、または NBD のいずれかのプロトコルを使用して転送されます。\n\n"
    },
    {
      "title": "インストールメディアからのブート",
      "level": 3,
      "content": "サーバーからクライアントに転送されるファイルを収集するために、ダウンロードページ から最新の公式インストールイメージを取得します。\n\n次に、イメージをマウントします：\n\n```\n# mount --mkdir -o loop,ro archlinux-release_date-x86_64.iso /mnt/archiso\n```\n\nここで、release_date は ISO ファイル名のリリース日です。例：2022.10.01。\n\n"
    },
    {
      "title": "ネットブートからのブート",
      "level": 3,
      "content": "Arch Linux netboot イメージを使用して、システムブート時に最新の Arch Linux リリースをオンザフライでダウンロードできます。構成に適したイメージをダウンロードします。\n\n"
    },
    {
      "title": "Pixiecore",
      "level": 2,
      "content": "pixiecore によって提供されるオールインワンソリューションです。\n\n1. pixiecore-gitAUR をインストールする\n1. root として pixiecore quick arch --dhcp-no-bind を実行する\n1. PXE 経由でブートする\n\n"
    },
    {
      "title": "サーバーのセットアップ",
      "level": 2,
      "content": "ネットワークを設定して、pxelinux/カーネル/initramfs をロードし、最終的に root ファイルシステムをロードするために DHCP, TFTP, HTTP サーバーを設定する必要があります。\n\n"
    },
    {
      "title": "ネットワーク",
      "level": 3,
      "content": "有線の NIC を立ち上げて、適当なアドレスを割り当てて下さい。\n\n```\n# ip link set eth0 up\n# ip addr add 192.168.0.1/24 dev eth0\n```\n\n"
    },
    {
      "title": "DHCP + TFTP",
      "level": 3,
      "content": "インストール先でネットワークを設定して PXE サーバーとクライアント間のファイルの転送を楽にするには DHCP と TFTP 両方のサーバーが必要です。dnsmasq がその両方とも備えており、とても簡単にセットアップできます。\n\ndnsmasq パッケージをインストールします。\n\ndnsmasq の設定が必要です。dnsmasq#TFTP サーバー と dnsmasq#PXE サーバー のセットアップ方法についての指示を参照してください。\n\n以下に一般的な設定手順を示します。tftp_root は Arch ISO がマウントされているディレクトリ (例：/mnt/archiso) またはネットワークブートプログラムが配置されている場所です。\n\n```\n# /etc/dnsmasq.conf\n```\n\n```\n# 指定されたインターフェースのみをリッスンする\ninterface=eth0\n\n# DNS サーバーとして機能しない\nport=0\n\n# TFTP サーバーの設定\nenable-tftp\ntftp-root=tftp_root\n\n# DHCP トランザクションに関する追加情報をログに記録する (デバッグ目的)\nlog-dhcp\n```\n\nDHCP サーバーを有効にし、範囲内の IPv4 アドレスを提供するには、設定ファイルに以下のような行を追加します：\n\n```\ndhcp-range=192.168.0.50,192.168.0.150\n```\n\nまたは、ネットワーク上に既に DHCP サーバーが稼働しており、それと連携したい場合は、dnsmasq#プロキシ DHCP を参照してください。\n\n異なるブートスタイルとインストールメディアをカバーする2つの例を以下に示します。\n\n必要に応じて設定したら、dnsmasq.service を開始します。\n\n"
    },
    {
      "title": "インストールメディアからの BIOS ブート",
      "level": 4,
      "content": "転送される初期ブートストラッププログラムのパスは、設定ファイルの dhcp-boot オプションで定義されます。\n\n```\ndhcp-boot=/boot/syslinux/lpxelinux.0\n```\n\n設定ファイルパスのような特定の ブートストラップ プロトコル (BOOTP) パラメーター を送信するために、dhcp-option-force=flag,value 行が使用されます。\n\n```\ndhcp-option-force=209,archiso_pxe.cfg # このファイルは /mnt/archiso/boot/syslinux にあるかもしれません\ndhcp-option-force=210,\n```\n\n"
    },
    {
      "title": "ネットブートからの UEFI ブート",
      "level": 4,
      "content": "アーキテクチャに応じてファイルを送信するには、ここでは UEFI スタイルのブート用のネットブートイメージを使用します：\n\n```\npxe-service=BC_EFI, \"Boot from network BC EFI\", ipxe.efi\npxe-service=X86-64_EFI, \"Boot from network X86-64 EFI\", ipxe.efi\n```\n\nネットブートを使用する場合、Arch ISO に焦点を当てたサーバーセットアップセクションの残りの部分は適用されません。\n\n```\n# /etc/dnsmasq.conf\n```\n\n```\nport=0\ninterface=eth0\nbind-interfaces\ndhcp-range=192.168.0.50,192.168.0.150,12h\ndhcp-boot=/arch/boot/syslinux/lpxelinux.0\ndhcp-option-force=209,boot/syslinux/archiso.cfg\ndhcp-option-force=210,/arch/\ndhcp-option-force=66,192.168.0.1\nenable-tftp\ntftp-root=/mnt/archiso\n```\n\ndnsmasq の systemd サービスを起動してください。\n\n"
    },
    {
      "title": "archiso ルートファイルシステムの転送",
      "level": 3,
      "content": "archiso の archiso_pxe_http、archiso_pxe_nfs、および archiso_pxe_nbd initcpio フックのおかげで、HTTP、NFS、または NBD を使用してブートすることが可能です。ブート時間は3つの方法すべてでほぼ同じですが、HTTP 方法では airootfs.sfs のダウンロード状態をパーセンテージで確認できます。\n\n"
    },
    {
      "title": "HTTP",
      "level": 4,
      "content": "すべての代替手段の中で、darkhttpd が最も簡単に設定でき (かつ最も軽量です)。\n\nまず、darkhttpd パッケージをインストールします。\n\n次に、darkhttpd をドキュメントルートとして /mnt/archiso を使用して起動します：\n\n```\n# darkhttpd /mnt/archiso\n```\n\n```\ndarkhttpd/1.8, copyright (c) 2003-2011 Emil Mikulic.\nlistening on: http://0.0.0.0:80/\n```\n\n"
    },
    {
      "title": "NFS",
      "level": 4,
      "content": "#準備 に従った場合、マウントされたインストールメディアのルートでエクスポートを行う NFS サーバー を設定する必要があります。これは /mnt/archiso になります。サーバーを設定した後、/etc/exports ファイルに次の行を追加します：\n\n```\n/etc/exports\n```\n\n```\n/mnt/archiso 192.168.0.0/24(ro,no_subtree_check)\n```\n\nサーバーが既に稼働している場合は、exportfs -r -a -v を使用してファイルシステムを再エクスポートします。\n\nインストーラーのデフォルト設定では、NFS を /run/archiso/bootmnt/ に見つけることを期待していますので、ブートオプションを編集する必要があります。これを行うには、適切なブートメニューの選択肢で Tab を押し、archiso_nfs_srv オプションを適切に編集します：\n\n```\narchiso_nfs_srv=${pxeserver}:/mnt/archiso\n```\n\nまたは、プロセス全体に /run/archiso/bootmnt を使用することもできます。\n\nカーネルがロードされた後、Arch ブートストラップイメージは NFS 経由でルートファイルシステムをブートホストにコピーします。これには少し時間がかかることがあります。これが完了すると、システムが動作しているはずです。\n\n"
    },
    {
      "title": "NBD",
      "level": 4,
      "content": "nbd パッケージをインストールし、設定します：\n\n```\n/etc/nbd-server/config\n```\n\n```\n[generic]\n[archiso]\n    readonly = true\n    exportname = /srv/archlinux-release_date-x86_64.iso\n```\n\nここで、release_date は ISO ファイル名のリリース日です。例：2022.10.01。\n\nnbd.service を開始します。\n\n"
    },
    {
      "title": "既存の PXE サーバー",
      "level": 3,
      "content": "既存の PXE サーバーで PXELINUX システムが設定されている場合 (例：DHCP と TFTP の組み合わせ)、以下のメニュー項目を /tftpboot/pxelinux.cfg/default ファイルに追加して、お好みの方法で Arch をブートすることができます。\n\nPXELINUX は HTTP をサポートしているため、ブートローダーのみを TFTP で転送し、その他すべては HTTP を使用できます。例：\n\n```\nLABEL archlinux\n        MENU LABEL Arch Linux x86_64\n        LINUX http://httpserver/path/to/extracted/Arch/ISO/arch/boot/x86_64/vmlinuz-linux\n        INITRD http://httpserver/path/to/extracted/Arch/ISO/arch/boot/x86_64/initramfs-linux.img\n        APPEND archisobasedir=arch archiso_http_srv=http://httpserver/path/to/extracted/Arch/ISO/ cms_verify=y\n        SYSAPPEND 3\n        TEXT HELP\n        Arch Linux 2022.10.01 x86_64\n        ENDTEXT\n```\n\nNFS および NBD では、カーネルと initramfs を TFTP からダウンロードする必要があります。例：NFS の場合：\n\n```\nLABEL archlinux\n        MENU LABEL Arch Linux x86_64\n        LINUX /path/to/extracted/Arch/ISO/arch/boot/x86_64/vmlinuz-linux\n        INITRD /path/to/extracted/Arch/ISO/arch/boot/x86_64/initramfs-linux.img\n        APPEND archisobasedir=arch archiso_nfs_srv=pxeserver:/run/archiso/bootmnt cms_verify=y\n        SYSAPPEND 3\n        TEXT HELP\n        Arch Linux 2022.10.01 x86_64\n        ENDTEXT\n```\n\nLINUX と INITRD のパスは TFTP ルートに対する相対パスです。NBD の場合は、上記の例で archiso_nfs_srv を archiso_nbd_srv に置き換えます。使用例は Arch Linux ISO にある boot/syslinux/archiso_pxe.cfg ファイルを参照してください。\n\nどの方法を選択するにしても、カーネルにネットワークインターフェースを起動させてからインストールメディアをネットワーク越しにマウントするよう指示するために、ip= パラメーターを渡す必要があります。クライアント側に複数の有線インターフェースがある場合や、ブートされた archiso 内で resolv.conf を既に設定済みにしたい場合は、BOOTIF= を渡す必要があります。これらのパラメーターを自動的に渡すには、sysappend マスク 3 (これは 1+2 です) を使用できます。利用可能なブートパラメーターについては、README.bootparams を参照してください。\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "クライアントに PXE ブートを行うように伝える方法を知る必要があります。通常のポストメッセージに加えて、大抵は画面の端に PXE ブートをするにはどのキーを押せばいいのかのヒントが表示されます。IBM x3650 の場合 F12 でブートメニューが表示され、一番最初のオプションが Network です。Dell PE 1950/2950 では F12 を押すと直接 PXE ブートが開始されます。\n\n"
    },
    {
      "title": "起動",
      "level": 3,
      "content": "PXE サーバーで journald を確認することで、PXE のブートプロセスの初期段階で実際に何が起こっているのか情報を得ることができます:\n\n```\n# journalctl -u dnsmasq -f\n```\n\n```\ndnsmasq-dhcp[2544]: DHCPDISCOVER(eth1) 00:1a:64:6a:a2:4d \ndnsmasq-dhcp[2544]: DHCPOFFER(eth1) 192.168.0.110 00:1a:64:6a:a2:4d \ndnsmasq-dhcp[2544]: DHCPREQUEST(eth1) 192.168.0.110 00:1a:64:6a:a2:4d \ndnsmasq-dhcp[2544]: DHCPACK(eth1) 192.168.0.110 00:1a:64:6a:a2:4d \ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/pxelinux.0 to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/whichsys.c32 to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_pxe_choose.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/ifcpu64.c32 to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_pxe_both_inc.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_head.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_pxe32.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_pxe64.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/archiso_tail.cfg to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/vesamenu.c32 to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/syslinux/splash.png to 192.168.0.110\n```\n\nTFTP で pxelinux.0 と archiso.cfg をロードした後、(上手く行けば) syslinux のブートメニューが表示され複数のオプションが提示されます。Boot Arch Linux (x86_64) (HTTP) を選択してください。\n\n次にカーネルと initramfs が、また TFTP によって転送されます:\n\n```\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/x86_64/vmlinuz to 192.168.0.110\ndnsmasq-tftp[2544]: sent /mnt/archiso/arch/boot/x86_64/archiso.img to 192.168.0.110\n```\n\n順調に行けば、PXE ターゲットから来る darkhttpd の活動を見ることができます。この段階でカーネルは PXE のターゲットマシンでロードされ、そして init に移ります:\n\n```\n1348347586 192.168.0.110 \"GET /arch/aitab\" 200 678 \"\" \"curl/7.27.0\"\n1348347587 192.168.0.110 \"GET /arch/x86_64/root-image.fs.sfs\" 200 107860206 \"\" \"curl/7.27.0\"\n1348347588 192.168.0.110 \"GET /arch/x86_64/usr-lib-modules.fs.sfs\" 200 36819181 \"\" \"curl/7.27.0\"\n1348347588 192.168.0.110 \"GET /arch/any/usr-share.fs.sfs\" 200 63693037 \"\" \"curl/7.27.0\"\n```\n\nHTTP で root ファイルシステムがダウンロードされた後、通常のライブ環境の zsh プロンプトが現れます。\n\n"
    },
    {
      "title": "起動後",
      "level": 3,
      "content": "全てのトラフィックを PXE サーバーに通したいのでなければ (正しく設定をしていないと動作しません)、dnsmasq.service を停止してインストール先で新しいリースを取得するのがネットワークレイアウトに適当でしょう。 darkhttpd も終了させてかまいません。ターゲットは既に root ファイルシステムをダウンロードしているため、もう必要ありません。ついでに、インストールイメージをアンマウントすることもできます:\n\n```\n# umount /mnt/archiso\n```\n\nここまで来たら、後は公式のインストールガイドに従って下さい。\n\n"
    },
    {
      "title": "メモリの少ないシステム",
      "level": 3,
      "content": "copytoram initramfs オプションを使用して、ルートファイルシステム全体を初期ブート時に RAM にコピーするかどうかを制御できます。\n\nこのオプションはそのままにしておくことを強くお勧めしますが、どうしても必要な場合（物理メモリが約256MB未満のシステム）にのみ無効にする必要があります。これを行う場合は、カーネル行に copytoram=n を追加します。\n\n"
    },
    {
      "title": "PXE クライアントとのインターネット共有",
      "level": 3,
      "content": "PXE クライアントのネットワークがプライベート（例えば、192.168.1.0/24）の場合、インターネットにアクセスできるようにするためには（例えば、パッケージのインストールのために）、適切にマスカレード/ソース NAT を設定する必要があります。PXE サーバーはインターネットに接続された別の NIC を持っている必要があります。以下のコマンドを使用して、クライアントにインターネットを通過させることができます：\n\n```\niptables -t nat -A POSTROUTING -s 192.168.1.0/24 -j MASQUERADE\n```\n\nこのルールを再起動後も持続させるために、次のコマンドを実行します：\n\n```\niptables-save -f /etc/iptables/iptables.rules\n```\n\nそして iptables.service を有効にします。\n\n詳細については、シンプルなステートフルファイアウォール#NAT ゲートウェイの設定 および インターネット共有#NAT の有効化 を参照してください。\n\n"
    },
    {
      "title": "DHCP インターフェースリネームバグ",
      "level": 3,
      "content": "FS#36749 により、デフォルトの 予測可能なネットワークインターフェース名の変更 が失敗し、それにより DHCP クライアントが失敗します。この問題を回避するには、カーネルブートパラメータ net.ifnames=0 を追加して予測可能なインターフェース名を無効にします。\n\n"
    },
    {
      "title": "仮想マシンではブートできるが実マシンではできない",
      "level": 3,
      "content": "構成をテストするために VirtualBox を使用している場合、仮想マシンが以下のメッセージで停止することがあります：\n\n```\nProbing EDD (edd=off to disable)... ok\n```\n\n一方、実マシンでの PXE ブートは正常に動作します。この問題は、クライアントマシンに複数の CPU コアを設定し、そのタイプを Other、バージョンを Other/Unknown (64 bit) に設定しているためかもしれません。そのため、VirtualBox はデフォルトでどのパラバーチャライゼーションインターフェースを使用するか分かりません。\n\nカーネルパラメータ に loglevel=7 を追加すると、実際にどこで停止したかを見ることができます：\n\n```\n[    0.063697] smp: Bringing up secondary CPUs...\n[    0.103768] x86: Booting SMP configuration:\n```\n\nこれを解決するには、1 つの CPU コアを使用するか、Machine > Settings > System > Acceleration に移動して、Minimal、Hyper-V、または KVM のいずれかのパラバーチャライゼーションインターフェースを設定します。\n\n"
    }
  ]
}