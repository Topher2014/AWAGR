{
  "title": "Desktop entries (日本語)",
  "url": "https://wiki.archlinux.org/title/Desktop_entries_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "XDG デスクトップエントリ仕様は、XDG Desktop Menu 仕様を実装しているデスクトップ環境のアプリケーションメニューにアプリケーションを統合するための規格です。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 基本\n- 2 アプリケーションエントリ 2.1 ファイル例 2.2 キーの定義 2.3 検証 2.4 インストール 2.5 デスクトップエントリデータベースの更新\n- 3 アイコン 3.1 一般的な画像フォーマット 3.2 アイコンの変換 3.3 アイコンの取得 3.4 アイコンのパス\n- 4 ツール 4.1 Arronax 4.2 Alacarte 4.3 jdDesktopEntryEdit 4.4 gendesk 4.4.1 使用法 4.5 lsdesktopf 4.6 fbrokendesktop\n- 5 ヒントとテクニック 5.1 ターミナルから desktop ファイルを実行する 5.2 desktop ファイルの変更 5.2.1 環境変数の変更 5.2.2 コマンドライン引数の変更 5.2.3 デスクトップエントリの隠匿\n- 6 参照\n\n- 2.1 ファイル例\n- 2.2 キーの定義\n- 2.3 検証\n- 2.4 インストール\n- 2.5 デスクトップエントリデータベースの更新\n\n- 3.1 一般的な画像フォーマット\n- 3.2 アイコンの変換\n- 3.3 アイコンの取得\n- 3.4 アイコンのパス\n\n- 4.1 Arronax\n- 4.2 Alacarte\n- 4.3 jdDesktopEntryEdit\n- 4.4 gendesk 4.4.1 使用法\n- 4.5 lsdesktopf\n- 4.6 fbrokendesktop\n\n- 4.4.1 使用法\n\n- 5.1 ターミナルから desktop ファイルを実行する\n- 5.2 desktop ファイルの変更 5.2.1 環境変数の変更 5.2.2 コマンドライン引数の変更 5.2.3 デスクトップエントリの隠匿\n\n- 5.2.1 環境変数の変更\n- 5.2.2 コマンドライン引数の変更\n- 5.2.3 デスクトップエントリの隠匿\n\n"
    },
    {
      "title": "基本",
      "level": 2,
      "content": "デスクトップエントリには、1つの Type キーと1つの Name キーが含まれていなければなりません。オプションで、アプリケーションメニューでの見た目を定義することができます。\n\nType に指定できるタイプは3つあります:\n\n以下のセクションでは、これらのエントリの作成や検証の方法について大まかに説明します。\n\n"
    },
    {
      "title": "アプリケーションエントリ",
      "level": 2,
      "content": "アプリケーションのデスクトップエントリ (.desktop ファイル) は、基本的にメタ情報リソースの集合であり、アプリケーションのショートカットです。通常、これらのファイルは、システム全体でインストールしたアプリケーションなら /usr/share/applications か /usr/local/share/applications に、ユーザ固有のアプリケーションなら ~/.local/share/applications に入っています。ユーザーのエントリはシステムのエントリよりも優先されます。\n\n"
    },
    {
      "title": "ファイル例",
      "level": 3,
      "content": "以下は、コメントを追加したデスクトップエントリの構成のサンプルです。このサンプルは雰囲気を伝えるだけのものであり、利用可能なエントリキー全ての使い方を示してはいません。完全なキーのリストは freedesktop 仕様 を見てください。\n\n```\n[Desktop Entry]\n\n# 前の章でリストアップしたタイプ\nType=Application\n\n# このファイルが準拠しているデスクトップエントリ仕様のバージョン\nVersion=1.0\n\n# アプリケーションの名前\nName=jMemorize\n\n# ツールチップとして利用できる/されるコメント\nComment=Flash card based learning tool\n\n# 実行ファイルが存在するフォルダへのパス\nPath=/opt/jmemorise\n\n# アプリケーションの実行可能ファイル。引数を付けることができます。\nExec=jmemorize\n\n# エントリを表示するときに使われるアイコンの名前\nIcon=jmemorize\n\n# アプリケーションをターミナルで実行する必要があるかどうかを記述\nTerminal=false\n\n# このエントリをどのカテゴリで表示すべきかを記述\nCategories=Education;Languages;Java;\n```\n\n"
    },
    {
      "title": "キーの定義",
      "level": 3,
      "content": "freedesktop のサイトに、認識される全てのデスクトップエントリが記載されています。 例えば、Type キーは3つのタイプのデスクトップエントリを定義します: アプリケーション (Application, タイプ1), リンク (Link, タイプ2), ディレクトリ (Directory, タイプ3)。\n\n- Version キーはアプリケーションのバージョンを表すものではなく、デスクトップエントリが準拠しているデスクトップエントリ規格のバージョンを指定します。\n\n- Name, GenericName, Comment はしばしば以下のように同じような値が使われることがありますが:\n\n```\nName=Pidgin Internet Messenger\nGenericName=Internet Messenger\n```\n\nまたは:\n\n```\nName=NoteCase notes manager\nComment=Notes Manager\n```\n\n上記のような設定はユーザーを混乱させるだけなので避けるべきです。Name キーにはアプリケーションの名前 (あるいはその省略語や頭字語) だけを書いてください。\n\n- GenericName にはアプリケーションがどのようなものなのかを示す名称を指定するべきです (例えば Firefox なら \"Web Browser\")。\n- Comment には何らかの追加情報を記入することを意図しています。\n\n"
    },
    {
      "title": "検証",
      "level": 3,
      "content": "いくつかのキーは非推奨となっているので、desktop-file-validate(1) を使ってデスクトップエントリを検証する必要があるかもしれません。このツールは desktop-file-utils パッケージに含まれています。エントリを検証するには、以下を実行してください:\n\n```\n$ desktop-file-validate <デスクトップファイル>\n```\n\n上記のコマンドで詳細かつ有用な警告・エラーメッセージが表示されます。\n\n"
    },
    {
      "title": "インストール",
      "level": 3,
      "content": "対象のディレクトリに desktop ファイルをインストールするには、desktop-file-install(1) を使ってください。例えば:\n\n```\n$ desktop-file-install --dir=$HOME/.local/share/applications ~/app.desktop\n```\n\n"
    },
    {
      "title": "デスクトップエントリデータベースの更新",
      "level": 3,
      "content": "~/.local/share/applications で定義されているデスクトップエントリを機能させるには、以下のコマンドを実行してください:\n\n```\n$ update-desktop-database ~/.local/share/applications\n```\n\n"
    },
    {
      "title": "アイコン",
      "level": 2,
      "content": "Icon Theme Specification も参照してください。\n\n"
    },
    {
      "title": "一般的な画像フォーマット",
      "level": 3,
      "content": "以下はアイコンとしてよく使われている画像フォーマットの簡単な概要です。\n\nTable content:\n拡張子 | フルネームまたは説明 | グラフィック形式 | コンテナフォーマット | サポート\n.png | Portable Network Graphics | ラスタ | No | Yes\n.svg(z) | Scalable Vector Graphics | ベクタ | No | Yes (オプション)\n.xpm | X PixMap | ラスタ | No | Yes (非推奨)\n.gif | Graphics Interchange Format | ラスタ | No | No\n.ico | MS Windows Icon Format | ラスタ | Yes | No\n.icns | Apple Icon Image | ラスタ | Yes | No\n\n"
    },
    {
      "title": "アイコンの変換",
      "level": 3,
      "content": "(gif や ico など) freedesktop.org の仕様でサポートされていないフォーマットのアイコンしか見つからなかった場合、convert ツールでサポート/推奨されているフォーマットに変換できます (convert は imagemagick パッケージに含まれています):\n\n```\n$ convert <アイコン名>.gif <アイコン名>.png\n```\n\nico などのコンテナフォーマットから変換した場合、<icon name>-<number>.png という名前で ico ファイルにカプセル化されていた画像が取得できます。画像のサイズや ico などのコンテナに含まれている画像の数を調べたいときは (imagemagick パッケージに含まれている) identify を使います:\n\n```\n$ identify /usr/share/vlc/vlc48x48.ico\n```\n\n```\n/usr/share/vlc/vlc48x48.ico[0] ICO 32x32 32x32+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[1] ICO 16x16 16x16+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[2] ICO 128x128 128x128+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[3] ICO 48x48 48x48+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[4] ICO 32x32 32x32+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[5] ICO 16x16 16x16+0+0 8-bit DirectClass 84.3kb\n```\n\n上記の ico ファイルでは、ファイル名からは 48x48 の画像しか含まれていないように見えますが、実は6つのサイズの画像が含まれていて、中には 48x48 よりも大きな 128x128 の画像もあります。\n\nあるいは、icotool (icoutils にあり) を使って ico コンテナから png イメージを抽出できます:\n\n```\n$ icotool -x <icon name>.ico\n```\n\n.icns コンテナからイメージを展開する場合、icns2png (libicns により提供) を使うことができます:\n\n```\n$ icns2png -x <icon name>.icns\n```\n\n"
    },
    {
      "title": "アイコンの取得",
      "level": 3,
      "content": "大抵 .desktop ファイルが付属しているパッケージにはアイコンが含まれていますが、アイコンは存在するのに .desktop ファイルが開発者によって作られていない場合もあります。まずはソースパッケージの中にアイコンが存在しないか確認すると良いでしょう。 ソースパッケージの中に大量の画像が存在するときは、find を使って拡張子でファイルを絞り込んで、それから grep を使ってパッケージ名や \"icon\" あるいは \"logo\" などのキーワードで検索をかけましょう:\n\n```\n$ find /path/to/source/package -regex \".*\\.\\(svg\\|png\\|xpm\\|gif\\|ico\\)$\"\n```\n\nアプリケーションの開発者がソースパッケージにアイコンを含めていないときは、アプリケーションのウェブサイトを検索しましょう。tvbrowserAUR など、プロジェクトによってはウェブサイトに アートワーク/ロゴのページ が存在しアイコンをダウンロードすることができます。プロジェクトがマルチプラットフォームの場合、Linux/UNIX パッケージにアイコンが付属していなくても、Windows パッケージには存在する可能性があります。プロジェクトが CVS や SVN などのバージョン管理システムを使用している場合、リポジトリにアイコンが存在しないか確認してください。 どうやっても見つからないのであれば、プロジェクトにまだアイコンやロゴがないのかもしれません。\n\n"
    },
    {
      "title": "アイコンのパス",
      "level": 3,
      "content": "freedesktop.org 仕様は、プログラムがアイコンを探索するディレクトリと、探索する順番を規定しています:\n\n1. $HOME/.icons (後方互換性のため)\n1. $XDG_DATA_DIRS/icons\n1. /usr/share/pixmaps\n\n"
    },
    {
      "title": "Arronax",
      "level": 3,
      "content": "Arronax は、アプリケーションやショートカットのデスクトップエントリを作成/変更するためのグラフィカルなプログラムです。使用するには arronaxAUR をインストールしてください。\n\n"
    },
    {
      "title": "Alacarte",
      "level": 3,
      "content": "alacarte は GNOME のためのグラフィカルなメニューエディタで、freedesktop.org のメニュー仕様を使用します。デスクトップエントリのオーバーライドもサポートしています。\n\n"
    },
    {
      "title": "jdDesktopEntryEdit",
      "level": 3,
      "content": "jddesktopentryeditAUR は、デスクトップエントリを編集するための、Qt を使用するグラフィカルプログラムです。\n\n"
    },
    {
      "title": "gendesk",
      "level": 3,
      "content": "gendesk は PKGBUILD ファイルから直接情報を取得して .desktop ファイルを生成する Arch Linux 専用のツールとして開発がスタートしました。今ではコマンドライン引数を使用する汎用のツールとなっています。\n\nアイコンは openiconlibrary から自動的にダウンロードすることが可能です (アイコンのソースは将来変更される可能性があります)。\n\n"
    },
    {
      "title": "使用法",
      "level": 4,
      "content": "- gendesk を makedepends に追加\n\n- prepare() 関数に以下を記入:\n\n```\ngendesk --pkgname \"$pkgname\" --pkgdesc \"$pkgdesc\"\n```\n\n- もしくは、アイコンが既に含まれている場合 (例: $pkgname.png)、アイコンをダウンロードしない、あるいはデフォルトのアイコンを使うために -n フラグを使います。例:\n\n```\ngendesk -n --pkgname \"$pkgname\" --pkgdesc \"$pkgdesc\"\n```\n\n- 作成された $srcdir/$pkgname.desktop は package() 関数でインストールします:\n\n```\ninstall -Dm644 \"$pkgname.desktop\" \"$pkgdir/usr/share/applications/$pkgname.desktop\"\n```\n\n- アイコンをインストールするには:\n\n```\ninstall -Dm644 \"$pkgname.png\" \"$pkgdir/usr/share/pixmaps/$pkgname.png\"\n```\n\n- --name='Program Name' でメニューエントリの名前を決めることができます。\n\n- --exec='/opt/some_app/elf --with-ponies' で exec フィールドを設定することができます。\n\n- 詳しくは gendesk プロジェクト を参照。\n\n"
    },
    {
      "title": "lsdesktopf",
      "level": 3,
      "content": "lsdesktopfAUR は、利用可能な .desktop ファイルを一覧表示したり、エントリの内容を検索したりできます。\n\n```\n$ lsdesktopf\n$ lsdesktopf --list\n$ lsdesktopf --list gtk zh_TW,zh_CN,en_GB\n```\n\nMIME タイプ関連の検索を行うこともできます。XDG MIME Applications#lsdesktopf を見てください。\n\n"
    },
    {
      "title": "fbrokendesktop",
      "level": 3,
      "content": "fbrokendesktopAUR Bash スクリプトは、既存のパスを指していない壊れた Exec の値を検出します。パラメータを指定しなかった場合、fbrokendesktop は DskPath 配列のプリセットフォルダを使います。破損している .desktop だけを完全なパスとファイル名と共に表示します。\n\n例:\n\n```\n$ fbrokendesktop\n$ fbrokendesktop /usr\n$ fbrokendesktop /usr/share/xsessions/icewm.desktop\n```\n\n"
    },
    {
      "title": "ターミナルから desktop ファイルを実行する",
      "level": 3,
      "content": "gtk3 がインストールされている場合、gtk-launch application.desktop と実行してください。\n\nあるいは、dex パッケージをインストールして、dex /path/to/application.desktop と実行してください。\n\n"
    },
    {
      "title": "desktop ファイルの変更",
      "level": 3,
      "content": "システム全体で使用される .desktop ファイル (例えば、パッケージからインストールしたもの) を変更したい場合、まず関連する .desktop ファイルを $XDG_DATA_HOME/applications/ にコピーしてください (例えば、/usr/share/applications/ から ~/.local/share/applications/ へ)。こうすることで、システムのアップグレードの際に対象のパッケージがアップデートされても、あなたが加えた変更が上書きされることはありません。ローカルのユーザ固有の .desktop ファイルは、自動的にシステム全体の .desktop ファイルよりも優先されるはずです。これで、必要に応じてローカルのユーザ固有の .desktop ファイルを変更できます。\n\n- デスクトップエントリファイルを $XDG_CONFIG_HOME/autostart/ から $XDG_DATA_HOME/applications に移動する。\n- ls -l を使って、このデスクトップエントリが編集可能な通常のファイルであり、システム関連の場所へのリンクでないことを確認する。リンクである場合は、上記で説明したように元のファイルのコピーに入れ替える。\n- ユーザアプリケーションディレクトリ (内のデスクトップエントリ) へのシンボリックリンクを作成する (便宜上、デフォルトの XDG ディレクトリに置き換えています):\n\n```\nln -s ~/.local/share/applications/desktop_entry ~/.config/autostart/\n```\n\nこれで、アプリケーションランチャー内のファイルは、自動起動させるファイルと同じになります。\n\n"
    },
    {
      "title": "環境変数の変更",
      "level": 4,
      "content": "環境変数を設定するには、env(1) コマンドで環境変数を設定するように .desktop ファイル内の Exec= 行を編集してください。例えば (元の行はコメントアウトされています):\n\n```\n~/.local/share/applications/abiword.desktop\n```\n\n```\n...\n# Exec=abiword %U\nExec=env LANG=he_IL.UTF-8 abiword %U\n...\n```\n\n"
    },
    {
      "title": "コマンドライン引数の変更",
      "level": 4,
      "content": "コマンドライン引数を変更または追加するには、Exec= 行を編集し、オプションを追加してください。例 (元の行はコメントアウトされています):\n\n```\n~/.local/share/applications/steam.desktop\n```\n\n```\n...\n# Exec=/usr/bin/steam-runtime %U\nExec=/usr/bin/steam-runtime -no-browser %U\n...\n```\n\n"
    },
    {
      "title": "デスクトップエントリの隠匿",
      "level": 4,
      "content": "デスクトップエントリの可視性は、複数の方法で制御できます。詳細は Desktop Entry Specification を見てください。以下の内容のうち1つを .desktop ファイルに追加してください:\n\n- 全てのデスクトップ環境に適用。以下のうち1つ (あるいは両方) を選んでください: メニューに表示したくないアプリケーションに対して NoDisplay=true 行を追加する。 削除済みでありメニューに表示したくないアプリケーションに対して Hidden=true 行を追加する。\n- デスクトップ環境を指定。以下のうち1つを選んでください。desktop_names の部分はデスクトップ環境のリストであり、セミコロンで区切ってください (例: GNOME, GNOME;Xfce;KDE;): NotShowIn=desktop_names 行を追加すると、指定したデスクトップ環境でエントリを隠します。 OnlyShowIn=desktop_names 行を追加すると、指定したデスクトップ環境でのみエントリを表示します。\n\n- メニューに表示したくないアプリケーションに対して NoDisplay=true 行を追加する。\n- 削除済みでありメニューに表示したくないアプリケーションに対して Hidden=true 行を追加する。\n\n- NotShowIn=desktop_names 行を追加すると、指定したデスクトップ環境でエントリを隠します。\n- OnlyShowIn=desktop_names 行を追加すると、指定したデスクトップ環境でのみエントリを表示します。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Wikipedia:.desktop\n- 開発者向けの情報\n\n"
    }
  ]
}