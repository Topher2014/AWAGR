{
  "title": "Xen (日本語)",
  "url": "https://wiki.archlinux.org/title/Xen_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ハイパーバイザ\n- 既存環境を仮想マシンに (から) 移動\n\nXen Overview より:\n\nXen ハイパーバイザは同時に複数のオペレーティングシステムを動作できるようにコンピュータアーキテクチャをエミュレートする薄いソフトウェアレイヤーです。ハイパーバイザはインストールされているコンピュータのブートローダーによって起動します。ハイパーバイザがロードされると、dom0 (\"domain 0\" の略で、ホストまたは特権ドメインとも呼ばれます) が起動して Arch Linux が走ります。dom0 が起動したら、dom0 から一つまたは複数の domU (ユーザードメインの略で、VM またはゲストとも呼ばれます) を起動・制御することができます。Xen は準仮想化 (PV) とハードウェア仮想化 (HVM) 両方の domU をサポートしています。詳しくは Xen.org を見て下さい。\n\nXen ハイパーバイザーは、基本オペレーティングシステムのフルインストールに依存しています。Xen ハイパーバイザーをインストールする前に、ホストマシンに完全に動作する最新の Arch Linux がインストールされている必要があります。このインストールは、基本パッケージのみを使用した最小限のインストールであり、デスクトップ環境 や Xorg さえも必要としません。\n\n新しいホストを最初から構築する場合は、Arch Linux のインストール手順について インストールガイド を参照してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 システム要件 1.2 Xen ハイパーバイザのインストール 1.2.1 Xen をビルド 1.3 ブートローダーの修正 1.3.1 UEFI 1.3.1.1 systemd-boot 1.3.1.2 EFISTUB 1.3.2 BIOS 1.3.2.1 GRUB 1.3.2.1.1 ゲストを起動するための GRUB イメージの構築 1.3.2.2 Syslinux 1.4 ネットワークブリッジの作成 1.4.1 Systemd-networkd 1.4.2 Network Manager 1.5 Xen の systemd サービスのインストール 1.6 インストールが成功したか確認 1.7 ベストプラクティス設定\n- 2 Xen を使う 2.1 domU \"ハードディスク\"の作成 2.2 domU 設定の作成 2.3 domU の管理\n- 3 ハードウェア仮想化 (HVM) Arch domU の設定\n- 4 準仮想化 (PV) Arch domU の設定\n- 5 トラブルシューティング 5.1 \"xl list\" で libxl に関するエラーメッセージが表示される 5.2 \"xl create\" が失敗する 5.3 HVM の作成に失敗する 5.4 Arch Linux ゲストが ctrl-d メッセージでフリーズする 5.5 エラーメッセージ \"failed to execute '/usr/lib/udev/socket:/org/xen/xend/udev_event' 'socket:/org/xen/xend/udev_event': No such file or directory\"\n- 6 参照\n\n- 1.1 システム要件\n- 1.2 Xen ハイパーバイザのインストール 1.2.1 Xen をビルド\n- 1.3 ブートローダーの修正 1.3.1 UEFI 1.3.1.1 systemd-boot 1.3.1.2 EFISTUB 1.3.2 BIOS 1.3.2.1 GRUB 1.3.2.1.1 ゲストを起動するための GRUB イメージの構築 1.3.2.2 Syslinux\n- 1.4 ネットワークブリッジの作成 1.4.1 Systemd-networkd 1.4.2 Network Manager\n- 1.5 Xen の systemd サービスのインストール\n- 1.6 インストールが成功したか確認\n- 1.7 ベストプラクティス設定\n\n- 1.2.1 Xen をビルド\n\n- 1.3.1 UEFI 1.3.1.1 systemd-boot 1.3.1.2 EFISTUB\n- 1.3.2 BIOS 1.3.2.1 GRUB 1.3.2.1.1 ゲストを起動するための GRUB イメージの構築 1.3.2.2 Syslinux\n\n- 1.3.1.1 systemd-boot\n- 1.3.1.2 EFISTUB\n\n- 1.3.2.1 GRUB 1.3.2.1.1 ゲストを起動するための GRUB イメージの構築\n- 1.3.2.2 Syslinux\n\n- 1.3.2.1.1 ゲストを起動するための GRUB イメージの構築\n\n- 1.4.1 Systemd-networkd\n- 1.4.2 Network Manager\n\n- 2.1 domU \"ハードディスク\"の作成\n- 2.2 domU 設定の作成\n- 2.3 domU の管理\n\n- 5.1 \"xl list\" で libxl に関するエラーメッセージが表示される\n- 5.2 \"xl create\" が失敗する\n- 5.3 HVM の作成に失敗する\n- 5.4 Arch Linux ゲストが ctrl-d メッセージでフリーズする\n- 5.5 エラーメッセージ \"failed to execute '/usr/lib/udev/socket:/org/xen/xend/udev_event' 'socket:/org/xen/xend/udev_event': No such file or directory\"\n\n"
    },
    {
      "title": "システム要件",
      "level": 3,
      "content": "Xen ハイパーバイザは最新の Linux カーネルに含まれている、カーネルレベルのサポートを必要としており、Arch のカーネルパッケージである linux と linux-lts にも組み込まれています。HVM の domU を動かすには、Intel VT-x または AMD-V (SVM) どちらかの仮想化サポートが搭載された物理ハードウェアが必要です。これを確認するために、Xen ハイパーバイザが動作していないときに次のコマンドを実行してください:\n\n```\n$ grep -E \"(vmx|svm)\" --color=always /proc/cpuinfo\n```\n\n上のコマンドで何も出力がされない場合、ハードウェア仮想化のサポートが利用できません。あなたのハードウェアでは HVM domU を実行することは不可能です (または Xen ハイパーバイザが実行中です)。CPU がハードウェア仮想化の機能をサポートしているという自信がある場合はブートプロセスの間にホストシステムの BIOS 設定メニューにアクセスして、仮想化サポートに関連するオプションが無効になっていないか確認してください。そのようなオプションが存在していて無効になっていたときは、有効にして、システムを再起動してからもう一度上のコマンドを実行してください。Xen ハイパーバイザは PCI パススルーもサポートしており、デバイスが dom0 をサポートしていないときでも PCI デバイスを直接 domU に引き渡すことができます。PCI パススルーを使用するには、CPU が IOMMU/VT-d をサポートしていなければなりません。\n\n"
    },
    {
      "title": "Xen ハイパーバイザのインストール",
      "level": 3,
      "content": "Xen ハイパーバイザをインストールするには xenAUR パッケージをインストールしてください。どちらのパッケージにも Xen ハイパーバイザ、最新の xl インターフェイスと設定・サポートファイル、systemd サービスが含まれています。Xen をコンパイル・インストールするには multilib リポジトリを有効にして multilib-devel パッケージグループをインストールする必要があります。man ページやドキュメントが必要なときは xen-docsAUR パッケージをインストールしてください。\n\nBIOS や UEFI を使って仮想マシンを起動するにはそれぞれ seabios または ovmf[リンク切れ: 置換パッケージ: edk2-ovmf] パッケージをインストールする必要があります。\n\n"
    },
    {
      "title": "Xen をビルド",
      "level": 4,
      "content": "xen とそのコンポーネントは、VM または chroot のクリーンな環境にビルドすることをお勧めします。Xen をビルドする場合、makepkg に渡すことができる環境変数があります。\n\n1. build_stubdom -- Xen スタブドムを実行するためのコンポーネントをビルドします。主に dom0 disaggregation 用です。 ビルドする stubdom 用のコンポーネントは xen-stubdom に分割されます。デフォルトは false です。\n1. boot_dir -- ブートディレクトリです。デフォルトは /boot です。\n1. efi_dir, efi_mountpoint -- EFI ディレクトリとマウントポイント。デフォルトは /boot です。\n\nこれらの引数を変数として makepkg に渡します:\n\n```\n$ build_stubdom=true efi_dir=\"/boot/EFI\" makepkg\n```\n\nxen-docsAUR もマニュアルページとドキュメント用にビルドされます。スタブダムサポートをビルドすることを選択した場合、xen-stubdom パッケージがビルドされます。\n\n"
    },
    {
      "title": "ブートローダーの修正",
      "level": 3,
      "content": "通常のカーネルを起動するのに使われているブートローダーを、特殊な Xen カーネル (xen.gz または UEFI の場合 xen.efi) をロードするように修正しなくてはなりません。このために新しいブートローダーエントリが必要になります。\n\n"
    },
    {
      "title": "UEFI",
      "level": 4,
      "content": "Xen は、Xen EFI システム で指定されている UEFI からのブートをサポートしています。efibootmgr を使用してブート順序やその他のパラメーターを設定する必要がある場合もあります。\n\nまず、xen.efi ファイルがカーネルファイルおよび RAM ディスク ファイルとともに EFI システムパーティション に存在することを確認します。\n\n次に、Xen には、どのカーネルを dom0 として起動するかを指定する ASCII (UTF-8、UTC-16 などは不可) 設定ファイルが必要です。このファイルは、バイナリと同じ EFI システムパーティション に配置する必要があります。Xen はいくつかの設定ファイルを検索し、最初に見つかった設定ファイルを使用します。検索順序は、バイナリ名の拡張子 .efi が .cfg に置き換えられることから始まり、一致するものが見つかるまで、末尾の名前コンポーネント .、- および _ が削除されます。通常、xen.cfg という名前の単一ファイルが、次のようなシステム要件とともに使用されます。\n\n```\nxen.cfg\n```\n\n```\n[global]\ndefault=xen\n\n[xen]\noptions=console=vga iommu=force:true,qinval:true,debug:true loglvl=all noreboot=true reboot=no vga=ask ucode=scan\nkernel=vmlinuz-linux root=/dev/sdaX rw add_efi_memmap #earlyprintk=xen\nramdisk=initramfs-linux.img\n```\n\n新しい EFI タイプのローダーエントリを追加します。詳細については、systemd-boot#EFI シェルや他の EFI アプリ を参照してください。例えば:\n\n```\n/boot/loader/entries/10-xen.conf\n```\n\n```\ntitle   Xen Hypervisor\nefi     /xen.efi\n```\n\nEFISTUB を使用して、UEFI から直接 EFI カーネルをブートすることができます。\n\nビルドインの UEFI シェル にドロップし、EFIファイルを直接呼び出します。例えば:\n\n```\nShell> fs0:\nFS0:\\> xen.efi\n```\n\n上で概説したように、EFI システムパーティション 内の xen.cfg 構成ファイルが依然として必要であることに注意してください。さらに、-cfg=file.cfg パラメータを使用して別の構成ファイルを指定することもできます。例えば:\n\n```\nShell> fs0:\nFS0:\\> xen.efi -cfg=xen-rescue.cfg\n```\n\nこれらの追加設定ファイルは、Xen EFI バイナリファイルおよび Linux スタブファイルと同じディレクトリに存在する必要があります。\n\n"
    },
    {
      "title": "BIOS",
      "level": 4,
      "content": "Xen は、BIOS として設定されたシステムファームウェアからの起動をサポートしています。\n\nGRUB ユーザーの場合は、dom0 の起動と PvGrub2 イメージのビルドのために grub-xen-gitAUR パッケージをインストールしますユーザードメインを起動するため。\n\nファイル /etc/default/grub を編集して、Xen ブートコマンドをカスタマイズできます。たとえば、起動時に 512 MiB の RAM を dom0 に割り当てるには、次の行を置き換えて /etc/default/grub を変更します:\n\n```\n#GRUB_CMDLINE_XEN_DEFAULT=\"\"\n```\n\nそれと\n\n```\nGRUB_CMDLINE_XEN_DEFAULT=\"dom0_mem=512M\"\n```\n\nXen の GRUB 設定キーの詳細については、GRUB ドキュメント を参照してください。\n\nオプションをカスタマイズした後、次のコマンドを使用してブートローダー設定を更新します:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\nGRUB ブートローダーの使用方法の詳細については、GRUB を参照してください。\n\n通常のプラットフォームターゲットに加えて、grub-xen-gitAUR パッケージは、Xen ゲストの起動に使用できる 3 つの追加ターゲット用の GRUB をビルドします: i386-xen、i386-xen_pvh、および x86_64-xen これらのターゲットのいずれかからブートイメージを作成するには、まず GRUB 設定ファイルを作成します。好みに応じて、このファイルはゲスト内の GRUB 設定ファイルを見つけてロードすることも、dom0 からのブートプロセスの詳細を管理することもできます。必要なのはゲスト内の設定ファイルを見つけてロードすることだけであると仮定して、次のコードをファイルに追加します。\n\n```\ngrub.cfg\n```\n\n```\nsearch -s root -f /boot/grub/grub.cfg\nconfigfile /boot/grub/grub.cfg\n```\n\n次に、そのファイルを組み込む GRUB スタンドアロン イメージを作成します。\n\n```\n# grub-mkstandalone -O x86_64-xen -o /usr/lib/xen/boot/pv-grub2-x86_64-xen \"/boot/grub/grub.cfg=./grub.cfg\"\n```\n\n最後に、そのイメージを domU 設定ファイル内のカーネルの値として追加します (この例では 64 ビットゲストの場合):\n\n```\nkernel = \"/usr/lib/xen/boot/pv-grub2-x86_64-xen\"\n```\n\nGRUB ゲスト用に GRUB イメージを設定するその他の例は、Xen プロジェクトの PvGrub2 ドキュメント にあります。\n\nSyslinux を使っている場合、以下のような記述を /boot/syslinux/syslinux.cfg に追加してください:\n\n```\nLABEL xen\n    MENU LABEL Xen\n    KERNEL mboot.c32\n    APPEND ../xen-X.Y.Z.gz --- ../vmlinuz-linux console=tty0 root=/dev/sdaX ro --- ../initramfs-linux.img\n```\n\nX.Y.Z は使用している xen のバージョンに、/dev/sdaX は root パーティションに置き換えて下さい。\n\nまた、syslinux.cfg と同じディレクトリに mboot.c32 (と libcom32.c32) が必要です。/boot/syslinux に mboot.c32 がない場合はコピーしてください:\n\n```\n# cp /usr/lib/syslinux/bios/mboot.c32 /boot/syslinux\n```\n\n"
    },
    {
      "title": "ネットワークブリッジの作成",
      "level": 3,
      "content": "Xen では、domU と dom0 (およびそれ以降) の間のネットワーク通信を手動で設定する必要があります。DHCP と静的アドレス指定の両方を使用できますが、どちらを選択するかはネットワークトポロジによって決定されます。複雑なセットアップが可能です。詳細については Xen Wiki の Networking の記事を参照し、さまざまなネットワーク構成のスクリプトについては /etc/xen/scripts を参照してください。すべての domU が接続されている dom0 に仮想スイッチが作成される基本的なブリッジネットワークは、xenbr0 という名前の ネットワークブリッジ を作成することで設定できます。\n\n詳細については、ネットワークブリッジ#ブリッジの作成 を参照してください。\n\n"
    },
    {
      "title": "Systemd-networkd",
      "level": 4,
      "content": "詳細については、Systemd-networkd#ブリッジインターフェイス を参照してください。\n\n"
    },
    {
      "title": "Network Manager",
      "level": 4,
      "content": "Gnome の Network Manager は、面倒な場合があります。Wiki の ブリッジ セクションに概要が記載されているブリッジ作成セクションに従うことが不明瞭である場合、または機能しない場合は、次の手順で機能する可能性があります。\n\n\"ネットワーク設定\" を開き、ブリッジで使用するインターフェイス (例: enp5s0) を無効にします。設定をオフに編集し、\"自動的に接続する\" のチェックを外します。\n\nネットワーク設定の左下にある「+」記号をクリックして、新しいブリッジ接続プロファイルを作成します。必要に応じて、以下を実行します。\n\n```\n# nm-connection-editor\n```\n\nすぐにウィンドウを表示します。ウィンドウが開いたら、ブリッジを選択します。\n\n\"ブリッジ接続\" の横にある \"追加\" をクリックし、ブリッジで使用するインターフェイス (例: イーサネット) を選択します。使用するインターフェイスに対応するデバイスの MAC アドレスを選択し、設定を保存します。\n\nブリッジが DHCP 経由で IP アドレスを受信する場合は、IPv4/IPv6 セクションをそのままにしておきます。この特定の接続に対して DHCP が実行されていない場合は、必ずブリッジに IP アドレスを与えてください。言うまでもなく、IP アドレスがブリッジに割り当てられていない場合、すべての接続は失敗します。最初にブリッジを作成するときに IP アドレスを追加するのを忘れた場合でも、後でいつでも編集できます。\n\n次に、root として次を実行します:\n\n```\n# nmcli con show\n```\n\n作成したブリッジの名前と一致する接続が表示されるはずです。その接続上の UUID を強調表示してコピーし、(再度 root として) 実行します:\n\n```\n# nmcli con up <UUID OF CONNECTION>\n```\n\n新しい接続がネットワーク設定の下に表示されます。30 秒から 1 分ほどかかる場合があります。稼働していることを確認するには、次のコマンドを実行します:\n\n```\n# brctl show\n```\n\nアクティブなブリッジのリストを表示します。\n\n再起動します、その後すべてが正常に動作する (つまり、ブリッジが自動的に開始する) 場合は、準備は完了です。\n\n<オプション> ネットワーク設定で、ブリッジに接続しないブリッジインターフェイスの接続プロファイルを削除します。これにより、後で混乱が生じるのを防ぐことができます。\n\n"
    },
    {
      "title": "Xen の systemd サービスのインストール",
      "level": 3,
      "content": "Xen dom0 は xenstored, xenconsoled, xendomains, xen-init-dom0 サービスの起動と有効化を必要とします。\n\n"
    },
    {
      "title": "インストールが成功したか確認",
      "level": 3,
      "content": "dom0 ホストを再起動して Xen カーネルが正しく起動するか確認して、再起動を行っても全ての設定が消えないことを確認してください。dom0 を正しく設定できていれば、root で xl list を実行すると以下のように表示されます:\n\n```\n# xl list\n```\n\n```\nName                                        ID   Mem VCPUs\tState\tTime(s)\nDomain-0                                     0   511     2     r-----   41652.9\n```\n\nもちろん Mem, VCPUs, Time カラムの値はマシンの設定や稼働時間によって変わってきます。重要なのは dom0 が記載されていることです。\n\n上記の必須の手順に加えて、Xen を動かすときのベストプラクティス にはメモリ使用量を一定に固定したり dom0 が使用する CPU コアを指定する方法などの情報が書かれています。また、xenfs ファイルシステムのマウントポイントを /etc/fstab に記述して作成するのも有益です:\n\n```\nnone /proc/xen xenfs defaults 0 0\n```\n\n"
    },
    {
      "title": "ベストプラクティス設定",
      "level": 3,
      "content": "Xen を使用する前に、Xen プロジェクトのベストプラクティス を確認してください。\n\n"
    },
    {
      "title": "Xen を使う",
      "level": 2,
      "content": "Xen は準仮想化 (PV) とハードウェア仮想化 (HVM) 両方の domU をサポートしています。以下のセクションでは HVM と PV の domU を作成して Arch Linux を走らせる手順を説明します。一般的には、HVM domU を作成する手順は domU OS とは関係なく、HVM domU は Microsoft Windows を含む幅広いオペレーティングシステムをサポートしています。HVM domU を使用するには dom0 のハードウェアが仮想化をサポートしている必要があります。準仮想化の domU では仮想化のサポートは必須ではありませんが、代わりに、オペレーティングシステムによって異なるインストール方法で、ゲストオペレーティングシステムに修正を加えなくてはなりません (Xen の wiki にある Guest Install のページを見て下さい)。オペレーティングシステムによっては PV domU としてインストールすることは不可能になっています (例: Microsoft Windows)。基本的に、HVM domU はエミュレートされたハードウェア上で動作するため PV domU よりも動作が遅いのが普通です。PV と HVM の domU のセットアップには共通しているところもありますが、ほとんどの部分で差異があります。どちらにしても、domU ごとに、\"ハードディスク\"を作成して設定ファイルを書き込まなければなりません。さらに、インストールのために domU は dom0 に保存されたインストール ISO のコピーにアクセスする必要があります (Arch Linux の ISO の入手方法についてはダウンロードページを参照)。\n\n"
    },
    {
      "title": "domU \"ハードディスク\"の作成",
      "level": 3,
      "content": "Xen は論理ボリューム、パーティション、イメージファイルなどを含む様々なタイプの\"ハードディスク\"をサポートしています。最大で 10GiB まで膨らむスパースファイルを作成するには、次のコマンドを使います:\n\n```\n$ truncate -s 10G domU.img\n```\n\nドメインの可搬性よりもファイル IO の速度が重要な場合は、論理ボリュームやパーティションを利用すると良いでしょう。\n\nXen はホストマシンから利用できるパーティションやディスクを別の形でドメインで表示する場合があります。例えば、ホストの LVM パーティションがドメインでは (複数のパーティションが含まれた) ハードドライブとして認識されたりします。パーティションにサブパーティションを作成するとホストマシンのパーティションにアクセスするのが難しくなるので注意してください。パーティションの中のパーティションを区画する方法は kpartx の man ページを参照。\n\n"
    },
    {
      "title": "domU 設定の作成",
      "level": 3,
      "content": "各 domU には設定ファイルが必要で、それを使って仮想マシンが作られます。設定ファイルに関する詳細は Xen Wiki や xl.cfg の man ページを見て下さい。設定ファイルのいくつかの要素は HVM と PV の両方の domU で共通しています。共通している設定は:\n\n```\nname = \"domU\"\nmemory = 256\ndisk = [ \"file:/path/to/ISO,sdb,r\", \"phy:/path/to/partition,sda1,w\" ]\nvif = [ 'mac=00:16:3e:XX:XX:XX,bridge=xenbr0' ]\n```\n\nname= は xl ツールが domU を管理するのに使用する名前で、全ての domU と被らないような名前にする必要があります。disk= にはインストールメディア (file:) と domU のために作成したパーティション (phy:) の情報を記入します。物理パーティションではなくイメージファイルを使用する場合は、phy: を file: に変える必要があります。vif= はネットワークコントローラを定義します。00:16:3e MAC ブロックが Xen ドメインのために予約されており、mac= の最後の3桁はランダムに埋める必要があります (0-9 と a-f の16進数)。\n\n"
    },
    {
      "title": "domU の管理",
      "level": 3,
      "content": "domU をブート時に起動させるには、/etc/xen/auto に設定ファイルのシンボリックリンクを作成して xendomains サービスを正しく立ち上がるようにする必要があります。domU の管理で役立つコマンド:\n\n```\n# xl top\n# xl list\n# xl console domUname\n# xl shutdown domUname\n# xl destroy domUname\n```\n\n"
    },
    {
      "title": "ハードウェア仮想化 (HVM) Arch domU の設定",
      "level": 2,
      "content": "HVM domU を使用するには mesa と bluez-libs パッケージをインストールしてください。\n\nHVM Arch domU の必要最小限の設定ファイルは:\n\n```\nname = 'HVM_domU'\nbuilder = 'hvm'\nmemory = 256\nvcpus = 2\ndisk = [ 'phy:/dev/mapper/vg0-hvm_arch,xvda,w', 'file:/path/to/ISO,hdc:cdrom,r' ]\nvif = [ 'mac=00:16:3e:00:00:00,bridge=xenbr0' ]\nvnc = 1\nvnclisten = '0.0.0.0'\nvncdisplay = 1\n```\n\nHVM マシンにはコンソールは存在しないため、接続するには vncviewer を使います。上記の設定ファイルは domU vncserver の未認証のリモートアクセスを許可するため、セキュアでないネットワークで使うのには適していません。vncserver はポート 590X から使うことができます。X は dom0 の vncdisplay の値に置き換えて下さい。domU は次のコマンドで作成できます:\n\n```\n# xl create /path/to/config/file\n```\n\n次のコマンドで状態を確認できます:\n\n```\n# xl list\n```\n\ndomU を作成したら、vncserver で接続してインストールガイドに従って Arch Linux をインストールしてください。\n\n"
    },
    {
      "title": "準仮想化 (PV) Arch domU の設定",
      "level": 2,
      "content": "PV Arch domU の必要最小限の設定ファイルは:\n\n```\nname = \"PV_domU\"\nkernel = \"/mnt/arch/boot/x86_64/vmlinuz\"\nramdisk = \"/mnt/arch/boot/x86_64/archiso.img\"\nextra = \"archisobasedir=arch archisolabel=ARCH_201301\"\nmemory = 256\ndisk = [ \"phy:/path/to/partition,sda1,w\", \"file:/path/to/ISO,sdb,r\" ]\nvif = [ 'mac=00:16:3e:XX:XX:XX,bridge=xenbr0' ]\n```\n\n使用方法にあわせてファイルを修正する必要があります。一番重要なのは、archisolabel=ARCH_201301 行を編集して使用する ISO のリリース年/月を使うようにすることです。32ビットの Arch をインストールしたい場合、kernel と ramdisk のパスを x86_64 から i686 に変えてください。\n\ndomU を作成する前に、インストール ISO をループマウントさせる必要があります。それには、/mnt ディレクトリが存在して空であることを確認してから、以下のコマンドを実行してください (適当な ISO パスを入力してください):\n\n```\n# mount -o loop /path/to/iso /mnt\n```\n\nISO をマウントしたら、次のコマンドで domU を作成することができます:\n\n```\n# xl create -c /path/to/config/file\n```\n\n\"-c\" オプションは作成が完了したら domU のコンソールを起動します。インストールガイドの指示に従って Arch Linux をインストールできますが、多少修正が必要です。cfg ファイルの disks 行に記載されたブロックデバイスは /dev/xvd* のように表示されます。domU をパーティショニングするときはそれらのデバイスを使って下さい。インストールが完了したら domU を再起動する前に mkinitcpio に xen-blkfront, xen-fbfront, xen-netfront, xen-kbdfront モジュールを追加する必要があります。モジュールが存在しないと、domU は正しく起動しません。起動するのに、Grub のインストールは必要ありません。Xen には Python ベースの grub エミュレータが付いているため、起動するのに必要なのは grub.cfg ファイルだけです (/boot/grub ディレクトリを作成する必要はあります):\n\n```\n/boot/grub/grub.cfg\n```\n\n```\nmenuentry 'Arch GNU/Linux, with Linux core repo kernel' --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-core repo kernel-true-__UUID__' {\n        insmod gzio\n        insmod part_msdos\n        insmod ext2\n        set root='hd0,msdos1'\n        if [ x$feature_platform_search_hint = xy ]; then\n          search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1  __UUID__\n        else\n          search --no-floppy --fs-uuid --set=root __UUID__\n        fi\n        echo    'Loading Linux core repo kernel ...'\n        linux   /boot/vmlinuz-linux root=UUID=__UUID__ ro\n        echo    'Loading initial ramdisk ...'\n        initrd  /boot/initramfs-linux.img\n}\n```\n\nファイルを編集して root パーティションの UUID に合わせる必要があります。domU の中から、次のコマンドを実行:\n\n```\n# blkid\n```\n\n__UUID__ の例を全て root パーティション (/ にマウントされるパーティション) の実際の UUID に置き換えて下さい:\n\n```\n# sed -i 's/__UUID__/12345678-1234-1234-1234-123456789abcd/g' /boot/grub/grub.cfg\n```\n\npoweroff コマンドで domU をシャットダウンしてください。ドメインが完全にシャットダウンされるとコンソールはハイパーバイザに戻ります。それで xl のドメインリストにドメインが表示されなくなります。次に ISO ファイルをアンマウントします:\n\n```\n# umount /mnt\n```\n\ndomU の cfg ファイルを編集してください。kernel =, ramdisk =, extra = 行を削除して以下の行で置き換えます:\n\n```\nbootloader = \"pygrub\"\n```\n\ndisk = 行から ISO ディスクも削除してください。\n\nこれで Arch domU がセットアップされました。先と同じコマンドで起動できます:\n\n```\n# xl create -c /etc/xen/archdomu.cfg\n```\n\n"
    },
    {
      "title": "\"xl list\" で libxl に関するエラーメッセージが表示される",
      "level": 3,
      "content": "Xen システムに起動できていないか、あるいは xencommons スクリプトに記載されている xen モジュールがインストールされていません。\n\n"
    },
    {
      "title": "\"xl create\" が失敗する",
      "level": 3,
      "content": "ゲストのカーネルが正しいことを確認してください。pv-xxx.cfg ファイルにスペルのミスがないか確認してください (例えば ramdisk ではなく initrd が使われている)。\n\n"
    },
    {
      "title": "HVM の作成に失敗する",
      "level": 3,
      "content": "HVM の作成が次のエラーで失敗する場合:\n\n```\nlibxl: error: libxl_dm.c:3131:device_model_spawn_outcome: Domain 33:domain 33 device model: spawn failed (rc=-3)\nlibxl: error: libxl_dm.c:3351:device_model_postconfig_done: Domain 33:Post DM startup configs failed, rc=-3\nlibxl: error: libxl_create.c:1837:domcreate_devmodel_started: Domain 33:device model did not start: -3\nlibxl: error: libxl_aoutils.c:646:libxl__kill_xs_path: Device Model already exited\n```\n\nnumactl をインストールしていません。\n\n"
    },
    {
      "title": "Arch Linux ゲストが ctrl-d メッセージでフリーズする",
      "level": 3,
      "content": "プロンプトに戻るまで ctrl-d を押して、initramfs を再生成してください。\n\n"
    },
    {
      "title": "エラーメッセージ \"failed to execute '/usr/lib/udev/socket:/org/xen/xend/udev_event' 'socket:/org/xen/xend/udev_event': No such file or directory\"",
      "level": 3,
      "content": "/etc/udev/rules.d/xend.rules が原因です。Xend はすでに廃止され使われていないため、このファイルは削除しても問題ありません。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- xen.org のホームページ\n- xen.org の wiki\n\n"
    }
  ]
}