{
  "title": "Infinality-bundle+fonts (日本語)",
  "url": "https://wiki.archlinux.org/title/Infinality-bundle%2Bfonts_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- フォント\n- フォント設定/サンプル\n- Java 実行環境のフォント\n- MS フォント\n- メトリック互換フォント\n- X Logical Font Description\n\nFontconfig はアプリケーションに利用できるフォントのリストを提供し、フォントのレンダリングの設定をするために作られたライブラリです。FreeType ライブラリはこの設定に基づいてフォントをレンダリングします。Arch Linux の freetype2 フォントレンダリングパッケージには、特に LCD モニターでのフォントレンダリングを改善するために有効にされたバイトコードインタープリター（BCI）が含まれています。#Fontconfig 設定とフォント設定/サンプルを参照してください。\n\nFontconfig は、最近の Unix および Unix ライクなオペレーティングシステムでよく使用されますが、一部のアプリケーションは、フォントの選択と表示のオリジナルの方法である X Logical Font Description に依存しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 フォントパス\n- 2 Fontconfig 設定 2.1 プリセット 2.2 アンチエイリアス 2.3 ヒンティング 2.3.1 バイトコードインタプリタ (BCI) 2.3.2 Autohinter 2.3.3 ヒントスタイル 2.4 ピクセル アライメント 2.5 サブピクセルレンダリング 2.5.1 LCD フィルター 2.5.2 高度な LCD フィルター設定 2.6 特定のフォントまたはフォントスタイルのカスタム設定 2.7 大きいフォントでだけアンチエイリアスを有効にする 2.8 デフォルトまたは代替フォントを設定する 2.8.1 マッチテスト 2.8.2 エイリアス 2.9 フォントのホワイトリストとブラックリスト 2.10 ビットマップフォントのスケーリングを無効にする 2.11 不完全なフォントにボールド・イタリック体を作成する 2.12 ルールの優先順を変更する 2.13 fontconfig 設定サンプル 2.14 現在の設定を確認\n- 3 fontconfig をサポートしていないアプリケーション\n- 4 トラブルシューティング 4.1 フォントが歪む 4.2 Calibri, Cambria, Monaco などが正しく表示されない 4.3 ヒンティングをオーバーライドするアプリケーション 4.4 デスクトップ環境によるヒンティングの設定がアプリケーションに反映されない 4.5 GTK アプリケーションでの間違ったヒンティング 4.6 GTK4 プログラムでのヒンティング 4.7 生成された PDF での Helvetica フォントの問題 4.8 FreeType フォントによってビットマップフォントがおかしくなる 4.9 DejaVu Monospace でアンダースコアがレンダリングされない 4.10 FreeType フォントのデバッグ\n- 5 参照\n\n- 2.1 プリセット\n- 2.2 アンチエイリアス\n- 2.3 ヒンティング 2.3.1 バイトコードインタプリタ (BCI) 2.3.2 Autohinter 2.3.3 ヒントスタイル\n- 2.4 ピクセル アライメント\n- 2.5 サブピクセルレンダリング 2.5.1 LCD フィルター 2.5.2 高度な LCD フィルター設定\n- 2.6 特定のフォントまたはフォントスタイルのカスタム設定\n- 2.7 大きいフォントでだけアンチエイリアスを有効にする\n- 2.8 デフォルトまたは代替フォントを設定する 2.8.1 マッチテスト 2.8.2 エイリアス\n- 2.9 フォントのホワイトリストとブラックリスト\n- 2.10 ビットマップフォントのスケーリングを無効にする\n- 2.11 不完全なフォントにボールド・イタリック体を作成する\n- 2.12 ルールの優先順を変更する\n- 2.13 fontconfig 設定サンプル\n- 2.14 現在の設定を確認\n\n- 2.3.1 バイトコードインタプリタ (BCI)\n- 2.3.2 Autohinter\n- 2.3.3 ヒントスタイル\n\n- 2.5.1 LCD フィルター\n- 2.5.2 高度な LCD フィルター設定\n\n- 2.8.1 マッチテスト\n- 2.8.2 エイリアス\n\n- 4.1 フォントが歪む\n- 4.2 Calibri, Cambria, Monaco などが正しく表示されない\n- 4.3 ヒンティングをオーバーライドするアプリケーション\n- 4.4 デスクトップ環境によるヒンティングの設定がアプリケーションに反映されない\n- 4.5 GTK アプリケーションでの間違ったヒンティング\n- 4.6 GTK4 プログラムでのヒンティング\n- 4.7 生成された PDF での Helvetica フォントの問題\n- 4.8 FreeType フォントによってビットマップフォントがおかしくなる\n- 4.9 DejaVu Monospace でアンダースコアがレンダリングされない\n- 4.10 FreeType フォントのデバッグ\n\n"
    },
    {
      "title": "フォントパス",
      "level": 2,
      "content": "アプリケーションからフォントを使えるようにするには、迅速かつ容易にアクセスできるようフォントを一覧表に入れる必要があります。\n\n最初から Fontconfig が利用するフォントパスは /usr/share/fonts/ や ~/.local/share/fonts です (~/.fonts/ もありますが、非推奨となっています)。これらのフォルダを Fontconfig は再帰的にスキャンします。管理とインストールを簡単にするために、フォントを追加する際にはこのフォントパスを使うのが推奨されます。\n\nFontconfig が認識しているフォントの一覧を表示するには:\n\n```\n$ fc-list : file\n```\n\n出力のフォーマットについては fc-list(1) を見て下さい。\n\nXorg が利用しているフォントパスを確認するには Xorg のログを見て下さい:\n\n```\n$ grep /fonts ~/.local/share/xorg/Xorg.0.log\n```\n\n- xset q コマンドでも Xorg が使っているフォントパスを確認できます。\n- Xorg を root 権限で実行している場合は /var/log/Xorg.0.log を使ってください。\n\nFontconfig とは違い、Xorg は /usr/share/fonts/ ディレクトリを再帰的に調べないことに注意してください。パスを追加するときは、フルパスを使ってください:\n\n```\nSection \"Files\"\n    FontPath     \"/usr/share/fonts/local/\"\nEndSection\n```\n\nフォントパスをユーザーごとに設定したい場合は、以下のように ~/.xinitrc に追記することでフォントパスを追加・削除できます:\n\n```\nxset +fp /usr/share/fonts/local/           # Prepend a custom font path to Xorg's list of known font paths\nxset -fp /usr/share/fonts/sucky_fonts/     # Remove the specified font path from Xorg's list of known font paths\n```\n\nXorg が認識しているフォントの一覧を表示するには、xorg-xlsfonts パッケージに入っている xlsfonts を使って下さい。\n\n"
    },
    {
      "title": "Fontconfig 設定",
      "level": 2,
      "content": "Fontconfig については fonts-conf の man ページで説明されています。\n\n設定は $XDG_CONFIG_HOME/fontconfig/fonts.conf を使ってユーザーごとに行うことも、/etc/fonts/local.conf で全体的に設定することもできます。ユーザー別の設定はグローバルの設定よりも優先されます。これらのファイルは同じ構文を使っています。\n\nFontconfig は全ての設定を一つの中心ファイル (/etc/fonts/fonts.conf) に集めます。このファイルは fontconfig がアップデートしたときに置き換えられるので編集してはいけません。Fontconfig に対応したアプリケーションはこのファイルを読み込んで利用できるフォントとレンダリング方法を知ります。このファイルは、全体的な設定 (/etc/fonts/local.conf) と /etc/fonts/conf.d/ の設定済みプリセット、そしてユーザーの設定ファイル ($XDG_CONFIG_HOME/fontconfig/fonts.conf) に書かれたルールの寄せ集めです。fc-cache を使うことで fontconfig の設定をリビルドできます、ただし変更は新しく起動したアプリケーションにのみ適用されます。\n\nFontconfig の設定ファイルは XML 形式で、以下のヘッダーが必要になります:\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n\n  <!-- settings go here -->\n\n</fontconfig>\n```\n\nこの記事で出てくる設定例ではこれらのタグは省略しています。\n\n"
    },
    {
      "title": "プリセット",
      "level": 3,
      "content": "プリセットは /usr/share/fontconfig/conf.avail ディレクトリにインストールされています。/etc/fonts/conf.d/README に記述されているように、シンボリックリンクを作成することで、ユーザーごと・全体的に、プリセットの設定を有効にすることが可能です。これらのプリセットは個別の設定ファイルの設定を上書きします。\n\n例えば、サブピクセル RGB レンダリングを全体的に有効にするには:\n\n```\n# cd /etc/fonts/conf.d\n# ln -s ../conf.avail/10-sub-pixel-rgb.conf\n```\n\nユーザーごとの設定として同じことをするには:\n\n```\n$ mkdir $XDG_CONFIG_HOME/fontconfig/conf.d\n$ ln -s /etc/fonts/conf.avail/10-sub-pixel-rgb.conf $XDG_CONFIG_HOME/fontconfig/conf.d\n```\n\n"
    },
    {
      "title": "アンチエイリアス",
      "level": 3,
      "content": "フォントラスタライズとはベクター形式のフォントデータをビットマップのデータに変換して表示することです。結果としてエイリアシングによってジャギーが発生することがあります。アンチエイリアスがデフォルトで有効になっており、フォントのエッジの見た目の解像度を増しています。アンチエイリアスを無効化するには:\n\n```\n<match target=\"font\">\n    <edit name=\"antialias\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "ヒンティング",
      "level": 3,
      "content": "フォントヒンティング (instructing とも呼ばれます) は数学的な情報を使ってアウトラインフォントの表示を調整し、ディスプレイのピクセルグリッドと同じように、ラスタライズされたグリッドにフォントを並べる技術です。フォントの見た目をハッキリとさせることで読みやすくなるような効果を生みます。ディスプレイが 300 DPI ではない場合ヒンティングがないとフォントを正しく並べることはできません。ヒンティングは2つのタイプが利用できます。\n\n"
    },
    {
      "title": "バイトコードインタプリタ (BCI)",
      "level": 4,
      "content": "BCI ヒンティングを使うと、TrueType のフォントは FreeType の Byte-Code Interpreter によってフォントがレンダリングされます。正しいヒンティング情報があるフォントでは BCI ヒンティングが良く機能します。ヒンティングはデフォルトで有効になっています。無効化するには:\n\n```\n<match target=\"font\">\n    <edit name=\"hinting\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "Autohinter",
      "level": 4,
      "content": "Autohinter は既存のヒンティング情報を無視して自動ヒンティングを実行します。TrueType2 がパテントで保護されていたため昔はデフォルトでしたが、パテントの有効期限が切れたので現在は使う意味がほとんどなくなっています。情報が少なかったり無かったりするフォントでは見た目が良くなりますが、ヒント情報があるフォントではかなり見た目が悪くなります。普通のフォントは後者なので autohinter はあまり役に立ちません。自動ヒンティングを有効にするには:\n\n```\n<match target=\"font\">\n    <edit name=\"autohint\" mode=\"assign\">\n      <bool>true</bool>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "ヒントスタイル",
      "level": 4,
      "content": "ヒントスタイルはヒンティングモードの影響力の強さを示します。ヒンティングの強さは次のどれかに設定できます: hintfull, hintmedium, hintslight, hintnone。hintslight はフォントをあいまいにしますがフォントの形は維持されます。一方、hintfull はピクセルグリッドに上手く整列するハッキリとしたフォントになりますがフォントの形は大きく変わってしまいます。好みは人によって好きずきです。hintslight がデフォルト設定です。\n\n```\n<match target=\"font\">\n    <edit name=\"hintstyle\" mode=\"assign\">\n      <const>hintnone</const>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "ピクセル アライメント",
      "level": 3,
      "content": "現在製造されているモニタのほとんどは、Red, Green, Blue (RGB) の仕様を使用しています。フォントを正しく表示するには、お使いのモニタの種類を Fontconfig が認識している必要があります。モニタは, RGB, BGR, V-RGB, または V‐BGR である。モニタテストは ここ にあります。\n\n```\n<match target=\"font\">\n    <edit name=\"rgba\" mode=\"assign\">\n      <const>rgb</const>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "サブピクセルレンダリング",
      "level": 3,
      "content": "サブピクセルレンダリング は、サブピクセルを使用して水平 (または垂直) 解像度を効果的に3倍にすることで、フォントレンダリングの鮮明さを向上させるテクニックです。 Windows マシンでは、このテクニックは ClearType と呼ばれます。\n\nFreeType2 には、 Harmony と ClearType (FT_CONFIG_OPTION_SUBPIXEL_RENDERING) [1] という2種類のサブピクセルレンダリングがあります。\n\nClearType サブピクセルレンダリングが有効になっている場合は、 LCD フィルタの使用をお勧めします not LCD フィルタを有効にする方法とその利点については、以下のセクションを参照してください。\n\nFreeType 2.10.3 から、 Arch Linux はデフォルトで ClearType サブピクセルレンダリングを有効にします [2]\n\n"
    },
    {
      "title": "LCD フィルター",
      "level": 4,
      "content": "サブピクセルレンダリングを使う場合、色縁を減らす LCD フィルターを有効にするべきです。FreeType 2 API リファレンスの LCD filtering にこのフィルターの説明があります。また、FT_LcdFilter にオプションの説明があり、LCD filter test にそれぞれのオプションを使って実際に表示したサンプルがあります\n\nほとんどのユーザーにとっては lcddefault フィルターが具合が良いでしょう。他のフィルターは特別な事情がある場合に使えます: lcdlight は明るいフィルターで、太すぎたりぼやけているフォントに向いています。lcdlegacy はオリジナルの Cairo フィルターです。lcdnone はフィルターを完全に無効にします。\n\n```\n<match target=\"font\">\n    <edit name=\"lcdfilter\" mode=\"assign\">\n      <const>lcddefault</const>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "高度な LCD フィルター設定",
      "level": 4,
      "content": "内蔵の LCD フィルターで満足しない時は、freetype2 のカスタムパッケージをビルドしてハードコードされたフィルターを修正することでフォントレンダリングを調整することが可能です。Arch Build System を使えばソースからパッケージをビルド・インストールできます。\n\nまず、root で freetype2 の PKGBUILD を更新してください:\n\n```\n# abs extra/freetype2\n```\n\nこの例ではビルドディレクトリに /var/abs/build を使っています、あなたの ABS セットアップにあわせて置き換えてください。通常ユーザーで freetype2 パッケージをダウンロード・展開します:\n\n```\n$ cd /var/abs/build\n$ cp -r ../extra/freetype2 .\n$ cd freetype2\n$ makepkg -o\n```\n\nsrc/freetype-VERSION/src/base/ftlcdfil.c ファイルを編集して default_filter[5] 定数の定義を見て下さい:\n\n```\nstatic const FT_Byte  default_filter[5] =\n    { 0x10, 0x40, 0x70, 0x40, 0x10 };\n```\n\nこの定数はレンダリングされた文字に適用するローパスフィルタを定義しています。必要に応じて修正してください [3]。ファイルを保存し、カスタムパッケージをビルド・インストールしてください:\n\n```\n$ makepkg -e\n# pacman -Rd freetype2\n# pacman -U freetype2-VERSION-ARCH.pkg.tar.xz\n```\n\n再起動して X を起動してください。これで lcddefault フィルタはフォントを違ったふうに表示するはずです。\n\n"
    },
    {
      "title": "特定のフォントまたはフォントスタイルのカスタム設定",
      "level": 3,
      "content": "auto-hinter は複雑な方法を使ってフォントを表示しますが、しばしば太字フォントの幅が広すぎになってしまうことがあります。幸いに、太字フォントのみ autohinter をオフにすることで解決できます:\n\n```\n...\n<match target=\"font\">\n    <test name=\"weight\" compare=\"more\">\n        <const>medium</const>\n    </test>\n    <edit name=\"autohint\" mode=\"assign\">\n        <bool>false</bool>\n    </edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "大きいフォントでだけアンチエイリアスを有効にする",
      "level": 3,
      "content": "ユーザーによってはアンチエイリアスのないギザギザのレンダリングの方を好むかもしれません:\n\n```\n...\n<match target=\"font\">\n    <edit name=\"antialias\" mode=\"assign\">\n        <bool>false</bool>\n    </edit>\n</match>\n\n<match target=\"font\" >\n    <test name=\"size\" qual=\"any\" compare=\"more\">\n        <double>12</double>\n    </test>\n    <edit name=\"antialias\" mode=\"assign\">\n        <bool>true</bool>\n    </edit>\n</match>\n\n<match target=\"font\" >\n    <test name=\"pixelsize\" qual=\"any\" compare=\"more\">\n        <double>16</double>\n    </test>\n    <edit name=\"antialias\" mode=\"assign\">\n        <bool>true</bool>\n    </edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "マッチテスト",
      "level": 4,
      "content": "デフォルトまたはフォールバックフォントを設定する確実な方法は、マッチテストを実行する XML フラグメントを追加することです。\"binding\" 属性で、例えば次のように設定すると、Georgia の代わりに Gentium にフォールバックします:\n\n```\n...\n<match target=\"pattern\">\n  <test qual=\"any\" name=\"family\" compare=\"eq\"><string>Georgia</string></test>\n  <edit name=\"family\" mode=\"assign\" binding=\"same\"><string>Gentium Book Plus</string></edit>\n</match>\n...\n```\n\n上記において、compare 属性は、\"eq\" (すなわち、Georgiaと完全に等しい)、contains (例えば、Georgia と Georgia Pro いずれかと一致) または他の値でありえる。[4] を参照してください。\n\n"
    },
    {
      "title": "エイリアス",
      "level": 4,
      "content": "別の方法は、<alias> を使用して \"優先\" フォントを設定することです。<family> 要素に一致するフォントは、一致する <family> の前に <prefer> のファミリーのリストを追加するように編集されます。次の例では、Helvetica が呼び出されたときに \"Bitstream Vera Sans\" にフォールバックします。\n\n```\n...\n<alias>\n    <family>Helvetica</family>\n    <prefer>\n        <family>Bitstream Vera Sans</family>\n    </prefer>\n</alias>\n...\n```\n\n<alias> は、一部のグリフが欠落している場合に代替フォントを指定するためにも使用できます。たとえば、He​​lvetica Neue の多くのバージョンにはギリシャ文字が含まれていません。ユーザーは Helvetica Neue がインストールされており、ラテン文字にはそれを使用し、ギリシャ文字には Helvetica と類似しているため FreeSans にフォールバックしたい場合があります。ただし、同じユーザーが別のフォント Noto Sans をデフォルトのサンセリフフォントとして設定した可能性があります。以下によりこれを実現できます。\n\n```\n...\n<alias>\n    <family>Helvetica Neue LT Pro</family>\n    <prefer>\n        <family>Helvetica Neue LT Pro</family>\n        <family>FreeSans</family>\n    </prefer>\n</alias>\n...\n```\n\nユーザーがグリフが欠落している場合にデフォルトのフォントにフォールバックしたいだけの場合は、上記は必要ありません。\n\n"
    },
    {
      "title": "フォントのホワイトリストとブラックリスト",
      "level": 3,
      "content": "<selectfont> エレメントを <acceptfont> や <rejectfont> エレメントと組み合わせて使うことで、フォントを選択的にブラックリストやホワイトリストに入れることができます。よくあるユースケースとしては、あるフォントをインストールする必要があるが、アプリケーションのユーザーインターフェイスで使われると問題が起こるので、使われないようにしたい場合があります。\n\nまずフォントのファミリー名を確認してください:\n\n```\n$ fc-scan .fonts/lklug.ttf --format='%{family}\\n'\n```\n\n```\nLKLUG\n```\n\n以下のように <rejectfont> を記述してファミリー名を使います:\n\n```\n<selectfont>\n    <rejectfont>\n        <pattern>\n            <patelt name=\"family\" >\n                <string>LKLUG</string>\n            </patelt>\n        </pattern>\n    </rejectfont>\n</selectfont>\n```\n\n<rejectfontfont> と <acceptfont> 両方のエレメントを使う場合、最初に <rejectfontfont> を使って排除したいグループをマッチさせ、それから <acceptfont> を使ってブラックリストに入れたグループの中から個々のフォントをホワイトリストに追加するのが普通です。\n\n```\n<selectfont>\n    <rejectfont>\n        <glob>/usr/share/fonts/OTF/*</glob>\n    </rejectfont>\n    <acceptfont>\n        <pattern>\n            <patelt name=\"family\" >\n                <string>Monaco</string>\n            </patelt>\n        </pattern>\n    </acceptfont>\n</selectfont>\n```\n\n"
    },
    {
      "title": "ビットマップフォントのスケーリングを無効にする",
      "level": 3,
      "content": "ビットマップフォントのスケーリングを無効化するには (which often makes them blurry)、/etc/fonts/conf.d/10-scale-bitmap-fonts.conf を削除してください。\n\n"
    },
    {
      "title": "不完全なフォントにボールド・イタリック体を作成する",
      "level": 3,
      "content": "Freetype には italic や bold のスタイルがフォントにないときに自動で作成する機能があります。ただし、この機能はアプリケーションによって明示的に必要とされたときしか使われません。プログラムがこのようなリクエストを送るのは稀なので、このセクションでは手動で欠けているスタイルを強制的に作成する方法を説明しています。\n\n下で説明しているように /usr/share/fonts/fonts.cache-1 を編集するところから初めて下さい。fc-cache でフォントの更新がされると /usr/share/fonts/fonts.cache-1 が上書きされるので、修正したコピーを他のファイルに保存してください。\n\nDupree フォントがインストールされていると仮定します:\n\n```\n\"dupree.ttf\" 0 \"Dupree:style=Regular:slant=0:weight=80:width=100:foundry=unknown:index=0:outline=True:etc...\n```\n\nこの行を複製して、style=Regular を style=Bold などの他のスタイルに変更してください。さらに、イタリック体では slant=0 を slant=100 に、ボールド体では weight=80 を weight=200 に変更してください。もしくは bold italic と結合するなら:\n\n```\n\"dupree.ttf\" 0 \"Dupree:style=Bold Italic:slant=100:weight=200:width=100:foundry=unknown:index=0:outline=True:etc...\n```\n\n必要な修正を $XDG_CONFIG_HOME/fontconfig/fonts.conf に加えて下さい:\n\n```\n...\n<match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n        <string>Dupree</string>\n         <!-- other fonts here .... -->\n     </test>\n     <test name=\"weight\" compare=\"more_eq\"><int>140</int></test>\n     <edit name=\"embolden\" mode=\"assign\"><bool>true</bool></edit>\n</match>\n\n<match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n        <string>Dupree</string>\n        <!-- other fonts here .... -->\n    </test>\n    <test name=\"slant\" compare=\"more_eq\"><int>80</int></test>\n    <edit name=\"matrix\" mode=\"assign\">\n        <times>\n            <name>matrix</name>\n                <matrix>\n                    <double>1</double><double>0.2</double>\n                    <double>0</double><double>1</double>\n                </matrix>\n        </times>\n    </edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "ルールの優先順を変更する",
      "level": 3,
      "content": "Fontconfig は番号順で /etc/fonts/conf.d 内のファイルを処理します。ルールやファイルが他のルールを上書きする可能性があり、どのファイルが最後にパースされるのか混乱するおそれがあります。\n\n個人設定が他の全てのルールに優先することを保証するには、順番を変えて下さい:\n\n```\n# cd /etc/fonts/conf.d\n# mv 50-user.conf 99-user.conf\n```\n\nただし、ユーザーにはデフォルトでフォントの設定（ヒンティングやアンチエイリアスのプロパティ、新しいフォントから一般的なフォントファミリーへのエイリアスなど）のコントロールを与えられているので、ほとんどの場合この変更は必要ありません。\n\n"
    },
    {
      "title": "fontconfig 設定サンプル",
      "level": 3,
      "content": "fontconfig の設定例はフォント設定/サンプルにあります。\n\n"
    },
    {
      "title": "現在の設定を確認",
      "level": 3,
      "content": "使われている設定を確認するには、fc-match --verbose を実行してください。例:\n\n```\n$ fc-match --verbose Sans\n```\n\n```\nfamily: \"DejaVu Sans\"(s)\nhintstyle: 3(i)(s)\nhinting: True(s)\n...\n```\n\n数字の意味は https://www.freedesktop.org/software/fontconfig/fontconfig-user.html を参照。例えば 'hintstyle: 3' は 'hintfull' の意味です。\n\n"
    },
    {
      "title": "fontconfig をサポートしていないアプリケーション",
      "level": 2,
      "content": "URxvt のような一部のアプリケーションは fontconfig の設定を無視することがあります。~/.Xresources を使うことで問題を解決することができますが、このファイルの柔軟性は fontconfig に到底及びません。例 (オプションの説明は #Fontconfig 設定 を見てください):\n\n```\n~/.Xresources\n```\n\n```\nXft.autohint: 0\nXft.lcdfilter: lcddefault\nXft.hintstyle: hintslight\nXft.hinting: 1\nXft.antialias: 1\nXft.rgba: rgb\n```\n\nX が起動した時に設定が正しくロードされているか xrdb -q で確認してください (詳細な情報は Xresources を見てください)。\n\n"
    },
    {
      "title": "フォントが歪む",
      "level": 3,
      "content": "フォントが大きすぎ・小さすぎたり、プロポーションやレンダリングがおかしい場合、fontconfig が間違った DPI を使っている可能性があります。\n\nFontconfig は Xorg サーバーによる DPI パラメータを検知することができます。自動で検知された DPI を (xorg-xdpyinfo パッケージに入っている) xdpyinfo で確認してみて下さい:\n\n```\n$ xdpyinfo | grep dots\n```\n\n```\nresolution:    102x102 dots per inch\n```\n\nDPI が (おそらくモニター EDID が誤っているせいで) 間違って検出されている場合、Xorg の設定で手動で指定することが可能です。Xorg#画面サイズと DPI を参照してください。これは推奨されている解決方法ですが、ドライバーにバグがあると動かないことがあります。\n\nFontconfig は Xft.dpi 変数が設定されている場合、デフォルトをそれにします。Xft.dpi は基本的にデスクトップ環境 (通常は Xorg の DPI 設定) か ~/.Xdefaults や ~/.Xresources で手動で設定されます。xrdb を使って値を調べて下さい:\n\n```\n$ xrdb -query | grep dpi\n```\n\n```\nXft.dpi:\t102\n```\n\n問題が修正されない場合は fontconfig によって使われる DPI を手動で設定するようにフォールバックできます:\n\n```\n...\n<match target=\"pattern\">\n   <edit name=\"dpi\" mode=\"assign\"><double>102</double></edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "Calibri, Cambria, Monaco などが正しく表示されない",
      "level": 3,
      "content": "スケーラブルフォントによっては、主として小さなサイズの時、代わりとして埋め込みビットマップが表示されることがあります。全てのサイズでスケーラブルフォントを使うには埋め込みビットマップを無効にしてください。\n\nメトリック互換フォントを使うことでもフォントを正しく表示することができます。\n\n"
    },
    {
      "title": "ヒンティングをオーバーライドするアプリケーション",
      "level": 3,
      "content": "一部のアプリケーションまたはデスクトップ環境では、フォント設定のヒンティングとアンチエイリアスのデフォルト設定が無効になる場合があります。これは、 vlc や smplayer などの Qt アプリケーションを使用している場合など、 GNOME 3 で発生することがあります。このような場合は、アプリケーション固有の構成プログラムを使用してください。 GNOME の場合は、 gnome-tweaks を試してください。\n\n"
    },
    {
      "title": "デスクトップ環境によるヒンティングの設定がアプリケーションに反映されない",
      "level": 3,
      "content": "例えば、GNOME の設定でヒンティングを \"none\" に設定していても Firefox が完全なヒンティングを行ってしまい、フォントが幅広になってしまうことがあります。このような場合、ヒンティングの設定を fonts.conf ファイルに追加してください:\n\n```\n<?xml version='1.0'?>\n<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>\t\n<fontconfig>\n <match target=\"font\">\n  <edit mode=\"assign\" name=\"hinting\">\n   <bool>false</bool>\n  </edit>\n </match>\n</fontconfig>\n```\n\n上記の例では、ヒンティングを \"grayscale\" に設定しています。\n\n"
    },
    {
      "title": "GTK アプリケーションでの間違ったヒンティング",
      "level": 3,
      "content": "一部のデスクトップ環境、特に GNOME および Plasma の外では、一部の GTK アプリケーションがフォント設定を適切に読み取ることができませんでした。この問題を解決するには、xsettingsd または xsettingsd-gitAUR をインストールし、システム起動時に毎回実行します。詳細については、Xsettingsd および xsettingsd wiki も参照してください。次の一般的な設定で構成できます。\n\n```\n~/.xsettingsd\n```\n\n```\nXft/Hinting 1\nXft/HintStyle \"hintslight\"\nXft/Antialias 1\nXft/RGBA \"rgb\"\n```\n\n他のアプリケーションでこれが機能しない場合は、xorg-xrdb をインストールし、次の構成を提供します。\n\n```\n~/.Xresources\n```\n\n```\nXft.hinting: 1\nXft.hintstyle: hintslight\nXft.antialias: 1\nXft.rgba: rgb\n```\n\nその後、システムを起動するたびにスクリプト xrdb -merge ~/.Xresources を実行してオプションを適用できます。X resources および fontconfig をサポートしていないアプリケーション も参照してください。\n\n"
    },
    {
      "title": "GTK4 プログラムでのヒンティング",
      "level": 3,
      "content": "GTK4 および libadwaita プログラムは、フォントヒンティング設定を無視します。これを解決するには、次の構成を作成または変更します。\n\n```\n~/.config/gtk-4.0/settings.ini\n```\n\n```\n[Settings]\ngtk-hint-font-metrics=true\n```\n\nこちらも参照 GTK documentation 、GTK issue 3787\n\n"
    },
    {
      "title": "生成された PDF での Helvetica フォントの問題",
      "level": 3,
      "content": "以下のコマンドを実行したときに:\n\n```\n$ fc-match helvetica\n```\n\n以下のように出力される場合:\n\n```\nhelvR12-ISO8859-1.pcf.gz: \"Helvetica\" \"Regular\"\n```\n\nアプリケーションの ファイルに印刷 あるいは エクスポート を使って PDF を生成したときに xorg-fonts-75dpi のビットマップフォントが埋め込まれてしまっています。ビットマップフォントは xorg グループをインストールしたときに一緒にインストールされることがあります。フォントが汚くなる問題を解決するには、パッケージをアンインストールしてください。gsfonts (Type 1) または tex-gyre-fonts (OpenType) をインストールすることで Helvetica のフリーの代替フォントを入手できます。\n\nHelvetica を必要とする PDF を開いたときにも同じ問題が発生することがあります。\n\n"
    },
    {
      "title": "FreeType フォントによってビットマップフォントがおかしくなる",
      "level": 3,
      "content": "freetype2 をバージョン 2.7.1 にアップグレードしてからビットマップフォントに問題が発生すると一部のユーザーが報告しています (FS#52502)。ターミナルエミュレータや dwmAUR や dmenu などのプログラムで別のフォントにフォールバックして表示が崩れるようです。原因はリリースノートで説明されている PCF フォントファミリーのフォーマットの変更です [5] 古いフォーマットを使用していたユーザーはフォントエイリアスを作成することで問題を解決できます [6]\n\n上記の freetype2 のアップデートで Terminus から xos4 Terminus に名前が変更された terminus-font のエイリアスを作成する例を示します:\n\n- /etc/fonts/conf.avail/ に設定ファイルを作成してフォントエイリアスを設定:\n\n```\n/etc/fonts/conf.avail/33-TerminusPCFFont.conf\n```\n\n```\n<?xml version=\"1.0\"?>\n <!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n <fontconfig>\n     <alias>\n         <family>Terminus</family>\n         <prefer><family>xos4 Terminus</family></prefer>\n         <default><family>fixed</family></default>\n     </alias>\n </fontconfig>\n```\n\n- /etc/fonts/conf.d ディレクトリに作成したファイルのシンボリックリンクを作成して変更を適用してください。例: ln -s /etc/fonts/conf.avail/33-TerminusPCFFont.conf /etc/fonts/conf.d。\n\n設定を行うことでアップデート前と同じように表示されるはずですが、フォントエイリアスが適用されない場合、.Xresources をリロードしたりディスプレイサーバーを再起動してみてください。\n\n"
    },
    {
      "title": "DejaVu Monospace でアンダースコアがレンダリングされない",
      "level": 3,
      "content": "Pango 1.44 以降、DejaVu Sans Mono フォントを使用すると、特定のフォントサイズでアンダースコア文字が消えます。回避策は、Liberation Mono を等幅フォントとして使用することです。フォント設定#デフォルトまたは代替フォントを設定する を参照してください。\n\n"
    },
    {
      "title": "FreeType フォントのデバッグ",
      "level": 3,
      "content": "freetype2-demos は、FreeType フォント設定をデバッグするためのツールを提供します。ftview は、GUI でライブプレビューを使用してフォントレンダリング設定を調整できるます。例えば:\n\n```\n$ ftview -e unic -d 1024x768x24 -r 96 10 /usr/share/fonts/noto/NotoSans-Regular.ttf\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Fontconfig ユーザーガイド\n- Fonts in X11R6.8.2 - 公式の Xorg フォント情報\n- FreeType 2 概要\n- Gentoo の font-rendering スレッド\n- On slight hinting\n\n"
    }
  ]
}