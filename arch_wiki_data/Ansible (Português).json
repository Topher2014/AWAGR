{
  "title": "Ansible (Português)",
  "url": "https://wiki.archlinux.org/title/Ansible_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Do www.ansible.com:\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "Na máquina de controle (mestre), instale o pacote ansible.\n\nNas máquinas gerenciadas (nós), nas quais você deseja automatizar tarefas de implantação ou configuração, é necessário ter python e pode ser necessário indicar o #Localização do binário do Python específico em algumas circunstâncias. Uma maneira de se comunicar com o nó também é necessária, isso geralmente é SSH. Observe que uma configuração funcional chave SSH key facilita o uso do Ansible, mas não é necessária.\n\n"
    },
    {
      "title": "Configuração",
      "level": 3,
      "content": "Os parâmetros do Ansible são configurados no arquivo de configuração que pode ser ansible.cfg no diretório atual, .ansible.cfg no diretório inicial ou /etc/ansible/ansible.cfg, o que encontrar primeiro.\n\nUm modelo está disponível no ansible.cfg exemplo no GitHub[link inativo 2023-07-30 ⓘ].\n\n"
    },
    {
      "title": "Inventário",
      "level": 3,
      "content": "A infraestrutura está listada no arquivo de inventário Ansible, cujo padrão é ser salvo no local /etc/ansible/hosts ou é possível especificar um arquivo de inventário diferente usando a opção de linha de comando -i. Por exemplo, o inventário a seguir define um cluster com 7 nós organizados em dois grupos:\n\n```\n/etc/ansible/hosts\n```\n\n```\n[control]\n192.168.12.1\nfoo-[a:c].example.org\nlocalhost ansible_connection=local\n\n[managed]\n192.168.12.2\n192.168.12.3\n```\n\nPode-se atribuir atributos específicos para cada nó no arquivo de infraestrutura na linha correspondente ou no arquivo de configuração ansible.cfg. Por padrão, o Ansible executa playbooks no SSH, o parâmetro ansible_connection estende a conexão para:\n\n- local para implantar o playbook na própria máquina de controle\n- docker implanta o playbook diretamente nos contêineres do Docker\n\nConfira Ansible - intro inventory par detalhes.\n\n"
    },
    {
      "title": "Ping",
      "level": 3,
      "content": "Você pode verificar se todos os nós listados no inventário estão ativos com\n\n```\n$ ansible all -m ping\n```\n\n"
    },
    {
      "title": "Playbook",
      "level": 3,
      "content": "Playbooks são a principal unidade organizacional para configurar e implantar toda a infraestrutura. Consulte a documentação oficial para obter mais detalhes. Aqui está uma demonstração extremamente simples, na qual o administrador do inventário acima deseja executar uma atualização completa do sistema em um conjunto de hosts do Arch Linux. Primeiro, crie um arquivo de playbook, com formatação YAML (sempre com recuo de 2 espaços):\n\n```\nsyu.yml\n```\n\n```\n---\n- name: All hosts up-to-date\n  hosts: control managed\n  become: yes\n  \n  tasks:\n    - name: full system upgrade\n      pacman:\n        update_cache: yes\n        upgrade: yes\n```\n\nEm seguida, execute o script do playbook:\n\n```\n$ ansible-playbook --ask-become-pass syu.yml\n```\n\n"
    },
    {
      "title": "Vault",
      "level": 3,
      "content": "Um vault (\"cofre\") pode ser usado para manter dados confidenciais de forma criptografada em playbooks ou funções, em vez de em texto sem formatação. A senha do cofre pode ser armazenada em texto sem formatação em um arquivo, por exemplo, senhavault.txt contendo senhadovault, para ser usada posteriormente como parâmetro de comando:\n\n```\n$ ansible-playbook site.yml --vault-id senhavault.txt\n```\n\nPara criptografar o conteúdo o conteúdo da variável de uma variável chamada nomevar usando a senha armazenada em senha_vault.txt, o seguinte comando deve ser usado:\n\n```\n$ ansible-vault encrypt_string --vault-id senhavault.txt 'o conteúdo da variável' --name nomevar\n```\n\nCom mais segurança, para evitar a inserção do conteúdo da variável na linha de comando e ser solicitado, em vez disso, é possível usar:\n\n```\n$ ansible-vault encrypt_string --vault-id senhavault.txt --stdin-name nomevar\n```\n\n```\nReading plaintext input from stdin. (ctrl-d to end input)\n```\n\nO comando retorna diretamente a variável protegida que pode ser inserida em um manual. Variáveis criptografadas e não criptografadas podem coexistir em um arquivo YAML, conforme ilustrado abaixo:\n\n```\nnãosecreto: meuvalor\n\nmeusegredo: !vault |\n          $ANSIBLE_VAULT;1.1;AES256\n          66386439653236336462626566653063336164663966303231363934653561363964363833313662\n          6431626536303530376336343832656537303632313433360a626438346336353331386135323734\n          62656361653630373231613662633962316233633936396165386439616533353965373339616234\n          3430613539666330390a313736323265656432366236633330313963326365653937323833366536\n          3462\n\noutronãosecreto: outrovalor\n```\n\n"
    },
    {
      "title": "Repositórios oficiais",
      "level": 4,
      "content": "Ansible possui um módulo do pacman para lidar com a instalação, remoção e atualização do sistema com o pacman.\n\n"
    },
    {
      "title": "AUR",
      "level": 4,
      "content": "Para o Arch User Repository (AUR), é necessário usar o módulo externo ansible-aur, o qual pode ser instalado com ansible-aur-gitAUR.\n\nEnquanto o Ansible espera um acesso ssh como root, os auxiliares do AUR não permitem a execução de operações como root, mas todos falham com \"você não pode executar esta operação como root\". Para automação Ansible, é recomendável criar um usuário, por exemplo chamado aur_builder, que não precise de senha com pacman em sudoers. Isso pode ser feito no Ansible com as seguintes ações:\n\n```\ntask.yml\n```\n\n```\n- user: name=aur_builder\n\n- lineinfile:\n     path: /etc/sudoers.d/aur_builder-allow-to-sudo-pacman\n     state: present\n     line: \"aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman\"\n     validate: /usr/sbin/visudo -cf %s\n     create: yes\n```\n\nEm seguida, os auxiliares do AUR ou makepkg podem ser usados associados aos parâmetros become: yes e become_user: aur_builder do Ansible.\n\n"
    },
    {
      "title": "Criação de conta de usuário",
      "level": 3,
      "content": "O Ansible pode gerenciar contas de usuário e, em particular, é capaz de criar novas. Isso é obtido em playbooks com o módulo de usuário, que utiliza um argumento opcional password para definir a senha do usuário. É o valor hash da senha que precisa ser fornecido ao módulo.\n\nO hash pode simplesmente ser executado instantaneamente no Ansible usando um de seus filtros internos hash-filter:\n\n```\n- user:\n  name: nome_do_usuário\n  password: \"{{ 'senha_do_usuário' | password_hash('sha512', 'saltdasenha') }}\"\n  shell: /usr/bin/nologin\n```\n\nCom essa abordagem, é recomendável criptografar senha_do_usuário com vault para que não apareça em texto sem formatação, consulte #Vault. No entanto, uma variável criptografada não pode ser canalizada diretamente e precisará primeiro ser atribuída a outra que será passada com pipe.\n\nComo alternativa, o hash pode ser realizado fora do Ansible. Os comandos a seguir retornam respectivamente os valores MD5 e SHA512 com hash de senha_do_usuário:\n\n```\n$ openssl passwd -1 senha_do_usuário\n```\n\n```\n$ python -c 'import crypt; print(crypt.crypt(\"senha_do_usuário\", crypt.mksalt(crypt.METHOD_SHA512)))'\n```\n\n"
    },
    {
      "title": "Localização do binário do Python",
      "level": 3,
      "content": "O Ansible requer Python na máquina de destino. Por padrão, o Ansible supõe que ele pode encontrar um /usr/bin/python no sistema remoto que é uma versão 2.X ou 3.X, especificamente 2.6 ou superior.\n\nSe alguns de seus módulos exigirem especificamente o Python2, você precisará informar o Ansible sobre sua localização, configurando a variável ansible_python_interpreter no arquivo de inventário. Isso pode ser feito usando grupos de hosts no inventário:\n\n```\n/etc/ansible/hosts\n```\n\n```\n[archlinux]\nservidor1\nservidor2\n\n[debian]\nservidor3\n\n[archlinux:vars]\nansible_python_interpreter=/usr/bin/python2\n```\n\nMais informações sobre o suporte à versão Python no Ansible estão disponíveis em [1], [2] e [3].\n\n"
    },
    {
      "title": "Unarchive",
      "level": 3,
      "content": "O módulo unarchive descompacta um arquivo. No entanto, os arquivos tar não são bem suportados e vários problemas pendentes são relatados em GitHub - unarchive. Em particular, quando o parâmetro keep_newer é definido como yes, a idempotência não é observada. Caso encontre um problema com o módulo, você pode usar o formato zip, que é melhor integrado ao Ansible.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- https://www.ansible.com/quick-start-video - Conceito do Ansible em 12 minutos\n- https://docs.ansible.com/ansible/latest/collections/community/general/pacman_module.html - Documentação oficial do módulo do pacman\n\n"
    }
  ]
}