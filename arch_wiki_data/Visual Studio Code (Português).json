{
  "title": "Visual Studio Code (Português)",
  "url": "https://wiki.archlinux.org/title/Visual_Studio_Code_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Visual Studio Code é um editor de texto de plataforma cruzada, livre e de código aberto (licenciado sob a licença MIT) desenvolvido pela Microsoft e escrito em JavaScript e TypeScript. Ele é construído sobre a estrutura Electron e é extensível usando extensões, que podem ser navegadas na web ou de dentro do próprio editor de texto. Enquanto o projeto é de código aberto, uma compilação proprietária (licenciada sob um Contrato de Licença de Usuário Final) também é fornecida pela Microsoft. Para obter uma explicação do licenciamento misto, consulte este comentário no GitHub.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "Os seguintes pacotes fornecem VSCode:\n\n- code (lançamento de código aberto)\n- visual-studio-code-binAUR (Lançamento da marca Microsoft)\n- visual-studio-code-insiders-binAUR (Lançamento da marca Microsoft, atualizado diariamente)\n- code-gitAUR (versão de código aberto em desenvolvimento)\n- vscodium-binAUR (outra versão de código aberto com uma configuração padrão orientada pela comunidade)\n\nUm servidor/módulo da Microsoft ptvsd (Python Tools for Visual Studio Debug) está disponível em python-ptvsdAUR[link quebrado: package not found].\n\n"
    },
    {
      "title": "Uso",
      "level": 2,
      "content": "Execute o code para iniciar o aplicativo (ou code-git ao usar o code-gitAUR).\n\nSe, por qualquer motivo, você desejar iniciar várias instâncias do Visual Studio Code, o sinalizador -n poderá ser usado.\n\n"
    },
    {
      "title": "Configuração",
      "level": 2,
      "content": "code armazena configurações em ~/.config/Code - OSS/User/settings.json.\n\nvisual-studio-code-binAUR armazena configurações em ~/.config/Code/User/settings.json.\n\n"
    },
    {
      "title": "Terminal Integrado",
      "level": 3,
      "content": "View > Integrated Terminal ou Ctrl + ` abre um terminal integrado. Por padrão, Bash é usado sem argumentos adicionais, embora isso possa ser alterado. terminal.integrated.shell.linux define o shell padrão a ser usado e terminal.integrated.shellArgs.linux define os argumentos a serem passados para o shell.\n\nExemplo:\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.integrated.shell.linux\": \"/usr/bin/fish\",\n\"terminal.integrated.shellArgs.linux\": [\"-l\",\"-d 3\"]\n```\n\nVocê pode enfrentar solicitações estranhas depois de definir os argumentos do shell integrado com terminal externo, remover a linha para resolver o problema ou usar um terminal externo.\n\n"
    },
    {
      "title": "Terminal externo",
      "level": 3,
      "content": "Se você estiver usando Terminator como terminal padrão para o Arch e tiver um erro no Código do Visual Studio: Não é possível iniciar o processo do depurador (vsdbg) através do terminal. spawn truecolor ENOENT, você pode alterar o terminal que será usado pelo Visual Studio para outro terminal (por exemplo,gnome-terminal).\n\n\"terminal.external.linuxExec\": \"Your alternative terminal\" define o terminal padrão a ser usado para depuração da execução.\n\nExemplo:\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.external.linuxExec\": \"gnome-terminal\"\n```\n\n"
    },
    {
      "title": "O menu global não funciona no KDE/Plasma",
      "level": 3,
      "content": "O Visual Studio Code usa o DBus para passar o menu para o plasma, tente instalar libdbusmenu-glib\n\n"
    },
    {
      "title": "Não foi possível mover itens para a lixeira",
      "level": 3,
      "content": "Por padrão, Electron os aplicativos usam gio para excluir arquivos. Diferentes implementações de lixo podem ser usadas configurando a variável de ambiente ELECTRON_TRASH.\n\nPor exemplo, para excluir arquivos no Plasma:\n\n```\n$ ELECTRON_TRASH=kioclient5 code\n```\n\nNo momento da redação deste artigo, o Electron possui suporte a kioclient5, kioclient, trash-cli, gio (padrão) e gvfs-trash (descontinuado). Mais informações estão disponíveis nesta página de documentação.\n\n"
    },
    {
      "title": "Falha ao depurar C#",
      "level": 3,
      "content": "Se você deseja depurar o C#.NET (usando a extensão OmniSharp), será necessário instalar o lançamento com a marca da Microsoft (do AUR). Aparentemente, isso ocorre porque o depurador do .NET Core é licenciado apenas para ser usado com os produtos oficiais da Microsoft - consulte esta discussão no GitHub\n\nAo usar o pacote de código aberto, a depuração falha bastante silenciosamente. O console de depuração mostrará apenas a mensagem inicial:\n\n```\nYou may only use the Microsoft .NET Core Debugger (vsdbg) with\nVisual Studio Code, Visual Studio or Visual Studio for Mac software\nto help you develop and test your applications.\n```\n\nPara depurar com o pacote de código aberto, netcoredbgAUR pode ser usado. Para executá-lo no VS Code, adicione esta configuração à configuração de inicialização do .NET Core do projeto:\n\n```\n./.vscode/launch.json\n```\n\n```\n\"configurations\": [\n    {\n...\n    \"pipeTransport\": {\n        \"pipeCwd\": \"${workspaceFolder}\",\n        \"pipeProgram\": \"/usr/bin/bash\",\n        \"pipeArgs\": [\"-c\"],\n        \"debuggerPath\": \"/usr/bin/netcoredbg\"\n    }\n...\n```\n\n"
    },
    {
      "title": "Falha ao abrir .csproj com servidor OmniSharp, local inválido de Microsoft.Common.props",
      "level": 3,
      "content": "É necessário alternar dos adereços da versão mono para os adequados da versão SDK:\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\n```\n\nModifique a importação para ficar assim:\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n/opt/dotnet/sdk/{VERSION}/Current/Microsoft.Common.props\n```\n\n"
    },
    {
      "title": "Erro do OmniSharp que \"MSBuild cannot be located\"",
      "level": 3,
      "content": "Notou-se na introdução do OmniSharp que os usuários do Arch Linux devem instalar o pacote mono-msbuild. Sem ele, você pode receber um erro como:\n\n```\nOmniSharp Log\n```\n\n```\n[info]: OmniSharp.MSBuild.Discovery.MSBuildLocator\n        Registered MSBuild instance: StandAlone 15.0 - \"~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\"\n            MSBuildExtensionsPath = /usr/lib/mono/xbuild\n            BypassFrameworkInstallChecks = true\n            CscToolPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin/Roslyn\n            CscToolExe = csc.exe\n            MSBuildToolsPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\n            TargetFrameworkRootPath = /usr/lib/mono/xbuild-frameworks\nSystem.TypeLoadException: Could not load type of field 'OmniSharp.MSBuild.ProjectManager:_queue' (13) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.5.24.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\n...\n```\n\nVocê pode construir de qualquer maneira (possivelmente dependendo se você tem o mono instalado)\n\n"
    },
    {
      "title": "Não é possível salvar com \"Retry as Sudo\"",
      "level": 3,
      "content": "Esse recurso não funciona no pacote code, porque a Microsoft não suporta a maneira como o pacote Arch é empacotado (nativo em vez do Electron incluído). Veja FS#61516 e o relatório de erro do upstream para obter mais informações.\n\nO lançamento binário visual-studio-code-binAUR não possui esse problema, e o recurso funciona lá.\n\n"
    },
    {
      "title": "Variantes de teclado ou mapeamentos de teclas não funcionam",
      "level": 3,
      "content": "Conforme a wiki no GitHub:\n\nConforme a wiki, há duas soluções possíveis:\n\n1. certifique-se que setxkbmap -query como o primeiro layout de teclado aquele que você deseha usar no VS Code.\n1. use \"keyboard.dispatch\": \"keyCode\" em suas configurações e reinicie o VS Code. Isso é para impedir o VS Code de tentar determinar seu layout de teclado.\n\n"
    },
    {
      "title": "Comando 'remote-containers.openFolder' não encontrado",
      "level": 3,
      "content": "Abra VS Code ativando a API de contêineres remotos conforme comentado em FS#63374\n\n```\n$ code-oss --enable-proposed-api ms-vscode-remote.remote-containers\n```\n\n"
    },
    {
      "title": "Faltando a API do VS Live Share",
      "level": 3,
      "content": "Instalar o pacote de código aberto code pode carecer de APIs propostas necessárias habilitadas por padrão, as quais permitiriam suporte à extrensão VS Live Share, resultando no erro\n\n```\n[VS Code] [ms-vsliveshare.vsliveshare]: Proposed API is only available when running out of dev or with the following command line switch: --enable-proposed-api ms-vsliveshare.vsliveshare\n```\n\nConforme a documentação da Microsoft, há algumas poucas soluções possíveis:\n\n1. Instalar os pacotes com a marca da Microsoft: visual-studio-code-binAUR, visual-studio-code-insiders-binAUR\n1. Adicionar as seguintes entradas à seção extensionAllowedProposedApi no arquivo product.json (code o instala usr/lib/code/product.json)\n\n```\n\"extensionAllowedProposedApi\": [\n    \"ms-vsliveshare.vsliveshare\",\n    \"ms-vscode.node-debug\",\n    \"ms-vscode.node-debug2\"\n]\n```\n\n"
    }
  ]
}