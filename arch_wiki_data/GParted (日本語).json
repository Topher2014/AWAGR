{
  "title": "GParted (日本語)",
  "url": "https://wiki.archlinux.org/title/GParted_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- fdisk\n- gdisk\n- パーティショニング\n\nGNU Parted はパーティションテーブルを作成したり操作するためのプログラムです。GParted は GUI フロントエンドです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 使用方法 2.1 コマンドラインモード 2.2 インタラクティブモード\n- 3 ラウンディング\n- 4 パーティショニング 4.1 新しいパーティションテーブルの作成 4.2 パーティションスキーム 4.2.1 UEFI/GPT の例 4.2.2 BIOS/MBR の例 4.3 パーティションのリサイズ 4.3.1 パーティションの拡大 4.3.2 パーティションの縮小\n- 5 ワーニング 5.1 アライメント\n- 6 ヒントとテクニック 6.1 アライメントのチェック\n- 7 参照\n\n- 2.1 コマンドラインモード\n- 2.2 インタラクティブモード\n\n- 4.1 新しいパーティションテーブルの作成\n- 4.2 パーティションスキーム 4.2.1 UEFI/GPT の例 4.2.2 BIOS/MBR の例\n- 4.3 パーティションのリサイズ 4.3.1 パーティションの拡大 4.3.2 パーティションの縮小\n\n- 4.2.1 UEFI/GPT の例\n- 4.2.2 BIOS/MBR の例\n\n- 4.3.1 パーティションの拡大\n- 4.3.2 パーティションの縮小\n\n- 5.1 アライメント\n\n- 6.1 アライメントのチェック\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "次のパッケージのいずれかを インストール して下さい:\n\n- parted – コマンドラインのみ\n- gparted – parted のグラフィカルフロントエンド\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "Parted には2つのモードがあります: コマンドラインモードとインタラクティブモードです。Parted は以下のように実行します:\n\n```\n# parted device\n```\n\nここでの、device は、(/dev/sda、/dev/nvme0n1、mmcblk0 などの ブロックデバイス です。device 引数を省略すると、parted は必要なデバイスを推測しようとします。\n\n"
    },
    {
      "title": "コマンドラインモード",
      "level": 3,
      "content": "コマンドラインモードでは、1つまたは複数のコマンドを指定します。例:\n\n```\n# parted /dev/sda mklabel gpt mkpart P1 ext3 1MiB 8MiB\n```\n\n"
    },
    {
      "title": "インタラクティブモード",
      "level": 3,
      "content": "インタラクティブモードではパーティショニングを簡単に行うことができ、指定したデバイスにパーティショニングコマンドで自動的に適用されるためコマンドを繰り返し実行する必要がありません。\n\nデバイスの操作を開始するには、以下のコマンドを実行:\n\n```\n# parted /dev/sdx\n```\n\nコマンドラインプロンプトがハッシュ (#) から (parted) に切り替わります。プロンプトの (parted) は手動で入力する必要があるコマンドではありません。\n\n利用可能なコマンドを確認するには:\n\n```\n(parted) help\n```\n\nパーティショニングが完了したときや、他のデバイスのパーティションテーブル・スキームを変更したい場合、以下のコマンドで parted を終了します:\n\n```\n(parted) quit\n```\n\n終了後、コマンドラインプロンプトは元の # に戻ります。\n\nコマンドにパラメータを指定しなかった場合、Parted はパラメータを尋ねます。例:\n\n```\n(parted) mklabel\nNew disk label type? gpt\n```\n\n"
    },
    {
      "title": "ラウンディング",
      "level": 2,
      "content": "多くのパーティショニングシステムには複雑な制約が存在するため、Parted はあなたが要求したことと少しだけ違うことをすることがあります (例えば、パーティションの開始位置を 10.4Mb から 10.352Mb に変えることがあります)。計算された値があまりにも食い違った場合、Parted はあなたに確認を行います。Parted が何をするのか詳しく知りたい場合は、\"unit s\" コマンドを使うことでパーティションの終末点がセクタで表示されます。また、細かく指定したい場合、セクタでパーティションの終末点を指定することもできます (\"s\" を後ろに付ける)。\n\nparted-2.4 から、“MiB”, “GiB”, “TiB” などのように IEC バイナリ単位を使って開始地点や終末地点を指定したとき、parted はそれらの値をバイト数で指定したときと同じ数値として正確に扱います (つまり “B” を付けたときと同じ)。そのため曖昧な誤差は生じません。逆に、“4GB” のようにパーティションの開始位置を指定した場合、その地点よりも最大で 500MB ほど前だったり後ろだったりになることがあります。従って、パーティションを作成するときは、バイト (“B”) やセクタ (“s”) を使うか “MiB” のような IEC バイナリ単位を使うほうが良いでしょう。\n\n"
    },
    {
      "title": "新しいパーティションテーブルの作成",
      "level": 3,
      "content": "- パーティションを分割する前に、NVMe ドライブと Advanced Format のハードディスクドライブが 最適な論理セクタサイズ を使用していることを確認してください。\n- SSD でパーティション分割する前に、メモリセルを消去 することを検討してください。\n\nパーティションを作成したことがない場合やパーティションテーブルのタイプを変更したいときはデバイスのパーティションテーブルを(再)作成する必要があります。スクラッチからパーティションスキームを再構築したい場合もデバイスのパーティションテーブルを再作成すると良いでしょう。\n\nパーティションテーブルを(再)作成したいデバイスを開いてください:\n\n```\n# parted /dev/sdx\n```\n\nGUID Partition Table を新しく作成したい場合、以下のコマンドを使用します:\n\n```\n(parted) mklabel gpt\n```\n\nMaster Boot Record/MS-DOS パーティションテーブルを新しく作成したい場合、以下のコマンドを実行:\n\n```\n(parted) mklabel msdos\n```\n\n"
    },
    {
      "title": "パーティションスキーム",
      "level": 3,
      "content": "デバイスを分割するパーティションの数と容量、どのディレクトリをパーティションにマウントするか (マウントポイント) 決めます。必要なパーティションについてはパーティショニング#パーティションスキームを見てください。\n\n以下のコマンドを使ってパーティションを作成できます:\n\n```\n(parted) mkpart part-type fs-type start end\n```\n\n- part-type は primary, extended, logical のどれかになります。MBR パーティションテーブルでのみ意味があります。\n- fs-type は使用するファイルシステムに一番適した識別子になります (help mkpart と入力してリストを確認できます)。mkpart コマンドはファイルシステムを作成するわけではありません: fs-type パラメータは単に parted が1バイトのコードを設定するのに使われ、コードによってブートローダーはパーティションに含まれているデータの種類をプレビューします。Wikipedia:Disk partitioning#PC partition types を参照。\n\n- start はパーティションのデバイスにおける開始位置です。数字と 単位 で指定し、例えば 1MiB なら 1 MiB が開始位置になります。\n- end はデバイスの先頭からのパーティションの終末位置です (start の値からの位置ではありません)。start と同じ形式で指定し、例えば 100% はデバイスの末尾までを意味します (全ての領域を使用します)。\n\n```\nWarning: The resulting partition is not properly aligned for best performance.\nIgnore/Cancel?\n```\n\n/boot ディレクトリを含むパーティションには以下のコマンドを使ってパーティションを起動可能にします:\n\n```\n(parted) set partition boot on\n```\n\n- partition はフラグを立てるパーティションの数字に置き換えてください (print コマンドの出力で数字を確認できます)。\n\n"
    },
    {
      "title": "UEFI/GPT の例",
      "level": 4,
      "content": "どのようにパーティショニングする場合でも、特殊な EFI System Partition が必要となります。\n\nEFI システムパーティションを新しく作成する場合、以下のコマンドを使います (推奨サイズは 550 MiB):\n\n```\n(parted) mkpart ESP fat32 1MiB 551MiB\n(parted) set 1 esp on\n```\n\n後はどのようにパーティションするかはあなた次第です。残り領域の 100% を使うパーティションをひとつだけ作成する場合:\n\n```\n(parted) mkpart primary ext4 551MiB 100%\n```\n\nあるいは / (20 GiB) と /home (残り全ての領域) パーティションに分ける場合:\n\n```\n(parted) mkpart primary ext4 551MiB 20.5GiB\n(parted) mkpart primary ext4 20.5GiB 100%\n```\n\nもしくは / (20 GiB), スワップ (4 GiB), /home (残りの全ての領域) パーティションに分割する場合:\n\n```\n(parted) mkpart primary ext4 551MiB 20.5GiB\n(parted) mkpart primary linux-swap 20.5GiB 24.5GiB\n(parted) mkpart primary ext4 24.5GiB 100%\n```\n\n"
    },
    {
      "title": "BIOS/MBR の例",
      "level": 4,
      "content": "ディスク領域を全て占有するプライマリパーティションをひとつだけ作る最小の構成の場合、以下のコマンドを使用:\n\n```\n(parted) mkpart primary ext4 1MiB 100%\n(parted) set 1 boot on\n```\n\n20 GiB の / パーティションを作成してから残り領域全てを使って /home パーティションを作成する例:\n\n```\n(parted) mkpart primary ext4 1MiB 20GiB\n(parted) set 1 boot on\n(parted) mkpart primary ext4 20GiB 100%\n```\n\n/boot (100 MiB), / (20 GiB), スワップ (4 GiB), /home (残り全領域) パーティションに分割して作成する場合:\n\n```\n(parted) mkpart primary ext3 1MiB 100MiB\n(parted) set 1 boot on\n(parted) mkpart primary ext3 100MiB 20GiB\n(parted) mkpart primary linux-swap 20GiB 24GiB\n(parted) mkpart primary ext3 24GiB 100%\n```\n\n"
    },
    {
      "title": "パーティションのリサイズ",
      "level": 3,
      "content": "- parted でできるのはパーティションの末端を移動することだけです。\n- parted v4.2 現在、resizepart を使うには #インタラクティブモード でなければなりません [2]。\n- 以下の手順は ext2, ext3, ext4 ファイルシステムを使っているパーティションの場合です。\n\nパーティションを拡大したい場合、パーティションをリサイズしてからパーティション上のファイルシステムをリサイズする必要があります。逆に、縮小する場合は、データが消失しないように先にファイルシステムをリサイズしてから、パーティションのリサイズを行います。\n\n"
    },
    {
      "title": "パーティションの拡大",
      "level": 4,
      "content": "パーティションを拡大するには (parted のインタラクティブモード):\n\n```\n(parted) resizepart number end\n```\n\nnumber は拡大したいパーティションの番号に置き換えて下さい。end がパーティションの新しい末端です (古い末端よりも大きくする必要があります)。\n\n次に、パーティションのファイルシステムを拡大します:\n\n```\n# resize2fs /dev/sdaX size\n```\n\nsdaX は拡大するパーティションに、size はパーティションの新しい容量に置き換えて下さい。\n\n"
    },
    {
      "title": "パーティションの縮小",
      "level": 4,
      "content": "パーティションのファイルシステムを縮小するには:\n\n```\n# resize2fs /dev/sdaX size\n```\n\nsdaX は縮小するパーティションに、size はパーティションの新しい容量に置き換えて下さい。\n\n次にパーティションを縮小 (parted のインタラクティブモード):\n\n```\n(parted) resizepart number end\n```\n\nnumber は縮小したいパーティションの番号に置き換えて下さい。end がパーティションの新しい末端です (古い末端よりも小さくする必要があります)。\n\n完了したら、util-linux の 'resizepart コマンドを使ってカーネルに新しい容量を通知します:\n\n```\n# resizepart device number size\n```\n\ndevice はパーティションが存在するデバイスに、number はパーティションの番号に、size はパーティションの新しい容量に置き換えて下さい。\n\n"
    },
    {
      "title": "ワーニング",
      "level": 2,
      "content": "危険な操作をしようとすると Parted はかならず警告を表示します。ただし本質的に危険なコマンドについては別です (viz., rm, mklabel, mkpart)。\n\n"
    },
    {
      "title": "アライメント",
      "level": 3,
      "content": "パーティションの作成時、parted はパーティションのアライメントが正しくないと警告することがありますが、正しいアライメントについてのヒントは教えてくれません。例:\n\n```\n(parted) mkpart primary fat16 0 32M\nWarning: The resulting partition is not properly aligned for best performance.\nIgnore/Cancel?\n```\n\nこの警告はパーティションの開始位置がアラインされていないことを意味しています。\"Ignore\" と入力すると先に進み、開始位置がわかるようにパーティションテーブルがセクタで表示され、警告がなくなるまで2の冪まで開始セクタが切り上げられてパーティションが削除/再作成されます。例えば、512B セクタのフラッシュドライブの場合、Parted は 2048 の倍数のセクタでパーティションを開始させようとします (1MiB アライメント)。\n\nparted に適切なアライメントを計算して欲しいときは、開始位置に具体的な数字の代わりに 0% を指定してください。例えば巨大なひとつの ext4 パーティションを作成する場合:\n\n```\n(parted) mkpart primary ext4 0% 100%\n```\n\n"
    },
    {
      "title": "アライメントのチェック",
      "level": 3,
      "content": "既にパーティション済みのディスクで parted を使ってデバイスのパーティションのアライメントを検証することができます。例えば、/dev/sda の1番目のパーティションのアライメントを確認するには:\n\n```\n# parted /dev/sda\n(parted) align-check optimal 1\n1 aligned\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- GNU parted - Parted ユーザーマニュアル\n- How to align partitions for best performance using parted\n- Resize an ext3/ext4 partition\n- 公式 GParted フォーラム\n\n"
    }
  ]
}