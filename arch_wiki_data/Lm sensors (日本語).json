{
  "title": "Lm sensors (日本語)",
  "url": "https://wiki.archlinux.org/title/Lm_sensors_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ファンスピード制御\n- hddtemp\n- I2C\n- monitorix\n\nlm_sensors (Linux monitoring sensors) は、温度、電圧、ファン、を監視するためのツールやドライバーを提供するフリーなオープンソースアプリケーションです。このドキュメントでは lm_sensors をインストール・設定・使用する方法を説明します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定\n- 3 sensors の実行 3.1 メモリモジュールから SPD の値を読み込む (任意)\n- 4 センサーデータの利用 4.1 グラフィカルフロントエンド 4.2 sensord\n- 5 ヒントとテクニック 5.1 値の調整 5.1.1 例 1. 温度のオフセットを調整 5.1.2 例 2. ラベルの名前の変更 5.1.3 例 3. マルチ CPU 環境でコアの番号を再定義する 5.2 lm_sensors の自動デプロイ 5.3 S.M.A.R.T. ドライブの温度 5.4 永続的なデバイス名\n- 6 トラブルシューティング 6.1 K10Temp モジュール 6.2 Asus B450M-A/A320M-K/A320M-K-BR マザーボード 6.3 AM4 ソケットを備えた Asus B450/X399/X470 マザーボード 6.4 Asus H97/Z97/Z170/Z370i/X570/B550 マザーボード 6.5 Asrock Deskmini H470 6.6 Gigabyte B250/Z370/B450M/B560M/B660M/Z690 マザーボード 6.7 Gigabyte GA-J1900N-D3V 6.8 MAG B650 TOMAHAWK WIFI (MS-7D75) 6.9 Asrock B650M Pro RS 6.10 sensors-detect を実行した後にノートパソコンのディスプレイに問題が発生する\n\n- 3.1 メモリモジュールから SPD の値を読み込む (任意)\n\n- 4.1 グラフィカルフロントエンド\n- 4.2 sensord\n\n- 5.1 値の調整 5.1.1 例 1. 温度のオフセットを調整 5.1.2 例 2. ラベルの名前の変更 5.1.3 例 3. マルチ CPU 環境でコアの番号を再定義する\n- 5.2 lm_sensors の自動デプロイ\n- 5.3 S.M.A.R.T. ドライブの温度\n- 5.4 永続的なデバイス名\n\n- 5.1.1 例 1. 温度のオフセットを調整\n- 5.1.2 例 2. ラベルの名前の変更\n- 5.1.3 例 3. マルチ CPU 環境でコアの番号を再定義する\n\n- 6.1 K10Temp モジュール\n- 6.2 Asus B450M-A/A320M-K/A320M-K-BR マザーボード\n- 6.3 AM4 ソケットを備えた Asus B450/X399/X470 マザーボード\n- 6.4 Asus H97/Z97/Z170/Z370i/X570/B550 マザーボード\n- 6.5 Asrock Deskmini H470\n- 6.6 Gigabyte B250/Z370/B450M/B560M/B660M/Z690 マザーボード\n- 6.7 Gigabyte GA-J1900N-D3V\n- 6.8 MAG B650 TOMAHAWK WIFI (MS-7D75)\n- 6.9 Asrock B650M Pro RS\n- 6.10 sensors-detect を実行した後にノートパソコンのディスプレイに問題が発生する\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "公式リポジトリから lm_sensors パッケージをインストールしてください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "root で sensors-detect を使用して、カーネルモジュールのリストを検出して生成します。\n\n```\n# sensors-detect\n```\n\nさまざまなハードウェアを調査するよう求められます。\"安全な\" 回答がデフォルトであるため、すべての質問に対して Enter を押していれば、通常は問題が発生しません。これにより、起動時にカーネルモジュールを自動的にロードするために lm_sensors.service によって使用される /etc/conf.d/lm_sensors 設定ファイルが作成されます。\n\n検知が完了したら、調査結果が表示されます。\n\n例:\n\n```\n# sensors-detect\n```\n\n```\nThis program will help you determine which kernel modules you need\nto load to use lm_sensors most effectively. It is generally safe\nand recommended to accept the default answers to all questions,\nunless you know what you're doing.\n\nSome south bridges, CPUs or memory controllers contain embedded sensors.\nDo you want to scan for them? This is totally safe. (YES/no): \nModule cpuid loaded successfully.\nSilicon Integrated Systems SIS5595...                       No\nVIA VT82C686 Integrated Sensors...                          No\nVIA VT8231 Integrated Sensors...                            No\nAMD K8 thermal sensors...                                   No\nAMD Family 10h thermal sensors...                           No\n\n...\n\nNow follows a summary of the probes I have just done.\nJust press ENTER to continue: \n\nDriver `coretemp':\n  * Chip `Intel digital thermal sensor' (confidence: 9)\n\nDriver `lm90':\n  * Bus `SMBus nForce2 adapter at 4d00'\n    Busdriver `i2c_nforce2', I2C address 0x4c\n    Chip `Winbond W83L771AWG/ASG' (confidence: 6)\n\nDo you want to overwrite /etc/conf.d/lm_sensors? (YES/no): \nln -s '/usr/lib/systemd/system/lm_sensors.service' '/etc/systemd/system/multi-user.target.wants/lm_sensors.service'\nUnloading i2c-dev... OK\nUnloading cpuid... OK\n```\n\n"
    },
    {
      "title": "sensors の実行",
      "level": 2,
      "content": "sensors の実行例:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +35.0°C  (crit = +105.0°C)\nCore 1:       +32.0°C  (crit = +105.0°C)\n\nw83l771-i2c-0-4c\nAdapter: SMBus nForce2 adapter at 4d00\ntemp1:        +28.0°C  (low  = -40.0°C, high = +70.0°C)\n                       (crit = +85.0°C, hyst = +75.0°C)\ntemp2:        +37.4°C  (low  = -40.0°C, high = +70.0°C)\n                       (crit = +110.0°C, hyst = +100.0°C)\n```\n\n"
    },
    {
      "title": "メモリモジュールから SPD の値を読み込む (任意)",
      "level": 3,
      "content": "メモリモジュールから SPD のタイミング値を読み込むには i2c-tools パッケージをインストールしてください。インストールしたら eeprom カーネルモジュールをロードしてください:\n\n```\n# modprobe eeprom\n```\n\n最後に decode-dimms でメモリ情報を確認してください。\n\n以下は出力の例です:\n\n```\n# decode-dimms\n```\n\n```\nMemory Serial Presence Detect Decoder\nBy Philip Edelbrock, Christian Zuckschwerdt, Burkart Lingner,\nJean Delvare, Trent Piepho and others\n\n\nDecoding EEPROM: /sys/bus/i2c/drivers/eeprom/0-0050\nGuessing DIMM is in                             bank 1\n\n---=== SPD EEPROM Information ===---\nEEPROM CRC of bytes 0-116                       OK (0x583F)\n# of bytes written to SDRAM EEPROM              176\nTotal number of bytes in EEPROM                 512\nFundamental Memory type                         DDR3 SDRAM\nModule Type                                     UDIMM\n\n---=== Memory Characteristics ===---\nFine time base                                  2.500 ps\nMedium time base                                0.125 ns\nMaximum module speed                            1066MHz (PC3-8533)\nSize                                            2048 MB\nBanks x Rows x Columns x Bits                   8 x 14 x 10 x 64\nRanks                                           2\nSDRAM Device Width                              8 bits\ntCL-tRCD-tRP-tRAS                               7-7-7-33\nSupported CAS Latencies (tCL)                   8T, 7T, 6T, 5T\n\n---=== Timing Parameters ===---\nMinimum Write Recovery time (tWR)               15.000 ns\nMinimum Row Active to Row Active Delay (tRRD)   7.500 ns\nMinimum Active to Auto-Refresh Delay (tRC)      49.500 ns\nMinimum Recovery Delay (tRFC)                   110.000 ns\nMinimum Write to Read CMD Delay (tWTR)          7.500 ns\nMinimum Read to Pre-charge CMD Delay (tRTP)     7.500 ns\nMinimum Four Activate Window Delay (tFAW)       30.000 ns\n\n---=== Optional Features ===---\nOperable voltages                               1.5V\nRZQ/6 supported?                                Yes\nRZQ/7 supported?                                Yes\nDLL-Off Mode supported?                         No\nOperating temperature range                     0-85C\nRefresh Rate in extended temp range             1X\nAuto Self-Refresh?                              Yes\nOn-Die Thermal Sensor readout?                  No\nPartial Array Self-Refresh?                     No\nThermal Sensor Accuracy                         Not implemented\nSDRAM Device Type                               Standard Monolithic\n\n---=== Physical Characteristics ===---\nModule Height (mm)                              15\nModule Thickness (mm)                           1 front, 1 back\nModule Width (mm)                               133.5\nModule Reference Card                           B\n\n---=== Manufacturer Data ===---\nModule Manufacturer                             Invalid\nManufacturing Location Code                     0x02\nPart Number                                     OCZ3G1600LV2G     \n\n...\n```\n\n"
    },
    {
      "title": "グラフィカルフロントエンド",
      "level": 3,
      "content": "センサーのデータを表示するための様々なフロントエンドが存在します:\n\n- psensor — 温度やファン速度などのハードウェアセンサーを監視するための GTK アプリケーション。マザーボードと CPU (lm-sensors を使用)、Nvidia GPU (XNVCtrl を使用)、およびハードディスク (hddtemp または libashismart を使用) を監視します。\n\n- xsensors — lm_sensors の X11 インターフェイス\n\n- Netdata — Web ベースのシステムモニター (netdata)。\n\n- CoolerControl — 冷却装置を監視および制御するプログラム。\n\nデスクトップ環境で使えるフロントエンド:\n\n- Freon (GNOME Shell extension) — GNOME シェルで CPU 温度、ディスク温度、ビデオカード温度、電圧、ファン RPM を表示するための拡張機能。\n\n- GNOME Sensors Applet — CPU 温度、ファン速度、電圧測定値などのハードウェアセンサーからの測定値を表示する GNOME パネル用のアプレット。\n\n- lm-sensors (LXPanel plugin) — lm-sensorsを通じて LXDE の温度/電圧/ファン速度を監視します。\n\n- MATE Sensors Applet — MATE パネルにハードウェアセンサーからの測定値を表示します。\n\n- Sensors (Xfce4 panel plugin) — Xfce パネル用のハードウェアセンサープラグイン。\n\n- Thermal Monitor (Plasma 5 applet) — KDE CPU、GPU、およびその他の利用可能な温度センサーを監視するための Plasma アプレット。\n\n"
    },
    {
      "title": "sensord",
      "level": 3,
      "content": "sensord と呼ばれるオプションのデーモンが (lm_sensors パッケージに含まれています) データをラウンドロビンデータベース (rrd) に記録し、後でグラフィカルに視覚化できます。詳細については、sensord(8) のマニュアル ページを参照してください。\n\n"
    },
    {
      "title": "値の調整",
      "level": 3,
      "content": "ときとして、表示されるデータが間違っていたり出力をリネームしたいという場合があります。例:\n\n- オフセットが間違っているために温度の値が間違っている (実際の温度よりも 20 °C も高く報告されるなど)\n- 特定のセンサーの出力をリネームしたい。\n- 表示されるコアの順番が間違っている。\n\n上記は全て /etc/sensors.d/foo を作成して /etc/sensors3.conf のパッケージ設定を上書きすることで調整できます。'foo' はマザーボードのブランド名に置き換えることを推奨しますが特に命名に決まりはありません。\n\n"
    },
    {
      "title": "例 1. 温度のオフセットを調整",
      "level": 4,
      "content": "以下は Zotac ION-ITX-A-U マザーボードの実例です。coretemp の値が 20 °C だけずれている (高すぎる) ので Intel の仕様にあわせて低く調整します:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +57.0°C  (crit = +125.0°C)\nCore 1:       +55.0°C  (crit = +125.0°C)\n...\n```\n\n物理チップに対してどのようなオプションが利用できるか sensors に -u スイッチをつけて調べてください (raw モード):\n\n```\n$ sensors -u\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 57.000\n  temp2_crit: 125.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 55.000\n  temp3_crit: 125.000\n  temp3_crit_alarm: 0.000\n...\n```\n\nデフォルトの値を上書きするために以下のファイルを作成:\n\n```\n/etc/sensors.d/Zotac-IONITX-A-U\n```\n\n```\nchip \"coretemp-isa-0000\"\n  label temp2 \"Core 0\"\n  compute temp2 @-20,@-20\n\n  label temp3 \"Core 1\"\n  compute temp3 @-20,@-20\n```\n\nsensors を実行すると調整された値が表示されるようになります:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +37.0°C  (crit = +105.0°C)\nCore 1:       +35.0°C  (crit = +105.0°C)\n...\n```\n\n"
    },
    {
      "title": "例 2. ラベルの名前の変更",
      "level": 4,
      "content": "以下は Asus A7M266 の実例です。温度のラベル 'temp1' と 'temp2' にもっとちゃんとした名前を付けます:\n\n```\n$ sensors\n```\n\n```\nas99127f-i2c-0-2d\nAdapter: SMBus Via Pro adapter at e800\n...\ntemp1:        +35.0°C  (high =  +0.0°C, hyst = -128.0°C)\ntemp2:        +47.5°C  (high = +100.0°C, hyst = +75.0°C)\n...\n```\n\nデフォルトの値を上書きするために以下のファイルを作成:\n\n```\n/etc/sensors.d/Asus_A7M266\n```\n\n```\nchip \"as99127f-*\"\n  label temp1 \"Mobo Temp\"\n  label temp2 \"CPU0 Temp\"\n```\n\nsensors を実行すると調整された値が表示されるようになります:\n\n```\n$ sensors\n```\n\n```\nas99127f-i2c-0-2d\nAdapter: SMBus Via Pro adapter at e800\n...\nMobo Temp:        +35.0°C  (high =  +0.0°C, hyst = -128.0°C)\nCPU0 Temp:        +47.5°C  (high = +100.0°C, hyst = +75.0°C)\n...\n```\n\n"
    },
    {
      "title": "例 3. マルチ CPU 環境でコアの番号を再定義する",
      "level": 4,
      "content": "以下はデュアル CPU の Xeon を搭載した HP Z600 ワークステーションの実例です。物理コアの順番が間違っています: 0, 1, 9, 10 が2番目の CPU でも繰り返されてしまっています。0, 1, 2, 3, 4, 5, 6, 7 と連続した順番でコアの温度を表示してほしいと大抵のユーザーは思うでしょう。\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 1:       +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 9:       +66.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 10:      +66.0°C  (high = +85.0°C, crit = +95.0°C)\n\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore 0:       +54.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 1:       +56.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 9:       +60.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 10:      +61.0°C  (high = +85.0°C, crit = +95.0°C)\n...\n```\n\n物理チップに対してどのようなオプションが利用できるか sensors に -u スイッチをつけて調べてください:\n\n```\n$ sensors -u coretemp-isa-0000\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 61.000\n  temp2_max: 85.000\n  temp2_crit: 95.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 61.000\n  temp3_max: 85.000\n  temp3_crit: 95.000\n  temp3_crit_alarm: 0.000\nCore 9:\n  temp11_input: 62.000\n  temp11_max: 85.000\n  temp11_crit: 95.000\nCore 10:\n  temp12_input: 63.000\n  temp12_max: 85.000\n  temp12_crit: 95.000\n```\n\n```\n$ sensors -u coretemp-isa-0004\n```\n\n```\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 53.000\n  temp2_max: 85.000\n  temp2_crit: 95.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 54.000\n  temp3_max: 85.000\n  temp3_crit: 95.000\n  temp3_crit_alarm: 0.000\nCore 9:\n  temp11_input: 59.000\n  temp11_max: 85.000\n  temp11_crit: 95.000\nCore 10:\n  temp12_input: 59.000\n  temp12_max: 85.000\n  temp12_crit: 95.000\n...\n```\n\nデフォルトの値を上書きするために以下のファイルを作成:\n\n```\n/etc/sensors.d/HP_Z600\n```\n\n```\nchip \"coretemp-isa-0000\"\n  label temp2 \"Core 0\"\n  label temp3 \"Core 1\"\n  label temp11 \"Core 2\"\n  label temp12 \"Core 3\"\n\nchip \"coretemp-isa-0004\"\n  label temp2 \"Core 4\"\n  label temp3 \"Core 5\"\n  label temp11 \"Core 6\"\n  label temp12 \"Core 7\"\n```\n\nsensors を実行すると調整された値が表示されるようになります:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore0:        +64.0°C  (high = +85.0°C, crit = +95.0°C)\nCore1:        +63.0°C  (high = +85.0°C, crit = +95.0°C)\nCore2:        +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore3:        +66.0°C  (high = +85.0°C, crit = +95.0°C)\n\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore4:        +53.0°C  (high = +85.0°C, crit = +95.0°C)\nCore5:        +54.0°C  (high = +85.0°C, crit = +95.0°C)\nCore6:        +59.0°C  (high = +85.0°C, crit = +95.0°C)\nCore7:        +60.0°C  (high = +85.0°C, crit = +95.0°C)\n...\n```\n\n"
    },
    {
      "title": "lm_sensors の自動デプロイ",
      "level": 3,
      "content": "複数のマシンに lm_sensors をデプロイしたい場合、以下のどちらかの方法でできます:\n\n1. 質問に対してデフォルトの答えを設定:\n\n```\n# sensors-detect --auto\n```\n\n2. デフォルトを上書きして全ての質問に YES で答える:\n\n```\n# yes | sensors-detect\n```\n\n"
    },
    {
      "title": "S.M.A.R.T. ドライブの温度",
      "level": 3,
      "content": "カーネル 5.6 以降 drivetemp モジュールは hwmon を通じて SATA/SAS 温度を報告しますが、sensors-detect は自動的に検出しませんしたがって、モジュールは 手動ロード でなければなりません。\n\n```\n# modprobe drivetemp\n```\n\nsensors の出力に次のようなエントリが表示されるはずです。\n\n```\nsensors\n```\n\n```\ndrivetemp-scsi-1-0\nAdapter: SCSI adapter\ntemp1:        +33.0°C \n\ndrivetemp-scsi-2-0\nAdapter: SCSI adapter\ntemp1:        +32.0°C  (low  =  +0.0°C, high = +70.0°C)\n                       (crit low =  +0.0°C, crit = +70.0°C)\n                       (lowest = +29.0°C, highest = +41.0°C)\n```\n\n起動時にモジュールをロードできるようになりました。あるいは、/etc/conf.d/lm-sensors の HWMON_MODULES 行に手動で追加します。sensors-detect がこのファイルに再び書き込むことを許可される場合、このファイルは自動的に追加されないことに注意してください。\n\n"
    },
    {
      "title": "永続的なデバイス名",
      "level": 3,
      "content": "多くのソフトウェアはセンサーデバイスが /sys/class/hwmon/hwmonX に配置されることを期待していますが、多くの場合、hwmon インターフェイスを提供するデバイスが 1 〜 2 つ以上あるシステムではそうではありません。ソフトウェアはおそらく hwmon?/name を解析するか、lmsensors ライブラリを使用する必要がありますが、残念ながら多くの場合、そうではありません。一部のソフトウェア (例: Monitorix またはその特定のモジュール、つまり amdgpu) は、別の場所に永続的な名前が必要です。\n\nしたがって、次の種類の udev ルールが役立つ可能性があります。すべてのソフトウェアがこれらを使用できるわけではありません (たとえば、KDE ​​システムモニター - 悲しいことに、多くのシステムでこれらのソフトウェアはほとんど役に立ちません) 多くの場合、udev ルールで hwmon サブシステムと適切な名前をマッチさせるだけで十分です、ルールの書き方については、Udevページを見てください。\n\n/sys 階層では名前を変更したりシンボリックリンクを作成したりすることはできません。SYMLINK+= ステートメントも機能しません。したがって、RUN+= ステートメントを使用する必要があります (この例のように、シンボリックリンクは /dev の下にある必要はありません。)\n\n```\n/etc/udev/rules.d/99-persistent-hwmon-names.rules\n```\n\n```\n# my motherboard sensor chip:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{name}==\"nct6687\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/nct6678'\"\n# an USB device providing sensors:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{name}==\"corsaircpro\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/corsaircpro'\"\n# my GPU:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{vendor}==\"0x1002\", ATTRS{device}==\"0x73bf\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/rx6900xt'\"\n```\n\n"
    },
    {
      "title": "K10Temp モジュール",
      "level": 3,
      "content": "一部の K10 プロセッサでは温度センサーに問題が起こることがあります。カーネルドキュメントより (linux-<version>/Documentation/hwmon/k10temp):\n\n影響を受けるマシンではモジュールは \"unreliable CPU thermal sensor; monitoring disabled\" と報告します。強制的に使用するには:\n\n```\n# rmmod k10temp\n# modprobe k10temp force=1\n```\n\nセンサーが問題ないことを確認してください。確認がとれたのであれば /etc/modprobe.d/k10temp.conf を編集して以下を追加:\n\n```\noptions k10temp force=1\n```\n\nこれでモジュールがブート時にロードされるようになります。\n\n"
    },
    {
      "title": "Asus B450M-A/A320M-K/A320M-K-BR マザーボード",
      "level": 3,
      "content": "これらのマザーボードは IT8655E チップを使用していますが、2020 年 11 月現在、it87 カーネル ドライバーではサポートされていません [1] ただし、カーネルドライバーのアップストリームバージョン [2] ではサポートされています。DKMS バリアントは it87-dkms-gitAUR に含まれています。\n\n"
    },
    {
      "title": "AM4 ソケットを備えた Asus B450/X399/X470 マザーボード",
      "level": 3,
      "content": "最近の Asus マザーボードの一部は ITE IT8665E チップを使用しており、温度、ファン、電圧センサーにアクセスするには asus-wmi-sensors モジュールが必要な場合があります。これは 5.17 以降のメインラインカーネルの一部です。asus-wmi-sensors カーネルモジュール をロードして下さい。これには UEFI インターフェイスを使用し、一部のボードでは BIOS アップデートが必要な場合があります [3]\n\nあるいは、it87 モジュールはチップから値を直接読み取り、it87-dkms-gitAUR をインストールして、it87 カーネルモジュール をロードします。\n\n"
    },
    {
      "title": "Asus H97/Z97/Z170/Z370i/X570/B550 マザーボード",
      "level": 3,
      "content": "最近の Asus マザーボードの一部では、ファンと電圧センサーにアクセスするには、nct6775 カーネルモジュール をロードする必要がある場合があります。\n\n次の カーネルパラメータ を追加する必要がある場合もあります。\n\n```\nacpi_enforce_resources=lax\n```\n\n詳細については、https://bugzilla.kernel.org/show_bug.cgi?id=204807 を参照してください。\n\n注意: カーネル 5.16 [4] 以降、上記の カーネルパラメータ はほとんどのボードで必要なくなりましたので、避ける必要があります。\n\n"
    },
    {
      "title": "Asrock Deskmini H470",
      "level": 3,
      "content": "Deskmini H470 の STX ボードは NCT6683 チップを使用しており、温度、ファン、電圧センサーにアクセスするには、nct6683 モジュールのロードが必要です。\n\nnct6683 モジュールの適切な値を得るには、モジュール設定ファイルを作成します:\n\n```\n/etc/modprobe.d/nct6683.conf\n```\n\n```\noptions nct6683 force=1\n```\n\n"
    },
    {
      "title": "Gigabyte B250/Z370/B450M/B560M/B660M/Z690 マザーボード",
      "level": 3,
      "content": "一部の Gigabyte マザーボードでは、ITE IT8686E、ITE8689 (B560 および B660M 用)、または ITE8689E (Z690 用) チップを使用していますが、2019 年 5 月の時点では、it87 カーネルドライバーではサポートされていません [5] ただし、カーネルドライバーのアップストリームバージョン [6] ではサポートされています。DKMS バリアントは it87-dkms-gitAUR に含まれています。lm_sensors#Asus H97/Z97/Z170/Z370i/X570/B550 マザーボード と同様に、モジュールをインストールする前に カーネルパラメータ が必要です:\n\n```\nacpi_enforce_resources=lax\n```\n\nさらに、モジュールをロードするときに次のようにチップの ID を指定します:\n\n```\n# modprobe it87 force_id=0x8686\nもしくは\n# modprobe it87 force_id=0x8689  # for B560\n# modprobe it87 force_id=0x8628  # for Z690\n```\n\nまたは、次の 2 つのファイルを作成することで、ブートプロセス中に モジュールをロード することもできます。\n\n```\n/etc/modules-load.d/it87.conf\n```\n\n```\nit87\n```\n\nZ690 用\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 force_id=0x8628\n```\n\n他の場合\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 ignore_resource_conflict=1\n```\n\nモジュールがロードされたら、センサー ツールを使用してチップをプローブできます。 fancontrol を使用してケースファンの速度ステップを制御することもできるようになりました。\n\nオプションで zenpower3-dkmsAUR をインストールすると、マザーボードの冷却システムをより細かく調整できる場合があります。ただし、デフォルトの k10temp モジュールは無効になります。\n\n"
    },
    {
      "title": "Gigabyte GA-J1900N-D3V",
      "level": 3,
      "content": "(電圧やマザーボードの温度、ファンの速度を測定するために) ITE IT8620E チップを使用するマザーボードですが、2014年10月6日現在、lm_sensors は ITE IT8620E をサポートしていません [7] [8]。lm_sensors の開発者はハードウェアの監視部分については IT8728F と互換性があることを報告しています。ただし、2016年8月現在では [9] に IT8620E がサポートされていると載っています。\n\nmodprobe を使うことで動的にモジュールをロードできます:\n\n```\n$ modprobe it87 force_id=0x8728\n```\n\nもしくは、以下の2つのファイルを作成することで起動時にモジュールをロードすることもできます:\n\n```\n/etc/modules-load.d/it87.conf\n```\n\n```\nit87\n```\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 force_id=0x8603\n```\n\nモジュールがロードされたら sensors ツールで情報を読み取ることができます。\n\nまた、fancontrol を使ってケースファンの速度を制御することも可能です。\n\n"
    },
    {
      "title": "MAG B650 TOMAHAWK WIFI (MS-7D75)",
      "level": 3,
      "content": "このマザーボードは、ファン、電圧、温度の読み取りに Nuvoton NCT6687-R チップを使用しています。これらの値にアクセスするには、カーネルモジュール nct6687d-dkms-gitAUR が必要です。\n\nインストールしたらモジュールをロードできます\n\n```\n$ modprobe nct6687\n```\n\nそしてセンサーの出力を確認します\n\n```\n$ sensors\n```\n\n"
    },
    {
      "title": "Asrock B650M Pro RS",
      "level": 3,
      "content": "このマザーボードは、ファン、電圧、温度の読み取りに Nuvoton NCT6796D-S を使用しています。チップのこの正確なバリアントは異なる ID を持っているため、モジュール構成ファイルがなければ検出されません。\n\n```\n/etc/modprobe.d/nct6775.conf\n```\n\n```\noptions nct6775 force_id=0xd801\n```\n\n"
    },
    {
      "title": "sensors-detect を実行した後にノートパソコンのディスプレイに問題が発生する",
      "level": 3,
      "content": "lm-sensors がセンサーを調べるときにディスプレイの Vcom 値を変えてしまうのが原因です。フォーラムに解決法が載っています: https://bbs.archlinux.org/viewtopic.php?id=193048 。ただし、フォーラムに書かれているコマンドを安易に実行する前によく中身を読んでください。\n\n"
    }
  ]
}