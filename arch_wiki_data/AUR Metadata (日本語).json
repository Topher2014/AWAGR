{
  "title": "AUR Metadata (日本語)",
  "url": "https://wiki.archlinux.org/title/AUR_Metadata_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- makepkg\n- pacman\n- PKGBUILD\n- .SRCINFO\n- Aurweb RPC インターフェース\n- AUR 投稿ガイドライン\n- AUR Trusted User ガイドライン\n- 公式リポジトリ\n- Arch Build System\n- パッケージの作成\n- AUR ヘルパー\n- AUR クリーンアップデー\n\nArch User Repository (AUR) はコミュニティによって運営されている、Arch ユーザーのためのリポジトリです。パッケージのビルド方法が書かれたファイル (PKGBUILD) がまとめて置かれており、makepkg を使ってソースからパッケージを作り、生成したパッケージを pacman でインストールすることができます。人気のあるパッケージが extra リポジトリに取り込まれるように、コミュニティの手で新しいパッケージを共有することを目的に AUR は作られました。このページでは AUR の使用方法を説明します。\n\nAUR に投稿された新しいパッケージの一部は公式リポジトリに取り込まれています。AUR では、ユーザーはパッケージビルド (PKGBUILD と関連ファイル) を投稿することができます。AUR コミュニティには AUR に存在するパッケージに対して投票する機能があります。投票が十分に集まると (ライセンスに問題がなくきちんとパッケージ化されているならば) extra リポジトリに取り込まれます (pacman や abs で直接入手できるようになります)。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 はじめに\n- 2 パッケージをインストール・アップグレードする 2.1 要件 2.2 ビルドファイルを取得する 2.3 必要であれば PGP 公開鍵を取得する 2.4 パッケージをビルドする 2.5 パッケージをインストールする 2.6 パッケージをアップグレードする 2.7 パッケージをアップデートする\n- 3 アカウントステータス 3.1 休止 (Suspension) 3.2 活動休止 (Inactivity)\n- 4 フィードバック 4.1 パッケージにコメントする 4.2 パッケージに投票する 4.3 パッケージに out-of-date フラグを立てる\n- 5 パッケージのビルドプロセスをデバッグする\n- 6 パッケージを投稿する\n- 7 ウェブインターフェイスの翻訳\n- 8 歴史 8.1 AUR3 パッケージの Git リポジトリ\n- 9 FAQ 9.1 どのような種類のパッケージが AUR に置かれていますか? 9.2 どうすれば AUR 内のパッケージに投票できますか? 9.3 Trusted User / TU とは何ですか? 9.4 Arch User Repository と extra リポジトリの違いは何ですか? 9.5 AUR の Hoge が古くなっています、どうするべきでしょうか? 9.6 AUR の Hoge を makepkg でコンパイルすることができません。どうしたらいいですか? 9.7 ERROR: One or more PGP signatures could not be verified! この場合、どうすればよいですか? 9.8 どうやって PKGBUILD を作るのですか? 9.9 PKGBUILD を作って投稿したいと思っています。エラーがないか誰かチェックしてくれるでしょうか? 9.10 どうすれば PKGBUILD が extra リポジトリに移されるのですか? 9.11 繰り返されるビルドプロセスを速めるにはどうすればよいですか? 9.12 foo と foo-git パッケージは何が違うのですか? 9.13 Foo が AUR から消えたのはなぜですか? 9.14 インストール済みのパッケージが AUR から消えてしまっているかどうかを確かめるには? 9.15 全ての AUR パッケージのリストを入手するには?\n- 10 参照\n\n- 2.1 要件\n- 2.2 ビルドファイルを取得する\n- 2.3 必要であれば PGP 公開鍵を取得する\n- 2.4 パッケージをビルドする\n- 2.5 パッケージをインストールする\n- 2.6 パッケージをアップグレードする\n- 2.7 パッケージをアップデートする\n\n- 3.1 休止 (Suspension)\n- 3.2 活動休止 (Inactivity)\n\n- 4.1 パッケージにコメントする\n- 4.2 パッケージに投票する\n- 4.3 パッケージに out-of-date フラグを立てる\n\n- 8.1 AUR3 パッケージの Git リポジトリ\n\n- 9.1 どのような種類のパッケージが AUR に置かれていますか?\n- 9.2 どうすれば AUR 内のパッケージに投票できますか?\n- 9.3 Trusted User / TU とは何ですか?\n- 9.4 Arch User Repository と extra リポジトリの違いは何ですか?\n- 9.5 AUR の Hoge が古くなっています、どうするべきでしょうか?\n- 9.6 AUR の Hoge を makepkg でコンパイルすることができません。どうしたらいいですか?\n- 9.7 ERROR: One or more PGP signatures could not be verified! この場合、どうすればよいですか?\n- 9.8 どうやって PKGBUILD を作るのですか?\n- 9.9 PKGBUILD を作って投稿したいと思っています。エラーがないか誰かチェックしてくれるでしょうか?\n- 9.10 どうすれば PKGBUILD が extra リポジトリに移されるのですか?\n- 9.11 繰り返されるビルドプロセスを速めるにはどうすればよいですか?\n- 9.12 foo と foo-git パッケージは何が違うのですか?\n- 9.13 Foo が AUR から消えたのはなぜですか?\n- 9.14 インストール済みのパッケージが AUR から消えてしまっているかどうかを確かめるには?\n- 9.15 全ての AUR パッケージのリストを入手するには?\n\n"
    },
    {
      "title": "はじめに",
      "level": 2,
      "content": "AUR ウェブインターフェイス で PKGBUILD を検索したり、ダウンロードしたりすることができます。makepkg を使って PKGBUILD からパッケージを生成することができ、pacman でインストールできます。\n\n- base-devel がインストールされていることを確認してください。\n- 一般的な質問に対する答えはほとんど #FAQ に載っています。\n- /etc/makepkg.conf を調整することで、AUR からパッケージをビルドするときに、あなたの使用しているプロセッサに最適化することができます。マルチコアプロセッサを搭載しているシステム上では、MAKEFLAGS 変数を調整したり、圧縮に複数のコアを使ったり、別の圧縮アルゴリズムを使ったりすることで、パッケージのビルドタイムを劇的に短縮できる可能性があります。また、CFLAGS 変数を使うことでハードウェア固有のコンパイラ最適化を有効化することもできます。詳しくは makepkg#ヒントとテクニック を見てください。\n\nまた、SSH から AUR にアクセスすることもできます: 利用可能なコマンドをリストアップするには ssh aur@aur.archlinux.org help を入力してください。\n\n"
    },
    {
      "title": "パッケージをインストール・アップグレードする",
      "level": 2,
      "content": "AUR からパッケージをインストールする手順は比較的単純です。基本的には:\n\n1. ビルドファイルを取得する。PKGBUILD や、systemd ユニットやパッチなどの (しばしば、実際のコードではない) 他の必要なファイルを含みます。\n1. PKGBUILD とそれに付属しているファイルが、悪意のある、または信頼できないものでないことを検証する。\n1. それらのファイルが保存されているディレクトリ内で makepkg を実行する。これは、コードをダウンロードし、コンパイルし、パッケージングします。\n1. pacman -U package_file を実行し、パッケージをシステムにインストールする。\n\n"
    },
    {
      "title": "要件",
      "level": 3,
      "content": "まず、base-devel をインストールして、必須のツールをインストールしましょう。このメタパッケージには、ソースからコンパイルするために必要な make などのツールが依存パッケージとして含まれています。\n\n次に、適切なビルドディレクトリを選択してください。ビルドディレクトリは、パッケージがソースから作成/ビルドされるディレクトリであり、任意のディレクトリを使うことができます。以下のセクションでは例として ~/builds をビルドディレクトリとして使用します。\n\n"
    },
    {
      "title": "ビルドファイルを取得する",
      "level": 3,
      "content": "AUR 内の対象パッケージの場所を特定します。AUR ホームページの検索フィールドを使って行うことができます。検索リスト内のアプリケーションの名前をクリックして、そのパッケージの情報ページを開きます。説明欄を読んで、それがあなたの求めているパッケージであることを確認してください。パッケージの最終更新日時とコメントも確認してください。\n\nパッケージのビルドファイルを取得する方法は複数存在します:\n\n- そのパッケージの git リポジトリをクローンする。URL は、そのパッケージの AUR ページの「パッケージの詳細」の「Git クローン URL」にあります。これは推奨される方法です。利点としては、git pull を実行すれば、パッケージを簡単にアップデートできます。\n\n```\n$ git clone https://aur.archlinux.org/package_name.git\n```\n\n- スナップショットをダウンロードする。パッケージの AUR ページの右側にある「パッケージアクション」内の「スナップショットのダウンロード」リンクをクリックするか、ターミナルで以下を実行してください:\n\n```\n$ curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/package_name.tar.gz\n```\n\n- archlinux/aur GitHub 上の読み取り専用ミラーを使う。1つのブランチ内に1つのパッケージが存在しています。1つのブランチのみをクローンすることが推奨されます (リポジトリ全体は大きすぎるので、パフォーマンスが低下するでしょう)。これを行う方法として、以下の2つがあります: git clone --single-branch を使う: $ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git このリポジトリの部分クローンを行い (git clone --depth=1)、選択的にブランチを追加する:\n\n- git clone --single-branch を使う: $ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git\n- このリポジトリの部分クローンを行い (git clone --depth=1)、選択的にブランチを追加する:\n\n```\n$ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git\n```\n\n```\n$ git clone --depth=1 https://github.com/archlinux/aur.git; cd aur$ git remote set-branches --add origin package_name$ git fetch$ git checkout package_name\n```\n\n"
    },
    {
      "title": "必要であれば PGP 公開鍵を取得する",
      "level": 3,
      "content": "PKGBUILD の source 配列に .sig や .asc という形式の署名ファイルがあるか確認してください。それがある場合、PKGBUILD の validpgpkeys 配列内にリストアップされている公開鍵のうち1つを取得してください。詳細は makepkg#署名チェック を参照してください。\n\n"
    },
    {
      "title": "パッケージをビルドする",
      "level": 3,
      "content": "パッケージの PKGBUILD が含まれているディレクトリに移動してください:\n\n```\n$ cd package_name\n```\n\n提供されているファイルすべての内容を確認してください。例えば、less を使って PKGBUILD を見るには:\n\n```\n$ less PKGBUILD\n```\n\n- 最後の git コミットとの変更点を見るには、git show を使うことができます。\n- vimdiff を使って最後のコミットとの変更点を見るには、git difftool @~..@ vimdiff を実行してください。vimdiff の利点は、何が変更されたかを示すインジケータと共に各ファイルの内容全体を見ることができることです。\n\nパッケージを作成します。手動でファイルの内容を確認したあとで、makepkg を通常ユーザとして実行してください。いくつか便利なフラグがあります:\n\n- -s/--syncdeps は、ビルド前に自動的に依存関係を解決し、pacman を使って依存パッケージをインストールします。パッケージが他の AUR パッケージに依存している場合、まずその AUR パッケージを手動でインストールする必要があります。\n- -i/--install は、ビルドが成功した場合にパッケージをインストールします。このフラグを使えば、通常手動で行う次の手順をスキップすることができます。\n- -r/--rmdeps は、ビルド後に、ビルド時の依存パッケージを削除します (なぜなら、それらはもはや必要ないからです)。しかし、これらの依存パッケージは、パッケージがアップデートされたときに再インストールする必要があるでしょう。\n- -c/--clean は、ビルド後に一時ビルドファイルをクリーンアップします (なぜなら、それらはもはや必要ないからです)。通常、これらのファイルはビルドプロセスをデバッグするときにだけ必要になります。\n\n"
    },
    {
      "title": "パッケージをインストールする",
      "level": 3,
      "content": "これで、pacman を使ってパッケージをインストールできます:\n\n```\n# pacman -U package_name-version-architecture.pkg.tar.zst\n```\n\n- makepkg.conf 内の PKGEXT を変更している場合、パッケージファイルの名前も若干異なる場合があります。\n- 上記の例は、ビルドプロセスの概略です。詳細は makepkg と ABS の記事を見ることを強く推奨します。\n\n"
    },
    {
      "title": "パッケージをアップグレードする",
      "level": 3,
      "content": "パッケージの PKGBUILD を含むディレクトリ内で、まず最初に以下のコマンドを使ってファイルと変更を更新しなければなりません:\n\n```\n$ git pull\n```\n\n次に、前述のビルドとインストールの指示に従ってください。\n\n"
    },
    {
      "title": "パッケージをアップデートする",
      "level": 3,
      "content": "AUR はサポート外のものなので、あなたがインストールしたパッケージは、pacman ではなく あなたの責任で アップデートすることになっています。公式リポジトリ内のパッケージがアップデートされた場合、それらのライブラリに依存している AUR パッケージをすべてビルドし直す必要があります。\n\n"
    },
    {
      "title": "休止 (Suspension)",
      "level": 3,
      "content": "Trusted User としてユーザを編集するとき、休止 (Suspended) フィールドをセットできます。これは、対象のユーザを休止させます。ユーザが休止しているとき、以下のことはできなくなります:\n\n- https://aur.archlinux.org へのログイン\n- 通知の受け取り\n- git インターフェイスとの対話\n\n"
    },
    {
      "title": "活動休止 (Inactivity)",
      "level": 3,
      "content": "あなた自身のアカウントを編集するときや、Trusted User としてユーザを編集するとき、活動休止 (Inactive) フィールドをセットできます。活動休止中のアカウントは2つの理由により使用されます:\n\n- アカウントページに活動休止になった日付を表示する。\n- 新しい提案のために、活動休止になっているかどうかで現在アクティブな Trusted User の数を生成する。\n\n"
    },
    {
      "title": "パッケージにコメントする",
      "level": 3,
      "content": "AUR ウェブインターフェイスにはコメント機能があり、PKGBUILD の貢献者にコメントで提案やフィードバックを提供することができます。\n\nPython-Markdown は、コメントをフォーマットする基本的な Markdown 構文を提供します。\n\n- この実装は、公式の構文規則とは一部異なる場合があります。\n- パッケージの Git リポジトリへのコミットハッシュと、Flyspray チケットへの参照は、自動的にリンクに変換されます。\n- 長いコメントは短く表示され、必要に応じて全文を表示できます。\n\n"
    },
    {
      "title": "パッケージに投票する",
      "level": 3,
      "content": "すべての Arch ユーザにとって最も簡単なアクティビティの1つとして、AUR のオンラインインターフェイスによる AUR のブラウズや、お気に入りのパッケージへの投票があります。すべてのパッケージは、TU によってextra リポジトリに取り込まれる可能性があり、得票数はその過程で考慮されます。また、投票数はみんなが気にしていることでもあります。\n\nパッケージのブラウジングで「このパッケージに投票する」オプションを利用できるようにするには、AUR のウェブサイトにサインアップしてください。サインアップ後、aurvoteAUR、aurvote-gitAUR、aur-auto-vote-gitAUR を使ってコマンドラインからも投票できるようになります。\n\nあるいは、ssh 認証がセットアップ済みである場合、あなたの ssh 鍵を使ってコマンドラインから直接投票できます。これはつまり、AUR パスワードを保存・入力する手間が省けることを意味します。\n\n```\n$ ssh aur@aur.archlinux.org vote package_name\n```\n\n"
    },
    {
      "title": "パッケージに out-of-date フラグを立てる",
      "level": 3,
      "content": "まず、そのパッケージに out-of-date フラグを立て、そのパッケージが out-of-date である理由の詳細や、できればリリースのアナウンスや新しいリリースの tarball へのリンクを含めてください。\n\nまた、メンテナに email で直接連絡を取ってみるべきです。2周間経ってもメンテナから応答がない場合、孤児リクエストを提出することができます。詳細は AUR 投稿ガイドライン#リクエスト を見てください。\n\n"
    },
    {
      "title": "パッケージのビルドプロセスをデバッグする",
      "level": 2,
      "content": "1. 何かをビルドする前にアップグレードしてビルド環境が最新であることを確認してください。\n1. base-devel がインストールされていることを確認してください。\n1. ビルドプロセスを始める前に、makepkg で -s オプションを使って、必要とされているすべての依存関係をチェック・インストールしてください。\n1. デフォルトの makepkg の設定を試してください。\n1. 一般的な問題については Makepkg#トラブルシューティング を見てください。\n\nパッケージのビルドで問題が発生する場合、まず、そのパッケージの PKGBUILD とそのパッケージの AUR ページのコメントを読んでください。\n\nPKGBUILD が全員の環境で壊れている場合もあり得ます。ひとりで解決できない場合、問題をメンテナに報告してください (例えば、発生するエラーを AUR ページのコメント欄に投稿するなど)。また、AUR Issues, Discussion & PKGBUILD Requests フォーラムで助けを得ることもできるかもしれません。\n\n結局、原因が些細なことではない場合もあります。カスタムの CFLAGS、LDFLAGS、MAKEFLAGS フラグは失敗を引き起こす可能性があります。あなたのシステム構成によって引き起こされる問題を回避するには、パッケージをクリーンな chroot 内でビルドしてください。ビルドプロセスがクリーンな chroot 内でも失敗する場合、原因はおそらく PKGBUILD にあるのでしょう。\n\nnamcap の使用に関しては パッケージの作成#パッケージの正常性のテスト を見てください。PKGBUILD をレビューしてもらいたいならば、aur-general メーリングリストに投稿して TU やフェロー AUR メンバーからフィードバックをもらうか、Creating & Modifying Packages フォーラムに投稿してください。また、Libera Chat ネットワーク上の IRC チャンネル #archlinux-aur で助けを乞うこともできます。\n\n"
    },
    {
      "title": "パッケージを投稿する",
      "level": 2,
      "content": "ユーザは、Arch User Repository を使って PKGBUILD を共有できます。詳細は AUR 投稿ガイドライン を見てください。\n\n"
    },
    {
      "title": "ウェブインターフェイスの翻訳",
      "level": 2,
      "content": "AUR ウェブインターフェイスの翻訳の作成とメンテナンスについては AUR ソースツリーの i18n.txt を見てください。\n\n"
    },
    {
      "title": "歴史",
      "level": 2,
      "content": "当初、ftp://ftp.archlinux.org/incoming というサーバーがあり、人々は PKGBUILD やビルドに必要なファイル、ビルド済みのパッケージをそのサーバにアップロードしていました。パッケージやそれに関連するファイルは、パッケージメンテナがプログラムを見て取り入れるまで、そこに置かれていました。\n\nその後、Trusted User リポジトリが誕生しました。コミュニティの特定の個人が、誰でも使えるリポジトリをホストすることを許可されていました。これを基礎として、より柔軟に使いやすくするために拡張されたものが AUR です。今でも、AUR のメンテナは TU (Trusted User) と呼ばれます。\n\n2015年6月8日から2015年8月8日までの間に AUR はバージョン 3.5.1 から 4.0.0 に移行し、PKGBUILD を公開するために Git リポジトリが使われるようになりました。 既存のパッケージは、メンテナによって新しいインフラに手動で移行されない限り、ドロップされました。\n\n"
    },
    {
      "title": "AUR3 パッケージの Git リポジトリ",
      "level": 3,
      "content": "GitHub 上の AUR Archive には、移行時に AUR3 内にあったすべてのパッケージが保存されているリポジトリです。 あるいは、同じものを提供する aur3-mirror リポジトリもあります。\n\n"
    },
    {
      "title": "どのような種類のパッケージが AUR に置かれていますか?",
      "level": 3,
      "content": "AUR にあるパッケージはたんに\"ビルドスクリプト\"、つまり pacman 用にバイナリをビルドするレシピにすぎません。ほとんどの場合、有用性と範囲のガイドラインを条件として、コンテンツのライセンスの問題がない限り、すべてのものが置くことを許されています。他の場合、ダウンロードにリンクできない、つまり再配布が禁止されている時は、ソースとしてファイル名だけを使うことができます。よってパッケージをビルドするには、ユーザーによってビルドディレクトリにその制限されたソースを入れておく必要があります。どちらかわからない場合は、尋ねて下さい。\n\n"
    },
    {
      "title": "どうすれば AUR 内のパッケージに投票できますか?",
      "level": 3,
      "content": "#パッケージに投票する を見てください。\n\n"
    },
    {
      "title": "Trusted User / TU とは何ですか?",
      "level": 3,
      "content": "Trusted User (略して TU) とは、AUR と extra リポジトリを監督するように選ばれた人のことです。彼らは extra に入っている人気の PKGBUILD を管理していて、みんなで AUR を運営し続けています。\n\n"
    },
    {
      "title": "Arch User Repository と extra リポジトリの違いは何ですか?",
      "level": 3,
      "content": "Arch User Repository にはユーザーが投稿した全ての PKGBUILD が保存されており、利用するには手動で makepkg を使ってビルドしなくてはなりません。PKGBUILD にコミュニティの十分な関心が集まると、パッケージは extra リポジトリに移され TU が管理するバイナリパッケージとなり、pacman によってインストールできるようになります。\n\n"
    },
    {
      "title": "AUR の Hoge が古くなっています、どうするべきでしょうか?",
      "level": 3,
      "content": "#パッケージに out-of-date フラグを立てる を見てください。\n\nその間、ローカルで PKGBUILD を自分で編集してパッケージをアップデートしてみることもできます。アップデートにビルドプロセスの変更が必要ない場合もあり、この場合、pkgver か source 配列を更新するだけで十分です。\n\n"
    },
    {
      "title": "AUR の Hoge を makepkg でコンパイルすることができません。どうしたらいいですか?",
      "level": 3,
      "content": "何か些細なことを見逃しているのかもしれません。#パッケージのビルドプロセスをデバッグする を見てください。\n\n"
    },
    {
      "title": "ERROR: One or more PGP signatures could not be verified! この場合、どうすればよいですか?",
      "level": 3,
      "content": "最もあり得るのは、ダウンロードしたファイルを検証するために必要な公開鍵があなたの個人キーリング内に存在しないことです。詳細は Makepkg#署名チェック を見てください。\n\n"
    },
    {
      "title": "どうやって PKGBUILD を作るのですか?",
      "level": 3,
      "content": "AUR 投稿ガイドライン#投稿の規則 を見て、次に パッケージの作成 を見てください。\n\n"
    },
    {
      "title": "PKGBUILD を作って投稿したいと思っています。エラーがないか誰かチェックしてくれるでしょうか?",
      "level": 3,
      "content": "パッケージをレビューのために提出できるチャネルが複数存在します。#パッケージのビルドプロセスをデバッグする を見てください。\n\n"
    },
    {
      "title": "どうすれば PKGBUILD が extra リポジトリに移されるのですか?",
      "level": 3,
      "content": "通常、パッケージを extra リポジトリ に移すには最低 10 票必要です。しかし、TU がパッケージをサポートしたいと望んだときは、extra リポジトリに入ることがしばしばあります。\n\n必要な最低投票数に到達することは唯一の要件ではありません。そのパッケージをメンテナンスしてもよいという TU がいなければなりません。たとえパッケージに数千もの投票があったとしても、TU は extra リポジトリにそのパケージを移す必要はないのです。\n\n通常、非常に人気なパッケージが AUR に残っている理由としては:\n\n- Arch Linux のリポジトリ内にパッケージの他のバージョンがすでに存在するから\n- ライセンスで再配布が禁止されているから\n- そのパッケージが、ユーザによって投稿された PKGBUILD の取得を補助するものだから。AUR ヘルパー は、当然、サポートされていません。\n\nextra リポジトリにパッケージを入れるときのルール も見てください。\n\n"
    },
    {
      "title": "繰り返されるビルドプロセスを速めるにはどうすればよいですか?",
      "level": 3,
      "content": "Makepkg#コンパイル時間を短縮する を見てください。\n\n"
    },
    {
      "title": "foo と foo-git パッケージは何が違うのですか?",
      "level": 3,
      "content": "多くの AUR パッケージには安定バージョン (\"stable\") と開発バージョン (\"unstable\") が存在します。開発版のパッケージには大抵、バージョン管理システムを示す接尾辞が付いており、通常の使用を意図していません。しかし、それらは新しい機能やバグフィックスを提供している場合があります。\n\nmakepkg を実行した時、これらのパッケージは最新のソースをダウンロードするので、pkgver() は必ずしも上流と合っていません。同じく、これらのパッケージは、如何なる VCS ソースのチェックサムの確認もできません。\n\nシステムメンテナンス#実績のあるソフトウェアパッケージを使用する も見てください。\n\n"
    },
    {
      "title": "Foo が AUR から消えたのはなぜですか?",
      "level": 3,
      "content": "パッケージが TU によって引き取られ、現在は extra リポジトリ に存在している可能性があります。\n\nまた、投稿の規則に違反していたため、削除されてしまった可能性もあります。削除の理由は、aur-requests アーカイブ を見てください。\n\nそのパッケージが AUR3 に存在していた場合、AUR4 に移行されなかったのかもしれません。そのようなパッケージが保存されている場所である #AUR3 パッケージの Git リポジトリ を見てください。\n\n"
    },
    {
      "title": "インストール済みのパッケージが AUR から消えてしまっているかどうかを確かめるには?",
      "level": 3,
      "content": "最もシンプルな方法は、そのパッケージの AUR ページの HTTP ステータスをチェックすることです:\n\n```\n$ comm -23 <(pacman -Qqm | sort) <(curl https://aur.archlinux.org/packages.gz | gzip -cd | sort)\n```\n\n"
    },
    {
      "title": "全ての AUR パッケージのリストを入手するには?",
      "level": 3,
      "content": "- https://aur.archlinux.org/packages.gz\n- python3-aurAUR の aurpkglist を使ってください\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- AUR ウェブインターフェイス\n- AUR メーリングリスト\n\n"
    }
  ]
}