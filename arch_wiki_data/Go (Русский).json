{
  "title": "Go (Русский)",
  "url": "https://wiki.archlinux.org/title/Go_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Цитата из официальной документации по golang\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Стандартным компилятором Go является go, который устанавливается с пакетом go. Команда go также включает в себя утилиты вроде go get, go doc и т.д.\n\nЕсть альтернативный компилятор gcc-go, являющийся фронтендом для GCC. Он обычно медленее, но лучше оптимизирует. Если не уверены, используйте go.\n\nТакже вместе с go можно установить пакет go-tools который включает в себя документацию(godoc) и дополнительные инструменты разработчика, такие как goimports, guru, gorename, и т.д.\n\n"
    },
    {
      "title": "Проверка установки",
      "level": 3,
      "content": "Вы можете проверить корректность установки, собрав простую программу:\n\n```\nhello.go\n```\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Привет, Arch!\")\n}\n```\n\nЗапуск кода с помощью интерпретатора:\n\n```\n$ go run hello.go\n```\n\n```\nПривет, Arch!\n```\n\nКомпиляция стандартным компилятором gc (то же, что и go build -compiler=gc hello.go):\n\n```\n$ go build hello.go\n```\n\nКомпиляция с помощью gccgo (то же, что и go build -compiler=gccgo hello.go):\n\n```\n$ gccgo hello.go -o hello\n```\n\nКомпиляция с помощью gccgo и gold-линковщика:\n\n```\n$ gccgo hello.go -fuse-ld=gold -o hello\n```\n\n"
    },
    {
      "title": "$GOPATH",
      "level": 3,
      "content": "В языке Go поиск программ и их зависимостей (например, import \"пакет\"), сначала выполняется в каталогах, прописанных в переменную $GOPATH, а затем - в переменной $GOROOT (путь установки go, по умолчанию /usr/lib/go).\n\nЗначение $GOPATH по умолчанию ~/go.\n\nСоздать само рабочее пространство:\n\n```\n$ mkdir -p ~/go/src\n```\n\nкаталог ~/go/src предназначен для хранения исходных текстов проектов. При компиляции Go также создаст каталог bin для исполняемых файлов и pkg для кэша отдельных пакетов. Вы можете добавить ~/go/bin в переменную окружения $PATH для запуска установленных Go-программ:\n\n```\nexport PATH=\"$PATH:$HOME/go/bin\"\n```\n\nПодробнее смотрите go help gopath.\n\n"
    },
    {
      "title": "Динамические библиотеки",
      "level": 3,
      "content": "Компилятор Go собирает все зависимости программы в один исполняемый файл, но начиная с версии Go 1.5 появилась возможность использовать динамические библиотеки.\n\nДля подключения всей стандартной библиотеки языка Go нужно сначала скомпилировать её как динамическую:\n\n```\n# go install -buildmode=shared std\n```\n\nскомпилированная библиотека станет доступна по адресу: $(go env GOROOT)/pkg/$(go env GOOS)_$(go env GOARCH)_dynlink/libstd.so\n\nтеперь можно скомпилировать программу test.go с поддержкой динамических библиотек:\n\n```\n$ go build -linkshared -o test\n```\n\nЕсли необходимо скомпилировать пакет как отдельную библиотеку, выполните:\n\n```\n$ go install -buildmode=shared -linkshared\n```\n\nпосле чего собранную библиотеку можно найти в папке $GOPATH/pkg/$(go env GOOS)_$(go env GOARCH)_dynlink.\n\nПользовательскую динамическую библиотеку в системе можно использовать если:\n\n- поместить её в каталог который используются системой для стандартного расположения динамических библиотек, в Арче это /usr/lib/\n- прописать путь до библиотеки в файле /etc/ld.so.conf, после чего обновить кеш командой ldconfig\n- использовать специальную переменную среды $LD_LIBRARY_PATH:\n\n```\n$ export LD_LIBRARY_PATH=\"/путь/к/каталогу/с/пользовательскими/динамическими/библиотеками\"\n```\n\nесли такая переменная уже существует, то:\n\n```\n$ export LD_LIBRARY_PATH=\"/путь/к/каталогу/с/пользовательскими/динамическими/библиотеками:${LD_LIBRARY_PATH}\"\n```\n\n"
    },
    {
      "title": "Кросс-компиляция",
      "level": 3,
      "content": "Команда go может выполнять кросс-компиляцию для некоторых других платформ.\n\nЕсли для вашей сборки не нужен cgo, то просто укажите целевую ОС и архитектуру в переменных окружения для go build:\n\n```\n$ GOOS=linux GOARCH=arm64 go build .\n```\n\nСмотрите официальную документацию по допустимым комбинациям $GOOS и $GOARCH.\n\nЕсли cgo нужен, вам придётся указать путь к кросс-компиляторам C/C++ в переменных окружения $CC/$CXX.\n\nДля примера предположим, что вам нужна кросс-компиляция в $GOOS=linux и $GOARCH=arm64.\n\nТогда сперва установите кросс-компилятор aarch64-linux-gnu-gcc.\n\nПростая программа, требующая cgo, которая позволит нам протестировать процесс кросс-компиляции:\n\n```\n$ cat > hello.go <<EOF\npackage main\n\n// #include <stdio.h>\n// void hello() {  puts(\"Hello, Arch!\"); }\nimport \"C\"\n\nfunc main() { C.hello() }\nEOF\n```\n\nТеперь можно запустить кросс-компиляцию примерно так:\n\n```\n$ GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc go build hello.go\n```\n\nМожно убедиться, что архитектура созданного бинарника действительно aarch64:\n\n```\n$ file hello\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=b1d92ae8840a019f36cc2aee4606b6ae4a581bf1, for GNU/Linux 3.7.0, not stripped\n```\n\nЕсли вы скопируете hello на подходящее устройство, вы сможете запустить его:\n\n```\n[alarm@rpi3 ~]$ uname -a\nLinux alarm 5.3.8-1-ARCH #1 SMP Tue Oct 29 19:31:23 MDT 2019 aarch64 GNU/Linux\n[alarm@arpi3 ~]$ ./hello\nHello, Arch!\n```\n\n"
    },
    {
      "title": "Оптимизация",
      "level": 3,
      "content": "Компилятор go по умолчанию собирает пакет с дополнительной информацией которая влияет только на отладку и анализ полученного файла.\n\nЧтобы этого избежать можно использовать ключ -ldflags с флагами отвечающими за отключения отладочной информации (-w) и сгенерированной таблицей символов (-s):\n\n```\n$ go build -ldflags '-w -s' test.go\n```\n\n"
    },
    {
      "title": "Плагин Jetbrains Go",
      "level": 3,
      "content": "Если в Jetbrains IDE плагин Go не может найти путь к Go SDK, вероятно, вы используете не тот пакет. Удалите gcc-go и установите go. Если $GOPATH прописан, IDE должна найти ваш Go SDK в /usr/lib/go.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Официальный веб-сайт языка Go (en)\n- Тур по Go\n- Статья в Википедии\n- Go в примерах\n- Awesome Go\n- Кросс-компиляция Go\n- IDE и плагины для Go\n- Руководство создания пакетов(AUR) для Go\n\n"
    }
  ]
}