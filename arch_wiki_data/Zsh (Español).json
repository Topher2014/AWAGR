{
  "title": "Zsh (Español)",
  "url": "https://wiki.archlinux.org/title/Zsh_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **Este artículo o sección necesita ser traducido.** Este artículo o sección necesita ser traducido.\n\nEste artículo o sección necesita ser traducido.\n\nNote: **2015-07-25** \n\nZsh es un potente intérprete de comandos que puede funcionar como shell interactiva y como intérprete de lenguaje de scripting. Aún siendo compatible con Bash (no por defecto, solo si se ejecuta emulate sh), ofrece numerosas ventajas como:\n\n- Eficiencia\n- Completado de tabulador mejorado\n- Expansión de nombres de fichero mejorada\n- Manejo de arrays mejorado\n- Totalmente personalizable\n\nEl FAQ de Zsh aporta más razones para usar Zsh.\n\n"
    },
    {
      "title": "Instalación",
      "level": 2,
      "content": "Antes de comenzar, puede que el usuario quiera comprobar cuál es la shell que está siendo usada:\n\n```\n$ echo $SHELL\n```\n\nInstale el paquete zsh. Para definiciones de completado adicionales, instale también el paquete zsh-completions.\n\n"
    },
    {
      "title": "Configuración Inicial",
      "level": 3,
      "content": "Asegúrese de que Zsh ha sido instalado correctamente ejecutando lo siguiente en la terminal:\n\n```\n$ zsh\n```\n\nDebería ver zsh-newuser-install, que le dirigirá a través de la configuración básica. Si prefiere saltarse esto, presione q. Si no lo vió, puede invocarlo manualmente con:\n\n```\n$ zsh /usr/share/zsh/functions/Newuser/zsh-newuser-install -f\n```\n\n"
    },
    {
      "title": "Hacer que Zsh sea la shell por defecto",
      "level": 3,
      "content": "Consulte Command-line shell (Español)#Cambiar su intérprete de línea de órdenes predeterminado.\n\n"
    },
    {
      "title": "Archivos de configuración",
      "level": 2,
      "content": "Al iniciar Zsh, Este cargará información de los siguiente archivos en el siguiente orden por defecto:\n\n"
    },
    {
      "title": "Configurar Zsh",
      "level": 2,
      "content": "Aunque Zsh es usable sin más, es seguro que no estará configurado al gusto de la mayoría de los usuarios, pero dado el gran espectro de posibles configuraciones disponibles para Zsh, configurar Zsh puede ser una experiencia abrumadora y que consuma gran cantidad de tiempo.\n\n"
    },
    {
      "title": "Fichero .zshrc minimalista",
      "level": 3,
      "content": "Incluido más abajo se encuentra un archivo de configuración de muestra, proporciona un conjunto bastante bueno de opciones por defecto así como ejemplos de las muchas maneras en las que Zsh se puede personalizar. Para poder usar esta configuración guárdelo como un archivo que se llame .zshrc. Aplique los cambios sin necesidad de reiniciar la sesión ejecutando:\n\n```\n$ source ~/.zshrc\n```\n\nEste es un ejemplo de archivo .zshrc:\n\n```\n~/.zshrc\n```\n\n```\nautoload -U compinit promptinit\ncompinit\npromptinit\n\n# Esto establecerá el prompt por defecto al tema walters\nprompt walters\n```\n\n"
    },
    {
      "title": "Configurar el $PATH",
      "level": 3,
      "content": "Información de como establecer la ruta del sistema por cada usuario en zsh puede encontrarse aquí: https://zsh.sourceforge.net/Guide/zshguide02.html#l24\n\nEn resumen, coloque lo siguiente en ~/.zshenv:\n\n```\n~/.zshenv\n```\n\n```\ntypeset -U path\npath=(~/bin /otras/cosas/en/la/ruta $path)\n```\n\nVéase también la nota en #Archivos de configuración.\n\n"
    },
    {
      "title": "Autocompletado de comandos",
      "level": 3,
      "content": "Quizás la característica más llamativa de Zsh es sus capacidades de autocompletado avanzadas. Como mínimo,active el autocompletado en .zshrc. Para habilitar el autocompletado, añada lo siguiente a su ~/.zshrc:\n\n```\n~/.zshrc\n```\n\n```\nautoload -U compinit\ncompinit\n```\n\nLa configuración de arriba incluye autocompletado para ssh/scp/sftp pero para que esta característica funcione, los usuarios deben evitar que ssh haga hashing de los hostnames en ~/.ssh/known_hosts.\n\nNote: Y mueva ~/.ssh/known_hosts a otra parte de manera que ssh cree uno nuevo sin hostnames hasheados (evidentemente, los hosts conocidos anteriores se perderán). Para más información, vea el README de ssh para hashed-hosts.\n\n```\n/etc/ssh/ssh_config\n```\n\n```\n#HashKnownHosts yes\n```\n\nY mueva ~/.ssh/known_hosts a otra parte de manera que ssh cree uno nuevo sin hostnames hasheados (evidentemente, los hosts conocidos anteriores se perderán). Para más información, vea el README de ssh para hashed-hosts.\n\nPara autocompletado mediante flechas de teclados, añada lo siguiente a:\n\n```\n~/.zshrc\n```\n\n```\nzstyle ':completion:*' menu select\n```\n\nPara el autocompletado de parámetros de comandos en alias, añada lo siguiente a:\n\n```\n~/.zshrc\n```\n\n```\nsetopt completealiases\n```\n\n"
    },
    {
      "title": "El gancho de \"comando no encontrado\"",
      "level": 3,
      "content": "Vea Pkgfile (Español)#Orden no encontrada.\n\n"
    },
    {
      "title": "Prevenir líneas duplicadas en el historial",
      "level": 3,
      "content": "Para ignorar líneas duplicadas en el historial, use lo siguiente:\n\n```\n~/.zshrc\n```\n\n```\nsetopt HIST_IGNORE_DUPS\n```\n\nPara eliminar duplicadas existentes en el historial , ejecute:\n\n```\n$ awk -i inplace '!x[$0]++' ~/.zsh_history\n```\n\n"
    },
    {
      "title": "Asociaciones de teclas",
      "level": 3,
      "content": "Zsh no usa readline, en su lugar usa su propio y más potente zle. No lee /etc/inputrc o ~/.inputrc. Zle tien un modo emacs y un modo vi. Por defecto, trata de adivinar el modo de la variable de entorno $EDITOR. Si esta vacía, usará emacs por defecto. Cambie esto con bindkey -v o bindkey -e.\n\nVea también zshwiki: bindkeys.\n\n"
    },
    {
      "title": "Asociar combinaciones de teclas con aplicaciones ncurses",
      "level": 4,
      "content": "Puede asociarse una aplicación ncurses a una combinación de teclas, pero no aceptará interacciones. Use la variable BUFFER para que funcione. El siguiente ejemplo permite a los usuarios abrir ncmpcpp usando Alt+\\:\n\n```\n~/.zshrc\n```\n\n```\nncmpcppShow() { BUFFER=\"ncmpcpp\"; zle accept-line; }\nzle -N ncmpcppShow\nbindkey '^[\\' ncmpcppShow\n```\n\n"
    },
    {
      "title": "Otra forma de asociar una aplicación ncurses",
      "level": 4,
      "content": "Este método mantendrá todo lo que haya introducido en la línea antes de llamar a la aplicación\n\n```\n~/.zshrc\n```\n\n```\nncmpcppShow() { ncmpcpp <$TTY; zle redisplay; }\nzle -N ncmpcppShow\nbindkey '^[\\' ncmpcppShow\n```\n\n"
    },
    {
      "title": "Asociaciones de teclas de gestor de archivos",
      "level": 4,
      "content": "Asociaciones de teclas al estilo de los gestores de archivos gráficos pueden ser muy útiles. El primero deja ir hacia atrás en el historial de directorios (Alt+Left), El segundo deja al usuario ir hacia el directorio padre (Alt+Up). Además de eso muestran el contenido del directorio.\n\n```\n~/.zshrc\n```\n\n```\ncdUndoKey() {\n  popd      > /dev/null\n  zle       reset-prompt\n  echo\n  ls\n  echo\n}\n\ncdParentKey() {\n  pushd .. > /dev/null\n  zle      reset-prompt\n  echo\n  ls\n  echo\n}\n\nzle -N                 cdParentKey\nzle -N                 cdUndoKey\nbindkey '^[[1;3A'      cdParentKey\nbindkey '^[[1;3D'      cdUndoKey\n```\n\n"
    },
    {
      "title": "Búsqueda en el historial",
      "level": 3,
      "content": "Añada estas líneas a .zshrc\n\n```\n~/.zshrc\n```\n\n```\n[[ -n \"${key[PageUp]}\"   ]]  && bindkey  \"${key[PageUp]}\"    history-beginning-search-backward\n[[ -n \"${key[PageDown]}\" ]]  && bindkey  \"${key[PageDown]}\"  history-beginning-search-forward\n```\n\nHaciendo esto, solo comandos anteriores que comiencen con la entrada actual se mostrarán.\n\n"
    },
    {
      "title": "Prompts",
      "level": 3,
      "content": "Existe una forma rápida y fácil de establecer un prompt con colores en Zsh. Asegúrese que el prompt está establecido para autocargarse en .zshrc. Esto puede hacerse añadiendo las siguientes líneas:\n\n```\n~/.zshrc\n```\n\n```\nautoload -U promptinit\npromptinit\n```\n\nPrompts disponibles se pueden lista ejecutando el comando:\n\n```\n$ prompt -l\n```\n\nPor ejemplo, Para usar el prompt walters, introduzca:\n\n```\n$ prompt walters\n```\n\nPara previsualizar los temas disponibles, use el comando:\n\n```\n$ prompt -p\n```\n\n"
    },
    {
      "title": "Personalizando el prompt",
      "level": 3,
      "content": "Para usuarios no satisfechos con los prompts mencionados arriba (o que quieran expandir sus capacidades), Zsh ofrece la posibilidad de construir un prompt personalizado. Zsh soporta el tradicional prompt a la izquierda, así como un prompt a la derecha. Personalízelo usando PROMPT= con las siguiente variables:\n\nVea Prompt Expansion para una lista completa de variables de prompt y subcadenas condicionales.\n\n"
    },
    {
      "title": "Colores",
      "level": 4,
      "content": "Zsh establece colores de manera diferente a Bash. Añada autoload -U colors && colors antes de PROMPT= en .zshrc para usarlos. Normalmente querrá ponerlos dentro de %{ [...] %} de manera que el cursor no se mueva.\n\n$fg[color] establecerá el color del texto (rojo, verde, azul, etc. - Si no encuentra el color introducido, volverá al formato anterior)\n\nTable content:\nComando | Descripción\n%F{color} [...] %f | tiene el mismo efecto que el anterior, sin tener que escribir tanto. Puede también añadir un número como prefijo a F en su lugar.\n$fg_no_bold[color] | establece el texto al color sin negrita.\n$fg_bold[color] | establece el texto al color con negrita.\n$reset_color | resetea el color del texto al color por defecto. No resetea la negrita. usa %b to para resetear la negrita. Ahorra teclear si tan solo es %f. | \n%K{color} [...] %k | Establece el color de fondo. El mismo color que el color del texto sin negrita. Añadir un número de un solo dígito como prefijo hace que el fondo negro.\n\nTable content:\nPosibles colores\nblack o 0 | red o 1\ngreen o 2 | yellow o 3\nblue o 4 | magenta o 5\ncyan o 6 | white o 7\n\n"
    },
    {
      "title": "Ejemplo",
      "level": 4,
      "content": "Este es un ejemplo de un prompt de dos lados:\n\n```\nPROMPT=\"%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg_no_bold[yellow]%}%1~ %{$reset_color%}%#\"\nRPROMPT=\"[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]\"\n```\n\nY así es como se muestra:\n\n```\nusername@host ~ %                                                         [0]\n```\n\n"
    },
    {
      "title": "Dirstack",
      "level": 3,
      "content": "Zsh puede configurarse para recordar los DIRSTACKSIZE últimos directorio visitados. Esto puede usarse para hacer cd a ellos rápidamente. Tiene que añadir algunas lineas a su archivo de configuración:\n\n```\n.zshrc\n```\n\n```\nDIRSTACKFILE=\"$HOME/.cache/zsh/dirs\"\nif [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then\n  dirstack=( ${(f)\"$(< $DIRSTACKFILE)\"} )\n  [[ -d $dirstack[1] ]] && cd $dirstack[1]\nfi\nchpwd() {\n  print -l $PWD ${(u)dirstack} >$DIRSTACKFILE\n}\n\nDIRSTACKSIZE=20\n\nsetopt autopushd pushdsilent pushdtohome\n\n## Elimina las entradas duplicadas\nsetopt pushdignoredups\n\n## Esto revierte los operadores +/-.\nsetopt pushdminus\n```\n\nAhora use\n\n```\ndirs -v\n```\n\nPara imprimir el dirstack. Use cd -<NUM> para volver a un directorio ya visitado. Use el autocompletado después del guión. Esto demuestra ser muy útil si se usa en conjunción con el menú de autocompletado.\n\n"
    },
    {
      "title": "Comado de ayuda",
      "level": 3,
      "content": "Al contrario que bash, zsh no habilita un comando de ayuda integrado help. Para usar help en zsh, añada lo siguiente a su archivo zshrc:\n\n```\nautoload -U run-help\nautoload run-help-git\nautoload run-help-svn\nautoload run-help-svk\nunalias run-help\nalias help=run-help\n```\n\n"
    },
    {
      "title": "Resaltado de sintaxis estilo Fish",
      "level": 3,
      "content": "Fish provee con un resalto de sintaxis para la shell muy potente. Para usarlo en fish, puede instalar zsh-syntax-highlighting desde los repositorios oficiales y añadir lo siguiente a su zshrc:\n\n```\nsource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n```\n\n"
    },
    {
      "title": "Archivos .zshrc de muestra",
      "level": 3,
      "content": "- Hay un paquete en los repositorios oficiales llamado grml-zsh-config que viene de https://grml.org/zsh y provee con un archivo zshrc que incluye un montón de ajustes para Zshell. Esta es la configuración por defecto para los lanzamientos de ISOs mensuales.\n- Configuración básica, con prompt dinámico e información extra en el título de la ventana => https://github.com/MrElendig/dotfiles-alice/blob/master/.zshrc;\n- https://github.com/slashbeast/conf-mgmt/blob/master/roles/home_files/files/DOTzshrc - zshrc con múltiples características, asegúrese de leer los comentarios. Características destacables: función de confirmación para asegurarse de que el usuario quiere realmente apagar, reiniciar o hibernar el ordenar, soporte para GIT en el prompt (hecho sin vcsinfo), completado de tabulador con menú, mostrar el comando ejecutado en la barra de título de la ventana y más.\n\n"
    },
    {
      "title": "Frameworks de configuración",
      "level": 3,
      "content": "- oh-my-zsh es un framework popular, desarrollado por la comunidad para gestionar su configuración de zsh. Viene equipado con un montón de funciones útiles, helpers, plugins, temas.\n- Prezto - Instantly Awesome Zsh (disponible en AUR como prezto-gitAUR) es un framework de configuración para Zsh. Viene con módulos, enriqueciendo el entorno de la interfaz de línea de comandos con valores por defecto seguros, alias, funciones, automcompletado, y temas para el prompt.\n- Antigen (disponible en AUR como antigen-gitAUR) - Un gestor de plugins para zsh, inspirado en oh-my-zsh y vundle.\n\n"
    },
    {
      "title": "Autoinicio de aplicaciones",
      "level": 3,
      "content": "Zsh siempre executa /etc/zsh/zshenv y $ZDOTDIR/.zshenv así que no cargue en exceso estos archivos.\n\nSi la shell es una shell de inicio de sesión, los comandos son leídos desde /etc/profile y después desde $ZDOTDIR/.zprofile. Entonces, Si la shell es interactiva, los comando son leídos desde /etc/zsh/zshrc y luego desde $ZDOTDIR/.zshrc. Finalmente, si la shell es una shell de inicio de sesión, /etc/zsh/zlogin y $ZDOTDIR/.zlogin son leídos.\n\nVea tambiénla sección STARTUP/SHUTDOWN FILES de zsh(1).\n\n"
    },
    {
      "title": "Rehash persistente",
      "level": 3,
      "content": "Típicamente, compinit no encontrará de manera automática nuevos ejecutables en el $PATH. Por ejemplo, después de instalar un nuevo paquete, los ficheros en /usr/bin no sería inmediata o automáticamente incluidos en el autocompletado. Por lo tanto, tener estos nuevos ejecutables incluidos, uno ejecutaría:\n\n```\n$ rehash\n```\n\nEste 'rehash' puede establecerse para que se ejecute de forma automática. Simplemente incluyalo siguiente en su zshrc:\n\n```\n~/.zshrc\n```\n\n```\nzstyle ':completion:*' rehash true\n```\n\n"
    },
    {
      "title": "Desinstalación",
      "level": 2,
      "content": "Cambie la shell por defecto antes de eliminar el paquete zsh.\n\nEjecute el siguiente comando:\n\n```\n$ chsh -s /bin/bash user\n```\n\nÚselo por cada usuario con zsh establecida como su shell de inicio de sesión (incluyendo root si fuera necesario). Una vez hecho, el paquete zsh puede eliminarse.\n\nAlternativamente, cambie la shell por defecto a Bash editando /etc/passwd como root.\n\nPor ejemplo, cambie lo siguiente:\n\n```\nusername:x:1000:1000:Full Name,,,:/home/username:/bin/zsh\n```\n\npor esto:\n\n```\nusername:x:1000:1000:Full Name,,,:/home/username:/bin/bash\n```\n\n"
    },
    {
      "title": "Vea también",
      "level": 2,
      "content": "- Guía de usuario para Zsh (Inglés)\n- El manual de Z Shell (diferentes formas disponibles aquí (Inglés))\n- FAQ Zsh (Inglés)\n- zsh-lovers(1) (Esto está disponible también como zsh-lovers en los repositorios oficiales)\n- Zsh Wiki (Inglés)\n- Gentoo Wiki: Zsh/HOWTO (Inglés)\n- Bash2Zsh Tarjetas de referencia ( (Inglés))\n\n"
    }
  ]
}