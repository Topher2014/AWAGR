{
  "title": "Let’s Encrypt (Русский)",
  "url": "https://wiki.archlinux.org/title/Let%E2%80%99s_Encrypt_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Certbot — ACME-клиент от Фонда Электронных Рубежей, написанный на Python и обеспечивающий такие удобства, как автоматическая настройка веб-сервера и встроенный веб-сервер для вызова HTTP. Certbot рекомендован Let's Encrypt.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет certbot.\n\nТакже доступны плагины для автоматической настройки и установки выданных сертификатов на веб-серверах:\n\n- Плагин для nginx предоставляется пакетом certbot-nginx.\n- Плагин для Apache HTTP Server предоставляется пакетом certbot-apache.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Обратитесь к документации Certbot для получения дополнительной информации о создании и использовании сертификатов.\n\n"
    },
    {
      "title": "Плагины",
      "level": 3,
      "content": "Note: **резервную копию** \n\n"
    },
    {
      "title": "Nginx",
      "level": 4,
      "content": "Плагин certbot-nginx предоставляет автоматическую настройку Nginx (Русский). Он пытается найти конфигурацию каждого домена, а также добавляет рекомендованные для безопасности параметры, настройки использования сертификатов и пути к сертификатам Certbot. См. примеры в разделе #Управление блоками server в Nginx.\n\nПервоначальная настройка блоков server:\n\n```\n# certbot --nginx\n```\n\nОбновить сертификаты:\n\n```\n# certbot renew\n```\n\nИзменить сертификаты без изменения файлов конфигурации nginx:\n\n```\n# certbot --nginx certonly\n```\n\nСм. статью Certbot-Nginx on Arch Linux для получения дополнительной информации и раздел #Автоматическое обновление.\n\nСледующий пример можно использовать во всех блоках server при управлении этими файлами вручную:\n\n```\n/etc/nginx/sites-available/example\n```\n\n```\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2; # Cлушать IPv6\n  ssl_certificate /etc/letsencrypt/live/домен/fullchain.pem; # Управляется Certbot'ом\n  ssl_certificate_key /etc/letsencrypt/live/домен/privkey.pem; # Управляется Certbot'ом\n  include /etc/letsencrypt/options-ssl-nginx.conf;\n  ..\n}\n```\n\nСм. раздел nginx (Русский)#TLS для получения более подробной информации.\n\nТакже можно создать отдельный конфигурационный файл и включать его в каждый блок server:\n\n```\n/etc/nginx/conf/001-certbot.conf\n```\n\n```\nssl_certificate /etc/letsencrypt/live/домен/fullchain.pem; # Управляется Certbot'ом\nssl_certificate_key /etc/letsencrypt/live/домен/privkey.pem; # Управляется Certbot'ом\ninclude /etc/letsencrypt/options-ssl-nginx.conf;\n```\n\n```\n/etc/nginx/sites-available/example\n```\n\n```\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2; # Слушать IPv6\n  include conf/001-certbot.conf;\n  ..\n}\n```\n\n"
    },
    {
      "title": "Apache",
      "level": 4,
      "content": "Плагин certbot-apache предоставляет автоматическую настройку Apache HTTP Server (Русский). Он пытается найти конфигурацию каждого домена, а также добавляет рекомендованные для безопасности параметры, настройки использования сертификатов и пути к сертификатам Certbot. См. примеры в разделе #Управление виртуальными хостами Apache.\n\nПервоначальная настройка виртуальных хостов:\n\n```\n# certbot --apache\n```\n\nОбновить сертификаты:\n\n```\n# certbot renew\n```\n\nИзменить сертификаты без изменения файлов конфигурации apache:\n\n```\n# certbot --apache certonly\n```\n\nСм. статью Certbot-Apache on Arch Linux для получения дополнительной информации и раздел #Автоматическое обновление.\n\nСледующий пример можно использовать во всех виртуальных хостах при управлении этими файлами вручную:\n\n```\n/etc/httpd/conf/extra/001-certbot.conf\n```\n\n```\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n\nInclude /etc/letsencrypt/options-ssl-apache.conf\nSSLCertificateFile /etc/letsencrypt/live/домен/fullchain.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/домен/privkey.pem\n\n</VirtualHost>\n</IfModule>\n```\n\n```\n/etc/httpd/conf/httpd.conf\n```\n\n```\n<IfModule mod_ssl.c>\n  Listen 443\n  </IfModule>\n\n  Include conf/extra/001-certbot.conf\n  ..\n```\n\nСм. раздел Apache HTTP Server (Русский)#TLS для получения более подробной информации.\n\n"
    },
    {
      "title": "Webroot",
      "level": 3,
      "content": "- Метод Webroot требует HTTP на порту 80 для проверки Certbot.\n- Имя сервера должно соответствовать имени соответствующего DNS.\n- На хосте могут потребоваться разрешения, чтобы разрешить доступ для чтения к http://domain.tld/.well-known[устаревшая ссылка 2021-11-07 ⓘ].\n\nПри использовании webroot-метода, клиент Certbot размещает ответ на вызов (challenge response) по адресу /путь/к/domain.tld/html/.well-known/acme-challenge/, который используется для проверки.\n\nИспользование этого метода более рекомендовано, чем полностью ручная установка (manual-метод), так как он допускает автоматическое обновление сертификатов и упрощает управление ими. Однако использование плагинов может быть более предпочтительным, так как они обеспечивают полностью автоматическую настройку и установку.\n\n"
    },
    {
      "title": "Сопоставление (mapping) запросов ACME-challenge",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nУправление может быть упрощено путём сопоставления всех HTTP-запросов для /.well-known/acme-challenge/ в одну папку, например. /var/lib/letsencrypt.\n\nЭтот каталог должен быть доступен для записи клиенту Certbot и веб-серверу (nginx или apache, запущенными под пользователем http):\n\n```\n# mkdir -p /var/lib/letsencrypt/.well-known\n# chgrp http /var/lib/letsencrypt\n# chmod g+s /var/lib/letsencrypt\n```\n\nСоздайте файл с блоком location и включите его в блок server:\n\n```\n/etc/nginx/conf.d/letsencrypt.conf\n```\n\n```\nlocation ^~ /.well-known/acme-challenge/ {\n  allow all;\n  root /var/lib/letsencrypt/;\n  default_type \"text/plain\";\n  try_files $uri =404;\n}\n```\n\nПример конфигурации блока server:\n\n```\n/etc/nginx/servers-available/domain.conf\n```\n\n```\nserver {\n  server_name domain.tld\n   ..\n  include conf.d/letsencrypt.conf;\n}\n```\n\nСоздайте файл /etc/httpd/conf/extra/httpd-acme.conf:\n\n```\n/etc/httpd/conf/extra/httpd-acme.conf\n```\n\n```\nAlias /.well-known/acme-challenge/ \"/var/lib/letsencrypt/.well-known/acme-challenge/\"\n<Directory \"/var/lib/letsencrypt/\">\n    AllowOverride None\n    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec\n    Require method GET POST OPTIONS\n</Directory>\n```\n\nВключив это в /etc/httpd/conf/httpd.conf:\n\n```\n/etc/httpd/conf/httpd.conf\n```\n\n```\nInclude conf/extra/httpd-acme.conf\n```\n\n"
    },
    {
      "title": "Получение сертификат(ов)",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nЗапросите сертификат для domain.tld, используя /var/lib/letsencrypt/ в качестве общедоступного пути:\n\n```\n# certbot certonly --email email@example.com --webroot -w /var/lib/letsencrypt/ -d domain.tld\n```\n\nЧтобы добавить (под)домен, включите все зарегистрированные домены, используемые в текущей установке:\n\n```\n# certbot certonly --email email@example.com --webroot -w /var/lib/letsencrypt/ -d domain.tld,sub.domain.tld\n```\n\nЧтобы обновить (все) текущий сертификат(ы):\n\n```\n# certbot renew\n```\n\nСмотрите #Автоматическое обновление в качестве альтернативного варианта.\n\n"
    },
    {
      "title": "Вручную",
      "level": 3,
      "content": "Если для используемого веб-сервера нет плагина, воспользуйтесь следующей командой:\n\n```\n# certbot certonly --manual\n```\n\nЕсли вы предпочитаете использовать DNS-запрос (запись TXT), используйте:\n\n```\n# certbot certonly --manual --preferred-challenges dns\n```\n\nЭто автоматически проверяет ваш домен и создаёт закрытый ключ и пару сертификатов. Они будут размещены в /etc/letsencrypt/archive/ваш.домен/, а в каталоге /etc/letsencrypt/live/ваш.домен/ будут созданы символические ссылки на них.\n\nЗатем вы можете вручную настроить веб-сервер для использования ключа и сертификата из каталога с символическими ссылками.\n\n"
    },
    {
      "title": "systemd",
      "level": 4,
      "content": "Создайте systemd-службу certbot.service:\n\n```\n/etc/systemd/system/certbot.service\n```\n\n```\n[Unit]\nDescription=Let's Encrypt renewal\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/certbot renew --quiet --agree-tos\n```\n\nЕсли вы не используете плагин для управления веб-сервером, то его нужно будет перезагружать вручную для применения обновлённых сертификатов. Это можно сделать добавлением --deploy-hook \"systemctl reload nginx.service\" к команде ExecStart [1]. Разумеется, используйте httpd.service вместо nginx.service, если необходимо.\n\nДобавьте таймер для проверки продления сертификата дважды в день и включите рандомизированную задержку, чтобы все запросы на продление были равномерно распределены в течение дня для уменьшения загрузки сервера Let's Encrypt [2]:\n\n```\n/etc/systemd/system/certbot.timer\n```\n\n```\n[Unit]\nDescription=Twice daily renewal of Let's Encrypt's certificates\n\n[Timer]\nOnCalendar=0/12:00:00\nRandomizedDelaySec=1h\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n```\n\nВключите и запустите certbot.timer.\n\n"
    },
    {
      "title": "Автоматическое обновление wildcard-сертификатов",
      "level": 3,
      "content": "Процесс довольно прост. Для выпуска wildcard-сертификата необходимо выполнить DNS challenge request, используя протокол ACMEv2.\n\nВ то время как выпуск wildcard-сертификата вручную прост, его не так просто автоматизировать. DNS challenge представляет собой запись TXT, предоставленную клиентом certbot, которую необходимо установить вручную в DNS.\n\nНужно будет обновлять DNS при каждом обновлении сертификатов. Чтобы не делать это вручную, воспользуйтесь rfc2136, для которого в Certbot есть плагин, упакованный в certbot-dns-rfc2136. Также необходимо настроить DNS-сервер, чтобы разрешить динамическое обновление TXT-записей.\n\n"
    },
    {
      "title": "Настройка BIND для rfc2136",
      "level": 4,
      "content": "Сгенерируйте секретный TSIG-ключ:\n\n```\n$ tsig-keygen -a HMAC-SHA512 example-key\n```\n\nи добавьте его в файл конфигурации:\n\n```\n/etc/named.conf\n```\n\n```\n...\nzone \"domain.ltd\" IN {\n        ...\n        // this is for certbot\n        update-policy {\n                grant example-key name _acme-challenge.domain.ltd. txt;\n        };\n        ...\n};\n\nkey \"example-key\" {\n        algorithm hmac-sha512;\n        secret \"секретный_ключ\";\n};\n...\n```\n\nПерезапустите named.service.\n\n"
    },
    {
      "title": "Настройка certbot для rfc2136",
      "level": 4,
      "content": "Сгенерируйте файл конфигурации для плагина rfc2136.\n\n```\n/etc/letsencrypt/rfc2136.ini\n```\n\n```\ndns_rfc2136_server = IP.АД.РЕ.С\ndns_rfc2136_name = example-key\ndns_rfc2136_secret = ВСТАВЬТЕ_КЛЮЧ_БЕЗ_КАВЫЧЕК\ndns_rfc2136_algorithm = HMAC-SHA512\n```\n\nЗащитите файл с помощью chmod, убрав группу и другие разрешения, так как он содержит копию секретного ключа.\n\nЗапустите тест:\n\n```\n# certbot certonly --dns-rfc2136 --force-renewal --dns-rfc2136-credentials /etc/letsencrypt/rfc2136.ini --server https://acme-v02.api.letsencrypt.org/directory --email example@domain.ltd --agree-tos --no-eff-email -d 'domain.ltd' -d '*.domain.ltd'\n```\n\nЕсли проверка успешно пройдена и сертификаты получены, можно автоматизировать Certbot. В ином случае, что-то пошло не так и необходимо отладить вашу установку. Теперь всё сводится к запуску certbot renew, см. #Автоматическое обновление.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Transport Layer Security#ACME clients\n- Статья на Википедии\n- Документация Certbot от EFF\n- Список ACME-клиентов\n\n"
    }
  ]
}