{
  "title": "Java (Português)",
  "url": "https://wiki.archlinux.org/title/Java_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Diretrizes de pacotes Java\n- Fontes do Java Runtime Environment\n\nDo artigo do Wikipédia:\n\nArch Linux oferece suporte oficial às versões de código aberto OpenJDK 8, 11 e 17. Todas essas JVM podem ser instaladas sem conflito e alternadas entre si usando o script auxiliar archlinux-java. Vários outros ambientes Java estão disponíveis no AUR, sem suporte oficial.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "- Arch Linux possui suporte oficial apenas à implementação OpenJDK.\n- Após a instalação, o ambiente Java precisará se reconhecido pelo shell (variável $PATH). Isso pode ser feito carregando /etc/profile pela linha de comando ou saindo e entrando novamente em um ambiente de desktop.\n\nOs pacotes common são trazidos respectivamente como dependência, chamados de java-runtime-common (contendo arquivos comuns para Java Runtime Environments) e java-environment-common (contendo arquivos comuns para Java Development Kits). O arquivo de ambiente fornecido /etc/profile.d/jre.sh aponta para um link simbólico /usr/lib/jvm/default/bin, definido pelo script auxiliar archlinux-java. Os links /usr/lib/jvm/default e /usr/lib/jvm/default-runtime devem sempre ser editados com archlinux-java. Ele é usado para exibir e apontar para uma ambiente Java padrão em /usr/lib/jvm/java-${VERSÃO_MAIOR_JAVA}-${NOME_FORNECEDOR} ou um runtime do Java em /usr/lib/jvm/java-${VERSÃO_MAIOR_JAVA}-${NOME_FORNECEDOR}/jre.\n\nA maioria dos executáveis da instalação do Java são fornecidos por link diretos em /usr/bin, enquanto outros estão disponíveis em $PATH. O script /etc/profile.d/jdk.sh não é mais fornecido por nenhum pacote.\n\n"
    },
    {
      "title": "OpenJDK",
      "level": 3,
      "content": "OpenJDK é uma implementação de código aberto do Java Platform, Standard Edition (Java SE).\n\nTable content:\nVersão | JRE headless | JRE completo | JDK | Documentação | Fontes\nOpenJDK 17 | jre-openjdk-headless | jre-openjdk | jdk-openjdk | openjdk-doc | openjdk-src\nOpenJDK 11 | jre11-openjdk-headless | jre11-openjdk | jdk11-openjdk | openjdk11-doc | openjdk11-src\nOpenJDK 8 | jre8-openjdk-headless | jre8-openjdk | jdk8-openjdk | openjdk8-doc | openjdk8-src\n\nOpenJDK GA — Compilação de General-Availability Release do OpenDJK da Oracle.\n\nOpenJDK EA — Compilação de Early-Access para versão de desenvolvimento da Oracle.\n\nIcedTea-Web — Java Web Start e o plugin Java obsoleto para navegador.\n\n"
    },
    {
      "title": "OpenJFX",
      "level": 3,
      "content": "OpenJFX é a implementação código aberto do JavaFX. Você não precisa instalar esse pacote se você está fazendo uso do Java SE (a implementação da Oracle do JRE e JDK, descritos abaixo). Esse pacote só interessa usuários da implementação código aberto de Java (projeto OpenJDK).\n\nTable content:\nVersão | Runtime e Desenvolvimento | Documentação | Fontes\nOpenJFX 17 | java-openjfxAUR | java-openjfx-docAUR | java-openjfx-srcAUR\nOpenJFX 11 | java11-openjfxAUR | java11-openjfx-docAUR | java11-openjfx-srcAUR\nOpenJFX 8 | java8-openjfxAUR | java8-openjfx-docAUR | java8-openjfx-srcAUR\n\nOpenJFX GA — Compilação de General-Availability Release do OpenJFX de Gluon.\n\nOpenJFX EA — Compilação de Early-Access para versão de desenvolvimento de Gluon.\n\n"
    },
    {
      "title": "Outras implementações",
      "level": 3,
      "content": "Java SE — Implementação da Oracle de JRE e JDK.\n\nOpenJ9 — Implementação do Eclipse de JRE, contribuído pela IBM.\n\nIBM J9 — Implementação da IBM da oitava edição de JRE.\n\nParrot VM — Uma VM com suporte experimental para Java [1] por meio de dois métodos diferentes: seja como um tradução de bytecodes de Java VM ou como um compilador Java visando a VM de Parrot.\n\n"
    },
    {
      "title": "Ferramenta de desenvolvimento",
      "level": 2,
      "content": "Para ambientes de desenvolvimento integrados, veja List of applications/Utilities#Integrated development environments e especificamente a subseção IDEs do Java.\n\nPara desencorajar reverse engineering, um ofuscador como proguardAUR pode ser usado.\n\n"
    },
    {
      "title": "Descompiladores",
      "level": 3,
      "content": "- Bytecode Viewer — Suíte de engenharia reversa de Java, incluindo um descompilador, editor e depurador.\n\n- CFR — Descompilador Java, com suporte a recursos modernos de Java 9, 10 e além.\n\n- Fernflower — Descompilador analítico para Java, desenvolvido como parte do IntelliJ IDEA.\n\n- JAD — Descompilador Java sem manutenção (último lançamento 2006).\n\n- Java Decompiler (JD-Core, JD-GUI) — Descompilador Java popular fornecendo uma interface gráfica e com suporte a Java 1-10.\n\n- Krakatau — Descompilador java, assembler e disassembler.\n\n- Procyon decompiler — Descompilador java experimental, inspirado por ILSpy e Mono.Cecil.\n\n"
    },
    {
      "title": "Alternando entre JVM",
      "level": 2,
      "content": "O script auxiliar archlinux-java fornece tais funcionalidades:\n\n```\narchlinux-java <COMMAND>\n\nCOMMAND:\n\tstatus\t\tList installed Java environments and enabled one\n\tget\t\tReturn the short name of the Java environment set as default\n\tset <JAVA_ENV>\tForce <JAVA_ENV> as default\n\tunset\t\tUnset current default Java environment\n\tfix\t\tFix an invalid/broken default Java environment configuration\n```\n\n"
    },
    {
      "title": "Listar ambientes Java compatíveis instalados",
      "level": 3,
      "content": "```\n$ archlinux-java status\n```\n\nExemplo:\n\n```\n$ archlinux-java status\nAvailable Java environments:\n  java-7-openjdk (default)\n  java-8-openjdk/jre\n```\n\nNote o \"(default)\" denotando que o java-7-openjdk está atualmente definido como padrão. Chamar java e outros binários vai depender dessa instalação do Java. Também note na saída anterior que somente a parte JRE do OpenJDK 8 está instalada aqui.\n\n"
    },
    {
      "title": "Alterar o ambiente Java padrão",
      "level": 3,
      "content": "```\n# archlinux-java set <JAVA_ENV>\n```\n\nExemplo:\n\n```\n# archlinux-java set java-8-openjdk/jre\n```\n\nNote que o archlinux-java não vai deixar você definir um ambiente Java inválido. No exemplo anterior, jre8-openjdk está instalado, mas jdk8-openjdk não está, então a tentativa de definir java-8-openjdk vai falhar:\n\n```\n# archlinux-java set java-8-openjdk\n'/usr/lib/jvm/java-8-openjdk' is not a valid Java environment path\n```\n\n"
    },
    {
      "title": "Desconfigurar o ambiente Java padrão",
      "level": 3,
      "content": "Não há necessidade de remover a definição de um ambiente Java, pois os pacotes que os fornecem devem cuidar disso. Ainda assim, caso você queira fazê-lo, basta usar o comando unset:\n\n```\n# archlinux-java unset\n```\n\n"
    },
    {
      "title": "Corrigir o ambiente Java padrão",
      "level": 3,
      "content": "Se um link inválido de ambiente Java estiver definido, executar o comando archlinux-java fix tenta corrigi-lo. Note também que, se nenhum ambiente Java padrão estiver configurado, isso fará com que busque outros válidos e tentará configurá-lo para você. O pacote oficialmente suportado \"OpenJDK 8\" será considerado primeiro nesta ordem, então, outros ambientes instalados.\n\n```\n# archlinux-java fix\n```\n\n"
    },
    {
      "title": "Iniciar um aplicativo com uma versão Java não padrão",
      "level": 3,
      "content": "Se você quiser iniciar um aplicativo com outra versão do java do que o padrão (por exemplo, se você tiver as versões jre7 e jre8 instaladas no seu sistema), você pode chamar seu aplicativo em um pequeno script bash para alternar localmente o PATH padrão de Java. Por exemplo, se a versão padrão for jre7 e você quiser usar jre8:\n\n```\n#!/bin/sh \n\nexport PATH=\"/usr/lib/jvm/java-8-openjdk/jre/bin/:$PATH\"\nexec /path/to/application \"$@\"\n```\n\n"
    },
    {
      "title": "Pré-requisitos de pacote para ter suporte a archlinux-java",
      "level": 2,
      "content": "Esta seção é direcionada ao empacotador disposto a fornecer pacotes no AUR para uma JVM alternativa e que possa se integrar ao esquema JVM do Arch Linux para usar o archlinux-java. Para fazer isso, os pacotes devem:\n\n- Colocar todos os arquivos sob /usr/lib/jvm/java-${VERSÃO_MAIOR_JAVA}-${NOME_FORNECEDOR}\n- Certifique-se de que todos os executáveis para os quais java-runtime-common e java-environment-common fornecem links estejam disponíveis no pacote correspondente\n- Forneça links de /usr/bin para os executáveis somente se esses links não já pertencerem a java-runtime-common e java-environment-common\n- Acrescente ao final das páginas man -${NOME_FORNECEDOR}${VERSÃO_MAIOR_JAVA} para evitar conflitos (veja a lista de arquivos do jre8-openjdk no qual as páginas man recebem, ao final de seu nome, -openjdk8)\n- Não declare qualquer conflicts ou replaces com outras JDKs, java-runtime, java-runtime-headless ou java-environment\n- Use o script archlinux-java em funções do .install para configurar o ambiente Java como padrão Se nenhum outro ambiente Java válido estiver definido (ie: o pacote não deve forçar a instalação como padrão). Veja fontes de pacote de ambiente Java suportadas oficialmente para exemplos\n\nNote também que:\n\n- Pacotes que precisam de qualquer ambiente Java devem declarar a dependência a java-runtime, java-runtime-headless ou java-environment\n- Pacotes que precisam de um fornecedor Java específico devem declarar a dependência no pacote correspondente\n- Pacotes OpenJDK agora declaram provides=\"java-runtime-openjdk=${pkgver}\" etc. Isso permite que um pacote de terceiro declare dependência em um OpenJDK sem especificar uma versão\n\n"
    },
    {
      "title": "MySQL",
      "level": 3,
      "content": "Devido ao fato de que os drivers JDBC costumam usar a porta no URL para estabelecer uma conexão com o banco de dados, ele é considerado \"remoto\" (ou seja, o MySQL não escuta a porta de acordo com suas configurações padrão), apesar do fato de que eles estão possivelmente executando no mesmo host. Assim, para usar JDBC e MySQL, você deve habilitar o acesso remoto ao MySQL, seguindo as instruções em MariaDB#Grant remote access.\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 3,
      "content": "Se Intellij IDEA apresentou The selected directory is not a valid home for JDK com o caminho Java SDK do sistema, você pode ter que instalar um pacote JDK diferente e selecioná-lo como JDK do IntelliJ.\n\n"
    },
    {
      "title": "Personificar outro gerenciador de janela",
      "level": 3,
      "content": "Você pode usar o wmname do suckless.org para fazer a JVM acreditar que você está executando em um gerenciador de janela diferente. Isso pode resolver um problema de renderização das GUIs Java ocorrendo em gerenciadores de janela, como o Awesome, Dwm ou Ratpoison. Tente definir \"compiz\" ou \"LG3D\"\n\n```\n$ wmname compiz\n```\n\nVocê deve reiniciar o aplicativo em questão após executar o comando wmname.\n\nIsso funciona porque a JVM contém uma lista codificada de gerenciadores de janela non-re-parenting (que não registram novas janelas como de topo de nível) conhecidos. Para a máxima ironia, alguns usuários preferem personificar LG3D, o gerenciador de janela non-re-parenting escrito pela Sun, em Java.\n\n"
    },
    {
      "title": "Fontes ilegíveis",
      "level": 3,
      "content": "Além das sugestões mencionadas abaixo em #Melhor renderização de fonte, algumas fontes ainda pode não estar legíveis depois. Se esse for o caso, há uma grande chance das fontes da Microsoft estarem sendo usadas. Instale ttf-ms-fontsAUR.\n\n"
    },
    {
      "title": "Faltando texto em alguns aplicativos",
      "level": 3,
      "content": "Se alguns aplicativos estão faltando textos completos, pode ajudar a usar as opções em #Dicas e truques como sugerido em FS#40871.\n\n"
    },
    {
      "title": "Janela cinza, aplicações sem redimensionamento com o WM, menus fechando imediatamente",
      "level": 3,
      "content": "O kit de ferramentas padrão de GUI do Java possui uma lista codificada de gerenciadores de janela \"não-reparenting\". Se estiver usando um que não esteja nessa lista, pode haver alguns problemas com a execução de alguns aplicativos Java. Um dos problemas mais comuns é \"blobs cinzas\", quando o aplicativo Java se renderiza como uma caixa cinzenta simples em vez de renderizar a interface gráfica esperada. Outro pode ser menus respondendo ao seu clique, mas fechando imediatamente.\n\nHá várias coisas que podem ajudar:\n\n- Para jre8-openjdk, acrescente a linha export _JAVA_AWT_WM_NONREPARENTING=1 em /etc/profile.d/jre.sh. Então, carregue o arquivo /etc/profile.d/jre.sh ou encerre a sessão e incie-a novamente.\n- Para a última versão do JDK, acrescente a line export AWT_TOOLKIT=MToolkit em ~/.xinitrc antes do exec do gereciador de janela.\n- Também, você pode tentar usar wmname com a linha wmname compiz em seu ~/.xinitrc.\n- Para JRE/JDK da Oracle, use SetWMName. Porém, seu efeito pode ser cancelado ao usar também XMonad.Hooks.EwmhDesktops. Neste caso, acrescentar >> setWMName \"LG3D\" ao LogHook pode ajudar.\n\nVeja [2] para mais informações.\n\n"
    },
    {
      "title": "Sistema congela ao depurar aplicativos JavaFX",
      "level": 3,
      "content": "Se o seu sistema congela durante a depuração de um aplicativo JavaFX, você pode tentar fornecer a opção JVM -Dsun.awt.disablegrab=true.\n\nVeja https://bugs.java.com/bugdatabase/view_bug?bug_id=6714678\n\n"
    },
    {
      "title": "Construtor MediaPlayer do JavaFX lança uma exceção",
      "level": 3,
      "content": "Criar uma instância da classe MediaPlayer dos módulos de som do JavaFX pode lançar a seguinte exceção (ambos Oracle JDK e OpenJDK)\n\n```\n... (i.e. FXMLLoader construction exceptions) ...\nCaused by: MediaException: UNKNOWN : com.sun.media.jfxmedia.MediaException: Could not create player! : com.sun.media.jfxmedia.MediaException: Could not create player!\n at javafx.scene.media.MediaException.exceptionToMediaException(MediaException.java:146)\n at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:511)\n at javafx.scene.media.MediaPlayer.<init>(MediaPlayer.java:414)\n at <constructor call>\n...\n```\n\nque resulta em algumas incompatibilidades de JavaFX com compilação moderna do ffmpeg entregada no repositório do Arch Linux.\n\nUma solução que funciona é instalar ffmpeg-compat-55AUR.\n\nVeja https://www.reddit.com/r/archlinux/comments/70o8o6/using_a_javafx_mediaplayer_in_arch/\n\n"
    },
    {
      "title": "Aplicativos Java não podem abrir links externos",
      "level": 3,
      "content": "Se um aplicativo Java não for capaz de abrir um link para, por exemplo seu navegador web, instale gvfs. Isso é necessário pelo método Desktop.Action.BROWSE. Veja [3]\n\n"
    },
    {
      "title": "Erro ao inicializar QuantumRenderer: no suitable pipeline found",
      "level": 3,
      "content": "Possíveis problemas / soluções:\n\n- GTK2 está em falta. Instale gtk2\n- OpenJFX está em falta. Instale java-openjfxAUR\n\n"
    },
    {
      "title": "Dicas e truques",
      "level": 2,
      "content": "O comportamento da maioria dos aplicativos Java pode ser controlado fornecendo variáveis pré-definidas para o tempo de execução Java. Desta publicação do fórum, uma maneira de fazê-lo consiste em adicionar a seguinte linha no seu ~/.bashrc (ou /etc/profile.d/jre.sh para afetar programas que não são executados carregando ~/.bashrc, por exemplo, ao iniciar um programa a partir da visão de aplicativos do GNOME):\n\n```\nexport _JAVA_OPTIONS=\"-D<opção 1> -D<opção 2>...\"\n```\n\nPor exemplo, para usar fontes anti-alias do sistema e fazer o swing usar a aparência do GTK:\n\n```\nexport _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n```\n\n"
    },
    {
      "title": "Melhor renderização de fonte",
      "level": 3,
      "content": "As implementações de código fechado e de código aberto de Java são conhecidas por implementar incorretamente o anti-aliasing de fontes. Isso pode ser corrigido com as seguintes opções: -Dawt.useSystemAAFontSettings=on, -Dswing.aatext=true\n\nVeja Fontes do Java Runtime Environment para informações mais detalhadas.\n\n"
    },
    {
      "title": "Silenciar mensagem 'Picked up _JAVA_OPTIONS' na linha de comando",
      "level": 3,
      "content": "Definir as variáveis de ambiente _JAVA_OPTIONS faz com que java (openjdk) escreva para stderr as mensagens da forma: 'Picked up _JAVA_OPTIONS = ...'. Para suprimir essas mensagens em seu terminal, você pode desmarcar a variável de ambiente nos arquivos de inicialização de shell e fazer um alias do java para passar as mesmas opções como argumentos de linha de comando:\n\n```\n_SILENT_JAVA_OPTIONS=\"$_JAVA_OPTIONS\"\nunset _JAVA_OPTIONS\nalias java='java \"$_SILENT_JAVA_OPTIONS\"'\n```\n\n"
    },
    {
      "title": "Visual GTK",
      "level": 3,
      "content": "Se seus programas Java estão com aparência ruim, você pode querer configurar a aparência padrão para componentes swing:\n\nswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel.\n\nAlguns programas Java insistem em usar a aparência multiplataforma Metal. Em alguns casos você pode forçar esses aplicativos a usar o visual do GTK definindo a propriedade a seguir:\n\nswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel.\n\n"
    },
    {
      "title": "Suporte a GTK3",
      "level": 4,
      "content": "Nos lançamentos de Java anteriores à versão 9, o visual GTK é vinculado ao GTK2, enquanto muitos aplicativos de desktop mais recentes usam o GTK3. Essa incompatibilidade entre as versões do GTK pode interromper os aplicativos que utilizam os plug-ins Java com a GUI, já que a mixagem do GTK2 e do GTK3 no mesmo processo não é suportada (por exemplo, o LibreOffice 5.0).\n\nDesde Java 9, o GTK LookAndFeel pode ser executado nas versões GTK 2, 2.2 e 3, padronizando para GTK2. Isso pode ser substituído definindo a seguinte propriedade:\n\njdk.gtk.version=3\n\n"
    },
    {
      "title": "Melhor desempenho 2D",
      "level": 3,
      "content": "Alternar para o pipeline de aceleração de hardware baseado em OpenGL melhorará o desempenho em 2D\n\n```\nexport _JAVA_OPTIONS='-Dsun.java2d.opengl=true'\n```\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- Introdução à Programação Usando o Java\n\n"
    }
  ]
}