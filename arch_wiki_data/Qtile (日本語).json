{
  "title": "Qtile (日本語)",
  "url": "https://wiki.archlinux.org/title/Qtile_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- タイル型ウィンドウマネージャの比較\n- ウィンドウマネージャ\n\nプロジェクトのウェブサイトより:\n\nQtile はあらゆる機能を備え、ハックしやすい、Python で書かれたタイル型ウィンドウマネージャです。Qtile はシンプルで、小さく、そして拡張性があります。ユーザー定義レイアウト、ウィジェット、そしてビルトインコマンドを簡単に書くことができます。これは完全に Python で記述および設定されているため、言語の能力と柔軟性を最大限に活用してそれぞれのニーズに合わせることができます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 開始 2.1 Xorg 2.2 Wayland\n- 3 設定 3.1 グループ 3.2 グループルール 3.3 キー 3.3.1 サウンド 3.3.2 言語 3.4 スクリーン 3.4.1 バーとウィジェット 3.4.2 Polybar をメインバーとして使用する 3.5 スタートアップ\n- 4 デバッグ 4.1 xinit 4.2 Xephyr\n- 5 参照\n\n- 2.1 Xorg\n- 2.2 Wayland\n\n- 3.1 グループ\n- 3.2 グループルール\n- 3.3 キー 3.3.1 サウンド 3.3.2 言語\n- 3.4 スクリーン 3.4.1 バーとウィジェット 3.4.2 Polybar をメインバーとして使用する\n- 3.5 スタートアップ\n\n- 3.3.1 サウンド\n- 3.3.2 言語\n\n- 3.4.1 バーとウィジェット\n- 3.4.2 Polybar をメインバーとして使用する\n\n- 4.1 xinit\n- 4.2 Xephyr\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "以下のパッケージのどれかを インストール してください:\n\n- qtile 最新の公式リリース\n- qtile-gitAUR 開発版\n\nQtile を Wayland コンポジターとして実行するには、python-pywlroots をインストールする必要があります。\n\n"
    },
    {
      "title": "Xorg",
      "level": 3,
      "content": "Qtile を X11 ウィンドウマネージャーとして実行するには、xinit を指定して qtile start を実行します。\n\n"
    },
    {
      "title": "Wayland",
      "level": 3,
      "content": "Qtile は qtile start -b wayland として Wayland コンポジタとして起動することもできます。\n\nQtile の Wayland 開発の進捗状況については、https://github.com/qtile/qtile/discussions/2409 を参照してください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "Configuration Lookup (または 代替ドキュメント) で説明されているとおり、Qtile は、ユーザー定義の設定ファイルがない場合にデフォルトの設定ファイルを提供します。\n\nデフォルト設定には、新しいターミナル (hardcoded list) を開くためのショートカット Super+Enter が含まれています、Super+Ctrl+q を押して Qtile を終了します。\n\nQtile のカスタマイズを始めるときは、デフォルトの設定ファイルを ~/.config/qtile/config.py にコピーしてください:\n\n```\n$ mkdir -p ~/.config/qtile/\n$ cp /usr/share/doc/qtile_dir/default_config.py ~/.config/qtile/config.py\n```\n\nqtile_dir はインストールした AUR パッケージの名前に置き換えてください。\n\nもしくは、最新のデフォルト設定ファイルを git リポジトリの libqtile/resources/default_config.py からダウンロードすることもできます。\n\n設定はすべて Python により、~/.config/qtile/config.py で行われます。極めて簡単な Python の解説は このチュートリアル を参照してください。Python の変数、関数、モジュール及び Qtile の設定をすぐに始めるために必要なことが解説されています。\n\nQtile を再起動するまえに設定ファイルにエラーが無いか次のコマンドで確認することができます:\n\n```\n$ python -m py_compile ~/.config/qtile/config.py\n```\n\nこのコマンドが出力を行わない場合、設定ファイルは正しく記述されています。\n\n"
    },
    {
      "title": "グループ",
      "level": 3,
      "content": "Qtile では、ワークスペース (あるいはビュー) はグループと呼称します。以下のように設定します:\n\n```\nfrom libqtile.config import Group, Match\n...\ngroups = [\n    Group(\"term\"),\n    Group(\"irc\"),\n    Group(\"web\", matches=[Match(title=[\"Firefox\"])]),\n   ]\n...\n```\n\n"
    },
    {
      "title": "グループルール",
      "level": 3,
      "content": "次の例は、title や wm_class などのプロパティに基づいてアプリケーションをワークスペースに自動的に移動する方法を示しています。これらを取得するために X 上で実行している場合は、xprop を使用するとよいでしょう。\n\n```\nfrom libqtile.config import Group, Match\n...\ndef is_text_editor(window):\n    result = \"neovim\" in (window.name or \"\").lower()\n    return result\n\ndef is_terminal(window):\n    result = \"kitty\" in (window.name or \"\").lower() and not is_text_editor(window)\n    return result\n...\ngroups = [\n    Group(name=str(idx), **group)\n    for idx, group in enumerate(\n        [\n            {\n                \"label\": \"term\",\n                # restrict layouts since tiling is handled by kitty\n                \"layouts\": [layout.Max()], \n                \"matches\": [\n                    Match(func=is_terminal),\n                ],\n            },\n            {\n                \"label\": \"browser\",\n                \"matches\": [\n                    Match(role=\"browser\"),\n                ],\n            },\n            {\n                \"label\": \"music\",\n                \"matches\": [\n                    Match(title=\"YouTube Music\"),\n                ],\n            },\n            {\"label\": \"text editor\", \"matches\": [Match(func=is_text_editor)]},\n            {\"label\": \"other\"},\n        ],\n        start=1,\n    )\n]\n...\n```\n\n"
    },
    {
      "title": "キー",
      "level": 3,
      "content": "ショートカットキーを Key クラスで記述できます。 これは Alt+Shift+q でウィンドウマネージャを終了するための設定例です。\n\n```\nfrom libqtile.config import Key\nfrom libqtile.command import lazy\n...\nkeys = [\n    Key(\n        [\"mod1\", \"shift\"], \"q\",\n        lazy.shutdown())\n   ]\n...\n```\n\nXmodmap コマンドを使うことで modX がどのキーと対応しているか調べることができます。\n\n"
    },
    {
      "title": "サウンド",
      "level": 4,
      "content": "ユーザーを追加 を audio グループに追加し、alsamixer コマンドラインを使用することで、音量と状態を簡単に制御するショートカットを追加できます。このインターフェースは、alsa-utils パッケージを通じてインストールできます。\n\n```\nkeys= [\n    ...\n    # Sound\n    Key([], \"XF86AudioMute\", lazy.spawn(\"amixer -q set Master toggle\")),\n    Key([], \"XF86AudioLowerVolume\", lazy.spawn(\"amixer -c 0 sset Master 1- unmute\")),\n    Key([], \"XF86AudioRaiseVolume\", lazy.spawn(\"amixer -c 0 sset Master 1+ unmute\"))\n   ]\n```\n\n"
    },
    {
      "title": "言語",
      "level": 4,
      "content": "ショートカットを追加すると、setxkbmap を使用して、さまざまな言語のキーボードレイアウトを簡単に切り替えることができます。たとえば、次のようになります。\n\n```\nkeys= [\n    ...\n    # Language \n        Key([mod], \"F1\",\n            lazy.spawn(\"setxkbmap us\"), \n            desc= \"Change to US layout\"),\n        Key([mod],\"F2\",\n            lazy.spawn(\"setxkbmap gr\"),\n            desc= \"Change to Greek layout\"),\n       ]\n```\n\n"
    },
    {
      "title": "スクリーン",
      "level": 3,
      "content": "接続されているモニタそれぞれに対して Screen クラスを作成してください。Qtile のバーは Screen クラスで以下の例のように設定することができます:\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\n...\nscreens = [\n    Screen(\n        bottom=bar.Bar([          # add a bar to the bottom of the screen\n            widget.GroupBox(),    # display the current Group\n            widget.WindowName()   # display the name of the window that currently has focus\n            ], 30))\n   ]\n...\n```\n\n"
    },
    {
      "title": "バーとウィジェット",
      "level": 4,
      "content": "すべての組み込みウィジェットのリストは、公式ドキュメント (または 代替ドキュメント)\n\nバーにウィジェットを追加したい場合は、上記の例のようにただ追加するだけです (WindowName ウィジェットの場合) たとえば、 バッテリー通知を追加するには、Battery ウィジェットを使用できます。\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\n...\nscreens = [\n    Screen(top=bar.Bar([\n        widget.GroupBox(),    # display the current Group\n        widget.Battery()      # display the battery state\n       ], 30))\n   ]\n...\n```\n\n"
    },
    {
      "title": "Polybar をメインバーとして使用する",
      "level": 4,
      "content": "デフォルトのバーの代わりに Polybar を使用するには、screen クラスのコンテンツを削除する必要があります。\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\n...\nscreens = [\n    Screen()\n]\n...\n```\n\nQtile を使用して Polybar を再起動するには、spawn コマンドを使用して Polybar の起動スクリプトを追加し、キー クラスの Key を再起動します。次に例を示します。\n\n```\n...\nkeys = [\n    Key([mod, \"control\"], \"r\", lazy.reload_config(), lazy.spawn(\"~/.config/polybar/launch.sh\"),\n]\n...\n```\n\n"
    },
    {
      "title": "スタートアップ",
      "level": 3,
      "content": "アプリケーションをフックで起動することができます。具体的には startup フックを使います。利用可能なフックのリストは こちら を参照ください。(またはこちらの 代替ドキュメント)\n\n以下はアプリケーションを一度だけ実行する例です:\n\n```\nimport os\nimport subprocess\nfrom libqtile import hook\n\n@hook.subscribe.startup_once\ndef autostart():\n    home = os.path.expanduser('~')\n    subprocess.Popen([home + '/.config/qtile/autostart.sh'])\n```\n\n"
    },
    {
      "title": "デバッグ",
      "level": 2,
      "content": "Qtile はログを ~/.local/share/qtile/qtile.log に書き込みます。\n\n"
    },
    {
      "title": "xinit",
      "level": 3,
      "content": "別の ターミナル で Qtile を開始すると、問題の診断に役立ちます。\n\n```\n$ echo \"exec qtile start\" > /tmp/.start_qtile; xinit /tmp/.start_qtile -- :2\n```\n\n"
    },
    {
      "title": "Xephyr",
      "level": 3,
      "content": "Qtile は Xephyr 開発スクリプト を提供しており、以下を置き換えることでシステムにインストールされたパッケージをインスタンス化するように簡単に変更できます。\n\n```\nenv DISPLAY=${XDISPLAY} QTILE_XEPHYR=1 ${PYTHON} \"${HERE}\"/../bin/qtile start -l ${LOG_LEVEL} $@ &\n```\n\nと\n\n```\nenv DISPLAY=${XDISPLAY} QTILE_XEPHYR=1 qtile start -l ${LOG_LEVEL} $@ &\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Qtile ウェブサイト\n- 公式ドキュメント\n- 公式ドキュメントの代替ソース これは、issue 4295 に見られるように、\"docs.qtile.org\" がダウンしているときに便利です。\n- Qtile サンプル\n\n"
    }
  ]
}