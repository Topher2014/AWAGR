{
  "title": "EncFS (日本語)",
  "url": "https://wiki.archlinux.org/title/EncFS_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- gocryptfs\n- eCryptfs\n- ディスク暗号化\n\nEncFS は eCryptfs と同じようなユーザースペースのスタック暗号ファイルシステムで、最小限の手間でデータを保護することができます。EncFS は FUSE を利用して暗号化したディレクトリをユーザーが指定した別のディレクトリにマウントします。TrueCrypt や dm-crypt などの他の暗号化システムのようにループバックシステムを使うことはありません。\n\nLinux でディスク暗号化をしたいと思ったら、確実に、EncFS が一番シンプルなソフトウェアです。\n\nEncFS は他の暗号化ソフトウェアと比べると様々な利点と欠点が存在します。まず、EncFS は使用するのに root 権限を必要としません。誰でも暗号化したファイルのリポジトリを作成することができます。次に、EncFS では何かファイルを作成したりファイルシステムを作成する必要がありません。EncFS は既存のファイルシステムでそのまま動作します。\n\nしかしながら、このことは欠点にもなりえます。暗号化されたファイルが独自のファイルに保存されないため、システムにアクセスすることさえできれば、ディレクトリ構造やファイルの数、ファイルのサイズや変更日時などは丸わかりです。ただ、ファイルの中身を見ることはできません。\n\nこのようなデータ保護手法は完璧とはとても言えませんが、場合によっては役に立ちます。\n\nEncFS と他のデータ暗号化ソリューションの比較については、ディスク暗号化#比較表にさらに詳しく載っています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 eCryptFS との比較\n- 2 インストール\n- 3 使用方法 3.1 パスワードの変更\n- 4 ユーザーフレンドリーなマウント方法 4.1 Gnome Encfs Manager を使ってマウント 4.2 encfsui を使ってマウント 4.3 fstab によるマウント 4.4 pam_encfs を使ってログイン時にマウント 4.4.1 シングルパスワード 4.4.2 /etc/pam.d/ 4.4.2.1 すべてのログイン方法に対して pam_encfs をセットアップする 4.4.2.2 login 4.4.2.3 gdm 4.4.2.4 設定 4.5 pam_mount を使ってログイン時にマウント\n- 5 暗号化バックアップ 5.1 暗号化ディレクトリのバックアップ 5.2 プレーンテキストディレクトリのバックアップ\n- 6 参照\n\n- 3.1 パスワードの変更\n\n- 4.1 Gnome Encfs Manager を使ってマウント\n- 4.2 encfsui を使ってマウント\n- 4.3 fstab によるマウント\n- 4.4 pam_encfs を使ってログイン時にマウント 4.4.1 シングルパスワード 4.4.2 /etc/pam.d/ 4.4.2.1 すべてのログイン方法に対して pam_encfs をセットアップする 4.4.2.2 login 4.4.2.3 gdm 4.4.2.4 設定\n- 4.5 pam_mount を使ってログイン時にマウント\n\n- 4.4.1 シングルパスワード\n- 4.4.2 /etc/pam.d/ 4.4.2.1 すべてのログイン方法に対して pam_encfs をセットアップする 4.4.2.2 login 4.4.2.3 gdm 4.4.2.4 設定\n\n- 4.4.2.1 すべてのログイン方法に対して pam_encfs をセットアップする\n- 4.4.2.2 login\n- 4.4.2.3 gdm\n- 4.4.2.4 設定\n\n- 5.1 暗号化ディレクトリのバックアップ\n- 5.2 プレーンテキストディレクトリのバックアップ\n\n"
    },
    {
      "title": "eCryptFS との比較",
      "level": 2,
      "content": "eCryptfs はカーネルスペースで実装されており設定の難易度がやや高くなっています。eCryptFS では様々な暗号化オプション (使用する暗号や鍵のタイプなど) を覚えておかなければなりませんが、EncFS ではその必要はありません。EncFS は暗号化のメタデータをディレクトリごとの設定ファイル (.encfs6.xml) に保存するため何も記憶する必要はないのです (パスフレーズは別ですが)。eCryptFS の開発者は (カーネルとユーザースペースの) コンテキストスイッチによるオーバーヘッドがないために eCryptFS の方が高速だと主張しています。\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "encfs パッケージをインストールしてください。\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "安全なリポジトリを作成するには、次を入力:\n\n```\n$ encfs ~/.name ~/name\n```\n\n絶対パスを使う必要があるので注意してください。このコマンドを実行するとデフォルト設定 (paranoid オプション) とエキスパート設定のどちらかを使うか決めるプロンプトが表示されます。後者の設定ではアルゴリズムなどのオプションを指定することが可能です。前者ではまあまあ安全なデフォルト設定が使われます。暗号化のキーを入力した後、エンコードされたファイルシステムが作成されたマウントされます。エンコードされたファイルは、上の例では、~/.name に保存され、暗号化されてない状態のファイルは ~/name に置かれます。\n\nファイルシステムをアンマウントするには、次を入力:\n\n```\n$ fusermount -u ~/name\n```\n\nファイルシステムを再マウントするには、最初のコマンドを実行して、エンコードに使用するキーを入力してください。キーを入力すれば、ファイルシステムはまたマウントされます。\n\n"
    },
    {
      "title": "パスワードの変更",
      "level": 3,
      "content": "EncFS で暗号化したディレクトリのパスワードを変更するには、以下のコマンドを使います:\n\n```\n$ encfsctl passwd ~/.name\n```\n\n~/.name をエンコードされたファイルが含まれているディレクトリのパスに置き換えてください。現在のパスワードが要求され、それから新しいパスワードを設定できます。\n\n"
    },
    {
      "title": "Gnome Encfs Manager を使ってマウント",
      "level": 3,
      "content": "Gnome Encfs Manager は使いやすい encfs の管理とマウントツールで、隠匿物ごとに設定を行ったり、Gnome Keyring をサポートしていたり、Cryptkeeper のようなトレイメニューがあります。AppIndicator API を使用していて多数のユニークな機能が存在します。\n\ngnome-encfs-manager-binAUR と、それより少し新しい gnome-encfs-manager-bzrAUR の両方が利用可能です。\n\n"
    },
    {
      "title": "encfsui を使ってマウント",
      "level": 3,
      "content": "bash スクリプトの encfsui はシンプルな zenity による gui で EncFS コマンドラインユーティリティを使って暗号化ディレクトリをマウント・アンマウントします。デスクトップランチャーも含まれています。encfsuiAUR パッケージでインストールしてください。\n\n"
    },
    {
      "title": "fstab によるマウント",
      "level": 3,
      "content": "エントリを /etc/fstab に追加することで mount /target/path コマンドだけで encfs ボリュームをマウントできるようになります:\n\n```\n/etc/fstab\n```\n\n```\nencfs#/path/to/encfs/data  /mnt/decrypted  fuse  noauto,user  0  0\n```\n\nnoauto オプションを指定することで起動時にボリュームがマウントされなくなります。root だけでボリュームをマウントする場合は user は省略してかまいません。\n\n"
    },
    {
      "title": "pam_encfs を使ってログイン時にマウント",
      "level": 3,
      "content": "pam_encfsAUR をインストールしてください。参照:\n\n- http://pam-encfs.googlecode.com/svn/trunk/README\n- http://pam-encfs.googlecode.com/svn/trunk/pam_encfs.conf\n- https://wiki.edubuntu.org/EncryptedHomeFolder\n- https://code.google.com/p/pam-encfs/\n\n"
    },
    {
      "title": "/etc/pam.d/",
      "level": 4,
      "content": "'pam_unix.so に try_first_pass パラメータを使用する場合、ログイン時に使用するのと同じパスワードを使うように EncFS を設定する必要があります (もしくは EncFS で設定したパスワードをログイン時に使うようにする)。このパラメータを使わない場合は2つのパスワードを設定する必要があります。\n\n次のように encfs 行を /etc/pam.d/system-login に追加します:\n\n```\n...\nauth       sufficient pam_encfs.so\n...\n```\n\nこのセクションではログイン時に仮想コンソールで encfs を自動マウントする方法を説明します。\n\n/etc/pam.d/login ファイルを編集:\n\n```\n#%PAM-1.0\n\nauth\t\trequired\tpam_securetty.so\nauth\t\trequisite\tpam_nologin.so\nauth\t\tsufficient\tpam_encfs.so\nauth\t\trequired\tpam_unix.so nullok try_first_pass\n#auth\t\trequired\tpam_unix.so nullok\nauth\t\trequired\tpam_tally.so onerr=succeed file=/var/log/faillog\n# use this to lockout accounts for 10 minutes after 3 failed attempts\n#auth\t\trequired\tpam_tally.so deny=2 unlock_time=600 onerr=succeed file=/var/log/faillog\naccount\t\trequired\tpam_access.so\naccount\t\trequired\tpam_time.so\naccount\t\trequired\tpam_unix.so\n#password\trequired\tpam_cracklib.so difok=2 minlen=8 dcredit=2 ocredit=2 retry=3\n#password\trequired\tpam_unix.so md5 shadow use_authtok\nsession\t\trequired\tpam_unix.so\nsession\t\trequired\tpam_env.so\nsession\t\trequired\tpam_motd.so\nsession\t\trequired\tpam_limits.so\nsession\t\toptional\tpam_mail.so dir=/var/spool/mail standard\nsession\t\toptional\tpam_lastlog.so\nsession\t\toptional\tpam_loginuid.so\n-session\toptional\tpam_ck_connector.so nox11\n#Automatic unmount (optional):\n#session\trequired\tpam_encfs.so\n```\n\nこのセクションではログイン時に GDM で encfs を自動マウントする方法を説明します。\n\n/etc/pam.d/gdm-password ファイルを編集して下さい。\n\n以下を gdm-password の一番下に挿入します (上書きしないでください):\n\n```\n#%PAM-1.0\nauth            requisite       pam_nologin.so\nauth            required        pam_env.so\nauth            sufficient      pam_encfs.so\nauth            required        pam_unix.so try_first_pass\nauth            optional        pam_gnome_keyring.so\naccount         required        pam_unix.so\nsession         required        pam_limits.so\nsession         required        pam_unix.so\nsession         optional        pam_gnome_keyring.so auto_start\npassword        required        pam_unix.so\nsession         required        pam_encfs.so\n```\n\n保存して終了してください。\n\n/etc/security/pam_encfs.conf を編集:\n\n推奨: 次の行をコメントアウトしてください:\n\n```\nencfs_default --idle=1\n```\n\nこのフラグによって1分間操作がないと暗号化されたフォルダをアンマウントします。ログイン時に自動マウントする場合、ログインしている間はずっとマウントしていて欲しいということもあるでしょう。\n\n一番下にある、既存のデモエントリをコメントアウトして以下を追加:\n\n```\n#USERNAME       SOURCE                                  TARGET PATH                 ENCFS Options           FUSE Options\nfoo             /home/foo/EncryptedFolder             /home/foo/DecryptedFolder       -v                    allow_other\n```\n\nまた、以下の行が存在する場合、allow_root をオプションから外してください。オプションを外さないと上記で定義した allow_other と衝突します。\n\n```\nfuse_default allow_root,nonempty\n```\n\n次に /etc/fuse.conf を編集して、以下をアンコメント:\n\n```\nuser_allow_other\n```\n\n設定をテストするには、新しい仮想コンソールを開いて (例: Ctrl+Alt+F4) ログインを行なって下さい。pam が EncFS フォルダをマウントするはずです。\n\n"
    },
    {
      "title": "pam_mount を使ってログイン時にマウント",
      "level": 3,
      "content": "先に pam_mount をインストール・設定してください。EncFS のマウントは pam_mount の設定ファイルに以下のように指定できます:\n\n```\n/etc/security/pam_mount.conf.xml\n```\n\n```\n<volume fstype=\"fuse\" path=\"encfs#/path/to/encfs/encrypted/data\" mountpoint=\"/path/to/decrypted/data/mountpoint\" options=\"nonempty\" />\n```\n\nEncFS のパスワードはユーザーアカウントのパスワードと一緒にする必要があります。nonempty オプションを指定するとマウントポイントが空でない場合でも暗号化されたファイルシステムがマウントされます。マウントして欲しくない場合、オプションを削除してください。\n\n設定ファイルに <volume> エントリを複数指定することで EncFS フォルダを複数マウントできます。\n\n"
    },
    {
      "title": "暗号化ディレクトリのバックアップ",
      "level": 3,
      "content": "暗号化ディレクトリは他の場所にそのままバックアップ・リストアできます。暗号化オプションやメタデータの設定ファイルはディレクトリの中に保存されているためです。ファイルはプレーンテキスト形式で .encfs6.xml という名前です。パスワードは入っていないためプレーンテキストで直接的な問題は何もありません。\n\nただし、バックアップをリモートの場所 (クラウドなど) や携帯デバイスに保存する場合、面倒なことになります。そのような場合、バックアップを作成する前に、ディレクトリの外にファイルを手動で移動しても何も問題ありません。ENCFS6_CONFIG 環境変数を使って encfs に場所を指定すれば、ずっと別の場所に置いておいてもディレクトリをマウントしてファイルにアクセスできます。上の#使用方法に書かれている例の場合:\n\n```\n$ mv ~/.name/encfs6.xml ~/.\n$ ENCFS6_CONFIG=~/encfs6.xml encfs ~/.name ~/name\n```\n\n"
    },
    {
      "title": "プレーンテキストディレクトリのバックアップ",
      "level": 3,
      "content": "以下の例では thesis.txt ファイルが含まれている既存のプレーンテキストディレクトリ ~/mythesis の暗号化バックアップを作成したいとします。\n\nまず、既存のプレーンテキストディレクトリの暗号化バックアップを作成:\n\n```\n$ encfs --reverse ~/mythesis /tmp/thesisbackup\n```\n\nディレクトリの順番は通常の使用の場合と逆になります。--reverse オプションを使用することで、まず設定ファイルがプレーンテキストディレクトリに保存され /tmp/thesisbackup には暗号化された状態で保存されます。そして、/tmp/thesisbackup のファイルは永続的ではありません。アンマウントするとファイルは消えます (/tmp マウントポイントを使用していることとは無関係です)。\n\nそれから、適当なバックアップ場所に暗号化ファイルをコピーして、一時的な encfs ディレクトリをアンマウントしてください:\n\n```\n$ cp -R /tmp/thesisbackup/* /mnt/usbstick/\n$ fusermount -u /tmp/thesisbackup\n```\n\nバックアップを復元したいときは、プレーンテキスト形式の暗号化オプションが必要になります。ENCFS6_CONFIG 環境変数を使って以下のように encfs に指定してください (既存の ~/mythesis を破壊しないように別のディレクトリを使用しています):\n\n```\n$ ENCFS6_CONFIG=~/mythesis/.encfs6.xml encfs ~/mnt/usbstick/thesisbackup ~/restoremythesis\n```\n\nリストアしたディレクトリを確認すると、ファイルが2つ含まれていることが確認できます:\n\n```\n$ ls -la ~/restoremythesis\n... \n-rw-r--r--  1 student student    1078  3. Jan 12:33 .encfs6.xml\n-rw-r--r--  1 student student      42  3. Jan 12:33 thesis.txt\n...\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- EncFS - プロジェクトのホームページ\n- Taylor Hornby による EncFS の セキュリティ監査 (2014年1月14日)。\n- Anthony Thyssen による EncFS micro-how-to。\n\n"
    }
  ]
}