{
  "title": "GPGPU (Русский)",
  "url": "https://wiki.archlinux.org/title/GPGPU_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- NVIDIA (Русский)\n- Аппаратное ускорение видео\n\nGPGPU (General-purpose computing on graphics processing units) — неспециализированные вычисления на графических процессорах. Другими словами, это означает выполнение на видеокарте вычислений, не относящихся непосредственно к графике.\n\n"
    },
    {
      "title": "OpenCL",
      "level": 2,
      "content": "OpenCL (Open Computing Language) — это открытая, не требующая лицензионных отчислений спецификация параллельного программирования, разработанная некоммерческим консорциумом Khronos Group.\n\nСпецификация OpenCL описывает язык программирования, общую среду, которая должна присутствовать, и C API, позволяющий программистам обращаться к этой среде.\n\n"
    },
    {
      "title": "Среда выполнения",
      "level": 3,
      "content": "Для выполнения программ, использующих OpenCL, необходимо установить совместимую аппаратную среду выполнения.\n\n"
    },
    {
      "title": "AMD/ATI",
      "level": 4,
      "content": "- opencl-mesa[ссылка недействительна: package not found]: свободная среда выполнения для AMDGPU и ATI\n- opencl-amdAUR, opencl-amd-devAUR: ROCr OpenCL и legacy OpenCL (он же orca), перепакованные из релизов AMD для ubuntu (эквивалентно указанию opencl=rocr,legacy в ubuntu amdgpu-install)\n- opencl-legacy-amdgpu-proAUR: legacy OpenCL (также известное как orca), перепакованное из релизов AMD для ubuntu (эквивалентно указанию opencl=legacy в amdgpu-install для ubuntu).\n- rocm-opencl-runtime: Часть вычислительного стека AMD ROCm GPU, официально поддерживающая карты GFX8 и более поздние версии (Fiji, Polaris, Vega), с неофициальной и частичной поддержкой карт на базе Navi10 (похоже, но не эквивалентно указанию opencl=rocr в ubuntu amdgpu-install, потому что версия rocm этого пакета отличается от версии установщика ubuntu). Для поддержки карт старше Vega нужно установить переменную времени выполнения ROC_ENABLE_PRE_VEGA=1.\n- amdapp-sdkAUR: AMD CPU среда выполнения\n\n"
    },
    {
      "title": "NVIDIA",
      "level": 4,
      "content": "- opencl-nvidia: официальная среда выполнения NVIDIA\n\n"
    },
    {
      "title": "Intel",
      "level": 4,
      "content": "- intel-compute-runtime: также известная как среда выполнения Neo OpenCL, реализация с открытым исходным кодом для графического процессора Intel HD Graphics на платформах Gen8 (Broadwell) и последующих.\n- beignetAUR: реализация с открытым исходным кодом для GPU Intel HD Graphics на Gen7 (Ivy Bridge) и последующих платформах, которая была отменена компанией Intel в пользу драйвера NEO OpenCL, остаётся рекомендуемым решением для устаревших аппаратных платформ (например, Ivy Bridge, Haswell).\n- intel-openclAUR: проприетарная реализация для графического процессора Intel HD Graphics на Gen7 (Ivy Bridge) и последующих платформах, отменённая Intel в пользу драйвера NEO OpenCL, остаётся рекомендуемым решением для устаревших аппаратных платформ (например, Ivy Bridge, Haswell).\n- intel-opencl-runtimeAUR: реализация для процессоров Intel Core и Xeon. Она также поддерживает процессоры других производителей.\n\n"
    },
    {
      "title": "Прочие",
      "level": 4,
      "content": "- pocl: Реализация OpenCL на базе LLVM (аппаратно независимая)\n\nКомпилятор и транслятор позволяют запускать приложения OpenCL в среде Vulkan.\n\n- clspv-gitAUR: прототип компилятора подмножества OpenCL C для вычислительных шейдеров Vulkan.\n- clvk: прототип реализации OpenCL 3.0 поверх Vulkan с использованием clspv в качестве компилятора.\n- xrt-binAUR: Xilinx Run Time для FPGA xrt\n- fpga-runtime-for-opencl: FPGA Runtime\n\n"
    },
    {
      "title": "32-битная среда выполнения",
      "level": 3,
      "content": "Для выполнения 32-битных программ, использующих OpenCL, необходимо установить совместимую аппаратную 32-битную среду выполнения.\n\n"
    },
    {
      "title": "AMD/ATI",
      "level": 4,
      "content": "- lib32-opencl-mesa[ссылка недействительна: package not found]: свободная среда выполнения для AMDGPU и Radeon (32 бита)\n- lib32-opencl-legacy-amdgpu-proAUR: legacy OpenCL (он же orca), перепакованный из выпусков ubuntu от AMD (32 бита)\n\n"
    },
    {
      "title": "NVIDIA",
      "level": 4,
      "content": "- lib32-opencl-nvidia: официальная среда выполнения NVIDIA (32 бита)\n\n"
    },
    {
      "title": "Загрузчик ICD (libOpenCL.so)",
      "level": 3,
      "content": "ICD Loader должен быть библиотекой, не зависящей от платформы, которая предоставляет средства для загрузки драйверов конкретных устройств через OpenCL API. Большинство производителей OpenCL предоставляют свою собственную реализацию загрузчика OpenCL ICD, и все они должны работать с реализациями OpenCL других производителей. К сожалению, большинство производителей не предоставляют достаточно актуальные загрузчики ICD, поэтому Arch Linux решил использовать библиотеку из отдельного проекта (ocl-icd), который в настоящее время предоставляет функционирующую реализацию текущего OpenCL API.\n\nДругие библиотеки загрузчика ICD устанавливаются как часть SDK каждого производителя. Если вы хотите, чтобы использовался загрузчик ICD из пакета ocl-icd, вы можете создать файл в /etc/ld.so.conf.d, который добавляет /usr/lib в каталоги поиска динамического загрузчика программ:\n\n```\n/etc/ld.so.conf.d/00-usrlib.conf\n```\n\n```\n/usr/lib\n```\n\nЭто необходимо, поскольку все SDK добавляют каталоги lib своей среды выполнения в путь поиска через файлы ld.so.conf.d.\n\nДоступные пакеты с реализациями OpenCL ICD:\n\n- ocl-icd: рекомендуется, самый актуальный\n- intel-openclAUR от Intel. Обеспечивает OpenCL 2.0, объявлен устаревшим в пользу intel-compute-runtime.\n\n"
    },
    {
      "title": "Разработка",
      "level": 3,
      "content": "Для разработки на OpenCL минимально необходимыми дополнительными пакетами являются:\n\n- ocl-icd: Реализация загрузчика OpenCL ICD, соответствующая последней спецификации OpenCL.\n- opencl-headers: Заголовки API OpenCL C/C++.\n\nSDK производителей предоставляют множество инструментов и вспомогательных библиотек:\n\n- intel-opencl-sdkAUR: Intel OpenCL SDK (старая версия, новые OpenCL SDK включены в INDE и Intel Media Server Studio)\n- amdapp-sdkAUR: Этот пакет устанавливается как /opt/AMDAPP и помимо файлов SDK содержит ряд примеров кода (/opt/AMDAPP/SDK/samples/). Он также предоставляет утилиту clinfo, которая отображает список платформ и устройств OpenCL, присутствующих в системе, и отображает подробную информацию о них. Поскольку SDK сам содержит драйвер CPU OpenCL, для выполнения OpenCL на устройствах CPU (независимо от их производителя) дополнительный драйвер не требуется.\n- cuda: SDK для GPU от Nvidia, который включает поддержку OpenCL 1.1.\n\n"
    },
    {
      "title": "Реализации",
      "level": 3,
      "content": "Чтобы узнать, какие реализации OpenCL в настоящее время активны в вашей системе, используйте следующую команду:\n\n```\n$ ls /etc/OpenCL/vendors\n```\n\nЧтобы узнать все возможные (известные) свойства платформы OpenCL и устройств, доступных в системе, установите clinfo.\n\n"
    },
    {
      "title": "Привязки для языков программирования",
      "level": 4,
      "content": "- JavaScript/HTML5: WebCL\n- Python: python-pyopencl\n- D: cl4d или DCompute\n- Java: Aparapi или JOCL (часть JogAmp)\n- Mono/.NET: Open Toolkit\n- Go: Связка OpenCL для Go\n- Racket: Racket имеет собственный интерфейс на PLaneT который можно установить с помощью raco.\n- Rust: ocl\n- Julia: OpenCL.jl\n\n"
    },
    {
      "title": "SYCL",
      "level": 2,
      "content": "SYCL — ещё один открытый и бесплатный стандарт от Khronos Group, который определяет гетерогенную модель программирования с одним источником для C++ поверх OpenCL 1.2.\n\nSYCL состоит из среды выполнения и компилятора C++. Компилятор может быть нацелен на любое количество и любой вид ускорителей. Среда выполнения необходима для возврата к выполнению кода на процессоре в случае, если реализация OpenCL не найдена.\n\n"
    },
    {
      "title": "Реализации",
      "level": 3,
      "content": "- computecppAUR: Проприетарная реализация SYCL 1.2.1 от Codeplay. В качестве целевых устройств могут использоваться SPIR, SPIR-V и экспериментально PTX (NVIDIA).\n- trisycl-gitAUR: Реализация с открытым исходным кодом, в основном под руководством компании Xilinx.\n- hipsycl-cuda-gitAUR и hipsycl-rocm-gitAUR: Бесплатная реализация, построенная на HIP от AMD вместо OpenCL. Может работать на графических процессорах AMD и NVIDIA.\n\n"
    },
    {
      "title": "Проверка наличия поддержки SPIR",
      "level": 3,
      "content": "Большинство реализаций SYCL способны компилировать код ускорителя в SPIR или SPIR-V. Оба эти языка являются промежуточными языками, разработанными компанией Khronos, которые могут быть использованы драйвером OpenCL. Чтобы проверить, поддерживаются ли SPIR или SPIR-V, можно использовать clinfo:\n\n```\n$ clinfo | grep -i spir\n```\n\n```\nPlatform Extensions                             cl_khr_icd cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_depth_images cl_khr_3d_image_writes cl_intel_exec_by_local_thread cl_khr_spir cl_khr_fp64 cl_khr_image2d_from_buffer cl_intel_vec_len_hint\n  IL version                                    SPIR-V_1.0\n  SPIR versions                                 1.2\n```\n\nComputeCpp дополнительно поставляется с инструментом, который суммирует соответствующую системную информацию:\n\n```\n$ computecpp_info\n```\n\n```\nDevice 0:\n\n  Device is supported                     : UNTESTED - Untested OS\n  CL_DEVICE_NAME                          : Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz\n  CL_DEVICE_VENDOR                        : Intel(R) Corporation\n  CL_DRIVER_VERSION                       : 18.1.0.0920\n  CL_DEVICE_TYPE                          : CL_DEVICE_TYPE_CPU\n```\n\nИзвестно, что драйверы, по крайней мере, частично поддерживают SPIR или SPIR-V, в том числе intel-compute-runtime, intel-opencl-runtimeAUR, pocl и amdgpu-pro-openclAUR[ссылка недействительна: package not found].\n\n"
    },
    {
      "title": "Разработка",
      "level": 3,
      "content": "Для разработки с использованием SYCL требуется рабочее окружение C++11. Существует несколько библиотек с открытым исходным кодом:\n\n- ComputeCpp SDK: Коллекция примеров кода, интеграция cmake для ComputeCpp\n- SYCL-DNN: Примитивы производительности нейронной сети\n- SYCL-BLAS: Примитивы производительности линейной алгебры\n- VisionCpp: Библиотека компьютерного зрения\n- SYCL Parallel STL: GPU-реализация параллельных алгоритмов C++17\n\n"
    },
    {
      "title": "CUDA",
      "level": 2,
      "content": "CUDA (Compute Unified Device Architecture) — это проприетарная архитектура параллельных вычислений с закрытым исходным кодом и фреймворк от NVIDIA. CUDA требует наличия графического процессора NVIDIA и состоит из нескольких компонентов:\n\n- Обязательные: Проприетарный модуль ядра NVIDIA Библиотеки \"драйвера\" и \"среды выполнения\" CUDA\n- Опциональные: Дополнительные библиотеки: CUBLAS, CUFFT, CUSPARSE и др. Инструментарий CUDA, включая компилятор nvcc CUDA SDK, который содержит множество примеров кода и примеров программ CUDA и OpenCL\n\n- Проприетарный модуль ядра NVIDIA\n- Библиотеки \"драйвера\" и \"среды выполнения\" CUDA\n\n- Дополнительные библиотеки: CUBLAS, CUFFT, CUSPARSE и др.\n- Инструментарий CUDA, включая компилятор nvcc\n- CUDA SDK, который содержит множество примеров кода и примеров программ CUDA и OpenCL\n\nМодуль ядра и библиотека \"драйвера\" CUDA поставляются в nvidia и opencl-nvidia. Библиотека \"runtime\" и остальной инструментарий CUDA доступны в cuda. cuda-gdb требует установки ncurses5-compat-libsAUR, см. FS#46598.\n\n"
    },
    {
      "title": "Разработка",
      "level": 3,
      "content": "Пакет cuda устанавливает все компоненты в каталог /opt/cuda. Для компиляции кода CUDA добавьте /opt/cuda/include в пути для включения в настройках компилятора. Например, это можно сделать, добавив -I/opt/cuda/include во флаги/опции компилятора. Чтобы использовать nvcc — обёртку над gcc, которую предоставляет NVIDIA, — добавьте /opt/cuda/bin в ваш PATH.\n\nЧтобы проверить, была ли установка успешной и работает ли CUDA, можно скомпилировать примеры CUDA. Одним из способов проверки установки является запуск примера deviceQuery.\n\n"
    },
    {
      "title": "Привязки для языков программирования",
      "level": 3,
      "content": "- Fortran: PGI CUDA Fortran Compiler\n- Haskell: пакет accelerate показывает доступные бэкенды CUDA\n- Java: JCuda\n- Mathematica: CUDAlink\n- Mono/.NET: CUDAfy.NET, managedCuda\n- Perl: KappaCUDA, CUDA-Minimal\n- Python: python-pycuda\n- Ruby: rbcuda\n- Rust: cuda-sys (привязки) или RustaCUDA (высокоуровневая обёртка)\n\n"
    },
    {
      "title": "ROCm",
      "level": 2,
      "content": "ROCm[устаревшая ссылка 2025-03-15 ⓘ] (Radeon Open Compute) — это архитектура и структура параллельных вычислений с открытым исходным кодом от AMD. Хотя она требует наличия графического процессора AMD, некоторые инструменты ROCm не привязаны к конкретному оборудованию. Смотрите Репозиторий ROCm для Arch Linux для получения дополнительной информации и инструкций по установке.\n\n"
    },
    {
      "title": "HIP",
      "level": 3,
      "content": "Heterogeneous Interface for Portability (HIP)[устаревшая ссылка 2023-05-20 ⓘ] — это специализированная среда программирования GPU от AMD для разработки высокопроизводительных ядер на GPU. HIP — это API среды выполнения и язык программирования C++, который позволяет разработчикам создавать переносимые приложения на различных платформах.\n\n- rocm-hip-runtime: Базовая среда выполнения, пакеты для запуска приложений HIP на платформе AMD.\n- hip-runtime-amd: Гетерогенный интерфейс для AMDGPU в ROCm. Поддерживает GPU от архитектуры Polaris (серия RX 500) до новейшей архитектуры AMD RDNA 2 (серия RX 6000).\n- hip-runtime-nvidia: Гетерогенный интерфейс для графических процессоров NVIDIA в ROCm.\n\n- Информация об использовании HIP в Blender доступна в разделе Blender#HIP on AMD open source drivers.\n- Если со сборкой rocm-llvm (нужен для hip-runtime-amd) есть проблемы, можно взять скомпилированные пакеты из неофициального репозитория, который предлагается использовать на странице проекта. Скомпилированные файлы ROCm Debian, которые предоставляет AMD, также доступны в opencl-amd-devAUR.\n\n"
    },
    {
      "title": "OpenMP",
      "level": 3,
      "content": "Пакет openmp-extrasAUR предоставляет AOMP — компилятор на базе Clang/LLVM с открытым исходным кодом и добавленной поддержкой API OpenMP на графических процессорах AMD.\n\n"
    },
    {
      "title": "OpenCL",
      "level": 3,
      "content": "Пакет rocm-opencl-runtime — это часть фреймворка ROCm, предоставляющий среду выполнения OpenCL.\n\n"
    },
    {
      "title": "Поддержка изображений OpenCL",
      "level": 4,
      "content": "Последние версии ROCm теперь включают поддержку изображений OpenCL, используемых программами с ускорением GPGPU, такими как Darktable. ROCm с графическим драйвером AMDGPU с открытым исходным кодом — это всё, что требуется. AMDGPU PRO не требуется.\n\n```\n$ /opt/rocm/bin/clinfo | grep -i \"image support\"\n```\n\n```\nImage support                                   Yes\n```\n\n"
    },
    {
      "title": "Список программ, использующих GPGPU",
      "level": 2,
      "content": "- Bitcoin\n- Blender – Поддержка CUDA для графических процессоров Nvidia и поддержка HIP для графических процессоров AMD. Дополнительная информация здесь.\n- BOINC\n- FFmpeg – дополнительная информация здесь.\n- Folding@home\n- GIMP – экспериментальная поддержка, подробнее здесь.\n- HandBrake\n- Hashcat\n- LibreOffice Calc – подробнее здесь.\n- clinfo – Ищет все возможные (известные) свойства платформы OpenCL и устройства, доступные в системе.\n- cuda_memtestAUR – тестирование памяти видеокарты. Несмотря на своё название, он поддерживает как CUDA, так и OpenCL.\n- darktable – Для работы функции OpenCL требуется не менее 1 ГБ ОЗУ на GPU и #Поддержка изображений OpenCL.\n- DaVinci Resolve - нелинейный видеоредактор. Может использовать как OpenCL, так и CUDA.\n- imagemagick\n- lc0AUR - Используется для поиска нейронной сети (поддерживает tensorflow, OpenCL, CUDA и openblas).\n- opencv\n- pyritAUR\n- python-pytorch-cuda - PyTorch с бэкендом CUDA\n- tensorflow-cuda - Порт TensorFlow на CUDA\n- tensorflow-computecppAUR - Порт TensorFlow на SYCL\n- xmrig - Высокопроизводительный майнер CryptoNote на CPU и GPU (OpenCL, CUDA)\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Официальная страница OpenCL\n- Официальный сайт SYCL\n- Официальный сайт SPIR\n- Домашняя страница CUDA Toolkit\n- Домашняя страница Intel SDK для приложений OpenCL\n- Официальный сайт ComputeCpp\n- Список фреймворков OpenCL, применимых для различных графических процессоров\n\n"
    }
  ]
}