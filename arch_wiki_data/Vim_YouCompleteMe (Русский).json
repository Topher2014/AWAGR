{
  "title": "Vim/YouCompleteMe (Русский)",
  "url": "https://wiki.archlinux.org/title/Vim/YouCompleteMe_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "YouCompleteMe (сокращённо YCM) — это плагин для автодополнения в Vim (Русский). YCM поддерживает следующие языки программирования:\n\n- C/C++/Objective-C/Objective-C++\n- Python\n- C#\n- Go\n- Rust\n- Java\n- JavaScript\n- TypeScript\n- Другие языки (Ruby, PHP и т.д.) посредством использования omnicompletion.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет vim-youcompleteme-gitAUR из AUR (Русский). Для ручной установки Вы можете воспользоваться официальной инструкцией.\n\nВ качестве альтернативы, можно поместить файл compile_commands.json в корневую директорию проекта.\n\n"
    },
    {
      "title": "C/C++",
      "level": 3,
      "content": "YCM использует скрипт .ycm_extra_conf.py для установки параметров проекта, необходимых для автодополнения и проверки синтаксиса. Ниже приводится краткое описание основной конфигурации. Подробности и расширенные параметры смотрите в официальной документации.\n\n"
    },
    {
      "title": "Структура файла конфигурации",
      "level": 4,
      "content": "Пример файла .ycm_extra_conf.py может быть найден в [1]. Вы должны сохранить копию этого файла в папке проекта и настроить его в соответствие своим потребностям.\n\nНаиболее важными параметрами (в минимальной конфигурации) являются опции -x и --std, которые соответственно указывают язык, используемый в проекте, и следуемый стандарт. -x может быть установлен для C и C++, а общими значениями для --std являются --std=c89, --std=c99, --std=c11, --std=c14 и их соответствующие версии в C++. Стандартный параметр определяет предупреждения и ошибки при синтаксической проверке (например, строка, закомментированная с помощью // будет отмечена как неразрешенная в C89, но не в следующих версиях стандарта.\n\nСторонний скрипт и vim-плагин для автоматического создания .ycm_extra_conf.py доступен в данном репозитории.\n\n"
    },
    {
      "title": "Расположение файла конфигурации",
      "level": 4,
      "content": "YCM выполняет поиск файла .ycm_extra_conf.py в каталоге исходного файла и в его родительских директориях. Если файл конфигурации не найден, то функции YCM не будут доступны. Глобальный файл настроек, используемый, когда локальный файл не был найден, может быть выбран путём добавления в ~/.vimrc следующих строк:\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_global_ycm_extra_conf = '/путь/до/файла'\n```\n\nТак как .ycm_extra_conf.py является python-скриптом, то в целях безопасности каждый раз будет запрашиваться разрешение на его выполнение. Такое поведение можно отключить, добавив следующие строки в ~/.vimrc:\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_confirm_extra_conf = 0\n```\n\nДля более безопасного решения, при включённом подтверждении можно определить белый/чёрный список с помощью шаблонов, назначаемых в переменной ycm_extra_conf_globlist. Файл попадает в чёрный список, если соответствует шаблону, начинающемуся с !. Если файл соответствует шаблону не начинающемуся с восклицательного знака, то он попадает в белый список. Запрос на подтверждение выполнения файла конфигурации возникает если файл не соответствует ни одному из шаблонов. Правила (шаблоны) сопоставляются в порядке очереди и применяется первое совпадение. Возможно использование следующих масок в шаблонах:\n\n- * — любые символы\n- ? — любой один символ\n- [последовательность] — любой символ в последовательности\n- [!последовательность] — любой символ не входящий в последовательность\n\nПример:\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']\n```\n\nЛюбой файл в каталоге ~/dev попадает в белый список, любой файл в каталоге ~/ попадает в чёрный список. И, согласно очереди приоритетности шаблонов, любой файл в каталоге ~/, кроме каталога ~/dev, попадёт в чёрный список.\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "У YCM есть встроенная поддержка сервера jdt.ls, который можно установить с помощью опции --java-completer при запуске install.py.\n\n"
    },
    {
      "title": "Java (альтернативный вариант)",
      "level": 3,
      "content": "Для автодополнения Java должен присутствовать файл проекта и активен headless-сервер Eclim.\n\n1. Установите eclimAUR из AUR (Русский).\n1. Добавьте следующие строки в ваш ~/.vimrc: ~/.vimrc let g:EclimCompletionMethod = 'omnifunc'\n1. Запустите скрипт eclimd в отдельном терминале: $ /usr/lib/eclipse/plugins/org.eclim_$pkgver/bin/eclimd\n1. Создайте файл .project в той же директории, где находятся Ваши Java-файлы и добавьте в этот файл следующее содержимое: .project <projectDescription> <name>PROJECTNAME</name> </projectDescription>\n1. Откройте Ваш Java-файл в Vim и выполните: :ProjectCreate . -n java\n\n```\n~/.vimrc\n```\n\n```\nlet g:EclimCompletionMethod = 'omnifunc'\n```\n\n```\n$ /usr/lib/eclipse/plugins/org.eclim_$pkgver/bin/eclimd\n```\n\n```\n.project\n```\n\n```\n<projectDescription>\n    <name>PROJECTNAME</name>\n</projectDescription>\n```\n\n```\n:ProjectCreate . -n java\n```\n\nДля компиляции проекта выполните:\n\n```\n:ProjectBuild\n```\n\nДля запуска проекта выполните:\n\n```\n:Java\n```\n\nЧтобы запустить только текущий файл, выполните:\n\n```\n:Java %\n```\n\nСписок доступных команд можно найти здесь.\n\n"
    },
    {
      "title": "C#",
      "level": 3,
      "content": "Перед началом работы с проектом на C# убедитесь, что в системе установлен пакет mono-msbuild, так как он является обязательной зависимостью Omnisharp Roslyn — движка автодополнения для C#, используемого YouCompleteMe. Более подробная информация доступна в README репозитория Omnisharp Roslyn и в данном issue на GitHub.\n\nСамый простой способ создать проект — установить monodevelop-stableAUR[ссылка недействительна: package not found]. В остальной части раздела объясняется, как вручную создать проект C#, который также может быть создан из командной строки с помощью xbuild.\n\nСперва создайте файл .sln. Части кода, выделенные полужирным курсивом, замените на свои названия.\n\n```\nSOLUTION.sln\n```\n\n```\nMicrosoft Visual Studio Solution File, Format Version 11.00\n# Visual Studio 2010\nProject(\"{00000000-0000-0000-0000-000000000000}\") = \"PROJECT\", \"PROJECT\\PROJECT.csproj\", \"{11111111-1111-1111-1111-111111111111}\"\nEndProject\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{11111111-1111-1111-1111-111111111111}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Debug|x86.Build.0 = Debug|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Release|x86.ActiveCfg = Release|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Release|x86.Build.0 = Release|x86\n\tEndGlobalSection\nEndGlobal\n```\n\nЗатем создайте директорию PROJECT и там создайте файл с названием PROJECT.csproj:\n\n```\nPROJECT/PROJECT.csproj\n```\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\n    <ProductVersion>10.0.0</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{11111111-1111-1111-1111-111111111111}</ProjectGuid>\n    <OutputType>Exe</OutputType>\n    <RootNamespace>PROJECT</RootNamespace>\n    <AssemblyName>PROJECT</AssemblyName>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x86' \">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <OutputPath>bin\\Debug</OutputPath>\n    <DefineConstants>DEBUG;</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <ConsolePause>false</ConsolePause>\n    <PlatformTarget>x86</PlatformTarget>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">\n    <DebugType>full</DebugType>\n    <Optimize>true</Optimize>\n    <OutputPath>bin\\Release</OutputPath>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <ConsolePause>false</ConsolePause>\n    <PlatformTarget>x86</PlatformTarget>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\n  <ItemGroup>\n    <Compile Include=\"HelloWorld.cs\" />\n    <Compile Include=\"CSharpFile1.cs\" />\n    <Compile Include=\"CSharpFile2.cs\" />\n  </ItemGroup>\n</Project>\n```\n\nПоместите свои C#-файлы в директорию PROJECT и не забудьте вручную добавить их в конец файла PROJECT/PROJECT.csproj.\n\nТеперь YouCompleteMe должен работать для файлов C# в этом каталоге и вы можете собирать проект. Чтобы скомпилировать проект из Vim, выполните следующую команду:\n\n```\n:!xbuild\n```\n\n"
    },
    {
      "title": "Решение проблем",
      "level": 2,
      "content": "Помните, что для создания списка завершения строк YouCompleteMe может потребоваться некоторое время.\n\nДля диагностики доступны следующие команды:\n\n- :messages — показывает предыдущие сообщения об ошибках в Vim\n- :YcmDiags\n- :YcmDebugInfo\n\n"
    },
    {
      "title": "E764: Option 'omnifunc' is not set",
      "level": 3,
      "content": "Если это происходит, то Вы забыли поместить следующие строки в ~/.vimrc:\n\n```\n~/.vimrc\n```\n\n```\nlet g:EclimCompletionMethod = 'omnifunc'\n```\n\n"
    },
    {
      "title": "Нет автодополнения в Java-файлах",
      "level": 3,
      "content": "Убедитесь, что служба eclimd запущена:\n\n```\n$ ps -ax|grep eclimd\n```\n\nи что у Вас есть файлы проекта.\n\n"
    },
    {
      "title": "URLError: <urlopen error [Errno 111] Connection refused>",
      "level": 3,
      "content": "Эта ошибка появляется, когда у Вас нет файла .sln в текущей или родительской директориях.\n\n"
    },
    {
      "title": "RuntimeError: Error starting OmniSharp server: no solutionfile found",
      "level": 3,
      "content": "Аналогично.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Страница на Github\n- Домашняя страница проекта[устаревшая ссылка 2020-08-06 ⓘ]\n\n"
    }
  ]
}