{
  "title": "Xmonad (日本語)",
  "url": "https://wiki.archlinux.org/title/Xmonad_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- xmobar\n- dzen\n- dmenu\n- タイル型ウィンドウマネージャの比較\n- ウィンドウマネージャ\n\nxmonad は、X のタイル型ウィンドウマネージャです。画面を分割し、重なり合わないようにウィンドウを配置することで、画面を最大限に活用することができます。ウィンドウマネージャの機能はキーボードから利用することができます (マウスはオプションです)。\n\nxmonad は Haskell で実装されており、設定や拡張も Haskell で書かれています。レイアウトやキーバインド、その他の設定はユーザーが設定ファイルに書き込むことで変更できます。\n\nレイアウトは動的に適用され、各ワークスペース上で異なるレイアウトを使用することができます。Xinerama が完全にサポートされ、ウィンドウを複数のモニタで並べて表示することができます。\n\n詳細は、xmonad のウェブサイトをご覧ください: http://xmonad.org/\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 xmonad の起動\n- 3 設定 3.1 デスクトップ設定のベース\n- 4 Xmonad の終了\n- 5 ヒントとテクニック 5.1 X-Selection-Paste 5.2 キーボードショートカット 5.3 バインドされていないキーをターゲットにする 5.4 マウスで画面の端をタッチして X () アクションを実行する 5.4.1 ScreenCorners でワークスペースを切り替える (KDE のような) 5.5 ワークスペースの数を増やす 5.6 重複したキーバインディングをチェックする 5.7 ドックやパネル、トレイ (Xmobar, Tint2, Conky など) のための空間を作る 5.8 ウィンドウにタグを追加する 5.9 ウィンドウ間のギャップを同じ大きさにする 5.10 xmonad で xmobar を使う 5.10.1 クイック設定 5.10.2 複雑な設定 5.10.3 XMobar の設定を確認 5.11 外部スクリプトで xmonad を制御 5.12 xmonad の中で他のウィンドウマネージャを起動 5.13 KDE と xmonad 5.13.1 plasmashell の無効化 5.14 Skype 用の IM レイアウト 5.15 設定例\n- 6 トラブルシューティング 6.1 Xfce 4 と xmonad 6.2 xmonad-x86_64-linux が存在しない 6.3 Java アプリケーションの問題 6.4 gvim やターミナルの底部の空きスペース 6.5 Chromium/Chrome がフルスクリーンにならない 6.6 マルチタッチ / touchegg 6.7 azerty キーボードレイアウトのキーバインドの問題 6.8 GNOME 3 の mod4+p で dmenu が起動するかわりにディスプレイの設定が変更されてしまう 6.9 Chrome/Chromium で定義されたウィンドウのボーダーの色が表示されない 6.10 VirtualBox でフォーカスしたボーダーの問題 6.11 Steam のゲーム (Half-Life, Left 4 Dead, ...) と xmonad 6.12 LibreOffice - メインウィンドウとダイアログ間のフォーカスフリック 6.13 IntelliJ IDEA と xmonad 6.13.1 ダイアログウィンドウ 6.14 アップデート後に共有ライブラリが見つからない 6.15 XMonad.Prompt とウィンドウが壊れているか欠落している\n- 7 参照\n\n- 3.1 デスクトップ設定のベース\n\n- 5.1 X-Selection-Paste\n- 5.2 キーボードショートカット\n- 5.3 バインドされていないキーをターゲットにする\n- 5.4 マウスで画面の端をタッチして X () アクションを実行する 5.4.1 ScreenCorners でワークスペースを切り替える (KDE のような)\n- 5.5 ワークスペースの数を増やす\n- 5.6 重複したキーバインディングをチェックする\n- 5.7 ドックやパネル、トレイ (Xmobar, Tint2, Conky など) のための空間を作る\n- 5.8 ウィンドウにタグを追加する\n- 5.9 ウィンドウ間のギャップを同じ大きさにする\n- 5.10 xmonad で xmobar を使う 5.10.1 クイック設定 5.10.2 複雑な設定 5.10.3 XMobar の設定を確認\n- 5.11 外部スクリプトで xmonad を制御\n- 5.12 xmonad の中で他のウィンドウマネージャを起動\n- 5.13 KDE と xmonad 5.13.1 plasmashell の無効化\n- 5.14 Skype 用の IM レイアウト\n- 5.15 設定例\n\n- 5.4.1 ScreenCorners でワークスペースを切り替える (KDE のような)\n\n- 5.10.1 クイック設定\n- 5.10.2 複雑な設定\n- 5.10.3 XMobar の設定を確認\n\n- 5.13.1 plasmashell の無効化\n\n- 6.1 Xfce 4 と xmonad\n- 6.2 xmonad-x86_64-linux が存在しない\n- 6.3 Java アプリケーションの問題\n- 6.4 gvim やターミナルの底部の空きスペース\n- 6.5 Chromium/Chrome がフルスクリーンにならない\n- 6.6 マルチタッチ / touchegg\n- 6.7 azerty キーボードレイアウトのキーバインドの問題\n- 6.8 GNOME 3 の mod4+p で dmenu が起動するかわりにディスプレイの設定が変更されてしまう\n- 6.9 Chrome/Chromium で定義されたウィンドウのボーダーの色が表示されない\n- 6.10 VirtualBox でフォーカスしたボーダーの問題\n- 6.11 Steam のゲーム (Half-Life, Left 4 Dead, ...) と xmonad\n- 6.12 LibreOffice - メインウィンドウとダイアログ間のフォーカスフリック\n- 6.13 IntelliJ IDEA と xmonad 6.13.1 ダイアログウィンドウ\n- 6.14 アップデート後に共有ライブラリが見つからない\n- 6.15 XMonad.Prompt とウィンドウが壊れているか欠落している\n\n- 6.13.1 ダイアログウィンドウ\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "xmonadをインストールしてください。これには基本的な設定が含まれています。追加のタイリングアルゴリズムや設定、スクリプトなど便利なデスクトップ設定を含んでいる xmonad-contrib もインストールすることを推奨します。\n\nまた、開発版の xmonad-gitAUR や xmonad-contrib-gitAUR をインストールすることもできます。\n\n"
    },
    {
      "title": "xmonad の起動",
      "level": 2,
      "content": "xmonad を自動起動するには、起動スクリプトに xmonad コマンドを追加します (例えば、startx を使う場合 ~/.xinitrc、XDM ログインマネージャを使う場合 ~/.xsession)。GDM や KDM を使う場合は、新しいセッションファイルを作成し、セッションメニューから xmonad を選択します。\n\nXterm パッケージをインストールするか、設定でターミナルエミュレータを変更しないと Xmonad の中で何もできなくなるので注意してください。\n\nまた、標準では US キーボードレイアウトなので、必要に応じて変更します。例えば日本語キーボードレイアウトは ~/.xinitrc に以下を追加します。キーボードレイアウトの設定についてはここを参照してください。:\n\n```\n$ setxkbmap -layout jp\n```\n\n例 ~/.xinitrc:\n\n```\n# set the cursor\nxsetroot -cursor_name left_ptr\n# set Japanese keyboard layout\nsetxkbmap -layout jp\n# start xmonad\nexec xmonad\n```\n\nもし、起動しない場合はホームディレクトリに .xmonad ディレクトリがあるか確認してください。もしない場合は作成します。\n\n```\n$ mkdir ~/.xmonad\n```\n\n詳細については、xinitrc を参照してください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "xmonad ユーザーは ~/.xmonad/xmonad.hs を修正することで xmonad をカスタマイズすることができます。再コンパイルは Mod+q ショートカットでその場で自動的にされます。\n\nディレクトリ ~/.xmonad がない場合は xmonad --recompile を実行してディレクトリを作成します。\n\nxmonad のデフォルトの設定は非常に優秀で、xmonad.hs がなくても実行することができます。そのため、xmonad --recompile を実行したあとでも ~/.xmonad/xmonad.hs は多分無いでしょう。あなたがそれをカスタマイズしたいのならば、ファイルを作成しそれを編集していきましょう。\n\nxmonad の設定ファイルは Haskell で書かれているため、プログラマーでないとなかなか設定が難しいと思われます。設定例や詳細方法は以下のページを参照して下さい:\n\n- xmonad wiki\n- xmonad config archive\n- xmonad FAQ\n- Arch Linux フォーラムスレッド\n\n最善の方法は組み込みの def 関数を使用し、必要なところを ~/.xmonad/xmonad.hs で変更やカスタマイズをすることです。\n\n次のように xmonad.hs を書くことによって設定します:\n\n```\nimport XMonad\n\nmain = xmonad def\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    , borderWidth = 3\n    }\n```\n\nこの例では、デフォルトの設定に端末とボーダーの設定を上書きします (その他の設定は def 関数から継承されます)。\n\nより複雑になるにつれ、それぞれ別の関数で設定しメイン関数内でそれらの関数を呼び出したほうが便利です。これによって、大規模なカスタマイズをするときに保守が簡易になります。\n\n上記の簡単な xmonad.hs は次のように書くことができます:\n\n```\nimport XMonad\n\nmain = do\n  xmonad $ def\n    { terminal    = myTerminal\n    , modMask     = myModMask\n    , borderWidth = myBorderWidth\n    }\n\nmyTerminal    = \"urxvt\"\nmyModMask     = mod4Mask -- Win key or Super_L\nmyBorderWidth = 3\n```\n\nまた、Haskell では import が最初にあれば、トップレベルの要素 (main, myTerminal, myModMask 等) や {} 内の順序は重要ではありません。\n\n以下は この 設定ファイルの一部です。これは一般的な機能の一例です。\n\n```\n{\n  terminal           = myTerminal,\n  focusFollowsMouse  = myFocusFollowsMouse,\n  borderWidth        = myBorderWidth,\n  modMask            = myModMask,\n  -- numlockMask deprecated in 0.9.1\n  -- numlockMask        = myNumlockMask,\n  workspaces         = myWorkspaces,\n  normalBorderColor  = myNormalBorderColor,\n  focusedBorderColor = myFocusedBorderColor,\n  -- key bindings\n  keys               = myKeys,\n  mouseBindings      = myMouseBindings,\n  -- hooks, layouts\n  layoutHook         = myLayout,\n  manageHook         = myManageHook,\n  handleEventHook    = myEventHook,\n  logHook            = myLogHook,\n  startupHook        = myStartupHook\n}\n```\n\nパッケージにも xmonad.hs が入っており、これは xmonad.hs の最新の公式サンプルです。どうやって設定を上書きするのかその例となる xmonad Haskell モジュールとなっています。ただし、これは自分自身の設定へピックアップしていくための例を集めたものとなっていて、直接これをテンプレートとして使用することは避けてください。/usr/share/ の中にアーキテクチャとバージョン別に置かれています (例: find /usr/share -name xmonad.hs)。\n\n"
    },
    {
      "title": "デスクトップ設定のベース",
      "level": 3,
      "content": "xmonad-contrib にはデスクトップとして使うためのデフォルト設定があります。Chromium など新しいプログラムで発生する問題を解決します。\n\n以下のように追加してください:\n\n```\nimport XMonad\nimport XMonad.Config.Desktop\n\nmain = xmonad desktopConfig\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    }\n```\n\n"
    },
    {
      "title": "Xmonad の終了",
      "level": 2,
      "content": "Mod+Shift+q で xmonad を終了させることができます。Mod はデフォルトでは Alt になっています。\n\n"
    },
    {
      "title": "X-Selection-Paste",
      "level": 3,
      "content": "Xmonad でのキーボードによる操作は X-Selection-Paste のキーボードショートカットを使うことで更に良くなります。\n\nまた、XMonad.Util.Paste に存在する \"pasteSelection\" 関数を以下のようにキーにバインドすることもできます:\n\n```\nxmonad.hs\n```\n\n```\nimport XMonad.Util.Paste -- Remember to include this line\n  -- X-selection-paste buffer\n  , ((0, xK_Insert), pasteSelection)\n```\n\n\"Insert\" キーを押すとアクティブウィンドウにマウスバッファが貼り付けられるようになります。\n\n- \"pasteSelection\" は XMonad.Util.XSelection にある \"getSelection\" を使用しており、\"getSelectin\" の欠陥を受け継いでいます。\n- \"getSelection\" は 「根本的に間違った実装になっていて、デッドロックやクラッシュなどの故障になり得ます」。詳細は [1] を見て下さい。\n- 実際問題としては、これらのエラーは存在するものの、起きることは非常に稀です。\n\n"
    },
    {
      "title": "キーボードショートカット",
      "level": 3,
      "content": "デフォルトのキーボードショートカットは、 xmonad の man page xmonad(1) § NOTES に列挙されています。\n\n"
    },
    {
      "title": "バインドされていないキーをターゲットにする",
      "level": 3,
      "content": "もし xmonad をスタンドアローンなウィンドウマーネージャとして使うのであれば、 xmonad.hs にバインドされていないキーボードのキーを追加できます。することは、まずキーの Xf86 キーネーム (XF86PowerDown のようなやつ) を、/usr/include/X11/XF86keysym.h で探します。するとキーコード (たとえば 0x1008FF2A) が分かるので、xmonad.hs のキーバインディング部分に次の様に追加します:\n\n```\n((0,    0x1008FF2A), spawn \"sudo pm-suspend\")\n```\n\n"
    },
    {
      "title": "マウスで画面の端をタッチして X () アクションを実行する",
      "level": 3,
      "content": "XMonad.Hooks.ScreenCorners を使用すると、ユーザーは XMonad を使用して KDE のような画面コーナーを設けることができます。\n\n"
    },
    {
      "title": "ScreenCorners でワークスペースを切り替える (KDE のような)",
      "level": 4,
      "content": "startHook で一連の操作を定義します:\n\n```\nxmonad.hs\n```\n\n```\n...\nimport XMonad.Hooks.ScreenCorners\n...\n\nmystartupHook = do\n...\n... example ...\n     addScreenCorners [ (SCLowerLeft,  prevWS)\n                        , (SCLowerRight, nextWS)\n                        , (SCUpperLeft, spawnSelected' myAppGrid)\n                        , (SCUpperRight, goToSelected $ mygridConfig' myColorizer)\n                      ]\n...\n```\n\n次に、screenCornerEventHook を handleEventHook に追加します:\n\n```\nmyConfig = def {\n   ...\n       handleEventHook = ... <+> screenCornerEventHook <+> ...\n   ...\n   }\n```\n\n最後に screenCornerLayoutHook を追加します:\n\n```\n...\n   myLayoutHook = screenCornerLayoutHook $ ......\n   ...\n   myConfig = def {\n   ...\n   layoutHook = myLayoutHook \n   ...\n   }\n```\n\n- この拡張機能は、KDE ​​のような画面コーナーを XMonad に追加します。\n- * カーソルを画面隅の1つに移動すると、XMonad.Actions.GridSelect.goToSelected や XMonad.Actions.CycleWS.nextWS などの X () アクションをトリガーできます。\n\n"
    },
    {
      "title": "ワークスペースの数を増やす",
      "level": 3,
      "content": "デフォルトでは、xmonad は9つのワークスペースを使います。以下のように拡張することでワークスペースの数を増やすことが可能です:\n\n```\nxmonad.hs\n```\n\n```\nimport XMonad\nimport XMonad.Util.EZConfig (additionalKeys)\n\nmain=do\n  xmonad $ def\n    { ...\n    , workspaces = myWorkspaces\n    , ...\n    } `additionalKeys` myAdditionalKeys\n\nmyWorkspaces = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"] ++ (map snd myExtraWorkspaces) -- you can customize the names of the default workspaces by changing the list\n\nmyExtraWorkspaces = [(xK_0, \"0\")] -- list of (key, name)\n\nmyAdditionalKeys =\n    [ -- ... your other hotkeys ...\n    ] ++ [\n        ((myModMask, key), (windows $ W.greedyView ws))\n        | (key, ws) <- myExtraWorkspaces\n    ] ++ [\n        ((myModMask .|. shiftMask, key), (windows $ W.shift ws))\n        | (key, ws) <- myExtraWorkspaces\n    ]\n```\n\n"
    },
    {
      "title": "重複したキーバインディングをチェックする",
      "level": 3,
      "content": "XMonad.Util.EZConfig は、重複したキーバインディングをチェックする関数 checkKeymap を提供しますそうでない場合、重複は黙って無視されます。\n\n```\nxmonad.hs\n```\n\n```\nmain = xmonad $ myConfig\n\nmyKeymap = [(\"S-M-c\", kill), ...]\nmyConfig = def {\n    ...\n    startupHook = do\n        return () >> checkKeymap myConfig myKeymap\n        ...other operation you defined here...\n    ...\n} `additionalKeysP` myKeymap\n```\n\n- return () 上の例では、これは非常に重要です。そうしないと、無限相互再帰の問題が発生する可能性があります。\n- return () デッドロックを打破するのに十分な遅延が導入されます。myConfig の定義は、startupHook の定義に依存し、startupHook の定義は、myConfig の定義に依存します。\n\n"
    },
    {
      "title": "ドックやパネル、トレイ (Xmobar, Tint2, Conky など) のための空間を作る",
      "level": 3,
      "content": "ドックやパネル、トレイの空間を自動で調整するには XMonad.Hooks.ManageDocks の avoidStruts を使います:\n\n```\nimport XMonad\nimport XMonad.Hooks.ManageDocks\n\nmain=do\n  xmonad $ def\n    { ...\n    , layoutHook=avoidStruts $ layoutHook def\n    , manageHook=manageHook def <+> manageDocks\n    , ...\n    }\n```\n\n隙間を切り替えたい場合、以下のアクションをキーバインドに追加してください:\n\n```\n,((modMask x, xK_b     ), sendMessage ToggleStruts)\n```\n\n"
    },
    {
      "title": "ウィンドウにタグを追加する",
      "level": 3,
      "content": "XMonad.Actions.TagWindows を使用すると、ユーザーは同じタグを持つウィンドウを操作できます。\n\n```\nxmonad.hs\n```\n\n```\n...\nimport XMonad.Actions.TagWindows\n...\n\nmyKeys = \n... other key bindings ...\n-- Tag\n         --  , (\"M-C-t\", withFocused (addTag \"abc\")) -- add a specific tag \"abc\"\n         --  , (\"M-C-d\", withFocused (delTag \"abc\")) -- delete the tag \"abc\" from the focused window\n         --  , (\"M-C-h\", withTaggedGlobalP \"abc\" shiftHere) -- shift windows with tag \"abc\" here\n             , (\"M-C-a\", tagPrompt defaultXPConfig $ withFocused . addTag ) -- prompt for inputs of tag names\n             , (\"M-C-h\", tagPrompt defaultXPConfig (`withTaggedGlobalP` shiftHere))  -- shift windows with user defined tags (input) here\n             , (\"M-C-d\", tagDelPrompt defaultXPConfig)  -- delete a user-defined tag (input)\n             , (\"M-C-t\", tagPrompt defaultXPConfig  focusUpTaggedGlobal)  -- switch between windows in all workspaces with user-defined tags (input)\n             , (\"M-C-f\", tagPrompt defaultXPConfig (`withTaggedGlobal` float)) -- float windows with user-defined tags (input)\n```\n\n"
    },
    {
      "title": "ウィンドウ間のギャップを同じ大きさにする",
      "level": 3,
      "content": "個々のウィンドウと画面間のギャップを同じサイズにすることが目標の場合、次のコードは期待どおりに機能しません:\n\n```\nlayoutHook = spacing 10 $ Tall 1 (3/100) (1/2) ||| Full\n```\n\nこれにより、各ウィンドウが各方向に独自の間隔を持つようになります。2つのウィンドウを並べて配置すると、中央の間隔が結合されて、必要な2倍の大きさの隙間が生じます。\n\n回避策は、画面とウィンドウの間隔の両方を指定しますが、画面には上と左のマージン、ウィンドウには下と右のマージンのみを使用します。これを行うには、上記のコードを次のように変更します:\n\n```\nlayoutHook = spacingRaw False (Border 10 0 10 0) True (Border 0 10 0 10) True $ Tall 1 (3/100) (1/2) ||| Full\n```\n\n"
    },
    {
      "title": "xmonad で xmobar を使う",
      "level": 3,
      "content": "xmobar は xmonad で使うことを想定して作られた軽量でミニマルなテキストベースのバーです。xmonad で xmobar を使うには、xmonad パッケージに加えて2つのパッケージが必要になります: xmonad-contrib と xmobar です。また、xmobar パッケージの代わりに xmobar-gitAUR を使うこともできます。\n\nここでは xmonad の中から xmobar を起動して、xmonad をリロードしたときに xmobar もリロードします。\n\n~/.xmonad/xmonad.hs をお好きなエディタで開いて、以下のどちらかの設定を行なってください:\n\n"
    },
    {
      "title": "クイック設定",
      "level": 4,
      "content": "一般的なインポート:\n\n```\nimport XMonad\nimport XMonad.Hooks.DynamicLog\n```\n\nxmobar を起動して#複雑な設定で説明しているオプションを全て含んだ設定を返す xmobar アクション:\n\n```\nmain = xmonad =<< xmobar def { modMask = mod4Mask {- or any other configurations here ... -}}\n```\n\n"
    },
    {
      "title": "複雑な設定",
      "level": 4,
      "content": "xmonad(-contrib) 0.9 現在、XMonad.Hooks.DynamicLog には新しい statusBar 関数が存在します。以下のような設定が可能です:\n\n- バーを実行するのに使用するコマンド\n- バーに書き込まれるものを決定する PP\n- バーの隙間を切り替えるキーバインド\n\n使用例:\n\n```\n~/.xmonad/xmonad.hs\n```\n\n```\n-- Imports.\nimport XMonad\nimport XMonad.Hooks.DynamicLog\n\n-- The main function.\nmain = xmonad =<< statusBar myBar myPP toggleStrutsKey myConfig\n\n-- Command to launch the bar.\nmyBar = \"xmobar\"\n\n-- Custom PP, configure it as you like. It determines what is being written to the bar.\nmyPP = xmobarPP { ppCurrent = xmobarColor \"#429942\" \"\" . wrap \"<\" \">\" }\n\n-- Key binding to toggle the gap for the bar.\ntoggleStrutsKey XConfig {XMonad.modMask = modMask} = (modMask, xK_b)\n\n-- Main configuration, override the defaults to your liking.\nmyConfig = def { modMask = mod4Mask }\n```\n\n"
    },
    {
      "title": "XMobar の設定を確認",
      "level": 4,
      "content": "テンプレート・デフォルトの xmobarrc に含まれています。\n\n最後に ~/.xmobarrc を開いて StdinReader がテンプレートに含まれていてプラグインを実行することを確認してください:\n\n```\n~/.xmobarrc\n```\n\n```\nConfig { ...\n       , commands = [ Run StdinReader .... ]\n         ...\n       , template = \" %StdinReader% ... \"\n       }\n```\n\n設定が完了したら xmonad を再起動してください。\n\n"
    },
    {
      "title": "外部スクリプトで xmonad を制御",
      "level": 3,
      "content": "複数の方法が存在します:\n\n- xmonad の拡張 XMonad.Hooks.ServerMode を使用する。\n- xdotool などのプログラムを使ってキーの押下をシミュレートする Ubuntu フォーラムスレッド。以下のコマンドは Super+n の押下をシミュレートします:\n\n```\nxdotool key Super+n\n```\n\n- desktopConfig や EwmhDesktops を設定している場合、使いやすいユーティリティとして wmctrl が存在します。\n\n"
    },
    {
      "title": "xmonad の中で他のウィンドウマネージャを起動",
      "level": 3,
      "content": "xmonad-gitAUR を使用している場合、xmonad の中から他のウィンドウマネージャを再起動することができます (2011年1月現在)。小さなスクリプトを書いて ~/.xmonad/xmonad.hs に設定を追加するだけです。スクリプトは以下のようになります:\n\n```\n~/bin/obtoxmd\n```\n\n```\n#!/bin/sh\nopenbox\nxmonad\n```\n\nそして ~/.xmonad/xmonad.hs に以下のような設定を追加してください:\n\n```\n~/.xmonad/xmonad.hs\n```\n\n```\nimport XMonad\n--You need to add this import\nimport XMonad.Util.Replace\n\nmain do\n    -- And this \"replace\"\n    replace\n    xmonad $ def\n    {\n    --Add the usual here\n    }\n```\n\n以下のキーバインドも追加する必要があります:\n\n```\n~/xmonad/xmonad.hs\n```\n\n```\n--Add a keybinding as follows:\n((modm .|. shiftMask, xK_o     ), restart \"/home/abijr/bin/obtoxmd\" True)\n```\n\nカンマを前または後に追加してパスを実際のスクリプトのパスに置き換えてください。Mod+q (xmonad を再起動して設定をリロード) を押してから Mod+Shift+o を押せば xmonad と同じウィンドウが開いた Openbox が実行されます。xmonad に戻したいときは Openbox を終了してください。詳しくは Adamvo の xmonad.hs を参照。\n\n"
    },
    {
      "title": "KDE と xmonad",
      "level": 3,
      "content": "xmonad の wiki には KDE で xmonad を実行 する方法が書かれています。\n\nまた、何らかの理由で xmonad が終了してしまったときのために、xmonad を起動するキーボードショートカットを KDE の中で設定しておくと良いでしょう。\n\n"
    },
    {
      "title": "plasmashell の無効化",
      "level": 4,
      "content": "デスクトップやタスクバー、トレイなどを管理する KDE5 の plasmashell を無効化すると良いでしょう:\n\n```\n$ cp /etc/xdg/autostart/plasmashell.desktop ~/.config/autostart/\n```\n\n以下のように ~/.config/autostart/plasmashell.desktop を編集して Exec=plasmashell を Exec= に置き換えてください:\n\n```\n~/.config/autostart/plasmashell.desktop\n```\n\n```\n[Desktop Entry]\nExec=\nName=Plasma Desktop Workspace\n... # more stuff\n```\n\n"
    },
    {
      "title": "Skype 用の IM レイアウト",
      "level": 3,
      "content": "新しいバージョンの Skype 用に IM レイアウトを作成するには、以下のコードを使用:\n\n```\nxmonad.hs\n```\n\n```\nmyIMLayout = withIM (1%7) skype Grid\n    where\n      skype = And (ClassName \"Skype\") (Role \"\")\n```\n\n"
    },
    {
      "title": "設定例",
      "level": 3,
      "content": "以下は xmonad ユーザーの設定例です。あなたの設定も自由に追加してください。\n\n- brisbin33 :: simple, useful, readable :: 設定 スクリーンショット\n- jelly :: Configuration with prompt, different layouts, twinview with xmobar :: xmonad.hs\n- MrElendig :: xmobar を使用するシンプルな設定 :: xmonad.hs, .xmobarrc, スクリーンショット\n- thayer :: ネットブックにうってつけのミニマルなマウスフレンドリーな設定 :: 設定 スクリーンショット\n- vicfryzel :: Beautiful and usable xmonad configuration, along with xmobar configuration, xinitrc, dmenu, and other scripts that make xmonad more usable. :: git リポジトリ, スクリーンショット\n- vogt :: Check out adamvo's config and many others in the official Xmonad/Config archive\n- wulax :: Xfce の中で xmonad を使用するサンプル。GIMP 用の2つのレイアウト。 :: xmonad.hs, スクリーンショット\n- alex-courtis :: Clean xmonad, xmobar, media keys, screenshot, j4/dmenu; fonts rendered at the DPI reported by the monitor :: xmonad.hs, screenshot.\n\n"
    },
    {
      "title": "Xfce 4 と xmonad",
      "level": 3,
      "content": "~/.xmonad/xmonad.hs で XMonad.Config.Xfce をインポートしたら defaultConfig の代わりに xfceConfig を使ってください:\n\n```\nimport XMonad\nimport XMonad.Config.Xfce\n\nmain = xmonad xfceConfig\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    }\n```\n\nまた、Settings > Session and Startup > Application Autostart から xmonad --replace を実行するエントリを追加してください。\n\n"
    },
    {
      "title": "xmonad-x86_64-linux が存在しない",
      "level": 3,
      "content": "Xmonad は自動的に xmonad-i386-linux ファイルを (~/.xmonad/ の中に) 作成します。作成されない場合、xmonad wiki から設定を入手するか 自分で 設定を書いてください。.hs などのファイルを ~/.xmonad/ に配置したら、フォルダの中から以下のコマンドを実行:\n\n```\nxmonad --recompile\n```\n\nこれでファイルができるはずです。\n\n"
    },
    {
      "title": "Java アプリケーションの問題",
      "level": 3,
      "content": "標準の Java GUI ツールキットは、ハードコーディングされた \"non-reparenting\" ウィンドウマネージャのリストを持っています。xmonad はそのリストに含まれておらず、稼働中にいくつかの問題が発生する Java アプリケーションがあります。最も一般的な問題の一つは、Java アプリケーションが GUI をレンダリングする代わりに無地で灰色の box をレンダリングする、\"gray blobs\" です。\n\nこれを解決できる方法はいくつかあります。\n\n- jre7-openjdk や jre8-openjdk ならば、 /etc/profile.d/jre.sh に export _JAVA_AWT_WM_NONREPARENTING=1 を追記してください。そして、そのファイル /etc/profile.d/jre.sh を source するか、再ログインしてください。\n- Oracle の JRE/JDK ならば、SetWMName を使用してください。しかし、その効果は XMonad.Hooks.EwmhDesktops も使用すると打ち消されてしまうかもしれません。この場合は、\n\n```\n>> setWMName \"LG3D\"\n```\n\nを LogHook に追記することで解決されるでしょう。\n\nより多くの情報を得るためには、[3] を参照してください。\n\n"
    },
    {
      "title": "gvim やターミナルの底部の空きスペース",
      "level": 3,
      "content": "スペースを背景色と合わせる方法は Vim#gVim ウィンドウの底部の空きスペースを見てください。\n\nrxvt-unicode の場合、rxvt-unicode-patchedAUR が使えます。\n\nサイズヒントを使うように xmonad を設定することもできます。ただし隙間は残ります。詳しくは Xmonad.Layout.LayoutHints のドキュメント を参照してください。\n\n"
    },
    {
      "title": "Chromium/Chrome がフルスクリーンにならない",
      "level": 3,
      "content": "F11 を押したときに Chrome がフルスクリーンにならない場合、xmonad-contrib パッケージに含まれている XMonad.Hooks.EwmhDesktops 拡張を使ってください。~/.xmonad/xmonad.hs に以下の import 文を追加するだけです:\n\n```\nimport XMonad.Hooks.EwmhDesktops\n```\n\nそれから適当な場所に handleEventHook = fullscreenEventHook を追加してください。例:\n\n```\n...\n        xmonad $ defaultConfig\n            { modMask            = mod4Mask\n            , handleEventHook    = fullscreenEventHook\n            }\n...\n```\n\nxmonad の再コンパイル・再起動後に、Chromium で F11 (fullscreen) が使えるようになるはずです。\n\n"
    },
    {
      "title": "マルチタッチ / touchegg",
      "level": 3,
      "content": "Touchégg はウィンドウマネージャから _NET_CLIENT_LIST を定期的に取得します (マウスイベントを取得するウィンドウのリストを確認するため)。デフォルトでは xmonad はこのプロパティを提供していません。有効にするには、xmonad-contrib パッケージに含まれている XMonad.Hooks.EwmhDesktops 拡張を使ってください。\n\n"
    },
    {
      "title": "azerty キーボードレイアウトのキーバインドの問題",
      "level": 3,
      "content": "azerty レイアウトのキーボードを使っている場合、特定のキーバインドに問題が発生します。XMonad.Config.Azerty モジュールを使うことで問題は解決します。\n\n"
    },
    {
      "title": "GNOME 3 の mod4+p で dmenu が起動するかわりにディスプレイの設定が変更されてしまう",
      "level": 3,
      "content": "gnome-control-center のディスプレイ設定を切り替える必要がない場合、ユーザーで以下を実行することで xrandr プラグインで Super+p を使用するのを止めさせることができます:\n\n```\n$ dconf write /org/gnome/settings-daemon/plugins/xrandr/active false\n```\n\n"
    },
    {
      "title": "Chrome/Chromium で定義されたウィンドウのボーダーの色が表示されない",
      "level": 3,
      "content": "Chromium および Chrome ブラウザウィンドウには、デフォルトで定義されたボーダーの色はなく、ぼやけた透明なボーダーの色が表示されます。この問題は長い間知られていました が、修正するのは簡単です。 ブラウザのオプションで `Use system title bar and borders` を有効にすると、この問題はすぐに修正されます。\n\n"
    },
    {
      "title": "VirtualBox でフォーカスしたボーダーの問題",
      "level": 3,
      "content": "Virtualbox には既知の問題 (Ticket #6479) が存在し、フォーカスされたウィンドウのボーダーに問題が発生します。xcompmgr などのコンポジットマネージャをインストールして vboxvideo の挙動を上書きすることで解決できます。\n\n"
    },
    {
      "title": "Steam のゲーム (Half-Life, Left 4 Dead, ...) と xmonad",
      "level": 3,
      "content": "Source エンジンを使っているゲーム (Half-Life など) で問題が発生することがあります。ゲームが起動しなかったり黒い画面から進まないときは、ウィンドウモードで起動してみてください: ライブラリのゲームを右クリックして、起動オプションに以下のように入力 ([4] を参照):\n\n```\n-windowed\n```\n\nmanage フックを使用してゲームのウィンドウをフロートさせる方法もあります。例えば、Half-Life の場合なら以下の行を使います:\n\n```\nclassName =? \"hl_linux\" --> doFloat\n```\n\n"
    },
    {
      "title": "LibreOffice - メインウィンドウとダイアログ間のフォーカスフリック",
      "level": 3,
      "content": "LibreOffice UI は、デスクトップ環境外ではデフォルトで gtk エンジンになります。これにより、一部の xmonad 設定で問題が発生し、LibreOffice メインウィンドウと開いている LibreOffice ダイアログウィンドウの間でフォーカスが急速に移動する可能性があり、アプリケーションを効果的にロックします。この場合、環境変数 SAL_USE_VCLPLUGIN を設定して、LibreOffice#テーマ で説明されているように、LibreOffice に別の UI テーマを明示的に強制的に使用させることができます。\n\n```\n$ export SAL_USE_VCLPLUGIN=gen lowriter\n```\n\n一般 (QT) UI を使用します。\n\n"
    },
    {
      "title": "ダイアログウィンドウ",
      "level": 4,
      "content": "IntelliJ IDEA では、タイルウィンドウマネージャーのサポートが強化されました。しかし、依然として厄介な問題がいくつかあり、その一部には簡単な解決策があります:\n\n- マウスポインタがダイアログウィンドウの境界の外に出ると、Find In Files ダイアログウィンドウがすぐに閉じます。これは Find In Files ダイアログウィンドウでのみ発生し、Navigate to... ダイアログウィンドウでは再現できません。\"focus follows mouse\" ロジックを想定している場合、Find In Files の動作は予期されています。すべてのシステムへのフォーカスが失われると、Find In Files ウィンドウが閉じます。\n\n- Git コミット間で変更されたファイルを表示すると (aaaa とローカルバージョン bbbb 間の変更 ダイアログを使用)、ファイルレベルの差分を含むウィンドウがダイアログウィンドウの後ろに開きます。\n\n"
    },
    {
      "title": "アップデート後に共有ライブラリが見つからない",
      "level": 3,
      "content": "xmonad の実行ファイルは ~/.xmonad/ に存在します。xmonad のアップグレード後、古い実行ファイルが残っている場合、削除することで xmonad は新しい実行ファイルをコンパイルします。もしくは xmonad --recompile を使ってください。\n\nこの再コンパイルの作業は、次のように /etc/pacman.d/hooks/xmonad.hook に pacman のフックを作成することで自動化できます (まず hooks デイレクトリを作成する必要があるかもしれません)。\n\n```\n[Trigger]\nOperation = Upgrade\nType = Package\nTarget = xmonad\n\n[Action]\nDescription = Recompiling xmonad...\nWhen = PostTransaction\nExec = /usr/bin/sudo -u YOUR_USERNAME /usr/bin/xmonad --recompile\n```\n\nYOUR_USERNAME は xmonad を実行するユーザーの名前に置き換えてください。\n\nxmonad --recompile で (XMonad 自体も含む) モジュールが全く認識されない場合、パッケージのデータベースキャッシュを再生成してみてください:\n\n```\nsudo ghc-pkg recache\n```\n\n"
    },
    {
      "title": "XMonad.Prompt とウィンドウが壊れているか欠落している",
      "level": 3,
      "content": "XMonad はデフォルトでフォント -misc-fixed-*-*-*-*-10-*-*-*-*-*-*-* を使用します [5] このフォントが見つからない場合、それらのウィンドウはレンダリングに失敗します。最も簡単な修正は、xorg-fonts-misc をインストールすることです。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- xmonad - xmonad 公式ウェブサイト\n- xmonad.hs - テンプレート xmonad.hs\n- xmonad: a guided tour\n- Share your xmonad desktop!\n- xmonad hacking thread\n- xmonad-log-applet - GNOME, MATE, Xfce パネルのアプレット\n\n"
    }
  ]
}