{
  "title": "Создание Live CD",
  "url": "https://wiki.archlinux.org/title/%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_Live_CD",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Ремастеринг установочного ISO-образа\n- PXE (Русский)\n- Установка без подключения к Интернету\n\nArchiso — набор bash скриптов, предназначенных для создания полностью функциональных Live-CD/DVD и Live-USB на базе Arch Linux. Это тот же инструмент, который используется для создания официальных образов, но он довольно гибкий инструмент, который может быть использован как для создания дисков восстановления или установочных, так и для специализированных live-CD/DVD/USB систем. Сердце Archiso — mkarchiso. Для получения подробного описания всех его опций достаточно вызвать его без параметров, так что здесь будет описанно только создание live диска своими руками.\n\nЕсли вам требуется только краткое изложение требований и процесса сборки, вы можете также воспользоваться официальной документацией проекта.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Прежде чем начать, установите пакет archiso или archiso-gitAUR.\n\nArchiso поставляется с двумя \"профилями\": releng и baseline.\n\n- Если вы хотите создать полностью индивидуальную версию Arch Linux, предварительно установленной со всеми вашими любимыми программами и конфигурациями, используйте профиль releng.\n- Если вы просто хотите создать основу для live CD, без предварительно установленных пакетов и минимальной конфигурацией, используйте baseline.\n\nТеперь скопируйте профиль на Ваш выбор, в каталог (~/archlive используется в примере ниже), в котором вы можете вносить корректировки. Выполните следующую команду, заменив profile либо на releng, либо на baseline.\n\n```\n# cp -r /usr/share/archiso/configs/profile/ archlive\n```\n\n- Если вы используете профиль releng для создания полностью индивидуального образа, вы можете переходить к секции #Настройка live носителя.\n- Если вы используете профиль baseline для создания пустого образа, то вам не нужно его настраивать, поэтому переходите к секции #Сборка ISO.\n\n"
    },
    {
      "title": "Настройка live носителя",
      "level": 2,
      "content": "В этом разделе подробно описывается настройка создаваемого вами образа, определение пакетов и конфигураций, которые вы хотите, чтобы ваш live образ содержал.\n\nВнутри каталога archlive, созданного в #Установка, имеется ряд файлов и каталогов; мы рассмотрим лишь несколько из них, в основном:\n\n- packages.x86_64 — это где вы перечисляете построчно пакеты, которые вы хотите установить, и\n- каталог airootfs — это каталог, действующий как наложение, и именно там вы делаете все настройки.\n\nКак правило, любые административные задачи, которые вы обычно делаете после новой установки, могут быть выполнены в скрипте archlive/airootfs/root/customize_airootfs.sh, за исключением установки пакетов. Скрипт должен быть написан с точки зрения новой среды, поэтому / в скрипте означает корень ISO-образа, который создается.\n\n"
    },
    {
      "title": "Установка пакетов",
      "level": 3,
      "content": "Отредактируйте списки пакетов в packages.x86_64 чтобы указать, какие пакеты должны быть установлены на live носителе.\n\n"
    },
    {
      "title": "Собственный локальный репозиторий",
      "level": 4,
      "content": "Для подготовки своих пакетов или пакетов из AUR/ABS, вы можете создать собственный локальный репозиторий. Если вам нужна поддержка нескольких архитектур, примените соответствующие меры для предотвращения ошибок в будущем. Каждая архитектура должна иметь собственное дерево каталогов:\n\nНапример:\n\n```\n$ tree ~/customrepo/ | sed \"s/$(uname -m)/<arch>/g\"\n```\n\n```\n/home/archie/customrepo/\n└── <arch>\n    ├── customrepo.db -> customrepo.db.tar.xz\n    ├── customrepo.db.tar.xz\n    ├── customrepo.files -> customrepo.files.tar.xz\n    ├── customrepo.files.tar.xz\n    └── personal-website-git-b99cce0-1-<arch>.pkg.tar.xz\n\n1 directory, 5 files\n```\n\nЗатем вы можете добавить свой репозиторий, поместив следующее в ~/archlive/pacman.conf выше других записей (для более высокого приоритета):\n\n```\n~/archlive/pacman.conf\n```\n\n```\n...\n # Свой (пользовательский) репозиторий\n [customrepo]\n SigLevel = Optional TrustAll\n Server = file:///home/пользователь/customrepo/$arch\n...\n```\n\nЕсли пакет подходит, repo-add выполняет проверку. Иначе, вы столкнетесь с сообщениями об ошибках, подобными этому:\n\n```\n==> ERROR: '/home/archie/customrepo/<arch>/foo-<arch>.pkg.tar.xz' does not have a valid database archive extension.\n```\n\n"
    },
    {
      "title": "Предотвращение установки пакетов, принадлежащих основной группе",
      "level": 4,
      "content": "По умолчанию /usr/bin/mkarchiso, скрипт, который используется ~/archlive/build.sh, вызывает один из скриптов arch-install-scripts с именем pacstrap без флага -i, что заставляет Pacman не ждать ввода пользователя во время процесса установки.\n\nПри внесении в черный список основных пакетов группы путем добавления их в строку IgnorePkg в файле ~/archlive/pacman.conf, Pacman спрашивает, должны ли они все еще быть установлены, а это значит, что они будут при обходе ввода пользователя. Чтобы избавиться от этих пакетов существует несколько вариантов:\n\n- \"Грязный\" способ: Добавьте флаг -i в каждую строку, вызывающую pacstrap в /usr/bin/mkarchiso.\n\n- \"Чистый\": Создайте копию /usr/bin/mkarchiso, в которую вы добавите флаг и адаптируете ~/archlive/build.sh, так чтобы он вызывал измененную версию скрипта mkarchiso.\n\n- Расширенный способ: Создайте функцию для ~/archlive/build.sh, которая явно удаляет пакеты после основной установки. Это принесет вам удовольствие от того, что вам не придется много вводить во время процесса установки.\n\n"
    },
    {
      "title": "Установка пакетов из multilib",
      "level": 4,
      "content": "Чтобы установить пакеты из репозитория multilib, вам нужно просто раскомментировать его в ~/archlive/pacman.conf:\n\n```\npacman.conf\n```\n\n```\n[multilib]\nSigLevel = PackageRequired\nInclude = /etc/pacman.d/mirrorlist\n```\n\n"
    },
    {
      "title": "Добавление файлов в образ",
      "level": 3,
      "content": "Note: **все** \n\nКаталог airootfs действует как наложение, считайте его корневым каталогом '/' в вашей текущей системе, поэтому любые файлы, которые вы размещаете в этом каталоге, будут скопированы при загрузке.\n\nПоэтому, если у вас есть набор скриптов iptables в вашей текущей системе, которые вы хотите использовать на вашем live образe, скопируйте их:\n\n```\n# cp -r /etc/iptables ~/archlive/airootfs/etc\n```\n\nРазмещение файлов в домашнем каталоге пользователей немного отличается. Не помещайте их в airootfs/home, а вместо этого создайте каталог skel внутри airootfs/ и разместите их там. Затем мы добавим соответствующие команды в customize_airootfs.sh, которые мы собираемся использовать для их копирования при загрузке и выяснения разрешений.\n\nСначала создайте каталог skel:\n\n```\n# mkdir ~/archlive/airootfs/etc/skel\n```\n\nТеперь скопируйте файлы 'home' в каталог skel, например для .bashrc:\n\n```\n# cp ~/.bashrc ~/archlive/airootfs/etc/skel/\n```\n\nКогда выполняется ~/archlive/airootfs/root/customize_airootfs.sh, и создается новый пользователь, файлы из каталога skel будут автоматически скопированы в новую домашнюю папку, а разрешения будут установлены правильно.\n\nАналогичным образом, требуется обратить внимание на особые файлы конфигурации, которые находятся где-то внизу по иерархии. В качестве примера конфигурационный файл /etc/X11/xinit/xinitrc находится на пути, который может быть перезаписан путем установки пакета. Чтобы поместить файл конфигурации, следует поместить пользовательский xinitrc в ~/archlive/airootfs/etc/skel/, а затем изменить customize_airootfs.sh, чтобы переместить его соответствующим образом.\n\n"
    },
    {
      "title": "Загрузчик",
      "level": 3,
      "content": "Файл по умолчанию должен работать прекрасно, поэтому вам не нужно трогать его.\n\nИз-за модульной природы isolinux вы можете использовать множество дополнений, так как все *.c32 файлы копируются и доступны вам. Посмотрите официальный сайт syslinux и репозиторий git archiso. Используя указанные аддоны, можно сделать визуально привлекательные и сложные меню. Для получения дополнительной информации смотрите здесь.\n\n"
    },
    {
      "title": "UEFI Secure Boot",
      "level": 4,
      "content": "Если вы хотите загружать Archiso в окружении с включённым UEFI Secure Boot, вы должны использовать подписанный загрузчик. Вы можете воспользоваться инструкциями из статьи Secure Boot#Booting an installation medium.\n\n"
    },
    {
      "title": "Вход в систему",
      "level": 3,
      "content": "Запуск X при загрузке выполняется путем включения службы systemd менеджера входа в систему. Если вы знаете, какой файл .service нуждается в символической ссылке: Отлично. Если нет, то вы можете легко узнать в случае, если вы используете одну и ту же программу в системе, в которой вы собираете свой iso. Просто используйте:\n\n```\n$ ls -l /etc/systemd/system/display-manager.service\n```\n\nТеперь создайте ту же самую символическую ссылку в ~/archlive/airootfs/etc/systemd/system. Для LXDM:\n\n```\n# ln -s /usr/lib/systemd/system/lxdm.service ~/archlive/airootfs/etc/systemd/system/display-manager.service\n```\n\nЭто позволяeт запустить LXDM при загрузке системы из вашего live образа.\n\nВ качестве альтернативы вы можете просто включить службу в airootfs/root/customize_airootfs.sh вместе с другими включенными там службами.\n\nЕсли вы хотите, чтобы графическая среда фактически запускалась автоматически во время загрузки, обязательно отредактируйте airootfs/root/customize_airootfs.sh и замените\n\n```\nsystemctl set-default multi-user.target\n```\n\nна\n\n```\nsystemctl set-default graphical.target\n```\n\n"
    },
    {
      "title": "Изменение автоматического входа в систему",
      "level": 3,
      "content": "Файлы настроек автоматического входа для getty расположены в airootfs/etc/systemd/system/getty@tty1.service.d/autologin.conf.\n\nВы можете отредактировать этот файл для изменения автоматического входа пользователя в систему:\n\n```\n[Service]\nExecStart=\nExecStart=-/sbin/agetty --autologin isouser --noclear %I 38400 linux\n```\n\nИли удалите его вообще для отключения автоматического входа в систему.\n\n"
    },
    {
      "title": "Сборка ISO",
      "level": 2,
      "content": "Создайте ISO, который затем можно записать на компакт-диск или USB, запустив:\n\n```\n# mkarchiso -v -w /путь/до/рабочей_директории -o /путь/до/выходной_директории /путь/до/профиля/\n```\n\n- -w указывает рабочий каталог. Если параметр не указан, по умолчанию он будет работать в текущем каталоге.\n- -o указывает каталог, в который будет помещен созданный ISO-образ. Если параметр не указан, по умолчанию он будет выводить в текущий каталог.\n- Следует отметить, что файл профиля profiledef.sh не может быть указан при запуске mkarchiso, только путь к файлу\n\nЗамените /путь/до/профиля/ на путь к вашему пользовательскому профилю или на /usr/share/archiso/configs/releng/, если вы создаете неизмененный профиль.\n\n```\n# mkarchiso -v -w /tmp/archiso-tmp /путь/до/профиля/\n```\n\nПри запуске сценарий загрузит и установит указанные вами пакеты в рабочую_директорию/x86_64/airootfs, создаст образы ядра и инициализации, применит ваши настройки и, наконец, создаст ISO в выходной каталог.\n\n"
    },
    {
      "title": "Удаление рабочей директории",
      "level": 3,
      "content": "Note: **вы можете потерять данные** \n\nВременные файлы копируются в рабочую директорию. После успешного создания ISO рабочую директорию и его содержимое можно удалить. Например.:\n\n```\n# rm -rf /путь/до/рабочей_директории\n```\n\n"
    },
    {
      "title": "Использование ISO",
      "level": 2,
      "content": "Для получения дополнительной информации смотрите статью Руководство по установке.\n\n"
    },
    {
      "title": "Документация и учебные пособия",
      "level": 3,
      "content": "- Страница проекта Archiso\n- Official Официальная документация\n\n"
    },
    {
      "title": "Примеры шаблонов настройки",
      "level": 3,
      "content": "- Live DJ дистрибутив, основанный на ArchLinux и созданный с помощью Archiso\n\n"
    }
  ]
}