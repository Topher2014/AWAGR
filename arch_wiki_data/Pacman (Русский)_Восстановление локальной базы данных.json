{
  "title": "Pacman (Русский)/Восстановление локальной базы данных",
  "url": "https://wiki.archlinux.org/title/Pacman_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)/%D0%92%D0%BE%D1%81%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9_%D0%B1%D0%B0%D0%B7%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Несколько признаков необходимости восстановления локальной базы данных pacman:\n\n- Команда pacman -Q ничего не выводит, а pacman -Syu ошибочно сообщает, что система обновлена.\n- При попытке установить пакет с помощью pacman -S пакет выводится список уже удовлетворённых зависимостей.\n\nСкорее всего, база данных pacman с установленными пакетами (/var/lib/pacman/local) была повреждена или удалена. Хотя это и серьёзная проблема, базу данных можно восстановить приведёнными ниже инструкциями.\n\nДля начала убедитесь, что в системе присутствует лог-файл pacman:\n\n```\n$ ls /var/log/pacman.log\n```\n\nЕсли же файл отсутствует, воспользоваться данным методом не получится. В таком случае попробуйте воспользоваться скриптом обнаружения пакетов от Xyne, а если он не поможет, скорее всего, придётся переустановить систему.\n\n"
    },
    {
      "title": "Создание списка пакетов для восстановления",
      "level": 2,
      "content": "Установите пакет pacman-contrib, чтобы получить утилиту paclog-pkglist.\n\nСоздайте скрипт фильтрации логов и сделайте его исполняемым:\n\n```\npacrecover\n```\n\n```\n#!/bin/bash -e\n\n# загружаем настройки makepkg\n. /etc/makepkg.conf\n\n# определяем расположение кеша pacman (по умолчанию /var/cache/pacman/pkg) и удаляем префикс через sed\nPKGCACHE=$( (grep -m 1 '^CacheDir' /etc/pacman.conf || echo 'CacheDir = /var/cache/pacman/pkg') | sed 's/CacheDir = //')\n\n# каталоги, в которых будем искать пакеты\npkgdirs=(\"$@\" \"$PKGDEST\" \"$PKGCACHE\")\n\n# считываем имена и версии пакетов из ввода и собираем паттерн для поиска пакетов\nwhile read -r -a parampart; do\n\n        # проверяем каждый каталог на наличие пакета\n        for pkgdir in \"${pkgdirs[@]}\"; do\n\n                # перебираем в каталоге каждый файл, соответствующий паттерну\n                for i in \"$pkgdir\"/\"${parampart[0]}\"-\"${parampart[1]}\"-*.pkg.tar.{xz,zst} ; do\n\n                        # если файл существует, то печатаем успешно найденный пакет и останавливаем проверку\n                        [ -f \"${i}\" ] && { echo \"${i}\" ; break; };\n                done\n\n                # Если файл не нашёлся, выводим название пакета в stderr\n        done || echo \"${parampart[0]}\" 1>&2\ndone\n```\n\nЗапустите скрипт (опционально передав в качестве параметров дополнительные каталоги с пакетами):\n\n```\n$ paclog-pkglist /var/log/pacman.log | ./pacrecover >files.list 2>pkglist.orig\n```\n\nБудут созданы два файла: files.list с файлами пакетов, до сих пор присутствующих в системе, и pkglist.orig с пакетами для загрузки. После выполнения следующей команды может проявиться несоответствие между файлами новой и старых версий пакета. Такие несоответствия должны быть исправлены вручную.\n\nКоманда, автоматически ограничивающая второй список так, чтобы в списке находились только доступные в репозитории пакеты:\n\n```\n$ { cat pkglist.orig; pacman -Slq; } | sort | uniq -d > pkglist\n```\n\nNote: **повторив предыдущую команду** \n\nПроверьте список на отсутствие важных пакетов из группы base и добавьте их:\n\n```\n$ comm -23 <({ echo base ; expac -l '\\n' '%E' base; } | sort) pkglist.orig >> pkglist\n```\n\nПродолжите, когда содержание обеих файлов будет удовлетворительным, так как они используются для восстановления базы данных pacman (/var/lib/pacman/local/).\n\n"
    },
    {
      "title": "Восстановление",
      "level": 2,
      "content": "Объявите в bash функцию восстановления:\n\n```\nrecovery-pacman() {\n    pacman \"$@\"  \\\n    --log /dev/null   \\\n    --noscriptlet     \\\n    --dbonly          \\\n    --overwrite \"*\"   \\\n    --nodeps          \\\n    --needed\n}\n```\n\nОпция --log /dev/null предотвратит засорение лога pacman ненужными сообщениями, --needed сэкономит время, пропуская уже присутствующие в базе пакеты, --nodeps позволит устанавливать пакеты из кэша, даже если им нужны пакеты-зависимости более новых версий. Остальные параметры позволяют pacman работать с файловой системой без прав чтения или записи.\n\nЗаполните базу синхронизации:\n\n```\n# pacman -Sy\n```\n\nНачните генерировать базу данных, установив локально доступные пакеты из файла files.list:\n\n```\n# recovery-pacman -U $(< files.list)\n```\n\nУстановите оставшиеся пакеты из файла pkglist:\n\n```\n# recovery-pacman -S $(< pkglist)\n```\n\nОбновите локальную базу данных, чтобы пакеты, которые не требуются каким-либо другим пакетам, были помечены как установленные явно, а все остальные считались зависимостями. В будущем придётся быть более осторожным при удалении пакетов, но это лучшее решение из возможных, когда оригинальная база данных была утрачена.\n\n```\n# pacman -D --asdeps $(pacman -Qq)\n# pacman -D --asexplicit $(pacman -Qtq)\n```\n\nПроверьте установленные пакеты на наличие повреждений:\n\n```\n# pacman -Qk\n```\n\nПри желании можно также выполнить поиск файлов, не принадлежащих ни одному пакету.\n\nНаконец, обновите все пакеты:\n\n```\n# pacman -Su\n```\n\n"
    }
  ]
}