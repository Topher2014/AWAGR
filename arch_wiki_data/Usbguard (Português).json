{
  "title": "Usbguard (Português)",
  "url": "https://wiki.archlinux.org/title/Usbguard_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "USBGuard oferece um mecanismo de lista branca/negra para dispositivos USB. A inspiração para isso vem de exploits como BadUSB. Ele faz uso de uma infraestrutura de bloqueio de dispositivo incluída no kernel do Linux e consiste em um daemon e alguns front-ends.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "Instale o usbguard pacote, ou usbguard-gitAUR para a versão de desenvolvimento. O miniaplicativo Qt foi removido do USBGuard 0.7.5 e será mantido em uma forma simplificada como um projeto separado posteriormente. [1]\n\n"
    },
    {
      "title": "Configuração",
      "level": 2,
      "content": "O arquivo de configuração principal é encontrado em /etc/usbguard/usbguard-daemon.conf. Para editá-lo, você precisa de privilégios de root.\n\nSe você deseja controlar o daemon via IPC, certifique-se de adicionar seu nome de usuário ao IPCAllowedUsers ou seu grupo para IPCAllowedGroups para tornar as regras persistentes. Na maioria dos casos, você desejará isso.\n\nPor padrão, o USBGuard bloqueia todos os dispositivos recém-conectados e os dispositivos conectados antes da inicialização do daemon são deixados como estão. Isso pode ser alterado com a opção PresentDevicePolicy. Definindo esta chave para apply-policy é a configuração mais segura, que garante a segurança mesmo quando o daemon é reiniciado.\n\nCom a chave ImplicitPolicyTarget você pode configurar o tratamento padrão dos dispositivos, se nenhuma regra corresponder. A opção mais segura aqui é block.\n\nPara obter uma documentação detalhada da configuração, consulte o arquivo de configuração muito bem comentado.\n\n"
    },
    {
      "title": "Uso",
      "level": 2,
      "content": "USBGuard tem um daemon principal, um CLI, uma interface DBUS e uma API via libusbguard.\n\nSe você quiser usar o Qt GUI ou outro programa de comunicação via DBUS, enable e start usbguard-dbus.service.\n\nSe você deseja se comunicar apenas via API (com a ferramenta CLI ou outro software usando libusbguard) enable e start usbguard.service.\n\nO CLI está disponível via usbguard.\n\nVeja as man pages de acordo para mais informações.\n\n"
    },
    {
      "title": "Regras",
      "level": 3,
      "content": "Para configurar o USBGuard de acordo com suas necessidades, você pode editar /etc/usbguard/rules.conf. No entanto, a edição manual das regras normalmente não é necessária. Você pode gerar um conjunto de regras com base em seus dispositivos USB conectados no momento executando usbguard generate-policy > /etc/usbguard/rules.conf como root.\n\nA sintaxe das regras é explicada formalmente aqui. Um exemplo de impressora hp conectada via USB pode ser assim:\n\n```\nallow id 03f0:0c17 serial \"00CNFD234631\" name \"hp LaserJet 2020\" hash \"a0ef07fceb6fb77698f79a44a450121m\" parent-hash \"69d19c1a5733a31e7e6d9530e6k434a6\" with-interface { 07:01:03 07:01:02 07:01:01 }\n```\n\nUma regra começa com uma política. allow coloca um dispositivo na lista de permissões, block impede que o dispositivo seja processado agora e reject remove o dispositivo do sistema. Em seguida, segue um conjunto de atributos com suas opções, conforme detalhado a seguir.\n\nTable content:\nAtributo | Descrição\nid id-do-dispositivo-usb | Corresponde a um ID de dispositivo USB.\nid [operador] { id-do-dispositivo-usb ... } | Corresponde a um conjunto de IDs de dispositivos USB.\nhash \"valor\" | Corresponde a um hash calculado a partir dos valores de atributo do dispositivo e dos dados do descritor USB. O hash é calculado para cada dispositivo pelo USBGuard.\nhash [operador] { \"valor\" ... } | Corresponde a um conjunto de hashes de dispositivo.\nparent-hash \"valor\" | Corresponde a um hash do dispositivo pai.\nparent-hash [operador] { \"valor\" ... } | Corresponde a um conjunto de hashes de dispositivo pai.\nname \"nome-do-dispositivo\" | Corresponda ao atributo do nome do dispositivo USB.\nname [operador] { \"nome-do-dispositivo\" ... } | Combine um conjunto de nomes de dispositivos USB.\nserial \"número-de-série\" | Corresponde ao atributo de dispositivo USB iSerial.\nserial [operador] { \"número-de-série\" ... } | Corresponde a um conjunto de atributos de dispositivo USB iSerial.\nvia-port \"id-da-porta\" | Corresponda a porta USB através da qual o dispositivo está conectado. Observe que alguns sistemas têm uma numeração de porta instável que muda após a reinicialização do sistema ou certos módulos do kernel são recarregados (e talvez em outros casos). Use o atributo parent-hash se quiser garantir que um dispositivo seja conectado por meio de um dispositivo pai específico.\nvia-port [operador] { \"id-da-porta\" ... } | Combine um conjunto de portas USB.\nwith-interface tipo-de-interface | Corresponde a um tipo de interface fornecido pelo dispositivo USB.\nwith-interface [operador] { tipo-de-interface tipo-de-interface ... } | Compare um conjunto de tipos de interface com o conjunto de interfaces que o dispositivo USB fornece.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- USBGuard Website\n- Diagrama de componente USBGuard\n- BadUSB background info\n- Interface de kernel para controle de dispositivo USB\n\n"
    }
  ]
}