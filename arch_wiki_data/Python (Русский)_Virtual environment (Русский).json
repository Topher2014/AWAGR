{
  "title": "Python (Русский)/Virtual environment (Русский)",
  "url": "https://wiki.archlinux.org/title/Python_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)/Virtual_environment_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "virtualenv — это инструмент, используемый для создания изолированного рабочего пространства для приложения Python. Он даёт некоторые преимущества: например, возможность локальной установки модулей, экспорта рабочей среды и выполнения программы Python внутри этого окружения.\n\n"
    },
    {
      "title": "Обзор",
      "level": 2,
      "content": "Виртуальное окружение (virtual environment) — это каталог, в который устанавливаются некоторые исполняемые файлы и скрипты. Среди файлов есть python для выполнения скриптов и pip для установки других модулей в окружении. Также есть скрипты для активации окружения в различных командных оболочках (для bash, csh и fish). По сути, виртуальное окружение имитирует полную системную установку Python и всех необходимых модулей, не вмешиваясь в работу системы, на которой будет запускаться приложение.\n\nВ 2017 году был опубликован Pipenv, который управляет всеми вышеперечисленными инструментами: виртуальными окружениями интерпретаторов python, зависимостями пакетов, их активацией и блокировкой версий в Pipfile.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Python 3.3+ поставляется с модулем venv. Для более старых версий Python можно использовать сторонний инструмент virtualenv.\n\n"
    },
    {
      "title": "Пакеты",
      "level": 3,
      "content": "Установите один из следующих пакетов:\n\n- Python 3.3+: python\n- Python 3: python-virtualenv\n\nДля Pipenv:\n\n- Python 3: python-pipenv\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Все три инструмента похожи.\n\n"
    },
    {
      "title": "Создание",
      "level": 3,
      "content": "Используйте venv или virtualenv для создания виртуального окружения в каталоге вашего проекта. Не забудьте исключить каталог venv из вашей системы контроля версий — для его восстановления достаточно копии pip freeze.\n\n"
    },
    {
      "title": "venv",
      "level": 4,
      "content": "Он входит в состав python (3.3+):\n\n```\n$ python -m venv envname\n```\n\n"
    },
    {
      "title": "virtualenv",
      "level": 4,
      "content": "Доступен в пакете python-virtualenv.\n\n```\n$ virtualenv envname\n```\n\n"
    },
    {
      "title": "Активация",
      "level": 3,
      "content": "Для активации виртуального окружения используйте один из имеющихся скриптов для вашей командной оболочки. Пример для bash:\n\n```\n$ source envname/bin/activate\n(envname) $\n```\n\nТеперь команды python и pip будут запускаться и управлять пакетами только внутри виртуального окружения, не затрагивая систему.\n\nДля выхода из виртуального окружения выполните функцию, которую создал скрипт активации:\n\n```\n(envname) $ deactivate\n```\n\n"
    },
    {
      "title": "Версии Python",
      "level": 2,
      "content": "По умолчанию виртуальные окружения создаются с использованием стандартного системного Python. Файл bin/python — это просто символическая ссылка на системный python:\n\n```\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 15 янв 29 18:48 envname/bin/python -> /usr/bin/python\n```\n\nЕсли вы хотите использовать другую версию Python внутри виртуального окружения, можно использовать опцию -p/--python у virtualenv:\n\n```\n$ virtualenv -p 3.8 envname\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 18 янв 29 18:48 envname/bin/python -> /usr/bin/python3.8\n```\n\nТакже можно использовать pypy3:\n\n```\n$ virtualenv -p pypy3 envname\n```\n\n"
    },
    {
      "title": "virtualenvwrapper",
      "level": 2,
      "content": "virtualenvwrapper позволяет более удобно управлять виртуальными окружениями через командную строку, предоставляя несколько полезных команд для создания, активации и удаления виртуальных окружений. Этот пакет является обёрткой для python-virtualenv.\n\n"
    },
    {
      "title": "Установка",
      "level": 3,
      "content": "Установите пакет python-virtualenvwrapper и добавьте в ~/.bashrc:\n\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n\nСтрока source /usr/bin/virtualenvwrapper.sh может несколько замедлить запуск новой командной оболочки. Для решения проблемы можно использовать source /usr/bin/virtualenvwrapper_lazy.sh, который загрузит virtualenvwrapper только при первом обращении к нему.\n\nПерезапустите консоль для применения изменений. Каталог WORKON_HOME будет создан автоматически.\n\n"
    },
    {
      "title": "Использование",
      "level": 3,
      "content": "Подробности можно почитать в официальной документации.\n\nСоздание виртуального окружения (все опции командной строки, кроме -a, -i, -r и -h, передаются в virtualenv, так что можно использовать опцию -p для выбора нужной версии Python):\n\n```\n$ mkvirtualenv envname\n```\n\nАктивация виртуального окружения:\n\n```\n$ workon envname\n```\n\nУстановка пакета внутри виртуального окружения (скажем, Django):\n\n```\n(envname) $ pip install django\n```\n\nВыход из виртуального окружения:\n\n```\n(envname) $ deactivate\n```\n\n"
    },
    {
      "title": "Pipenv",
      "level": 2,
      "content": "pipenv упрощает управление через командную строку, предоставляя одну программу, которая выполняет все функции вышеперечисленных инструментов.\n\n"
    },
    {
      "title": "Установка",
      "level": 3,
      "content": "Установите пакет python-pipenv.\n\n"
    },
    {
      "title": "Использование",
      "level": 3,
      "content": "Все команды можно выполнять в папке проекта, и pipenv распознает текущую ситуацию — найдёт виртуальное окружение в текущем каталоге и будет использовать его.\n\nПодробности в документации: [1], [2], [3].\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Python venv\n- Пакет virtualenv на PyPI\n- Документация virtualenvwrapper\n\n"
    }
  ]
}