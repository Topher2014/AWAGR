{
  "title": "LVM (日本語)",
  "url": "https://wiki.archlinux.org/title/LVM_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- LVM に Arch Linux をインストールする\n- ソフトウェア RAID と LVM\n- dm-crypt/システム全体の暗号化#LVM on LUKS\n- dm-crypt/システム全体の暗号化#LUKS on LVM\n- en:Resizing LVM-on-LUKS\n- en:Create root filesystem snapshots with LVM\n\nWikipedia より:\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 背景 1.1 LVM の構成要素 1.2 利点 1.3 欠点\n- 2 インストール\n- 3 ボリューム操作 3.1 物理ボリューム 3.1.1 作成 3.1.2 拡張 3.1.3 縮小 3.1.3.1 物理エクステントを移動させる 3.1.3.2 物理ボリュームのサイズを変更する 3.1.3.3 パーティションのサイズを変更する 3.2 ボリュームグループ 3.2.1 ボリュームグループを作成する 3.2.2 ボリュームグループをアクティブ化する 3.2.3 ボリュームグループを修復する 3.2.4 ボリュームグループを非アクティブ化する 3.2.5 ボリュームグループの名前を変更する 3.2.6 ボリュームグループに物理ボリュームを追加する 3.2.7 ボリュームグループからパーティションを削除する 3.3 論理ボリューム 3.3.1 論理ボリュームを作成する 3.3.2 論理ボリュームの名前を変更する 3.3.3 論理ボリュームとファイルシステムのサイズを一度に変更する 3.3.4 論理ボリュームとファイルシステムのサイズを別々に変更する 3.3.5 論理ボリュームを削除する\n- 4 スナップショット 4.1 設定 4.2 バックアップ\n- 5 暗号化\n- 6 キャッシュ 6.1 キャッシュを作成する 6.2 キャッシュを削除する\n- 7 RAID 7.1 RAID をセットアップする\n- 8 シンプロビジョニング 8.1 例: 仮想専用サーバを立てる 8.1.1 シンスナップショットを使用してスペースを節約する 8.2 例: ゼロダウンタイムでストレージをアップグレードする\n- 9 トラブルシューティング 9.1 LVM コマンドが機能しない 9.2 論理ボリュームが表示されない 9.3 リムーバブルメディア上の LVM 9.3.1 LVM とリムーバブルメディアでサスペンド/復帰 9.4 連続している論理ボリュームのサイズ変更に失敗する 9.5 \"grub-mkconfig\" コマンドで \"unknown filesystem\" エラーが発生する 9.6 シンプロビジョニングボリュームに root を配置する場合にタイムアウトが発生する 9.7 シャットダウンが遅くなる 9.8 シンプロビジョニングされたスワップボリューム上にハイバネートする\n- 10 参照\n\n- 1.1 LVM の構成要素\n- 1.2 利点\n- 1.3 欠点\n\n- 3.1 物理ボリューム 3.1.1 作成 3.1.2 拡張 3.1.3 縮小 3.1.3.1 物理エクステントを移動させる 3.1.3.2 物理ボリュームのサイズを変更する 3.1.3.3 パーティションのサイズを変更する\n- 3.2 ボリュームグループ 3.2.1 ボリュームグループを作成する 3.2.2 ボリュームグループをアクティブ化する 3.2.3 ボリュームグループを修復する 3.2.4 ボリュームグループを非アクティブ化する 3.2.5 ボリュームグループの名前を変更する 3.2.6 ボリュームグループに物理ボリュームを追加する 3.2.7 ボリュームグループからパーティションを削除する\n- 3.3 論理ボリューム 3.3.1 論理ボリュームを作成する 3.3.2 論理ボリュームの名前を変更する 3.3.3 論理ボリュームとファイルシステムのサイズを一度に変更する 3.3.4 論理ボリュームとファイルシステムのサイズを別々に変更する 3.3.5 論理ボリュームを削除する\n\n- 3.1.1 作成\n- 3.1.2 拡張\n- 3.1.3 縮小 3.1.3.1 物理エクステントを移動させる 3.1.3.2 物理ボリュームのサイズを変更する 3.1.3.3 パーティションのサイズを変更する\n\n- 3.1.3.1 物理エクステントを移動させる\n- 3.1.3.2 物理ボリュームのサイズを変更する\n- 3.1.3.3 パーティションのサイズを変更する\n\n- 3.2.1 ボリュームグループを作成する\n- 3.2.2 ボリュームグループをアクティブ化する\n- 3.2.3 ボリュームグループを修復する\n- 3.2.4 ボリュームグループを非アクティブ化する\n- 3.2.5 ボリュームグループの名前を変更する\n- 3.2.6 ボリュームグループに物理ボリュームを追加する\n- 3.2.7 ボリュームグループからパーティションを削除する\n\n- 3.3.1 論理ボリュームを作成する\n- 3.3.2 論理ボリュームの名前を変更する\n- 3.3.3 論理ボリュームとファイルシステムのサイズを一度に変更する\n- 3.3.4 論理ボリュームとファイルシステムのサイズを別々に変更する\n- 3.3.5 論理ボリュームを削除する\n\n- 4.1 設定\n- 4.2 バックアップ\n\n- 6.1 キャッシュを作成する\n- 6.2 キャッシュを削除する\n\n- 7.1 RAID をセットアップする\n\n- 8.1 例: 仮想専用サーバを立てる 8.1.1 シンスナップショットを使用してスペースを節約する\n- 8.2 例: ゼロダウンタイムでストレージをアップグレードする\n\n- 8.1.1 シンスナップショットを使用してスペースを節約する\n\n- 9.1 LVM コマンドが機能しない\n- 9.2 論理ボリュームが表示されない\n- 9.3 リムーバブルメディア上の LVM 9.3.1 LVM とリムーバブルメディアでサスペンド/復帰\n- 9.4 連続している論理ボリュームのサイズ変更に失敗する\n- 9.5 \"grub-mkconfig\" コマンドで \"unknown filesystem\" エラーが発生する\n- 9.6 シンプロビジョニングボリュームに root を配置する場合にタイムアウトが発生する\n- 9.7 シャットダウンが遅くなる\n- 9.8 シンプロビジョニングされたスワップボリューム上にハイバネートする\n\n- 9.3.1 LVM とリムーバブルメディアでサスペンド/復帰\n\n"
    },
    {
      "title": "LVM の構成要素",
      "level": 3,
      "content": "Logical Volume Management は Linux カーネルの device-mapper 機能を利用して、基底のディスクレイアウトから独立したパーティションのシステムを提供します。LVM を使うことでストレージを抽象化し「仮想的なパーティション」を作成して、拡張/縮小を容易にします (ファイルシステムの制限を受ける可能性はあります)。\n\n仮想パーティションにより、パーティションディスク上に十分な連続領域が存在するかどうかを心配したり、使用中のディスクに fdisk してしまったり (そして、カーネルが古いパーティションテーブルと新しいほうのどちらを使っているか悩んだり)、他のパーティションを移動してスペースを作らないといけなかったりすることなく、追加と削除ができるようになります。\n\nLVM の基本的構成要素:\n\n例:\n\n```\n物理ディスク\n\n  ディスク1 (/dev/sda):\n    ┌──────────────────────────────────────────┬─────────────────────────────────────────┐\n    │ パーティション1  50 GiB (物理ボリューム) │ パーティション2 80 GiB (物理ボリューム) │\n    │ /dev/sda1                                │ /dev/sda2                               │\n    └──────────────────────────────────────────┴─────────────────────────────────────────┘\n\n  ディスク2 (/dev/sdb):\n    ┌──────────────────────────────────────────┐\n    │ パーティション1 120 GiB (物理ボリューム) │\n    │ /dev/sdb1                                │\n    └──────────────────────────────────────────┘\n```\n\n```\nLVM 論理ボリューム\n\n  ボリュームグループ1 (/dev/MyVolGroup/ = /dev/sda1 + /dev/sda2 + /dev/sdb1):\n    ┌─────────────────────────┬─────────────────────────┬──────────────────────────┐\n    │ 論理ボリューム1 15 GiB  │ 論理ボリューム2 35 GiB  │ 論理ボリューム3 200 GiB  │\n    │ /dev/MyVolGroup/rootvol │ /dev/MyVolGroup/homevol │ /dev/MyVolGroup/mediavol │\n    └─────────────────────────┴─────────────────────────┴──────────────────────────┘\n```\n\n"
    },
    {
      "title": "利点",
      "level": 3,
      "content": "LVM には、通常のハードドライブのパーティションをただ使うよりも幅広い柔軟性があります:\n\n- 多数のディスクを一つの大きなディスクとして使えます。\n- 複数のディスクにまたがる論理ボリュームを作れます。\n- 小さな論理ボリュームを作成し、満杯になったら\"動的に\"リサイズできます。\n- ディスクの順番と関係なく論理ボリュームをリサイズできます。VG における LV の位置に依存しないので、周辺に空き容量を取る必要がありません。\n- オンラインで論理・物理ボリュームをリサイズ・作成・削除できます。ボリューム上のファイルシステムもリサイズする必要がありますが、オンラインリサイズをサポートしているファイルシステムもあります (ext4 など)。\n- サービスによって使われている LV を、サービスを再起動する必要なく他のディスクへオンラインで移行することができます。\n- スナップショットを使うことでファイルシステムのフローズンコピーをバックアップすることができます。サービスを落とす時間を最小限にできます。\n- 起動時にキーを複数回入力することなく、個別のボリュームをアンロック (LUKS 上に LVM を作成)。\n- 頻繁に使用されるデータをキャッシュする組み込みサポート (lvmcache(7))。\n\n"
    },
    {
      "title": "欠点",
      "level": 3,
      "content": "- システムのセットアップに追加の手順が必要で、やや複雑。(複数の) デーモンを継続的に実行する必要あり。\n- デュアルブートする場合、Windows は LVM をサポートしていないことに注意してください。Windows からは LVM パーティションにアクセスできません。サードパーティのソフトウェアによって、特定の種類の LVM セットアップをマウントできる場合があります。[1]\n- 物理ボリュームが RAID-1、RAID-5、RAID-6 のどれにもない場合、論理ボリュームが複数の非冗長ディスクにまたがっている (あるいは、拡張されている) と、1つ以上のディスクが失われると1つまたは複数の論理ボリュームが失われる可能性があります。\n- 論理ボリュームマネージャによって使用されている領域 (つまり、論理ボリュームのために使用されている物理ボリューム) は (簡単には) 縮小できません。物理エクステントが物理ボリューム上に末尾まで散らばっている場合、Arch Wiki 上で提供されているスクリプトでは物理ボリュームを縮小することはできません。他のオペレーティングシステム (例: Microsoft Windows) とデュアルブートしたい場合、Microsoft Windows のために残される唯一のスペースは、LVM によって使用されない、あるいは物理ボリュームとして使用されない領域となります。\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "lvm2 パッケージがインストールされていることを確認してください。\n\nLVM ボリュームを initramfs によってアクティブ化しない場合、(lvm2 によって提供される) lvm2-monitor.service を有効化してください。\n\n"
    },
    {
      "title": "作成",
      "level": 4,
      "content": "/dev/sda1 上に PV (物理ボリューム) を作成するには:\n\n```\n# pvcreate /dev/sda1\n```\n\nPV が作成されたかどうかは、以下のコマンドを使って確認できます:\n\n```\n# pvs\n```\n\n"
    },
    {
      "title": "拡張",
      "level": 4,
      "content": "物理ボリュームのあるデバイスのサイズを増やした後、または減らす前に、pvresize(8) を使って PV を拡大/縮小する必要があります。\n\nパーティションを大きくした後に /dev/sda1 上の PV を拡張するには、以下を実行します:\n\n```\n# pvresize /dev/sda1\n```\n\nこれは、自動的にデバイスのサイズを検出し、最大まで PV を拡張します。\n\n"
    },
    {
      "title": "縮小",
      "level": 4,
      "content": "基底となるデバイスを縮小する前に物理ボリュームを縮小するには、パラメータ --setphysicalvolumesize サイズ を先のコマンドに追加してください。例えば:\n\n```\n# pvresize --setphysicalvolumesize 40G /dev/sda1\n```\n\n上記のコマンドは以下のエラーを出力する場合があります:\n\n```\n/dev/sda1: cannot resize to 25599 extents as later ones are allocated.\n0 physical volume(s) resized / 1 physical volume(s) not resized\n```\n\n実際 pvresize は、新しい終了位置よりも後にエクステントが割り当てられている場合、PV の縮小を拒否します。十分な空き領域があるならば、前もって pvmove を実行して、そのようなエクステントをボリュームグループ内の別の場所に移動させる必要があります。\n\n空きエクステントをボリュームの末尾に移動させる前に、pvdisplay -v -m を実行して物理セグメントを確認しなければなりません。以下の例では、1つの物理ボリュームが /dev/sdd1 上に存在し、1つのボリュームグループ vg1 と1つの論理ボリューム backup が存在しています。\n\n```\n# pvdisplay -v -m\n```\n\n```\nFinding all volume groups.\n    Using physical volume(s) on command line.\n  --- Physical volume ---\n  PV Name               /dev/sdd1\n  VG Name               vg1\n  PV Size               1.52 TiB / not usable 1.97 MiB\n  Allocatable           yes \n  PE Size               4.00 MiB\n  Total PE              399669\n  Free PE               153600\n  Allocated PE          246069\n  PV UUID               MR9J0X-zQB4-wi3k-EnaV-5ksf-hN1P-Jkm5mW\n   \n  --- Physical Segments ---\n  Physical extent 0 to 153600:\n    FREE\n  Physical extent 153601 to 307199:\n    Logical volume\t/dev/vg1/backup\n    Logical extents\t1 to 153599\n  Physical extent 307200 to 307200:\n    FREE\n  Physical extent 307201 to 399668:\n    Logical volume\t/dev/vg1/backup\n    Logical extents\t153601 to 246068\n```\n\nFREE な領域がボリュームを跨いで分かれて存在していることがわかります。物理ボリュームを縮小させるには、まず、すべての使用中セグメントを先頭に移動させなければなりません。\n\nここで、最初の空きセグメントは 0 から 153600 にあり、153601 の空きエクステントが存在しています。この状態では、このセグメント番号を最後の物理エクステントから最初のエクステントに移動させることができます。なので、コマンドは以下のようになります:\n\n```\n# pvmove --alloc anywhere /dev/sdd1:307201-399668 /dev/sdd1:0-92467\n```\n\n```\n/dev/sdd1: Moved: 0.1 %\n/dev/sdd1: Moved: 0.2 %\n...\n/dev/sdd1: Moved: 99.9 %\n/dev/sdd1: Moved: 100.0 %\n```\n\n- このコマンドは、399668 - 307201 + 1 = 92468 個の PE (物理エクステント) を最後のセグメント から 最初のセグメント へ 移動させます。これは、最初のセグメントが 153600 個の空き PE を囲っており、92467 - 0 + 1 = 92468 個の移動された PE を含むことができるため、可能なのです。\n- --alloc anywhere オプションは、同じパーティション内で PE を移動させるので、使用されています。異なるパーティションの場合、先のコマンドは以下のようなものになるでしょう: # pvmove /dev/sdb1:1000-1999 /dev/sdc1:0-999\n- このコマンドは、ボリュームが大きい場合、長い時間 (1~2時間) が掛かるかもしれません。このコマンドを tmux や GNU Screen のセッション内で実行するのが良いアイディアかもしれません。プロセスを望まない形で停止させてしまうと、致命的になる可能性があります。\n- 操作が完了したら、fsck を実行して、ファイルシステムが有効であることを確認してください。\n\n```\n# pvmove /dev/sdb1:1000-1999 /dev/sdc1:0-999\n```\n\nすべての空き物理セグメントを最後の物理エクステント上に移動したら、vgdisplay を root 権限で実行して空き PE を確認してください。\n\nそうしたら、先のあのコマンドを再び実行できます:\n\n```\n# pvresize --setphysicalvolumesize サイズ 物理ボリューム\n```\n\n結果を確認しましょう:\n\n```\n# pvs\n```\n\n```\nPV         VG   Fmt  Attr PSize    PFree \n  /dev/sdd1  vg1  lvm2 a--     1t     500g\n```\n\n最後に、お気に入りのパーティショニングツールを使ってパーティションを縮小させる必要があります。\n\n"
    },
    {
      "title": "ボリュームグループを作成する",
      "level": 4,
      "content": "PV /dev/sdb1 を持つ VG (ボリュームグループ) MyVolGroup を作成するには、以下を実行してください:\n\n```\n# vgcreate MyVolGroup /dev/sdb1\n```\n\n以下のコマンドを使うことで VG MyVolGroup が作成されたことを確認できます:\n\n```\n# vgs\n```\n\nVG の作成時に以下のようにすることで複数の PV をバインドすることができます:\n\n```\n# vgcreate MyVolGroup /dev/sdb1 /dev/sdb2\n```\n\n"
    },
    {
      "title": "ボリュームグループをアクティブ化する",
      "level": 4,
      "content": "```\n# vgchange -a y MyVolGroup\n```\n\nデフォルトでは、これにより該当するボリュームグループが再アクティブ化されます。例えば、仮にミラーでドライブ障害が発生し、そのドライブを交換したとすると、(1) pvcreate、(2) vgextend、(3) vgreduce --removemissing --force を実行するでしょう。\n\n"
    },
    {
      "title": "ボリュームグループを修復する",
      "level": 4,
      "content": "この例での破損したミラーアレイの再ビルドプロセスを開始するには、以下を実行します:\n\n```\n# lvconvert --repair /dev/MyVolGroup/mirror\n```\n\n以下で再ビルドプロセスをモニタリングできます (Cpy%Sync 列の出力):\n\n```\n# lvs -a -o +devices\n```\n\n"
    },
    {
      "title": "ボリュームグループを非アクティブ化する",
      "level": 4,
      "content": "以下を実行してください:\n\n```\n# vgchange -a n MyVolGroup\n```\n\nこれは、ボリュームグループを非アクティブ化し、その VG を格納しているコンテナをアンマウントできるようにします。\n\n"
    },
    {
      "title": "ボリュームグループの名前を変更する",
      "level": 4,
      "content": "既存のボリュームグループの名前を変更するには vgrename(8) コマンドを使用してください。\n\n次のいずれかのコマンドにより、既存のボリュームグループ MyVolGroup を my_volume_group に名称変更します:\n\n```\n# vgrename /dev/MyVolGroup /dev/my_volume_group\n```\n\n```\n# vgrename MyVolGroup my_volume_group\n```\n\n名前を変更したボリュームグループを参照している設定ファイル (例: /etc/fstab、/etc/crypttab) をすべてアップデートすることを忘れないでください。\n\n"
    },
    {
      "title": "ボリュームグループに物理ボリュームを追加する",
      "level": 4,
      "content": "まず、使用したいブロックデバイス上に新しい物理ボリュームを作成し、ボリュームグループを拡張します:\n\n```\n# pvcreate /dev/sdb1\n# vgextend MyVolGroup /dev/sdb1\n```\n\nこれにより、ボリュームグループ上の物理エクステントの合計数が増加し、論理ボリュームによって割り当てられることが可能です。\n\n"
    },
    {
      "title": "ボリュームグループからパーティションを削除する",
      "level": 4,
      "content": "論理ボリュームがパーティション上に存在している場合、まずその論理ボリュームを削除してください。\n\nそのパーティション上にあるすべてのデータを他のパーティションに移動する必要があります。幸い、LVM ではこれを簡単に行えます:\n\n```\n# pvmove /dev/sdb1\n```\n\n特定の物理ボリューム上にデータを移したい場合は、pvmove の第2引数でそれを指定してください:\n\n```\n# pvmove /dev/sdb1 /dev/sdf1\n```\n\n次に、物理ボリュームをボリュームグループから削除する必要があります:\n\n```\n# vgreduce MyVolGroup /dev/sdb1\n```\n\nまたは、空の物理ボリュームをすべて削除します:\n\n```\n# vgreduce --all MyVolGroup\n```\n\n例: 削除されたか障害が発生しているため見つけることのできない、グループ内の不良ディスクがある場合:\n\n```\n# vgreduce --removemissing --force MyVolGroup\n```\n\n最後に、そのパーティションを他の目的のために使用したい場合で、かつ LVM がそのパーティションを物理ボリュームであると認識させたくない場合:\n\n```\n# pvremove /dev/sdb1\n```\n\n"
    },
    {
      "title": "論理ボリュームを作成する",
      "level": 4,
      "content": "ボリュームグループ MyVolGroup に容量 300 GiB の論理ボリューム homevol を作成するには、以下を実行してください:\n\n```\n# lvcreate -L 300G MyVolGroup -n homevol\n```\n\nあるいは、ボリュームグループ MyVolGroup に論理ボリューム homevol を、容量の残りすべてを使って作成するには、次を実行してください:\n\n```\n# lvcreate -l 100%FREE MyVolGroup -n homevol\n```\n\n新しい LV が /dev/MyVolGroup/homevol として現れます。これで、LV を適切なファイルシステムでフォーマットできます。\n\n以下のコマンドで、LV が作成されたことを確認できます:\n\n```\n# lvs\n```\n\n"
    },
    {
      "title": "論理ボリュームの名前を変更する",
      "level": 4,
      "content": "既存の論理ボリュームの名前を変更するには、lvrename(8) コマンドを使用してください。\n\n次のいずれかのコマンドにより、ボリュームグループ MyVolGroup 内の論理ボリューム old_vol を new_vol に名称変更します:\n\n```\n# lvrename /dev/MyVolGroup/old_vol /dev/MyVolGroup/new_vol\n```\n\n```\n# lvrename MyVolGroup old_vol new_vol\n```\n\n名前を変更した論理ボリュームを参照している設定ファイル (例: /etc/fstab、/etc/crypttab) をすべてアップデートすることを忘れないでください。\n\n"
    },
    {
      "title": "論理ボリュームとファイルシステムのサイズを一度に変更する",
      "level": 4,
      "content": "MyVolGroup 内の論理ボリューム mediavol を 10 GiB だけ増やし、ファイルシステムも 同時に リサイズします:\n\n```\n# lvresize -L +10G --resizefs MyVolGroup/mediavol\n```\n\nMyVolGroup 内の論理ボリューム mediavol のサイズを 15 GiB に設定し、ファイルシステムも 同時に リサイズします:\n\n```\n# lvresize -L 15G --resizefs MyVolGroup/mediavol\n```\n\nボリュームグループ上の空き領域をすべて埋めたい場合、次のコマンドを使用してください:\n\n```\n# lvresize -l +100%FREE --resizefs MyVolGroup/mediavol\n```\n\n更に詳細なオプションは lvresize(8) を参照してください。\n\n"
    },
    {
      "title": "論理ボリュームとファイルシステムのサイズを別々に変更する",
      "level": 4,
      "content": "fsadm(8) によってサポートされていないファイルシステムの場合、論理ボリュームを縮小する前、または拡張した後に、適切なユーティリティを使ってそのファイルシステムをリサイズする必要があります。\n\nファイルシステムに触れずに、ボリュームグループ MyVolGroup 内の論理ボリューム mediavol を 2 GiB だけ増やすには:\n\n```\n# lvresize -L +2G MyVolGroup/mediavol\n```\n\nそして、ファイルシステム (この例では ext4) を論理ボリュームの最大サイズまで拡張してください:\n\n```\n# resize2fs /dev/MyVolGroup/mediavol\n```\n\nMyVolGroup 内の論理ボリューム mediavol のサイズを 500 MiB だけ減らすには、まず最終的なファイルシステムサイズを計算し、ファイルシステム (この例では ext4) をその新しいサイズに縮小します:。\n\n```\n# resize2fs /dev/MyVolGroup/mediavol NewSize\n```\n\nファイルシステムが縮小したら、論理ボリュームのサイズも縮小してください:\n\n```\n# lvresize -L -500M MyVolGroup/mediavol\n```\n\next2、ext3、ext4 ファイルシステムの場合の正確な論理ボリュームサイズを計算するには、このシンプルな計算式をしようしてください: LVM_EXTENTS = FS_BLOCKS × FS_BLOCKSIZE ÷ LVM_EXTENTSIZE。\n\n```\n# tune2fs -l /dev/MyVolGroup/mediavol | grep Block\n```\n\n```\nBlock count:              102400000\nBlock size:               4096\nBlocks per group:         32768\n```\n\n```\n# vgdisplay MyVolGroup | grep \"PE Size\"\n```\n\n```\nPE Size               4.00 MiB\n```\n\n```\n102400000 blocks × 4096 bytes/block ÷ 4 MiB/extent = 100000 extents\n```\n\n--resizefs を渡せば、正しいことを確認できます。\n\n```\n# lvreduce -l 100000 --resizefs /dev/MyVolGroup/mediavol\n```\n\n```\n...\nThe filesystem is already 102400000 (4k) blocks long.  Nothing to do!\n...\nLogical volume sysvg/root successfully resized.\n```\n\n更に詳細なオプションは lvresize(8) を参照してください。\n\n"
    },
    {
      "title": "論理ボリュームを削除する",
      "level": 4,
      "content": "まず、削除したい論理ボリュームの名前を調べてください。以下のコマンドですべての論理ボリュームのリストを得られます:\n\n```\n# lvs\n```\n\n次に、選択した論理ボリュームのマウントポイントを探してください:\n\n```\n$ lsblk\n```\n\nそうしたら、論理ボリューム上のファイルシステムをアンマウントしてください:\n\n```\n# umount /マウントポイント\n```\n\n最後に、論理ボリュームを削除してください:\n\n```\n# lvremove ボリュームグループ/論理ボリューム\n```\n\n例えば:\n\n```\n# lvremove MyVolGroup/homevol\n```\n\ny を押して、確定してください。\n\n削除した論理ボリュームを参照しているすべての設定ファイル (例: /etc/fstab、/etc/crypttab) を更新することを忘れないでください。\n\nlvs を root として実行することで、論理ボリュームが削除されたことを確認できます (このセクションの最初のステップを参照)。\n\n"
    },
    {
      "title": "スナップショット",
      "level": 2,
      "content": "LVM は CoW (コピーオンライト, Copy-on-Write) スナップショットをサポートしています。CoW スナップショットは初めはオリジナルデータを参照します。データブロックが上書きされた時、オリジナルコピーはそのまま残り、新しいブロックはディスク上の別の場所に書き込まれます。これには、いくつかの望ましい特性があります:\n\n- データをコピーしない (ディスク上の場所を指すポインタのより小さいリストだけです) ため、スナップショットの作成が高速です。\n- スナップショットは、新しいデータブロック (加えて、新しいブロックを指すポインタのための無視できるほど小さい領域) を保持するのに十分な空き領域しか必要としません。例えば、(オリジナルとスナップショットの両方に) 2 GiB だけ書き込んだ 35 GiB のデータのスナップショットは 2 GiB の空き領域しか必要としません。\n\nLVM スナップショットはブロックレベルです。LVM スナップショットは、LVM ツールを扱う場合を除いて、オリジナルと明らかな関連を持たない、新しいブロックデバイスを作成します。なので、オリジナルコピー内でファイルを削除しても、スナップショット内の領域は開放されません。ファイルシステムレベルのスナップショットが必要である場合は、btrfs や ZFS、bcache が必要です。\n\n- CoW スナップショットは バックアップではありません。スナップショットはオリジナルデータの第2のコピーを作成するわけではないからです。例えば、オリジナルデータに影響するディスクセクタに損傷が発生すると、スナップショットにも影響が及びます。とはいえ、以下で概要を説明しているように、バックアップを作成するために他のツールを使用するときに、スナップショットは便利かもしれません。\n- btrfs は、異なるファイルシステムが異なる UUID を持つことを期待します。btrfs ファイルシステムを含む LVM ボリュームのスナップショットを作成する場合、オリジナルまたはコピーの UUID を、それらをマウントする前 (及び、無関係のデーモンが btrfs デバイススキャンをトリガーする場合など、カーネルから見えるようにする前) に変更するようにしてください。詳細は、btrfs wiki Gotcha's を参照してください。\n\n"
    },
    {
      "title": "設定",
      "level": 3,
      "content": "スナップショットの論理ボリュームは通常の論理ボリュームと同じように作成します。\n\n```\n# lvcreate --size 100M --snapshot --name snap01vol /dev/MyVolGroup/lvol\n```\n\n上記のボリュームでは、スナップショットボリュームが一杯になるまで 100 MiB のデータを変更を加えることができます。\n\n次のコマンドを使うことで、変更が加えられた lvol 論理ボリュームを、snap01vol スナップショットが作成された時の状態まで戻すことができます:\n\n```\n# lvconvert --merge /dev/MyVolGroup/snap01vol\n```\n\nオリジナルの論理ボリュームが使用中の場合は、次回のブート時にマージサれます (LiveCD からマージすることもできます)。\n\nまた、複数のスナップショットを作成して、それぞれを自由にオリジナルの論理ボリュームにマージすることも可能です。\n\n"
    },
    {
      "title": "バックアップ",
      "level": 3,
      "content": "スナップショットは、バックアップの作成のためにファイルシステムの凍結されたコピーを提供します。例えば、2時間かかったバックアップは、パーティションを直接バックアップするよりも、ファイルシステムのより一貫性のあるイメージを提供します。\n\ndd や tar でスナップショットをマウントしたりバックアップしたりできます。dd によって作成されたバックアップファイルのサイズは、対象のスナップショットボリューム上に存在するファイルの総サイズとなります。(バックアップから) 復元するには、スナップショットを作成し、それをマウントし、そこへバックアップを書き込むか展開してください。その後、そのスナップショットを origin にマージしてください。\n\nバックアップとロールバックのために、システム起動時にルートファイルシステムのクリーンなスナップショットを自動的に作成する方法については、LVM によるルートファイルシステムのスナップショット を参照してください。\n\n"
    },
    {
      "title": "暗号化",
      "level": 2,
      "content": "LUKS と LVM の組み合わせの可能なスキームについては、dm-crypt/システム全体の暗号化#LUKS on LVM と dm-crypt/システム全体の暗号化#LVM on LUKS を参照してください。\n\n"
    },
    {
      "title": "キャッシュ",
      "level": 2,
      "content": "lvmcache(7) より:\n\n"
    },
    {
      "title": "キャッシュを作成する",
      "level": 3,
      "content": "高速なディスク (/dev/fastdisk) を PV に変換し、既存の VG (MyVolGroup) に追加します:\n\n```\n# vgextend MyVolGroup /dev/fastdisk\n```\n\n/dev/fastdisk 上に自動メタデータのあるキャッシュプールを作成し、既存の LV MyVolGroup/rootvol をキャッシュボリュームに変換します、1ステップですべてできます:\n\n```\n# lvcreate --type cache --cachemode writethrough -l 100%FREE -n root_cachepool MyVolGroup/rootvol /dev/fastdisk\n```\n\nキャッシュモードには2つのオプションが利用できます:\n\n- writethrough は書き込まれたデータがキャッシュプール LV とオリジナルの LV の両方に保存されることが保証されます。キャッシュプール LV が保存されているデバイスが故障してもデータが消失することはありません。\n- writeback は高い性能を発揮しますが、キャッシュに使っているドライブが故障したときにデータを喪失する危険性があります。\n\n--cachemode を指定しなかった場合、デフォルトで writethrough が使われます。\n\n"
    },
    {
      "title": "キャッシュを削除する",
      "level": 3,
      "content": "上記で作成したキャッシュを削除したい場合:\n\n```\n# lvconvert --uncache MyVolGroup/rootvol\n```\n\n上記のコマンドでキャッシュに留まっている書き込みが origin LV に適用され、それからキャッシュが削除されます。他のオプションについては lvmcache(7) で説明されています。\n\n"
    },
    {
      "title": "RAID",
      "level": 2,
      "content": "LVM は、ソフトウェア RAID を作成するために使用できます。ハードウェア RAID を持っておらず、いずれにせよ LVM を使用するつもりであるならば、これは良い選択肢です。lvmraid(7) によると:\n\nLVM RAID は RAID 0、RAID 1、RAID 4、RAID 5、RAID 6、RAID 10 をサポートします。それぞれのレベルに関する詳細は Wikipedia:Standard RAID levels を参照してください。\n\n"
    },
    {
      "title": "RAID をセットアップする",
      "level": 3,
      "content": "物理ボリュームを作成してください:\n\n```\n# pvcreate /dev/sda2 /dev/sdb2\n```\n\n物理ボリューム上にボリュームグループを作成してください:\n\n```\n# vgcreate MyVolGroup /dev/sda2 /dev/sdb2\n```\n\nlvcreate --type RAIDレベル を使用して論理ボリュームを作成してください。その他のオプションについては lvmraid(7) と lvcreate(8) を参照してください。\n\n```\n# lvcreate --type RaidLevel [OPTIONS] -n Name -L Size VG [PVs]\n```\n\n例:\n\n```\n# lvcreate --type raid1 --mirrors 1 -L 20G -n myraid1vol MyVolGroup /dev/sda2 /dev/sdb2\n```\n\nこれは、20 GiB のミラー化された、\"myraid1vol\" という名前の論理ボリュームを、/dev/sda2 と /dev/sdb2 の上にある VolGroup00 内に作成します。\n\n"
    },
    {
      "title": "シンプロビジョニング",
      "level": 2,
      "content": "lvmthin(7) によると:\n\n"
    },
    {
      "title": "例: 仮想専用サーバを立てる",
      "level": 3,
      "content": "古典的なユースケースを挙げましょう。あなたは独自の VPS サービスを開始したいと考え、初めは約100個の VPS を 930 GiB ハードドライブ搭載の1台の PC 上でホストしているとしましょう。割り当てられたストレージのすべてを実際に使用する VPS はほとんど存在しないため、各 VPS に 9 GiB を割り当てるのではなく、各 VPS に最大 30 GiB を使用できるようにし、シンプロビジョニングを使うことで各 VPS に実際に使用している量のハードドライブ領域を割り当てるようにします。930 GiB のハードドライブは /dev/sdb であるとします。以下がそのセットアップです。\n\nボリュームグループ MyVolGroup を準備します。\n\n```\n# vgcreate MyVolGroup /dev/sdb\n```\n\nシンプール LV MyThinPool を作成します。この LV はストレージ用のブロックを提供します。\n\n```\n# lvcreate --type thin-pool -n MyThinPool -l 95%FREE MyVolGroup\n```\n\nシンプールは2つのサブボリュームから成ります: データ LV とメタデータ LV です。このコマンドは両方を自動的に作成します。しかし、いずれかが完全に一杯になると、シンプールは動作を停止してしまいます。さらに、LVM は現在、それらのボリュームの縮小をサポートしていません。これが、上記のコマンドで 5% の追加領域を用意している理由です。シンプールのデータサブボリュームかメタデータサブボリュームを拡張する必要が発生する場合に備えているのです。\n\n各 VPS に対してシン LV を作成します。これは、ユーザに対してルートパーティションとして公開されるブロックデバイスです。\n\n```\n# lvcreate -n SomeClientsRoot -V 30G --thinpool MyThinPool MyVolGroup\n```\n\nそのブロックデバイス /dev/MyVolGroup/SomeClientsRoot は、ルートパーティションとして VirtualBox が使用することができます。\n\n"
    },
    {
      "title": "シンスナップショットを使用してスペースを節約する",
      "level": 4,
      "content": "シンスナップショットは、それ自体がシン LV なので、通常のスナップショットよりも遥かに強力です。シンスナップショットが持つ長所の完全なリストは Red Hat のガイド [2] を参照してください。\n\nVPS が作成されるたびに Linux をゼロからインストールするのではなく、基本的な Linux 環境が含まれるただ1つのシン LV から始める方が容量を効率的に使用できます:\n\n```\n# lvcreate -n GenericRoot -V 30G --thinpool MyThinPool MyVolGroup\n*** /dev/MyVolGroup/GenericRoot に Linux をインストール ***\n```\n\nそして、各 VPS に対してその LV のスナップショットを作成します:\n\n```\n# lvcreate -s MyVolGroup/GenericRoot -n SomeClientsRoot\n```\n\nこのように、シンプールには (少なくとも最初は) 全 VPS に対して共通のデータのコピーがただ1つだけ存在します。追加の利点として、新しい VPS の作成が瞬時に行われます。\n\nこれらはシンスナップショットであるため、GenericRoot への1回の書き込み操作において COW 操作は、スナップショット毎に1回ではなく、合計で1回しか行われません。これにより、GenericRoot の更新は、各 VPS が通常のスナップショットである場合よりも効率的なります。\n\n"
    },
    {
      "title": "例: ゼロダウンタイムでストレージをアップグレードする",
      "level": 3,
      "content": "VPS のホスティング以外にもシンプロビジョニングの活用法は存在します。シンプロビジョニングを使用して、すでにマウントされているファイルシステムをアンマウントすることなく、その実効容量を増やす方法を紹介しましょう。ここでは (再び)、サーバに1台の 930 GiB ハードドライブが搭載されていると仮定します。環境は VPS ホスティングのときと同じですが、シン LV が1つしかなく、LV のサイズはシンプールのサイズよりも遥かに大きいとします。\n\n```\n# lvcreate -n MyThinLV -V 16T --thinpool MyThinPool MyVolGroup\n```\n\nこの追加の仮想領域は、シンプールを拡張することで後に実際のストレージで埋めることができます。\n\nしばらくして、ストレージのアップグレードが必要になり、新しいハードドライブ /dev/sdc がサーバに接続されたとします。シンプールの容量をアップグレードするには、新しいハードドライブを VG に追加します:\n\n```\n# vgextend MyVolGroup /dev/sdc\n```\n\n次に、シンプールを拡張します:\n\n```\n# lvextend -l +95%FREE MyVolGroup/MyThinPool\n```\n\nこのシン LV のサイズは 16 TiB なので、最終的にファイルシステムをアンマウントしてサイズ変更するはめになるまでに、さらに 15.09 TiB のハードドライブ領域を追加できます。\n\n"
    },
    {
      "title": "LVM コマンドが機能しない",
      "level": 3,
      "content": "- 適切なモジュールをロードしてください:\n\n```\n# modprobe dm_mod\n```\n\ndm_mod モジュールは自動的にロードされるはずです。そうならない場合は、明示的にモジュールを起動時にロードするようにしてください。\n\n- lvm コマンドを次のように試してみてください:\n\n```\n# lvm pvdisplay\n```\n\n"
    },
    {
      "title": "論理ボリュームが表示されない",
      "level": 3,
      "content": "既存の論理ボリュームをマウントしようとしても、lvscan に表示されない場合、以下のコマンドによってボリュームを有効にすることができます:\n\n```\n# vgscan\n# vgchange -ay\n```\n\n"
    },
    {
      "title": "リムーバブルメディア上の LVM",
      "level": 3,
      "content": "症状:\n\n```\n# vgscan\n```\n\n```\nReading all physical volumes.  This may take a while...\n  /dev/backupdrive1/backup: read failed after 0 of 4096 at 319836585984: Input/output error\n  /dev/backupdrive1/backup: read failed after 0 of 4096 at 319836643328: Input/output error\n  /dev/backupdrive1/backup: read failed after 0 of 4096 at 0: Input/output error\n  /dev/backupdrive1/backup: read failed after 0 of 4096 at 4096: Input/output error\n  Found volume group \"backupdrive1\" using metadata type lvm2\n  Found volume group \"networkdrive\" using metadata type lvm2\n```\n\n病因: 最初にボリュームグループを無効にしないで外付けの LVM ドライブを取り外したこと。切断する前に、次を実行するようにしましょう:\n\n```\n# vgchange -an ボリュームグループ名\n```\n\n修復: あなたがすでに vgchange -ay vg でそのボリュームグループのアクティブ化を試み、先の Input/output エラーを見たと仮定します:\n\n```\n# vgchange -an ボリュームグループ名\n```\n\n外部ドライブを取り外し、数分待ってください。\n\n```\n# vgscan\n# vgchange -ay ボリュームグループ名\n```\n\n"
    },
    {
      "title": "LVM とリムーバブルメディアでサスペンド/復帰",
      "level": 4,
      "content": "Table content:\nこの記事またはセクションの正確性には問題があります。 理由: 提供されている解決策は、LUKS on LVM などの複雑なセットアップでは機能しません。 (議論: トーク:LVM#)\n\nLVM をリムーバブルメディア (外部 USB ドライブなど) で正常に動作させるには、外部ドライブのボリュームグループをサスペンド前に非アクティブ化させる必要があります。これが行われないと、(復帰後に) dm デバイスでバッファ I/O エラーが発生する場合があります。この理由により、外部ドライブと内部ドライブを同じボリュームグループ内に混在させることは推奨されません。\n\n外部 USB ドライブのあるボリュームグループを自動的に非アクティブ化するには、以下の方法でそれぞれのボリュームグループに sleep_umount タグを付けてください:\n\n```\n# vgchange --addtag sleep_umount 外部ボリュームグループ\n```\n\nこのタグを設定したら、systemd の以下のユニットファイルを使用して、サスペンド前にボリュームを適切に非アクティブ化します。復帰時には、それらのボリュームは LVM によって自動的にアクティブ化されます。\n\n```\n/etc/systemd/system/ext_usb_vg_deactivate.service\n```\n\n```\n[Unit]\nDescription=Deactivate external USB volume groups on suspend\nBefore=sleep.target\n\n[Service]\nType=oneshot\nExecStart=-/etc/systemd/system/deactivate_sleep_vgs.sh\n\n[Install]\nWantedBy=sleep.target\n```\n\nあと以下のスクリプトです:\n\n```\n/etc/systemd/system/deactivate_sleep_vgs.sh\n```\n\n```\n#!/bin/sh\n\nTAG=@sleep_umount\nvgs=$(vgs --noheadings -o vg_name $TAG)\n\necho \"Deactivating volume groups with $TAG tag: $vgs\"\n\n# $TAG タグのあるボリュームグループに属する論理ボリュームをアンマウントします\nfor vg in $vgs; do\n    for lv_dev_path in $(lvs --noheadings  -o lv_path -S lv_active=active,vg_name=$vg); do\n        echo \"Unmounting logical volume $lv_dev_path\"\n        umount $lv_dev_path\n    done\ndone\n\n# sleep_umount でタグ付けされたボリュームグループを非アクティブ化します\nfor vg in $vgs; do\n    echo \"Deactivating volume group $vg\"\n    vgchange -an $vg\ndone\n```\n\n最後に、そのユニットを有効化してください。\n\n"
    },
    {
      "title": "連続している論理ボリュームのサイズ変更に失敗する",
      "level": 3,
      "content": "論理ボリュームを拡張しようとすると以下のエラーが表示される場合:\n\n```\n\" Insufficient suitable contiguous allocatable extents for logical volume \"\n```\n\n明示的に連続するように割り当てるポリシー (オプション -C y または --alloc contiguous) を使って論理ボリュームが作成されており、ボリュームの近隣に連続したエクステントが存在しないのが原因です。[3]\n\nこの問題を修正するには、論理ボリュームを拡張する前に、lvchange --alloc inherit 論理ボリューム で割り当てポリシーを変更してください。連続割り当てポリシーを使い続ける必要がある場合、空きエクステントが十分存在するディスク領域にボリュームを移動してください。[4] を参照。\n\n"
    },
    {
      "title": "\"grub-mkconfig\" コマンドで \"unknown filesystem\" エラーが発生する",
      "level": 3,
      "content": "grub.cfg を生成する前にスナップショットボリュームは削除するようにしてください。\n\n"
    },
    {
      "title": "シンプロビジョニングボリュームに root を配置する場合にタイムアウトが発生する",
      "level": 3,
      "content": "大量のスナップショットを使用した場合、thin_check の実行時間が長くなるためルートデバイスがタイムアウトしてしまうことがあります。そのためブートローダーの設定に rootdelay=60 カーネルブートパラメータを追加してください。あるいは、thin_check によるブロックマップのチェックをスキップし ([5] を参照) Initramfs を再生成してください:\n\n```\n/etc/lvm/lvm.conf\n```\n\n```\nthin_check_options = [ \"-q\", \"--clear-needs-check-flag\", \"--skip-mappings\" ]\n```\n\n"
    },
    {
      "title": "シャットダウンが遅くなる",
      "level": 3,
      "content": "RAIDやスナップショット、シンプロビジョニングを使用していてシャットダウンが遅くなる場合、lvm2-monitor.service が起動していることを確認してください。FS#50420 を参照。\n\n"
    },
    {
      "title": "シンプロビジョニングされたスワップボリューム上にハイバネートする",
      "level": 3,
      "content": "サスペンドとハイバネート#thinly-provisioned LVM ボリュームへのハイバネーション を参照してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- SourceWare.org の LVM2 Resource Page\n- Gentoo:LVM\n- Red Hat Enterprise 9: 論理ボリュームの設定および管理\n- Ubuntu LVM Guide Part 1Part 2 details snapshots\n\n"
    }
  ]
}