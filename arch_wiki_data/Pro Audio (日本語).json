{
  "title": "Pro Audio (日本語)",
  "url": "https://wiki.archlinux.org/title/Pro_Audio_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- サウンドシステム\n- JACK\n- リアルタイムカーネル\n- envy24control\n\nこの記事では、recording、ミキシングや再生、さらには合成や音の生成に使うためのシステムの設定方法について説明します。これらの活動はprofessional audio（プロオーディオ）という用語に包含され、一般的に低 latency パフォーマンスを必要とします。\n\n映像制作やゲームに比べれば、ほとんどの用途でそれほどハイエンドなハードウェアは必要ありません。2012 年後半以降に製造されたほとんどのコンピュータは、プロオーディオ用に最適化することができます。詳しくは Ardour マニュアルの The Right Computer System for Digital Audio のページを参照してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 はじめに 1.1 システムの設定 1.1.1 チェックリスト 1.2 JACK 1.2.1 FireWire 1.2.2 Jack Flash 1.2.3 Quickscan Jack スクリプト 1.2.4 デスクトップ効果と JACK 1.2.5 一般的なサンプル\n- 2 リアルタイムカーネル 2.1 カーネルパッケージ\n- 3 MIDI\n- 4 環境変数\n- 5 ヒントとテクニック‎\n- 6 ハードウェア 6.1 M-Audio Delta 1010 6.2 M-Audio Fast Track Pro 6.3 PreSonus Firepod 6.4 PreSonus AudioBox USB 6.5 Tascam US-122 6.6 RME Babyface\n- 7 制限ソフトウェア 7.1 Steinberg の SDK\n- 8 Linux と Arch Linux Pro Audio のニュース\n- 9 Mailing lists\n- 10 IRC\n- 11 参照\n\n- 1.1 システムの設定 1.1.1 チェックリスト\n- 1.2 JACK 1.2.1 FireWire 1.2.2 Jack Flash 1.2.3 Quickscan Jack スクリプト 1.2.4 デスクトップ効果と JACK 1.2.5 一般的なサンプル\n\n- 1.1.1 チェックリスト\n\n- 1.2.1 FireWire\n- 1.2.2 Jack Flash\n- 1.2.3 Quickscan Jack スクリプト\n- 1.2.4 デスクトップ効果と JACK\n- 1.2.5 一般的なサンプル\n\n- 2.1 カーネルパッケージ\n\n- 6.1 M-Audio Delta 1010\n- 6.2 M-Audio Fast Track Pro\n- 6.3 PreSonus Firepod\n- 6.4 PreSonus AudioBox USB\n- 6.5 Tascam US-122\n- 6.6 RME Babyface\n\n- 7.1 Steinberg の SDK\n\n"
    },
    {
      "title": "はじめに",
      "level": 2,
      "content": "主要なプロオーディオアプリケーションはすでに公式やコミュニティーの Arch Linux リポジトリから利用することができます。リポジトリにないアプリケーションについては、バイナリリポジトリを追加するか (下を参照) もしくはコンパイルしたいなら AUR を検索してください。上流のリリースを直接ビルドしてもいいですが、それは LFS を動かすのとあまり変わりありません。\n\nまずは JACK をインストールしてください。\n\nフル機能のプロオーディオシステムを作るために以下のパッケージからインストールし始めると良いでしょう:\n\n- qjackctl\n- patchage\n- ardour\n- qtractor\n- hydrogen\n- musescore\n- rosegarden\n- qsynth\n- jsampler\n- lmms\n- calf\n- dssi\n- guitarix2[リンク切れ: 置換パッケージ: guitarix]\n\nAUR からインストールできる他のパッケージも必要になるかもしれません:\n\n- qsampler (Linuxsampler も参照)\n- mhwaveeditAUR\n- carla\n- rakarrack-gitAUR\n- xcfaAUR[リンク切れ: パッケージが存在しません]\n- yoshimi\n- wineasioAUR\n- vst-bridge\n\nアプリケーション一覧/マルチメディア#オーディオシステムやアプリケーション一覧/マルチメディア#サウンド編集も見て下さい。\n\n"
    },
    {
      "title": "システムの設定",
      "level": 3,
      "content": "以下のシステムの最適化がよく使われています:\n\n- ユーザーを audio グループに追加する。\n- threadirqs カーネルパラメータを追加する。\n- linux-rt カーネルをインストールする。\n- cpufreq の governor を performance に設定する。\n- noatime をファイルシステムのマウントオプションに追加する (パフォーマンスの最大化を参照)。\n\nリアルタイムの設定は大部分が自動化されています。リアルタイムアクセスのために /etc/security/limits.conf などのファイルを編集する必要はもうありません。とはいえ、設定を変更する必要があるときは、/etc/security/limits.d/99-audio.conf や /usr/lib/udev/rules.d/40-hpet-permissions.rules を見て下さい (これらのファイルは jack や jack2 に含まれています)。さらに、RTC の最大割り込み周波数 (デフォルトは 64 Hz) を増やすには起動時に次を実行するようにしてください:\n\n```\necho 2048 > /sys/class/rtc/rtc0/max_user_freq\necho 2048 > /proc/sys/dev/hpet/max-user-freq\n```\n\nデフォルトでは、swappiness によって定義されるスワップの頻度は 60 に設定されています。この数字を 10 にまで減らすことで、システムはディスクへの書き込みをしにくくなります。また、ファイルの変更を監視してアプリケーションにそれを報告する inotify というものがあります。大量の音声データを扱う場合、多くの対象を監視する必要がでるため、監視対象の上限を増やす必要があります。どちらの設定も /etc/sysctl.d/99-sysctl.conf で調整ができます。\n\n```\nvm.swappiness = 10\nfs.inotify.max_user_watches = 524288\n```\n\nPCI サウンドカードの PCI レイテンシタイマを最大化して他の全ての PCI 周辺機器のレイテンシタイマを上げるのも効果があります (デフォルトは 64 です)。\n\n```\n$ setpci -v -d *:* latency_timer=b0\n$ setpci -v -s $SOUND_CARD_PCI_ID latency_timer=ff # eg. SOUND_CARD_PCI_ID=03:00.0 (下を参照)\n```\n\nSOUND_CARD_PCI_ID は次のようにして取得できます:\n\n```\n$ lspci ¦ grep -i audio\n```\n\n```\n03:00.0 Multimedia audio controller: Creative Labs SB Audigy (rev 03)\n03:01.0 Multimedia audio controller: VIA Technologies Inc. VT1720/24 [Envy24PT/HT] PCI Multi-Channel Audio Controller (rev 01)\n```\n\n"
    },
    {
      "title": "チェックリスト",
      "level": 4,
      "content": "以下はマルチメディアシステムが動作しているかの確認です:\n\n- サウンドを正しく設定しましたか？ALSA や OSS を参照して下さい。\n\n```\n$ speaker-test\n```\n\n- audio グループに入っていますか？ALSA や OSS を参照して下さい。\n\n```\n$ groups | grep audio\n```\n\n- PulseAudio や OSS などがデバイスを認識していますか？\n\n```\n$ lsof +c 0 /dev/snd/pcm* /dev/dsp*\n```\n\nもしくは\n\n```\n$ fuser -fv /dev/snd/pcm* /dev/dsp*\n```\n\n- PAM-security や realtime が問題なく動作していますか？\n\n参照: リアルタイムプロセス管理#PAM が有効なログイン (KDM, GDM, Slim を使っていない場合は特に注意をしてください)\n\n- 全ての設定をした後に再起動しましたか？\n\n"
    },
    {
      "title": "JACK",
      "level": 3,
      "content": "ここでの目的はあなたの持っているハードウェアにあわせて、バッファサイズとピリオドの最適な組み合わせを見つけることです。Frames/Period = 256 が通常の初期値です。オンボードや USB デバイスを使っている場合は、Periods/Buffer = 3 を試してみて下さい。基本的に使われる値は以下のどれかです: 256/3, 256/2, 128/3。\n\nまた、サンプルレートをハードウェアのサンプルレートと一致させて下さい。デバイスがサポートしているサンプル・ビットレートを確認するには:\n\n```\n$ cat /proc/asound/card0/codec#0\n```\n\ncard0 や codec#0 はあなたの使っているデバイスに置き換えて下さい。Extended ID の rates または VRA を見て下さい。今日の多くのデバイスで共通のサンプルレートは 48000 Hz です。他に 44100 Hz や 96000 Hz も一般的なレートです。\n\n外部の装置を使ってレコーディングやシーケンシングをする場合はたいてい、リアルタイムが必要不可欠になります。また、priority を最大に (少なくとも /etc/security/limits.d/99-audio.conf に定義するシステム制限よりも10は低く) 設定すると良いでしょう。\n\nあなたの設定したオプションを使って jack を起動してください:\n\n```\n$ /usr/bin/jackd -R -P89 -dalsa -dhw:0 -r48000 -p256 -n3\n```\n\nqjackctl, cadence, patchage で JACK の状態を確認したり設定を簡単にすることができます。\n\n参照: http://w3.linux-magazine.com/issue/67/JACK_Audio_Server.pdf\n\n"
    },
    {
      "title": "FireWire",
      "level": 4,
      "content": "JACK(2) は FFADO を使うようにビルドされているため、libffado パッケージで FFADO をインストールする必要があります。\n\nFireWire デバイスを動作させることができるかテストするには:\n\n- 適切なカーネルモジュールをロード:\n\n```\n# modprobe firewire-core firewire-ohci\n```\n\n- チップセットがデバイスを初期化できるか確認:\n\nhttp://www.ffado.org/?q=node/622\n\n- チップセットにデバイスを動作させることができるキャパシティがあるか確認:\n\n確実なことは言えません、Ricoh のチップセットは特にそうです (クロスプラットフォームの問題)。大抵の場合、あなたのデバイスは問題なく動作するでしょう。しかしながら、時には変な癖が起こるかもしれません。運が悪いと、地獄を見ることになるでしょう。\n\n```\nWarning (dice_eap.cpp)[1811] read: No routes found. Base 0x7, offset 0x4000\n```\n\n"
    },
    {
      "title": "Jack Flash",
      "level": 4,
      "content": "jack を設定した後、あなたは Flash の音が鳴らなくなったことに気づくでしょう。\n\njack で flash を使えるようにするには libflashsupport-jackAUR パッケージをインストールする必要があります。\n\nもしくは、jack の動作中に (Flash などの) Alsa のプログラムが音を出せるようにするという、より柔軟な方法を使うこともできます:\n\nまず alsa-plugins パッケージをインストールして Alsa の jack プラグインをインストールしてください。そして /etc/asound.conf (システム共通の設定) を編集 (または作成) し以下の行を記述してプラグインを有効にします:\n\n```\n# convert alsa API over jack API\n# use it with\n# % aplay foo.wav\n\n# use this as default\npcm.!default {\n    type plug\n    slave { pcm \"jack\" }\n}\n\nctl.mixer0 {\n    type hw\n    card 1\n}\n\n# pcm type jack\npcm.jack {\n    type jack\n    playback_ports {\n        0 system:playback_1\n        1 system:playback_2\n    }\n    capture_ports {\n        0 system:capture_1\n        1 system:capture_2\n    }\n}\n```\n\nコンピュータを再起動する必要はありません。alsa の設定ファイルを編集して、jack を起動してください。\n\n"
    },
    {
      "title": "Quickscan Jack スクリプト",
      "level": 4,
      "content": "おそらく、ほとんどの人は jack をリアルタイムモードで実行したいと思うでしょうが、それをするためには押さなくてはいけないスイッチやボタンが大量にあります。\n\nシステムを診断して jack をリアルタイムモードで正しく実行するのに欠けているものが何かを素早く見つける方法として Quickscan スクリプトを実行するのが良いでしょう。\n\nhttps://github.com/raboof/realtimeconfigquickscan/blob/master/realTimeConfigQuickScan.pl\n\nスクリプトの出力によって、システムに足りていないところ、詳しい情報が見られるところを指示してくれます。\n\n"
    },
    {
      "title": "デスクトップ効果と JACK",
      "level": 4,
      "content": "上のシステムの設定セクションに書かれている要素と realTimeConfigQuickScan.pl で確認できる設定に加えて、デスクトップ環境によって xruns や JACK の音声に問題が発生することもあります。特にメモリや CPU の消費が激しいデスクトップ効果を利用するデスクトップで発生します。JACK を使用する際はデスクトップ効果を無効化することを推奨します。軽量なデスクトップやウィンドウマネージャを使うことで最適なパフォーマンスを得ることができるでしょう。\n\n"
    },
    {
      "title": "一般的なサンプル",
      "level": 4,
      "content": "一般的な設定例はここにあります。\n\n"
    },
    {
      "title": "リアルタイムカーネル",
      "level": 2,
      "content": "しばらく前から、標準の Linux カーネルでリアルタイムの利用に十分足りることが証明されています。標準のカーネル (オプション CONFIG_PREEMPT=y、Arch ではデフォルト) は最悪の場合でも 10ms 以下のレイテンシ (ハードウェアでの割り込みの発生と、それに対応する割り込みスレッドが実行されるまでの間の時間) で動作することが可能ですが、デバイスドライバーによってはレイテンシがそれよりもかなり悪化する可能性があります。そのため使用しているハードウェアやドライバー (と要件) によっては、強力なリアルタイム性能を持ったカーネルが必要になるかもしれません。\n\nIngo Molnar と Thomas Gleixner による RT_PREEPMT パッチは、プロフェッショナルオーディオから工業制御の分野まで、ハードなリアルタイム処理を要求するアプリケーションにとって興味深い選択肢です。ほとんどのオーディオ特化 Linux ディストリビューションはこのパッチを適用したカーネルを載せています。realtime-preemptible カーネルは IRQ 処理スレッドのプライオリティを調整することを可能にして負担を気にしないスムーズなオーディオを実現するのに役立ちます。\n\n自分でカーネルをコンパイルするつもりならば、モジュールやオプションを削除すれば\"スリムで強靭な\"カーネルになるとは限らないことを覚えておいて下さい。カーネルイメージのサイズが減るというのは確かですが、今日のシステムにおいては、1995年の頃とは違ってあまり大きな問題ではないのです。\n\nどちらにしろ、以下を確認してください:\n\n- Timer Frequency は 1000Hz に設定 (CONFIG_HZ_1000=y; MIDI を使わない場合は無視してかまいません)\n- APM は DISABLED (CONFIG_APM=n; ハードウェアによっては厄介な問題があります - x86_64 ではデフォルト)\n\nIf you truly want a slim system, we suggest you go your own way and deploy one with static /devs. You should, however, set your CPU architecture. Selecting \"Core 2 Duo\" for appropriate hardware will allow for a good deal of optimisation, but not so much as you go down the scale.\n\n(リアルタイム) カーネルの一般的な問題:\n\n- ハイパースレッディング (if you suspect, disable in BIOS)\n\nすぐに実行・コンパイルできるパッチ済みのカーネルが ABS と AUR にあります。\n\n"
    },
    {
      "title": "カーネルパッケージ",
      "level": 3,
      "content": "以下のカーネルパッケージを使うことができます:\n\n- linux-rt\n- linux-rt-lts (長期サポート、安定リリース)\n\n上の2つは CONFIG_PREEMPT_RT パッチのあたった標準カーネルです。-ice には一部の人には不要でありながら、他の人にとっては役に立つようなパッチが含まれています。\n\n"
    },
    {
      "title": "MIDI",
      "level": 2,
      "content": "MIDI ハードウェアを使う場合は ALSA MIDI ドライバーをロードして下さい。以下の内容で /etc/modules-load.d/alsamidi.conf ファイルを作成することで、起動時に MIDI ドライバーがロードされるように設定できます:\n\n```\nsnd_seq_midi\n```\n\nMIDI を使う時は a2j をインストールすることを強く推奨します (a2jmidid)。alsa midi と jack midi のブリッジです。a2j を使うことで alsa midi にしか対応していないアプリケーションを jack midi しか使えないアプリケーションに接続することができます。また、Laditray で a2j を起動・停止できます。\n\n"
    },
    {
      "title": "環境変数",
      "level": 2,
      "content": "If you install things to non-standard directories, it is often necessary to set environment path variables so that applications know where to look (for plug-ins and other libraries). This usually affects only VST since users might have a Wine or external Windows location.\n\nWe would usually not have Linux plug-ins (LADSPA, LV2, DSSI, LXVST) beyond standard paths, so it is not necessary to export them. But if you do, be sure to include those standard paths as well since Arch does not do anything for dssi or ladspa, and some applications like dssi-vst will not look anywhere else if it finds predefined paths.\n\n```\n~/.bashrc\n```\n\n```\n...\nexport VST_PATH=/usr/lib/vst:/usr/local/lib/vst:~/.vst:/someother/custom/dir\nexport LXVST_PATH=/usr/lib/lxvst:/usr/local/lib/lxvst:~/.lxvst:/someother/custom/dir\nexport LADSPA_PATH=/usr/lib/ladspa:/usr/local/lib/ladspa:~/.ladspa:/someother/custom/dir\nexport LV2_PATH=/usr/lib/lv2:/usr/local/lib/lv2:~/.lv2:/someother/custom/dir\nexport DSSI_PATH=/usr/lib/dssi:/usr/local/lib/dssi:~/.dssi:/someother/custom/dir\n```\n\n"
    },
    {
      "title": "ヒントとテクニック‎",
      "level": 2,
      "content": "- 録音をするときは WiFi を無効化してブラウザなどの不要なプログラムを終了してください。WiFi を無効化することで JACK のパフォーマンスが安定するようになったという報告は多数あります。\n\n- USB 3 端子に USB のオーディオハードウェアを接続しても正しく動作しないことがあります。USB 2/1 端子に接続してみてください。\n\n- IRQ issues can occur and cause problems. An example is video hardware reserving the bus, causing needless interrupts in the system I/O path. See discussion at FFADO IRQ Priorities How-To. If you have a realtime or a recent kernel, you can use rtirq to adjust priorities of IRQ handling threads.\n\n- irqbalance デーモンは使用しないで下さい、もしくは注意して使って下さい [1]。\n\n- デーモンやプロセスによって突然 xruns が発生することがあります。必要ないのであれば kill しちゃってください。問答無用です。\n\n```\n$ ls /var/run/daemons\n$ top # or htop, ps aux, whatever you are comfortable with\n$ killall -9 $processname\n# systemctl stop $daemonname\n```\n\n- If you are facing a lot of xruns especially with nvidia, disable your GPU throttling. This can be done via the card's control applet and for nvidia it is \"prefer maximum performance\" (thanks to a mail in LAU by Frank Kober).\n\n- ALSA に関する詳細: http://www.volkerschatz.com/noise/alsa.html\n\n"
    },
    {
      "title": "M-Audio Delta 1010",
      "level": 3,
      "content": "M-Audio Delta シリーズのカードは VIA Ice1712 オーディオチップセットを搭載しています。このチップを使用するカードを使うには envy24control プログラムが含まれている alsa-tools パッケージをインストールする必要があります。Envy24control はハードウェアレベルのミキサー/コントローラーです。alsa-mixer を使うこともできますが無駄に苦労することになります。このセクションに MIDI をセットアップする方法や使い方に関する情報はないので注意してください。\n\nミキサーアプリケーションを開いて下さい:\n\n```\n$ envy24control\n```\n\nThis application can be more than a bit confusing; see envy24control for guidance on its use. That said, here is a very simple working setup for multitracking with Ardour.\n\n1. On the \"Monitor Inputs\" and \"Monitor PCMs\" tabs, set all monitor inputs and monitor PCM's to around 20.\n1. On the \"Patchbay / Router\" tab, set all to PCM out.\n1. On the \"Hardware Settings\" tab, verify that the Master Clock setting matches what is set in Qjackctl. If these do not match you will have xruns out of control!\n\n"
    },
    {
      "title": "M-Audio Fast Track Pro",
      "level": 3,
      "content": "The M-Audio Fast Track Pro is an USB 4x4 audio interface, working at 24bit/96kHz. Due to limitation of USB 1, this device requires additional setup to get access to all its features. Device works in one of two configuration:\n\n- Configuration 1, or \"Class compliant mode\" - with reduced functionality, only 16bit, 48kHz, analogue input (2 channels) and digital/analogue output (4 channels).\n- Configuration 2 - with access to all features of interface.\n\nCurrently with stock kernel it runs in configuration 2, but if you want to make sure in what mode you are, you can check kernel log for entries:\n\n```\nusb-audio: Fast Track Pro switching to config #2\nusb-audio: Fast Track Pro config OK\n```\n\nThe interface also needs extra step of cofiguration to switch modes. It is done using option device_setup during module loading. The recommended way to setup the interface is using file in modprobe.d:\n\n```\n/etc/modprobe.d/ftp.conf\n```\n\n```\noptions snd_usb_audio vid=0x763 pid=0x2012 device_setup=XXX index=YYY enable=1\n```\n\nwhere vid and pid are vendor and product id for M-Audio Fast Track Pro, index is desired device number and device_setup is desired device setup. Possible values for device_setup are:\n\nTable content:\ndevice_setup 値 | ビット深度 | 周波数 | アナログ出力 | デジタル出力 | アナログ入力 | デジタル入力 | IO モード\n0x0 | 16 bit | 48kHz | + | + | + | + | 4x4\n0x9 | 24 bit | 48kHz | + | + | + | - | 2x4\n0x13 | 24 bit | 48kHz | + | + | - | + | 2x4\n0x5 | 24 bit | 96kHz | * | * | * | * | 2x0 or 0x2\n\nThe 24 bit/96kHz mode is special: it provides all input/output, but you can open only one of 4 interfaces at a time. If you for example open output interface and then try to open second output or input interface, you will see error in kernel log:\n\n```\ncannot submit datapipe for urb 0, error -28: not enough bandwidth\n```\n\nwhich is perfectly normal, because this is USB 1 device and cannot provide enough bandwidth to support more than single (2 channel) destination/source of that quality at a time.\n\nDepending on the value of index it will setup two devices: hwYYY:0 and hwYYY:1, which will contain available inputs and outputs. First device is most likely to contain analog output and digital input, while second one will contain analog input and digital output. To find out which devices are linked where and if they are setup correctly, you can check /proc/asound/cardYYY/stream{0,1} . Below is list of important endpoints that will help in correctly identifying card connections (it easy to mistake analog and digital input or output connections before you get used to the device):\n\n```\nEP 3 (analgoue output = TRS on back, mirrored on RCA outputs 1 and 2 on back)\nEP 4 (digital output = S/PDIF output on back, mirrored on RCA outputs 3 and 4 on back)\nEP 5 (analogue input = balanced TRS or XLR microphone, unbalanced TS line on front)\nEP 6 (digital input = S/PDIF input on back)\n```\n\nThis .asoundrc file enables 24-bit IO on the fast-track pro (and I'm sure it could be modified to work with other 3-byte usb devices) within the context of jack's 32-bit interface while routing default alsa traffic to jack outputs on the audio interface. Alsa will be in S24_3BE mode but jack can plug S32_LE data in and out of the interface and other alsa programs will be able to plug almost anything into jack.\n\n```\n### ~/.asoundrc\n### default alsa config file, for a fast-track pro configured in 24-bit mode as so:\n### options snd_usb_audio device_setup=0x9\n### invoke jack with: (if you use -r48000, change the rate in the plugs as well)\n### $jackd -dalsa -P\"hw:Pro\" -C\"hw:Pro,1\" -r44100\n\n## setup input and output plugs so jack can write S24_3BE data to the audio interface\n\npcm.maud0 {\n\ttype hw\n\tcard Pro\n\t }\n\n#jack_out plug makes sure that S32_LE data can be written to hw:Pro\npcm.jack_out{\n\ttype plug\n\tformat S32_LE\n\tchannels 2\n\trate 44100\n\tslave pcm.maud0\n}\n\npcm.maud1 {\n\ttype hw\n\tcard Pro\n\tdevice 1\n}\n## jack_in plug makes sure that hw:Pro,1 can read S32_LE data\npcm.jack_in {\n\ttype plug\n\tformat S32_LE\n\tchannels 2\n\trate 44100\n\tslave pcm.maud1\n}\n#####\n# route default alsa traffic through jack system io\n\npcm.jack {\n    type jack\n    playback_ports {\n        0 system:playback_1\n        1 system:playback_2\n    }\n    capture_ports {\n        0 system:capture_1\n        1 system:capture_2\n    }\n} \npcm.amix {\n\ttype asym\n\tplayback.pcm \"jack\"\n\tcapture.pcm \"jack\"\n\t}\npcm.!default {\n\ttype plug\n\tslave.pcm amix\n}\n```\n\n"
    },
    {
      "title": "PreSonus Firepod",
      "level": 3,
      "content": "1. Startup: Either from command line or QjackCtl, the driver is called firewire.\n1. Specs: The card contains 8/8 preamp'ed XLR plus a stereo pair, in total 10 channels.\n1. Linking: Cards can be linked together without any problems.\n1. Hardware Settings: Nothing particular, tweak the settings in QjackCtl to your likings.\n\nVolume levels are hardware and routing can be done through QjackCtl, even with more cards linked together, this is not a problem. The ffadomixer does not work with this card yet, hopefully in the future we can control more aspects of the card through a software interface like that.\n\n"
    },
    {
      "title": "PreSonus AudioBox USB",
      "level": 3,
      "content": "1. Startup: It is called \"USB\" by ALSA.\n1. Specs: Two mono TRS+XLR in, two mono TRS out, MIDI in and out, plus separate stereo headphone jack. Knob controls for both inputs, for main out, and for headphone, four in all.\n1. Hardware: Works very well, audio and MIDI too. No software mixer controls at all.\n\n"
    },
    {
      "title": "Tascam US-122",
      "level": 3,
      "content": "この内容は US-122L には当てはまりません。\n\n1. 必要なパッケージ: alsa-tools alsa-firmware fxloadAUR\n1. udev ルール: 以下の rules ファイルを作成して、udev ルールをリロードしてください:\n\n```\n/etc/udev/rules.d/51-tascam-us-122.rules\n```\n\n```\nSUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idProduct}==\"8006\", ATTRS{idVendor}==\"1604\", RUN+=\"/bin/sh -c '/sbin/fxload -D %N -s /usr/share/alsa/firmware/usx2yloader/tascam_loader.ihx -I /usr/share/alsa/firmware/usx2yloader/us122fw.ihx'\"\nSUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idProduct}==\"8007\", ATTRS{idVendor}==\"1604\", RUN+=\"/bin/sh -c '/usr/bin/usx2yloader'\"\n```\n\nユニットを接続すれば、デバイスは動作するはずです。ソフトウェアミキサーコントロールはありません。\n\n"
    },
    {
      "title": "RME Babyface",
      "level": 3,
      "content": "alsa-utils, jack2, linux-rt を使うことで低遅延 (~5ms) で動作します。標準カーネルで ALSA だけを使用した場合、レイテンシを低くすると音が割れることがあります。\n\n動作させるには、Babyface のファームウェアバージョンが 200 以上である必要があります。バージョン 200 から Class Compliant Mode が導入されています。Class Compliant Mode に入るには USB で Babyface をコンピュータに接続するときに \"Select\" と \"Recall\" ボタンを押して下さい。それで認識されるはずです。\n\n認識されているか確認するには:\n\n```\ngrep -i baby /proc/asound/cards\n```\n\nClass Compliant Mode に関する詳細は RME のウェブサイトを見て下さい。全ての機能を説明した PDF が存在します。\n\nThe Babyface does not need any special Jack Settings. But if you want to use the built in MIDI In/Out then you need to set the \"MIDI Driver\" to \"seq\" and optionally disable \"Enable Alsa Sequencer Support\" to use it in combination with other MIDI Devices (a USB Midi Keyboard for example).\n\n"
    },
    {
      "title": "Steinberg の SDK",
      "level": 3,
      "content": "It is very clear - we can distribute neither the VST nor the ASIO headers in binary package form. However, whenever you are building a program which would host Windows .dll VST plug-ins, check for the following hints (that do not require use of any SDK):\n\n- dssi-vst\n- fst\n- vestige\n\nWith that said, if you are building a program which would host native .so VST plug-ins, then there is no escape. For such cases, Arch yet again allows us to maintain a uniform local software database. We can \"install\" the SDK system-wide - you simply have to download it yourself and place it in the packaging directory.\n\nGet them from AUR\n\n"
    },
    {
      "title": "Linux と Arch Linux Pro Audio のニュース",
      "level": 2,
      "content": "- Build a Serious Multimedia Production Workstation with Arch - Linux.com の記事 (2012年7月)\n\n- An Arch Tale - 元ミュージシャンで作家の Dave Phillips によって書かれた記事 (2011年10月)\n\n- From Windows to Linux: a sound decision - Geoff \"songshop\" Beasley のインタビュー (2010年2月)\n\n"
    },
    {
      "title": "Mailing lists",
      "level": 2,
      "content": "- Arch Linux Pro-audio Discussion about real-time multimedia, including (semi-)pro audio and video\n- Linux Audio Developer The Linux pro-audio related mailing list with much traffic and a huge subscriber community of mainly developers.\n- Linux Audio User The Linux pro-audio related mailing list with much traffic and a huge subscriber community of users and developers.\n\n"
    },
    {
      "title": "IRC",
      "level": 2,
      "content": "- #archlinux-proaudio - Arch Linux pro-audio channel\n- #lau - General Linux Audio channel for users\n- #lad - General Linux Audio channel for developers\n- #jack - Development and support related to JACK audio system\n- #lv2 - Development and support related to the LV2 plugin format\n- #ardour - Discussion and support relating to the Ardour DAW\n- #opensourcemusicians - Large general OSS musician discussion channel\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- 音声 A comprehensive list of audio applications on Arch Linux\n- リアルタイムカーネル\n- AUR meta packages: proaudio-metaAUR, soundfonts-aur-metaAUR, lv2-plugins-aur-metaAUR\n- User repositories: heftig, proaudio\n- awesome-linuxaudio A list of software and resources for professional audio/video/live events production on the Linux platform\n- Realtime The Linux Foundation wiki on the PREEMPT_RT patches\n- Multimedia and Games / Arch Linux Forums\n- ArchAudio - the now legacy - pro-audio related package repository overlay (some history)\n\n"
    }
  ]
}