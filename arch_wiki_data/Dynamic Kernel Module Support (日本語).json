{
  "title": "Dynamic Kernel Module Support (日本語)",
  "url": "https://wiki.archlinux.org/title/Dynamic_Kernel_Module_Support_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Wikipedia より:\n\nこれはユーザーが会社・プロジェクト・パッケージメンテナが新しいバージョンのモジュールをリリースするのを待つ必要がないということを意味します。Pacman#フックが導入されたことで、カーネルがアップグレードされたときにモジュールのリビルドは自動的に処理されるようになっています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 アップグレード\n- 3 使用方法 3.1 モジュールの確認 3.2 モジュールのリビルド 3.3 モジュールの削除\n- 4 DKMS パッケージの作成\n- 5 初期 RAM ディスク\n- 6 参照\n\n- 3.1 モジュールの確認\n- 3.2 モジュールのリビルド\n- 3.3 モジュールの削除\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "dkms パッケージとターゲットカーネル/カーネルヘッダーをインストールしてください。例えば、デフォルトの linux カーネルの場合は、linux-headers になります。他のカーネルの場合は、それぞれ独自のヘッダーパッケージがあります。\n\nカーネルのソースツリーの外にあるモジュールについてはかなりの数の DKMS のパッケージが作られています。いくらかは 公式リポジトリ にも存在しますが、ほとんどのモジュールは AUR にあります。\n\n"
    },
    {
      "title": "アップグレード",
      "level": 2,
      "content": "大抵はカーネルのアップグレード時に DKMS モジュールのリビルドが行われますが、リビルドが失敗する可能性がときどきあります。pacman の出力をよく見てください。起動するのに DKMS モジュールに依存している環境の場合や公式リポジトリに存在しないカスタムカーネルで DKMS を使用する場合は特に重要です。\n\nカーネルの変更に対処したり、バグを修正したり、必要な機能を追加するため、再起動する前に DKMS パッケージをアップグレードするようにしてください。\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "DKMS を手動で使用する方法です。\n\nタブ補完は次を実行することで使えます:\n\n```\n# source /usr/share/bash-completion/completions/dkms\n```\n\n"
    },
    {
      "title": "モジュールの確認",
      "level": 3,
      "content": "モジュールの現在の状態、バージョンやツリーのカーネルを確認するには:\n\n```\n$ dkms status\n```\n\n"
    },
    {
      "title": "モジュールのリビルド",
      "level": 3,
      "content": "全てのモジュールをリビルド:\n\n```\n# dkms autoinstall\n```\n\nもしくは特定のカーネルのモジュールをリビルド:\n\n```\n# dkms autoinstall -k 3.16.4-1-ARCH\n```\n\n特定のモジュールをビルド (例: 現在使用しているカーネル):\n\n```\n# dkms install -m nvidia -v 334.21\n```\n\nもしくは:\n\n```\n# dkms install nvidia/334.21\n```\n\n全てのカーネルでモジュールをビルドするには:\n\n```\n# dkms install nvidia/334.21 --all\n```\n\n"
    },
    {
      "title": "モジュールの削除",
      "level": 3,
      "content": "モジュールを削除するには (古いモジュールが勝手に削除されることはありません):\n\n```\n# dkms remove -m nvidia -v 331.49 --all\n```\n\nもしくは:\n\n```\n# dkms remove nvidia/331.49 --all\n```\n\ndkms パッケージを削除した場合、モジュールのビルドファイルに関連する情報が消失します。その場合 /usr/lib/modules/KERNELVERSION-ARCH から使用しないファイルやディレクトリを削除してください。\n\n"
    },
    {
      "title": "DKMS パッケージの作成",
      "level": 2,
      "content": "DKMS パッケージガイドライン を見てください。\n\n"
    },
    {
      "title": "初期 RAM ディスク",
      "level": 2,
      "content": "初期 RAM ディスク 内で使用されているカーネルモジュールを DKMS を通してインストールした場合(例: zfs-dkmsAUR)、pacman フックを記述して初期 RAM ディスクイメージの再生成手順を自動化できます。\n\n例えば、linux と mkinitcpio を使用している場合に、zfs-dkmsAUR がアップグレードされる度に ZFS モジュールを更新するには:\n\n```\n/etc/pacman.d/hooks/90-mkinitcpio-dkms-linux.hook\n```\n\n```\n[Trigger]\nOperation=Install\nOperation=Upgrade\nOperation=Remove\nType=Package\nTarget=zfs-dkms\nTarget=linux\n\n[Action]\nDescription=Update dkms modules in Linux initcpio\nDepends=mkinitcpio\nWhen=PostTransaction\nNeedsTargets\nExec=/bin/sh -c 'while read -r trg; do case $trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -p linux'\n```\n\n他のカーネルをインストールしている場合には、フックに target を追加したり、フックの追加コピーを作成したりもできます。90- 接頭辞は、フックが DKMS フックの後に実行されるようにするために必要であることに注意してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Linux Journal: Exploring Dynamic Kernel Module Support\n\n"
    }
  ]
}