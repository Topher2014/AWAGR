{
  "title": "File permissions and attributes (Русский)",
  "url": "https://wiki.archlinux.org/title/File_permissions_and_attributes_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Пользователи и группы\n- umask (Русский)\n- Списки управления доступом\n- Capabilities (Русский)\n- Расширенные атрибуты\n\nФайловые системы используют разрешения и атрибуты для регулирования уровня взаимодействия, которые системные процессы могут иметь с файлами и каталогами.\n\n"
    },
    {
      "title": "Просмотр разрешений",
      "level": 2,
      "content": "Чтобы посмотреть разрешения (или права файла), используйте команду ls с опцией -l для просмотра содержимого каталога, например:\n\n```\n$ ls -l /путь/к/каталогу\n```\n\n```\nитого 128\n-rw-rw-r-- 1 archie archie  5120 апр 27 08:28 customers.ods\n-rw-r--r-- 1 archie archie  3339 апр 27 08:28 todo\n-rwxr-xr-x 1 archie archie  2048 май  6 12:56 myscript.sh\ndrwxr-xr-x 6 archie archie  4096 июл  5 17:37 Документы\ndrwxr-xr-x 2 archie archie  4096 июл  5 13:45 Загрузки\ndrwxr-xr-x 2 archie archie  4096 июл  5 21:03 Рабочий стол\n```\n\nЗдесь мы должны сосредоточиться на первом столбце. В качестве примера рассмотрим значение drwxrwxrwx+, каждый символ которого объясняется в следующих таблицах:\n\nTable content:\nd | rwx | rwx | rwx | +\nОбозначет тип файла, технически не относится к разрешениям. Смотрите типы файлов (UNIX) для ознакомления со всеми возможными значениями. | Разрешения, которые имеет владелец к файлу (объяснения ниже). | Разрешения, которые имеет группа к файлу (объяснения ниже). | Разрешения, которые имеют все остальные пользователи к файлу (объяснения ниже). | Одиночный символ, который указывает на применение альтернативного метода доступа. Пробел указывает на отсутствие альтернативного метода доступа. Символ . обозначает файл с контекстом безопасности, но без другого альтернативного метода доступа. Файл с любой другой комбинацией альтернативных методов доступа помечается символом +, например, если используются списки управления доступом.\n\nКаждая из трёх триад разрешений (rwx в примере выше) может состоять из следующих символов:\n\nTable content:\n | Символ | Влияние на файлы | Влияние на каталоги\nРазрешение на чтение (первый символ) | - | Файл не может быть прочитан. | Содержимое каталога не может быть показано.\nr | Файл можно прочитать. | Содержимое каталога может быть показано.\nРазрешение на запись (второй символ) | - | Файл не может быть изменён. | Содержимое каталога не может быть изменено.\nw | Файл может быть изменён. | Содержимое каталога может быть изменено (создание новых файлов или каталогов; переименовывание и удаление существующих файлов или каталогов); дополнительно требуется разрешение на выполнение, в противном случае, это разрешение не действует.\nРазрешение на выполнение (третий символ) | - | Файл не может быть выполнен. | Каталог не может быть доступен с помощью cd.\nx | Файл может быть выполнен. | Доступ к каталогу можно получить с помощью cd. Это единственный бит, который на практике можно считать «наследуемым» от каталогов-предков; фактически, если какой-либо каталог в пути не имеет установленного бита x, конечный файл или каталог также оказывается недоступен независимо от его разрешений; подробнее смотрите path_resolution(7).\ns | Показывает установленный suid бит: в триаде пользователя — setuid; в триаде группы — setgid; в триаде остальных не встречается; также подразумевает, что установлен бит x.\nS | То же, что и s, но бит x не установлен; редко встречается у обычных файлов, бесполезен для каталогов.\nt | Sticky bit; встречается только в триаде остальных; также подразумевает, что установлен бит x.\nT | То же, что и t, но бит x не установлен; редко встречается у обычных файлов.\n\nСмотрите info Coreutils -n \"Mode Structure\" и chmod(1) для более подробной информации.\n\n"
    },
    {
      "title": "Примеры",
      "level": 3,
      "content": "Давайте посмотрим несколько примеров для лучшего понимания:\n\n```\ndrwx------ 6 archie archie  4096 июл  5 17:37 Документы\n```\n\nArchie имеет полный доступ к каталогу Документы. Он может просматривать, создавать, переименовывать и удалять любые файлы в Документах, независимо от прав доступа к файлам. Его возможность получить доступ к файлам зависит от разрешений самого файла.\n\n```\ndr-x------ 6 archie archie  4096 июл  5 17:37 Документы\n```\n\nArchie имеет полный доступ, за исключением создания, переименовывания и удаления файлов. Он может просматривать список файлов и (если позволяют разрешения к файлам) может получить доступ к существующему файлу в Документах.\n\n```\nd-wx------ 6 archie archie  4096 июл  5 17:37 Документы\n```\n\nArchie не может выполнить ls в каталоге Документы, но если он знает имя существующего файла, то он может просмотреть, переименовать и удалить или (если позволяют разрешения) получить доступ к нему. Также он может создавать новые файлы.\n\n```\nd--x------ 6 archie archie  4096 июл  5 17:37 Документы\n```\n\nArchie может только (если позволяют разрешения файла) получить доступ к тем файлам в каталоге Документы, о которых он знает. Он не может просмотреть уже существующие файлы или создавать, переименовывать и удалить любой из них.\n\nИмейте в виду, что в этих примерах были рассмотрены права доступа к каталогу, но это не имеет ничего общего с правами доступа к отдельным файлам. При создании нового файла выполняется изменение каталога, в котором он создаётся. Вот почему нужно иметь разрешение на запись в каталог.\n\nДавайте посмотрим на другой пример, на этот раз файл, а не каталог:\n\n```\n-rw-r--r-- 1 archie web  5120 июн 27 08:28 foobar\n```\n\nЗдесь мы видим первой буквой не d, а -. Таким образом мы знаем, что это файл, а не каталог. Благодаря разрешению rw- владелец может читать и писать, но не выполнять. Может показаться странным, что у владельца нет всех трёх разрешений, но разрешение x не требуется, так как это файл текста/данных, который может быть прочитан текстовым редактором, например Gedit, EMACS или программным обеспечением подобно R, но сам по себе файл не является исполняемым (хотя если он содержит что-то вроде программного кода на Python, то тогда запустить такой файл вполне возможно). Для группы установлены права доступа r--, поэтому у группы есть возможность читать файл, но не записывать и не редактировать его — фактически это установка чего-либо только для чтения. Мы видим, что подобные разрешения применимы и ко всем остальным пользователям.\n\n"
    },
    {
      "title": "Изменение разрешений",
      "level": 2,
      "content": "chmod — это команда в Linux и других Unix-подобных операционных системах, которая позволяет изменять права доступа к файлам или каталогам.\n\n"
    },
    {
      "title": "Текстовый метод",
      "level": 3,
      "content": "Для изменения прав доступа — или режима доступа — к файлу используйте команду chmod в терминале. Ниже приведена общая структура команды:\n\n```\nchmod кто=разрешения имя_файла\n```\n\nГде кто — любая из нескольких букв, каждая из которых обозначает, кому дано разрешение. Они следующие:\n\n- u (user): пользователь, который является владельцем файла.\n- g (group): группа пользователей, которой принадлежит этот файл.\n- o (other): другие пользователи, то есть все остальные.\n- a (all): все сразу; используйте вместо ugo.\n\nПрава доступа обозначаются так же, как описано в разделе #Просмотр разрешений (r, w и x).\n\nТеперь посмотрите на некоторые примеры использования этой команды. Предположим, вы захотели сильно защитить каталог Документы и отказать всем, кроме себя, в разрешении на чтение, запись и выполнение (или, в данном случае, поиск/просмотр) внутри него:\n\nДо: drwxr-xr-x 6 archie web 4096 июл 5 17:37 Документы\n\n```\n$ chmod g= Документы\n$ chmod o= Документы\n```\n\nПосле: drwx------ 6 archie web 4096 июл 6 17:32 Документы\n\nЗдесь, поскольку вы хотите отказать в разрешениях, вы не ставите никаких букв после =, где будут введены разрешения. Из этого видно, что только разрешения владельца — это rwx, а все остальные разрешения — это -.\n\nРазрешения можно восстановить:\n\nДо: drwx------ 6 archie web 4096 июл 6 17:32 Документы\n\n```\n$ chmod g=rx Документы\n$ chmod o=rx Документы\n```\n\nПосле: drwxr-xr-x 6 archie web 4096 июл 6 17:32 Документы\n\nСледующий пример: вы хотите предоставить права на чтение и выполнение группе и другим пользователям, поэтому вы ставите следующие буквы для этих прав (r и x) после =, не оставляя пробелов.\n\nВы можете упростить это, поместив более одной буквы кто в одну и ту же команду, например:\n\n```\n$ chmod go=rx Документы\n```\n\nРассмотрим ещё один пример: предположим, вы хотите изменить файл foobar так, чтобы у вас были разрешения на чтение и запись, коллеги из группы web, которые хотят совместно работать с файлом foobar, также могли читать и записывать файл, а все остальные пользователи могли только читать его:\n\nДо: -rw-r--r-- 1 archie web 5120 июн 27 08:28 foobar\n\n```\n$ chmod g=rw foobar\n```\n\nПосле: -rw-rw-r-- 1 archie web 5120 июн 27 08:28 foobar\n\nЭто точно такой же пример, как и первый, но с файлом, а не каталогом, и вы предоставляете разрешение на запись (просто для того, чтобы привести пример предоставления каждого разрешения).\n\n"
    },
    {
      "title": "Сокращения для текстового метода",
      "level": 4,
      "content": "Команда chmod позволяет добавлять и вычитать разрешения из существующих, используя + или - вместо =. Это отличается от описанных выше команд, которые по сути полностью заменяют разрешения (например, чтобы изменить разрешения с r-- на rw-, вам всё равно нужно указать r и w после = в вызове команды chmod. Если вы пропустите r, то = перезапишет разрешения и таким образом удалит разрешение r. Использование + и - позволяет избежать этого, добавляя или отнимая разрешения из текущего набора разрешений).\n\nДавайте попробуем применить + и - на предыдущем примере добавления разрешений на запись в группу:\n\nДо: -rw-r--r-- 1 archie web 5120 июн 27 08:28 foobar\n\n```\n$ chmod g+w foobar\n```\n\nПосле: -rw-rw-r-- 1 archie web 5120 июн 27 08:28 foobar\n\nЕщё пример, который запрещает запись абсолютно всем (a):\n\nДо: -rw-rw-r-- 1 archie web 5120 июн 27 08:28 foobar\n\n```\n$ chmod a-w foobar\n```\n\nПосле: -r--r--r-- 1 archie web 5120 июн 27 08:28 foobar\n\nТакже есть специальный режим X: это не настоящий файловый режим, но он часто используется вместе с опцией -R, чтобы добавить бит выполнения только каталогам, но оставить его нетронутым у файлов. Типичный пример использования:\n\n```\n$ chmod -R a+rX ./data/\n```\n\n"
    },
    {
      "title": "Копирование разрешений",
      "level": 4,
      "content": "С помощью chmod можно взять разрешения у одного класса, например владельца, и выставить те же разрешения группе или даже всем. Для этого вместо r, w или x после = поставьте нужную вам букву кто. Например:\n\nДо: -rw-r--r-- 1 archie web 5120 июн 27 08:28 foobar\n\n```\n$ chmod g=u foobar\n```\n\nПосле: -rw-rw-r-- 1 archie web 5120 июн 27 08:28 foobar\n\nЭта команда по сути означает «изменить разрешения группы (g=), чтобы они были такими же, как у владельца (=u)». Обратите внимание, что вы не можете скопировать одновременно несколько разрешений или добавить новые, то есть такая команда:\n\n```\n$ chmod g=wu foobar\n```\n\nвыдаст ошибку.\n\n"
    },
    {
      "title": "Числовой метод",
      "level": 3,
      "content": "Команда chmod позволяет задавать разрешения в виде чисел.\n\nИспользование чисел — это ещё один метод, который позволяет редактировать разрешения одновременно для владельца, группы и остальных, а также биты setuid, setgid и sticky. Основная структура такова:\n\n```\n$ chmod xxx путь\n```\n\nгде xxx это три цифры, каждая из которых может иметь значение от 0 до 7. Первая цифра задаёт разрешения для владельца, вторая — для группы, а третья — для всех остальных.\n\nПрава r, w и x соответствуют следующим числам:\n\n```\nr=4\nw=2\nx=1\n```\n\nЧтобы объединить нужные права в одно трёхзначное число, нужно суммировать соответствующие значения. Например, если вы хотите предоставить владельцу каталога права на чтение, запись и выполнение, а группе и всем остальным — только права на чтение и выполнение, то числовые значения будут выглядеть следующим образом:\n\n- Владелец: rwx=4+2+1=7\n- Группа: r-x=4+0+1=5\n- Остальные: r-x=4+0+1=5\n\n```\n$ chmod 755 путь\n```\n\nЭто эквивалентно следующим двум командам:\n\n```\n$ chmod u=rwx путь\n$ chmod go=rx путь\n```\n\nЧтобы посмотреть текущие права в числовом виде, можно использовать команду stat(1):\n\n```\n$ stat -c %a путь\n```\n\nгде %a задаёт числовой формат вывода.\n\nБольшинство каталогов имеют значение 755, которое разрешает чтение, запись и выполнение для владельца, но запрещает запись для всех остальных, а файлы обычно имеют значение 644, разрешающее чтение и запись для владельца, но только чтение для всех остальных; так как большинство файлов не являются исполняемыми, то бит выполнения x у них не установлен.\n\nЧтобы увидеть этот метод в действии, рассмотрим тот же пример с файлом, который уже использовался, но вместо него используем числовой метод:\n\nДо: -rw-r--r-- 1 archie web 5120 июн 27 08:28 foobar\n\n```\n$ chmod 664 foobar\n```\n\nПосле: -rw-rw-r-- 1 archie web 5120 июн 27 08:28 foobar\n\nДля исполняемого файла вы могли бы задать 774, если бы вы хотели предоставить разрешение на исполнение владельцу и группе. Если бы вы хотели, чтобы у всех было разрешение только на чтение, число было бы 444. Если рассматривать r как 4, w как 2 и x как 1, то это, вероятно, самый простой способ вычислить числовые значения для использования chmod xxx путь, но существует также двоичный метод, при котором каждое разрешение рассматривается как двоичное число, а затем они объединяются в обычное десятичное число. Этот способ немного более запутанный, но для полноты картины он здесь приведён.\n\nРассмотрим такой набор разрешений:\n\n```\n-rwxr-xr--\n```\n\nЕсли вы пропишите 1 на месте каждого выданного разрешения и 0 на месте отсутствующих разрешений, получится такое двоичное число:\n\n```\n-rwxrwxr-x\n 111111101\n```\n\nЗатем можно преобразовать двоичные числа:\n\n```\n000=0\t    100=4\n001=1\t    101=5\n010=2\t    110=6\n011=3\t    111=7\n```\n\nИтоговое значение получается 775.\n\nДопустим, мы хотим удалить разрешение на запись из группы:\n\n```\n-rwxr-xr-x\n 111101101\n```\n\nИтоговое значение будет равно 755, и вы можете использовать команду chmod 755 имяфайла, чтобы снять разрешение на запись. Обратите внимание, что вы получите одно и то же трёхзначное число независимо от того, какой метод вы используете. Какой способ использовать — текст или цифры — зависит от личных предпочтений и скорости набора текста. Если вы хотите вернуть файлу или каталогу права по умолчанию, например, разрешение на чтение и запись (и выполнение) для владельца, но запретить запись для всех остальных, может быть быстрее использовать chmod 755/644 имяфайла. Однако если вы меняете разрешения на что-то нестандартное, проще и быстрее использовать текстовый метод, а не выполнять преобразование в числа, в процессе которого можно случайно ошибиться. Для пользователя, который использует chmod изредка, вероятно, нет существенной разницы в скорости использования обоих методов.\n\nВы также можете использовать числовой метод для установки битов setuid, setgid и sticky, используя четыре цифры.\n\n```\nsetuid=4\nsetgid=2\nsticky=1\n```\n\nНапример, chmod 2777 имяфайла выдаст всем права на чтение/запись/выполнение и включит бит setgid.\n\n"
    },
    {
      "title": "Массовое изменение разрешений",
      "level": 3,
      "content": "Как правило, каталоги и файлы не должны иметь одинаковые разрешения. Если необходимо массово изменить дерево каталогов, используйте find для выборочного изменения чего-то одного.\n\nЧтобы выставить разрешения 755 только каталогам:\n\n```\n$ find каталог -type d -exec chmod 755 {} +\n```\n\nЧтобы выставить разрешения 644 только файлам в каталоге:\n\n```\n$ find каталог -type f -exec chmod 644 {} +\n```\n\n"
    },
    {
      "title": "Изменение владельца",
      "level": 2,
      "content": "chown изменяет владельца файла или каталога, что в некоторых случаях быстрее и проще, чем изменение прав доступа.\n\nРассмотрим следующий пример: создание нового раздела с помощью GParted для резервного копирования данных. Gparted делает всё это от имени root, поэтому по умолчанию всё принадлежит root. Всё это хорошо, но обычные пользователи не смогут записать данные в смонтированный раздел.\n\n```\nbrw-rw---- 1 root disk 8,    9 июл  6 16:02 sda9\ndrwxr-xr-x 5 root root    4096 июл  6 16:01 Backup\n```\n\nВ данном примере устройством в /dev владеет root, как и каталогом для монтирования (/media/Backup). Чтобы изменить владельца каталога, можно сделать следующее:\n\nДо: drwxr-xr-x 5 root root 4096 июл 6 16:01 Backup\n\n```\n# chown archie /media/Backup\n```\n\nПосле: drwxr-xr-x 5 archie root 4096 июл 6 16:01 Backup\n\nТеперь новый владелец archie может записывать данные в этот раздел без изменения разрешений (потому что изначально уже стояли права rwx, разрешающие запись владельцу).\n\n- chown всегда сбрасывает биты setuid и setgid.\n- Обычные пользователи не могут использовать chown для «передачи» файлов, которыми они владеют, другому пользователю.\n\n"
    },
    {
      "title": "Списки управления доступом",
      "level": 2,
      "content": "Списки управления доступом (Access Control Lists, ACL) предоставляют дополнительный, более гибкий механизм разрешений для файловых систем, позволяя устанавливать разрешения для любого пользователя или группы на любой файл.\n\n"
    },
    {
      "title": "Umask",
      "level": 2,
      "content": "Утилита umask используется для управления маской режима, которая определяет начальное значение битов разрешения файлов для создаваемых файлов.\n\n"
    },
    {
      "title": "Атрибуты файла",
      "level": 2,
      "content": "Помимо битов режима файла, которые управляют разрешениями пользователей и групп на чтение, запись и выполнение, некоторые файловые системы поддерживают атрибуты файла, которые позволяют дополнительно настраивать допустимые операции с файлами.\n\nПакет e2fsprogs содержит программы lsattr(1) и chattr(1), которые позволяют просмотреть и изменить атрибуты файла соответственно.\n\nЗдесь приведены некоторые полезные атрибуты. Не все файловые системы поддерживают каждый упомянутый атрибут.\n\n- a - append only: Файл может быть открыт только для добавления.\n- c - compressed: Включить сжатие на уровне файловой системы для файла.\n- i - immutable: Не может быть изменён, удалён или переименован. Может быть установлен только пользователем root.\n- j - data journaling: Использовать журнал для записи данных файла так же, как и метаданных.\n- m - no compression: Отключить сжатие на уровне файловой системы для файла.\n- A - no atime update: Время получения доступа к файлу не будет обновляться.\n- C - no copy on write: Отключение copy-on-write на поддерживающих это файловых системах.\n\nПолный список атрибутов и подробную информацию о них можно прочитать в chattr(1).\n\nПример установки атрибута immutable:\n\n```\n# chattr +i /путь/к/файлу\n```\n\nДля снятия атрибута замените + на -.\n\n"
    },
    {
      "title": "Расширенные атрибуты",
      "level": 2,
      "content": "Смотрите статью Расширенные атрибуты.\n\n"
    },
    {
      "title": "Preserve root",
      "level": 3,
      "content": "Используйте флаг --preserve-root, чтобы предотвратить рекурсивное выполнение chmod на /. Это поможет, например, предотвратить удаление бита выполнения во всей системе и тем самым сломать систему. Чтобы использовать этот флаг всегда, пропишите его в псевдониме. Смотрите также [1].\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- chattr — Википедия\n- Linux File Permission Confusion\n- Linux File Permission Confusion part 2\n- Backup and restore file permissions in Linux\n- Why is \"chmod -R 777 /\" destructive?\n- The How and Why of User Private Groups in Unix\n\n"
    }
  ]
}