{
  "title": "Streaming using twitch.tv (日本語)",
  "url": "https://wiki.archlinux.org/title/Streaming_using_twitch.tv_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Twitch.tv は RTMP ベースの人気のストリーミングサービスの一つです。Steam には Linux クライアントがあるため、ゲームや Linux デスクトップをストリーミングする方法を探している人がいるかもしれません。このページではそのような方法のリストとして情報を提供しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 Twitch ストリーミングガイドライン\n- 2 GUI の方法\n- 3 CLI の方法 3.1 FFmpeg 3.2 .bashrc スクリプトを使う方法\n\n- 3.1 FFmpeg\n- 3.2 .bashrc スクリプトを使う方法\n\n"
    },
    {
      "title": "Twitch ストリーミングガイドライン",
      "level": 2,
      "content": "Twitch.tv サポート より:\n\nビデオ要件\n\n- コーデック: H.264 (x264)\n- モード: Strict CBR\n- キーフレーム間隔: 2秒\n\nオーディオ要件\n\n- コーデック: AAC-LC ステレオまたはモノ音声\n- 最大ビットレート: 160 kbps\n- サンプリング周波数: 任意 ノート: MP3 コーデックのサポートは廃止されました\n\n他の要件\n\nTwitch のページで記載されていないものとして Y'UV420p ピクセルフォーマット の要件があります、Y'UV444 はあまりサポートされていません。\n\n"
    },
    {
      "title": "GUI の方法",
      "level": 2,
      "content": "- Open Broadcaster Software (obs-studio) は人気のあるストリーミングプログラムです。公式リポジトリからインストールできます。Linux 版のアルファビルドも利用することができます (obs-studio-gitAUR)\n\n- castawesomeAUR は ffmpeg ストリーミングの Gtk3 フロントエンドで Twitch.tv のサポートが付いています。\n\n- SimpleScreenRecorder (simplescreenrecorder) を使って twitch にストリーミングすることもできます。 コンテナは FLV に設定してください。 RTMP の URL を 'save as' フィールドに記入してください。 'separeate file per segment' のチェックが外れていることを確認してください。 動画のコーデックは libx264 に設定 (H.264 ではありません)。 ビットレートは 2000 kbps などに設定。 カスタムオプションフィールドに preset=fast,minrate=2000,maxrate=2000,bufsize=2000,keyint=60 と入力。\n\n- コンテナは FLV に設定してください。\n- RTMP の URL を 'save as' フィールドに記入してください。\n- 'separeate file per segment' のチェックが外れていることを確認してください。\n- 動画のコーデックは libx264 に設定 (H.264 ではありません)。\n- ビットレートは 2000 kbps などに設定。\n- カスタムオプションフィールドに preset=fast,minrate=2000,maxrate=2000,bufsize=2000,keyint=60 と入力。\n\n"
    },
    {
      "title": "CLI の方法",
      "level": 2,
      "content": "- FFmpeg (ffmpeg) PyLivestream (pylivestream-gitAUR)\n- GStreamer (gstreamer) gst-live\n\n- PyLivestream (pylivestream-gitAUR)\n\n- gst-live\n\n"
    },
    {
      "title": "FFmpeg",
      "level": 3,
      "content": "次のソリューションでは、Twitch.tv へのストリーミングに FFmpeg を利用します。\n\n"
    },
    {
      "title": ".bashrc スクリプトを使う方法",
      "level": 3,
      "content": "FFmpeg を使用して Twitch.tv にストリーミングするために、デスクトップ要素と OpenGL 要素の両方のストリーミングをサポートします。このスクリプトは、シェル内で stream-to-twitch path/to/stream_key を実行することで呼び出すことができます。キーは pass で安全に保存されています。スクリプトは次のとおりです。\n\n```\n/usr/local/sbin/stream-to-twitch\n```\n\n```\n#!/usr/bin/env sh\n#\n# Stream screen and audio (speakers and microphone) to Twitch.tv using FFmpeg.\n#\n# Usage: stream-to-twitch path/to/key\n\nset -euo pipefail\n\n#######################################\n# Stream to Twitch.tv.\n# Globals:\n#   None.\n# Arguments:\n#   Stream key. A string.\n# Returns:\n#   None.\n#######################################\nstream_to_twitch() {\n    res_input=\"1920x1080\" # input resolution\n    res_output=\"1280x720\" # output resolution\n    fps=\"30\" # target FPS\n    gop=\"60\" # i-frame interval, should be double of fps\n    gop_min=\"30\" # min i-frame interval, should be equal to fps\n    probesize=\"42M\" # https://stackoverflow.com/a/57904380\n    threads=\"2\" # max 6\n    cbr=\"1000k\" # constant bitrate (should be between 1000k–3000k)\n    quality=\"ultrafast\" # one of the many FFmpeg presets\n    audio_input_speakers=\"0\" # speakers' sink id\n    audio_input_mic=\"default\" # microphone's sink id\n    audio_rate=\"44100\"\n    stream_server=\"live-prg\" # see https://stream.twitch.tv/ingests for list\n    stream_key=\"${1}\" # key will be passed as an agument from the command line\n    loglevel=\"warning\" # supress unecessary information from printing\n\n    ffmpeg \\\n        -loglevel \"${loglevel}\" \\\n        -f x11grab -s \"${res_input}\" -r ${fps} -probesize ${probesize} -i :0.0 \\\n        -f pulse -i \"${audio_input_speakers}\" \\\n        -f pulse -i \"${audio_input_mic}\" \\\n        -filter_complex \"[2]highpass=f=200,lowpass=f=3000[hl]; [1][hl]amix=inputs=2[a]\" \\\n        -map 0:v -map [a] \\\n        -f flv -ac 2 -ar ${audio_rate} \\\n        -vcodec libx264 -g ${gop} -keyint_min ${gop_min} -b:v ${cbr} \\\n        -minrate ${cbr} -maxrate ${cbr} -pix_fmt yuv420p \\\n        -s ${res_output} -preset \"${quality}\" -tune film -acodec aac \\\n        -threads ${threads} -strict normal \\\n        -bufsize ${cbr} \\\n        \"rtmp://${stream_server}.twitch.tv/app/${stream_key}\"\n}\n\n# Get stream key securely stored with the password manager \"pass\"\n# and pass the key to the script to start the stream.\nstream_to_twitch \"$(pass \"${1}\")\"\n```\n\nTable content:\nパラメータ | 説明\nffmpeg | コンバータ\n-loglevel \"${LOGLEVEL}\" | ログレベルの出力を設定します\n-f x11grab | x11grab からの入力を強制します\n-s $RES_INPUT | 変数 $RES_INPUT で指定された入力ソースから特定の画像サイズを設定します\n-r $FPS | フレームレートを $FPS に等しい値に設定します\n-probesize \"${PROBESIZE}\" | ストリーム情報を取得するために分析するデータのサイズを設定します\n-i :0.0 | -i は入力を取得、この場合 x11 からスクリーン :0.0 を入力にする。調整可、例えば -i :0.0+500,100 なら画面位置 500/100\n-f pulse | PulseAudio からの入力を強制します\n-i \"${AUDIO_INPUT_SPEAKERS}\" | スピーカーのシンク ID を選択します\n-i \"${AUDIO_INPUT_MIC}\" | マイクのシンク ID を選択します\n-filter_complex ... | マイクにフィルターを適用してノイズを軽減し、オーディオストリームをマージします\n-map 0:v | マップビデオストリーム\n-map [a] | オーディオストリームをマップします\n-f flv | フォーマットを強制的に FLV にします\n-ac 2 | オーディオチャンネルを 2 に設定します\n-ar \"${AUDIO_RATE}\" | オーディオレートを設定します\n-vcodec libx264 | ビデオコーデックを libx264 に設定します\n-b:v \"$CBR\" | ビデオのビットレートを変更することを指定します。ビットレートの値は $CBR によって設定されます\n-pix_fmt yuv420p | ピクセル形式を Y'UV420p に設定します。それ以外の場合は、デフォルトで Y'UV444 が使用され、Twitch と互換性がありません。\n-s $RES_OUTPUT | 変数 $RES_OUTPUT で指定された出力用の特定の画像サイズを設定します\n-preset \"{$QUALITY}\" | プリセットの圧縮品質と速度を設定します\n-acodec aac | AAC を使用するようにオーディオコーデックを設定します\n-threads 0 | 開始する CPU スレッドを設定します。0 は CPU コアに基づいてスレッドを自動開始します。\n\n"
    }
  ]
}