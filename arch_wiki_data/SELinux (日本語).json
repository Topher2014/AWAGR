{
  "title": "SELinux (日本語)",
  "url": "https://wiki.archlinux.org/title/SELinux_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- セキュリティ\n- AppArmor\n- TOMOYO Linux\n\nSecurity-Enhanced Linux (SELinux) は Linux カーネルの Linux Security Module (LSM) を使って、アメリカ国防総省式の強制アクセス制御などの様々なセキュリティポリシーを提供する Linux の機能です。Linux ディストリビューションではなく、むしろ Linux や BSD などの Unix ライクなオペレーティングシステムに使うことができる改造セットと言えます。\n\nLinux ディストリビューションで SELinux を動かすには3つのことが必要です: SELinux が有効になったカーネル、SELinux のユーザースペースツールとライブラリ、そして SELinux のポリシー (大半はリファレンスポリシーがベース) です。また、SELinux 機能を有効にするパッチをあててコンパイルする必要がある Linux プログラムも存在します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 Arch Linux における現在の状態\n- 2 強制アクセス制御\n- 3 SELinux のインストール 3.1 パッケージの説明 3.1.1 SELinux 対応のシステムユーティリティ 3.1.2 SELinux のユーザースペースユーティリティ 3.1.3 SELinux のポリシーパッケージ 3.1.4 その他の SELinux のツール 3.2 インストール 3.2.1 GitHubのバイナリを使用 3.2.2 GitHubのビルドスクリプトを使用 3.2.3 AUR を使用 3.3 SELinuxのLSMを有効化 3.4 カスタムカーネル 3.5 PAM の確認 3.6 ポリシーのインストール 3.7 Vagrant 仮想マシンでテスト\n- 4 インストール後の作業 4.1 スワップファイル\n- 5 SELinux の使い方\n- 6 トラブルシューティング 6.1 便利なツール 6.2 問題の報告\n- 7 参照\n\n- 3.1 パッケージの説明 3.1.1 SELinux 対応のシステムユーティリティ 3.1.2 SELinux のユーザースペースユーティリティ 3.1.3 SELinux のポリシーパッケージ 3.1.4 その他の SELinux のツール\n- 3.2 インストール 3.2.1 GitHubのバイナリを使用 3.2.2 GitHubのビルドスクリプトを使用 3.2.3 AUR を使用\n- 3.3 SELinuxのLSMを有効化\n- 3.4 カスタムカーネル\n- 3.5 PAM の確認\n- 3.6 ポリシーのインストール\n- 3.7 Vagrant 仮想マシンでテスト\n\n- 3.1.1 SELinux 対応のシステムユーティリティ\n- 3.1.2 SELinux のユーザースペースユーティリティ\n- 3.1.3 SELinux のポリシーパッケージ\n- 3.1.4 その他の SELinux のツール\n\n- 3.2.1 GitHubのバイナリを使用\n- 3.2.2 GitHubのビルドスクリプトを使用\n- 3.2.3 AUR を使用\n\n- 4.1 スワップファイル\n\n- 6.1 便利なツール\n- 6.2 問題の報告\n\n"
    },
    {
      "title": "Arch Linux における現在の状態",
      "level": 2,
      "content": "SELinuxは公式にはサポートされていません([1][2]を参照)。 非公式サポートの現状は以下の通りです。\n\nTable content:\n名前 | 状態 | 入手先\nSELinux が有効になったカーネル | 公式サポートカーネル で実装済み | 4.18.8 から公式リポジトリで利用できます。\nSELinux のユーザースペースツールとライブラリ | AUR で実装: https://aur.archlinux.org/packages/?O=0&K=selinux | https://github.com/archlinuxhardened/selinux に成果があります。\nSELinux のポリシー | 作業中です。Reference Policy を上流として使用。 | 上流: https://github.com/TresysTechnology/refpolicy (2017年8月5日のリリースから systemd と /usr/bin ディレクトリのサポートがポリシーに統合されました)\n\n公式の core パッケージと AUR にあるパッケージの変更点:\n\nTable content:\n名前 | 状態とコメント\nlinux, linux-lts, linux-zen, linux-hardened | lsm=のカーネルパラメーターが必要\ncoreutils | --with-selinux フラグを使って libselinux とリンクしてリビルドする必要があります。\ncronie | --with-selinux フラグを使ってリビルドする必要があります。\ndbus | --enable-libaudit と --enable-selinux フラグを使ってリビルドする必要があります。\nfindutils | libselinux をインストールしてリビルドを行なって SELinux-specific オプションを有効にします。\niproute2 | --with-selinux フラグを使ってリビルドする必要があります。\nlogrotate | --with-selinux フラグを使ってリビルドする必要があります。\nopenssh | --with-selinux フラグを使ってリビルドする必要があります。\npam | Linux-PAM のために --enable-selinux フラグを使ってリビルドする必要があります。pam_unix2 のパッチが必要で、最近のバージョンの libselinux で実装されている関数を削除します。\npambase | 設定を変更して /etc/pam.d/system-login に pam_selinux.so を追加します。\npsmisc | --with-selinux フラグを使ってリビルドする必要があります。\nshadow | --with-selinux フラグを使ってリビルドする必要があります。\nsudo | --enable-selinux フラグを使ってリビルドする必要があります。\nsystemd | --enable-audit と --enable-selinux フラグを使ってリビルドする必要があります。\nutil-linux | --with-selinux フラグを使ってリビルドする必要があります。\n\n他の SELinux 関連のパッケージはおそらく変更を加えずに安全に使うことができます。\n\n"
    },
    {
      "title": "強制アクセス制御",
      "level": 2,
      "content": "SELinux を有効にする前に、SELinux が何をするのか理解したほうが良いでしょう。簡単に言うと、SELinux は Linux で強制アクセス制御 (Mandatory Access Control, MAC) を実施します。SELinux と対比するように、伝統的なユーザー/グループ/rwx のパーミッションは一種の任意アクセス制御 (Discretionary Access Control, DAC)です。MAC は DAC と異なり、セキュリティポリシーとその実行が完全に区別されています。\n\n例として sudo コマンドの使用が挙げられます。DAC が使用されている場合、sudo は root への一時的な権限昇格を許可し、プロセスはシステム全体に制限なくアクセスできるようになります。しかしながら、MAC を使用した場合、プロセスがアクセスできる特定のファイルセットをセキュリティ管理者が指定しておけば、どんな権限昇格を用いたとしても、セキュリティポリシーが変わらないかぎり、プロセスがアクセスできるファイルは制限されます。そのため、SELinux が動作しているマシンで sudo を使ってポリシーが許可しないファイルにアクセスしようとしても、アクセスは不可能です。\n\n他の例としては、ファイルに与えられる伝統的な (-rwxr-xr-x) タイプのパーミッションがあります。DAC の下では、パーミッションはユーザーによって変更できます。しかしながら、MAC の下では、セキュリティ管理者が特定のファイルのパーミッションを凍結することが可能です。ファイルに関連するポリシーが変更されないかぎり、ファイルのパーミッションをユーザーが変更することは不可能になります。\n\nこのことが、ウェブサーバーなど、危険にさらされる可能性のあるプロセスで特に有用なのは想像に難くないでしょう。DAC が使われている場合、権限昇格ができるプログラムを奪取されて大損害を被る危険が十分あるのです。\n\nもっと詳しい情報は、Wikipedia の MAC のページを見て下さい。\n\n"
    },
    {
      "title": "パッケージの説明",
      "level": 3,
      "content": "SELinux 関連のパッケージは全て、AUR の selinux グループに含まれています。これらのいずれかを自分でインストールしようとする前に#インストールを読んで完全なインストールのために推奨されるオプションを確認してください。\n\n"
    },
    {
      "title": "インストール",
      "level": 3,
      "content": "必要な SELinux パッケージをインストールする方法は2つあります。\n\n"
    },
    {
      "title": "GitHubのバイナリを使用",
      "level": 4,
      "content": "全てのパッケージは非公式ユーザーリポジトリ(https://wiki.archlinux.org/title/Unofficial_user_repositories#selinux)で入手可能です。baseパッケージはシステムインストールのarch-bootstrap段階でbase-selinuxに置き換え可能です。\n\n"
    },
    {
      "title": "GitHubのビルドスクリプトを使用",
      "level": 4,
      "content": "このリポジトリには build_and_install_all.sh という名前のスクリプトが含まれており、全てのパッケージを正しい順番でビルド・インストール (あるいはアップデート) します。以下はユーザーシェルでスクリプトを使って全てのパッケージをインストールする例です (GPG 鍵をダウンロードしてパッケージのソース tarball を検証します):\n\n```\n$ git clone https://github.com/archlinuxhardened/selinux\n$ cd selinux\n$ ./recv_gpg_keys.sh\n$ ./build_and_install_all.sh\n```\n\nもちろん、スクリプトを実行する前に build_and_install_all.sh の中身を変更することもできます。例えば既に SELinux のサポートが有効になっているカーネルを使っている場合などに変更を加えます。\n\n"
    },
    {
      "title": "AUR を使用",
      "level": 4,
      "content": "- まず、SELinux のユーザースペースツールとライブラリをインストールしてください。依存関係があるため順番通りに行う必要があります。: libsepolAUR, libselinuxAUR, checkpolicyAUR, secilcAUR, setoolsAUR, libsemanageAUR, semodule-utilsAUR, policycoreutilsAUR, selinux-pythonAUR (python-ipy) が必要), mcstransAUR, restorecondAUR。\n- 次に pambase-selinuxAUR と pam-selinuxAUR をインストールして、インストール完了後にユーザーのログインができることを確認します。pambase が pambase-selinuxAUR で置き換えられるときに、/etc/pam.d/ のファイルが削除されて、作成されなおすためです。\n- その後、コアパッケージを再コンパイルするために以下のパッケージをインストールします。: coreutils-selinuxAUR, findutils-selinuxAUR, iproute2-selinuxAUR, logrotate-selinuxAUR, openssh-selinuxAUR, psmisc-selinuxAUR, shadow-selinuxAUR, cronie-selinuxAUR。\n- そして、/etc/sudoers ファイルをバックアップします。sudo-selinuxAUR をインストールしてから /etc/sudoers を元に戻してください (sudo を置き換えるときにファイルが上書きされます)。\n- 次は util-linux と systemd です。修正できない循環依存が存在するため (FS#39767)、systemd-selinuxAUR のソースパッケージをビルドしてから、systemd-libs-selinuxAURをインストールして、util-linux-selinuxAURをutil-linux-libs-selinuxAURと一緒にビルドしてインストールし、そして systemd-selinuxAUR を再ビルドして再インストールします。\n- それから、dbus-selinuxAUR をインストールしてください。\n- その後、selinux-alpm-hookAUR をインストールして pacman でパッケージをインストールするたびに restorecon が実行されるようにします。\n\n上記の手順が全て終わったら、SELinux カーネル (linuxなどとポリシー(selinux-refpolicy-archAUR や selinux-refpolicy-gitAUR など) をインストールします。\n\n"
    },
    {
      "title": "SELinuxのLSMを有効化",
      "level": 3,
      "content": "起動時にSELinuxをデフォルトのセキュリティモデルとして有効にするには、次のカーネルパラメータが必要です。:\n\n```\nlsm=landlock,lockdown,yama,integrity,selinux,bpf\n```\n\n{{Note|The lsm=カーネルパラメーターはLinuxセキュリティモジュールの初期化順序を設定します。カーネルに設定されたlsm=の値はzgrep CONFIG_LSM= /proc/config.gzで見つけることができ、現在の値はcat /sys/kernel/security/lsmで見ることができます。\n\n"
    },
    {
      "title": "カスタムカーネル",
      "level": 3,
      "content": "カーネルをコンパイルするときには少なくとも以下のオプションを設定する必要があります。:\n\n```\nCONFIG_SECURITY_SELINUX=y\nCONFIG_AUDIT=y\n```\n\nSELinuxをデフォルトで有効にし、カーネルパラメータの設定を省略するには、加えてCONFIG_LSMを有効にし、リストの最初の\"major\"モジュールとしてselinuxを設定します。:\n\n```\nCONFIG_LSM=\"landlock,lockdown,yama,integrity,selinux,bpf\"\n```\n\n"
    },
    {
      "title": "PAM の確認",
      "level": 3,
      "content": "ログイン後に適切なセキュリティコンテキストを得るために PAM を正しく設定する必要があります。以下の行が /etc/pam.d/system-login に存在するか確認してください:\n\n```\n# pam_selinux.so close should be the first session rule\nsession         required        pam_selinux.so close\n```\n\n```\n# pam_selinux.so open should only be followed by sessions to be executed in the user context\nsession         required        pam_selinux.so open\n```\n\n"
    },
    {
      "title": "ポリシーのインストール",
      "level": 3,
      "content": "ポリシーは SELinux の基幹です。ポリシーによって SELinux の挙動は左右されます。AURで利用可能な唯一のポリシーはリファレンスポリシーだけです。リファレンスポリシーをインストールするには、selinux-refpolicy-srcAUR パッケージから取得するか https://github.com/SELinuxProject/refpolicy/wiki/DownloadRelease#current-release から最新のリリースをダウンロードすることができます。AUR のパッケージを使う場合、/etc/selinux/refpolicy/src/policy まで移動して以下のコマンドを実行してリファレンスポリシーをインストールしてください:\n\n```\n# make bare\n# make conf\n# make install\n```\n\nSELinux ポリシーの書き方を知っているならば上記のコマンドを実行する前に存分にポリシーを調整することができます。コマンドはしばらく時間がかかりジョブを実行してシステムの1つのコアに負担をかけます、心配は要りません。のんびりと構えてコマンドを実行させておいて下さい。\n\nリファレンスポリシーをロードするには次を実行:\n\n```\n# make load\n```\n\nそして、以下の内容で /etc/selinux/config ファイルを作成してください (上記のデフォルト設定を使用する場合。ポリシーの名前を変更したときは、ファイルを修正する必要があります):\n\n```\n/etc/selinux/config\n```\n\n```\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#       enforcing - SELinux security policy is enforced.\n#                   Set this value once you know for sure that SELinux is configured the way you like it and that your system is ready for deployment\n#       permissive - SELinux prints warnings instead of enforcing.\n#                    Use this to customise your SELinux policies and booleans prior to deployment. Recommended during policy development.\n#       disabled - No SELinux policy is loaded.\n#                  This is not a recommended setting, for it may cause problems with file labelling\nSELINUX=permissive\n# SELINUXTYPE= takes the name of SELinux policy to\n# be used. Current options are:\n#       refpolicy (vanilla reference policy)\n#       <custompolicy> - Substitute <custompolicy> with the name of any custom policy you choose to load\nSELINUXTYPE=refpolicy\n```\n\nここで、再起動が必要です。再起動したら、次を実行してファイルシステムにラベルを付けて下さい:\n\n```\n# restorecon -r /\n```\n\nその後、以下の内容で requiredmod.te ファイルを作成します:\n\n```\nrequiredmod.te\n```\n\n```\nmodule requiredmod 1.0;\n\nrequire {\n        type devpts_t;\n        type kernel_t;\n        type device_t;\n        type var_run_t;\n        type udev_t;\n        type hugetlbfs_t;\n        type udev_tbl_t;\n        type tmpfs_t;\n        class sock_file write;\n        class unix_stream_socket { read write ioctl };\n        class capability2 block_suspend;\n        class dir { write add_name };\n        class filesystem associate;\n}\n\n#============= devpts_t ==============\nallow devpts_t device_t:filesystem associate;\n\n#============= hugetlbfs_t ==============\nallow hugetlbfs_t device_t:filesystem associate;\n\n#============= kernel_t ==============\nallow kernel_t self:capability2 block_suspend;\n\n#============= tmpfs_t ==============\nallow tmpfs_t device_t:filesystem associate;\n\n#============= udev_t ==============\nallow udev_t kernel_t:unix_stream_socket { read write ioctl };\nallow udev_t udev_tbl_t:dir { write add_name };\nallow udev_t var_run_t:sock_file write;</nowiki>\n```\n\nそして以下のコマンドを実行してください:\n\n```\n# checkmodule -m -o requiredmod.mod requiredmod.te\n# semodule_package -o requiredmod.pp -m requiredmod.mod\n# semodule -i requiredmod.pp\n```\n\n上記の設定はリファレンスポリシーで発生する厄介なメッセージを /var/log/audit/audit.log から削除するために必要です。汚いハックであり、正しくないラベリングの影響を隠すためにリファレンスポリシーにパッチをあてることを明確にするべきです。\n\n"
    },
    {
      "title": "Vagrant 仮想マシンでテスト",
      "level": 3,
      "content": "Vagrant を使うことで SELinux が設定された Arch Linux の仮想マシンをプロビジョニングできます。現在の環境に影響を与えないで Arch Linux の SELinux を簡単にテストすることが可能です。以下のコマンドを使用してテストしてください:\n\n```\n$ git clone https://github.com/archlinuxhardened/selinux\n$ cd selinux/_vagrant\n$ vagrant up\n$ vagrant ssh\n```\n\n"
    },
    {
      "title": "インストール後の作業",
      "level": 2,
      "content": "SELinux が動作しているかは sestatus で確認できます。以下のように表示されるはずです:\n\n```\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             refpolicy\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              disabled\nPolicy deny_unknown status:     allowed\nMax kernel policy version:      28\n```\n\nコンテキストを適切に維持するために、restorecond.serviceを有効にできます:\n\n```\n# systemctl enable restorecond\n```\n\n再起動しないで enforcing モードに切り替えたい場合、次のコマンドを使います:\n\n```\n# echo 1 > /sys/fs/selinux/enforce\n```\n\n"
    },
    {
      "title": "スワップファイル",
      "level": 3,
      "content": "スワップパーティションの代わりにスワップファイルを使う場合、適切なセキュリティコンテキストを設定するために次のコマンドを実行してください:\n\n```\n# semanage fcontext -a -t swapfile_t \"/path/to/swapfile\"\n# restorecon /path/to/swapfile\n```\n\n"
    },
    {
      "title": "SELinux の使い方",
      "level": 2,
      "content": "SELinux は伝統的な Unix のアクセス制御とは異なる方法でセキュリティを定義します。SELinux を理解するにはサンプルを見るのが一番です。例えば、apache のホームページの SELinux セキュリティコンテキストは以下のようになります:\n\n```\n$ls -lZ /var/www/html/index.html\n-rw-r--r--  username username system_u:object_r:httpd_sys_content_t /var/www/html/index.html\n```\n\n最初の3つと最後のカラムは (Arch) Linux ユーザーなら誰でも見覚えがあるはずです。新しいのは4番目のカラムであり以下のフォーマットになっています:\n\n```\nuser:role:type[:level]\n```\n\nそれぞれを説明すると:\n\n1. User: SELinux のユーザー識別子。SELinux ユーザーが使用することができる複数のロールに関連付けることができます。\n1. Role: SELinux のロール。SELinux ユーザーがアクセスすることができる複数のタイプに関連付けることができます。\n1. Type: プロセスにタイプが関連付けられると、SELinux ユーザー (サブジェクト) がアクセスできるプロセスが (ドメイン) が決定します。タイプがオブジェクトと関連付けられた場合、SELinux がオブジェクトにアクセスする際のパーミッションが決まります。\n1. Level: ポリシーが MCS や MLS をサポートしている場合にのみ使用する任意のフィールドです。範囲とも呼びます。\n\nこれが重要になるのは、自分でポリシーを作成して、SELinux の基本的な構成要素にしたいという場合です。ほとんどの場合リファレンスポリシーで十分間に合うので、理解する必要はありません。ただし、あなたがパワーユーザーであり何か特別な必要性があるのであれば、自ら SELinux のポリシーを作成する方法を学ぶ絶好の機会でしょう。\n\nSELinux の仕組みを理解したい人には こちら のシリーズを読むのをおすすめします。\n\n"
    },
    {
      "title": "トラブルシューティング",
      "level": 2,
      "content": "SELinux のエラーは systemd の journal で確認できます。例えば system_u:system_r:policykit_t:s0 ラベルに関する SELinux のメッセージを表示するには、次を実行:\n\n```\n# journalctl _SELINUX_CONTEXT=system_u:system_r:policykit_t:s0\n```\n\n"
    },
    {
      "title": "便利なツール",
      "level": 3,
      "content": "SELinux を補助するツール/コマンドがいくつか存在します。\n\n"
    },
    {
      "title": "問題の報告",
      "level": 3,
      "content": "問題の報告は GitHub でしてください: https://github.com/archlinuxhardened/selinux/issues\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Security Enhanced Linux\n- Fedora プロジェクトの SELinux Wiki\n- NSA の SELinux 公式ホームページ\n- SELinux のユーザー空間ホームページ リファレンスポリシーのホームページ SETools ホームページ\n- ArchLinux, SELinux and You (アーカイブ)\n\n- リファレンスポリシーのホームページ\n- SETools ホームページ\n\n"
    }
  ]
}