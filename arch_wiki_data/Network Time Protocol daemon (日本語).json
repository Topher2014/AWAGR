{
  "title": "Network Time Protocol daemon (日本語)",
  "url": "https://wiki.archlinux.org/title/Network_Time_Protocol_daemon_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- NTPsec\n- Chrony\n- 時刻同期\n\nネットワークタイムプロトコル(NTP) は GNU/Linux のソフトウェアクロックをインターネット上の時刻サーバーと同期するのに使われる最も一般的な方法です。変動的なネットワークの遅延を軽減し、インターネットを使って数十ミリ秒の範囲で時刻を維持できるように設計されています。ローカルエリアネットワークの場合、一ミリ秒まで正確性を保てます。\n\nNTP プロジェクト は NTP という名前のプロトコルのリファレンス実装を提供しています。NTP の代わりになるものとして、ダイアルアップフレンドリで常時オンラインではない環境用に設計されている Chrony と、OpenBSD プロジェクトの OpenNTPD があります。\n\nこの記事ではクライアント・サーバー両方で NTP デーモンを設定・起動する方法を説明しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 NTP サーバーへの接続の設定 2.2 あなた自身の NTP サーバーの設定\n- 3 使用方法 3.1 デーモンとして使う 3.1.1 デーモンが正しく同期を実行しているか確認する 3.2 デーモンを使わない\n- 4 自動起動 4.1 systemd サービス 4.1.1 ブート時にデーモンを起動する 4.1.2 起動毎に同期する 4.2 ネットワーク接続時 4.2.1 Netctl 4.2.2 NetworkManager 4.2.3 Wicd\n- 5 ヒントとテクニック 5.1 GPS で ntpd を使う 5.2 chroot で実行する 5.3 受信ソケットを制限する\n- 6 トラブルシューティング 6.1 Cannot assign requested address\n- 7 参照\n\n- 2.1 NTP サーバーへの接続の設定\n- 2.2 あなた自身の NTP サーバーの設定\n\n- 3.1 デーモンとして使う 3.1.1 デーモンが正しく同期を実行しているか確認する\n- 3.2 デーモンを使わない\n\n- 3.1.1 デーモンが正しく同期を実行しているか確認する\n\n- 4.1 systemd サービス 4.1.1 ブート時にデーモンを起動する 4.1.2 起動毎に同期する\n- 4.2 ネットワーク接続時 4.2.1 Netctl 4.2.2 NetworkManager 4.2.3 Wicd\n\n- 4.1.1 ブート時にデーモンを起動する\n- 4.1.2 起動毎に同期する\n\n- 4.2.1 Netctl\n- 4.2.2 NetworkManager\n- 4.2.3 Wicd\n\n- 5.1 GPS で ntpd を使う\n- 5.2 chroot で実行する\n- 5.3 受信ソケットを制限する\n\n- 6.1 Cannot assign requested address\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "公式リポジトリにある ntp をインストールしてください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "メインのデーモンは ntpd で、/etc/ntp.conf から設定を行います。\n\nntp パッケージのデフォルトの設定ファイルでは、設定のカスタマイズを行わなくてもクライアントモードで ntpd が動作するようになっています。デフォルト設定を使って起動したい場合は、#使用方法 までスキップできます。\n\n以下ではメイン設定のアイテムのカスタマイズについて説明しています。マニュアルページも参照してください: ntp.conf(5) や関連する man {ntpd|ntp_auth|ntp_mon|ntp_acc|ntp_clock|ntp_misc}。\n\n"
    },
    {
      "title": "NTP サーバーへの接続の設定",
      "level": 3,
      "content": "/etc/ntp.conf を手動で設定したい場合は、まずマシンが同期するサーバを設定してください。\n\nNTP サーバは階層的なシステムによって strata と呼ばれるたくさんのレベルにクラス分けされています。その定義は、独立したタイムソースとされるデバイスは stratum 0 ソース、stratum 0 のデバイスに直接接続しているサーバーを stratum 1 ソース、stratum 1 ソースに接続しているサーバーを stratum 2 ソース、と続きます。\n\nサーバーの stratum は正確性や信頼性を表しているわけではないことを理解する必要があります。一般的に、stratum 2 のサーバーが時刻同期に使われます: どのサーバーに接続するのかまだ決めてない場合、pool.ntp.org サーバー (alternative link) を使って一番地理的に近いサーバープールを選んで下さい。\n\nサンプル:\n\n```\n/etc/ntp.conf\n```\n\n```\nserver 0.jp.pool.ntp.org iburst\nserver 1.jp.pool.ntp.org iburst\nserver 2.jp.pool.ntp.org iburst\nserver 3.jp.pool.ntp.org iburst\n```\n\niburst オプションは推奨です。最初に試行した時に接続できなかったときだけパケットのバーストを送信するようになります。burst オプションは常時バーストを送信するので、許可を得ているときにだけ使って下さい。さもないとブラックリストに入れられてしまう可能性があります。\n\n"
    },
    {
      "title": "あなた自身の NTP サーバーの設定",
      "level": 3,
      "content": "NTP サーバーを設定する場合、サーバーとして local clock を追加する必要があります。これによりインターネットアクセスを失った時でも、ネットワークへの時刻の提供を続行することができます。(fudge コマンドを使って) stratum 12 サーバーとして local clock を追加すればインターネットアクセスが失われない限り使用されません (stratum 15 まで設定することができます):\n\n```\nserver 127.127.1.1\nfudge  127.127.1.1 stratum 12\n```\n\n次に、restrict コマンドを使ってあなたのサービスに接続できるクライアント (localhost もクライアントとして見なされます) を制限するルールを定義します。あなたのファイルには次のような行がすでに存在するはずです:\n\n```\nrestrict default nomodify nopeer noquery\n```\n\nこれで誰も何も変更できなくなり時刻サーバーの状態の問い合わせも制止されます: nomodify は ntpd (と ntpq または ntpdc) の再設定を無視し、noquery は ntpd (と ntpq または ntpdc) の状態データのダンプを防ぎます。\n\nまた、他のオプションを加えることも可能です:\n\n```\nrestrict default kod nomodify notrap nopeer noquery\n```\n\n\"restrict\" オプションの完全なドキュメントは man ntp_acc にあります。詳しい説明は https://support.ntp.org/bin/view/Support/AccessRestrictions を参照してください。\n\n次の行のように、サーバーへの接続を許可する IP を ntpd に伝える必要があります; NTP サーバーを設定しない場合はこのままで問題ありません:\n\n```\nrestrict 127.0.0.1\n```\n\nDNS 解決を IPv6 ネームスペースに強制したい時は、IP アドレスやホストネームの前に -6 を書いて下さい (-4 は IPv4 を強制します)。例:\n\n```\nrestrict -6 default kod nomodify notrap nopeer noquery\nrestrict -6 ::1    # ::1 is the IPv6 equivalent for 127.0.0.1\n```\n\n最後に、ドリフトファイル (時計の時刻のズレを記録します) と任意でログファイルの場所を指定してください:\n\n```\ndriftfile /var/lib/ntp/ntp.drift\nlogfile /var/log/ntp.log\n```\n\n基本的な設定ファイルは以下のようになります:\n\n```\n/etc/ntp.conf\n```\n\n```\nserver 0.pool.ntp.org iburst\nserver 1.pool.ntp.org iburst\nserver 2.pool.ntp.org iburst\nserver 3.pool.ntp.org iburst\n\nrestrict default kod nomodify notrap nopeer noquery\nrestrict -6 default kod nomodify notrap nopeer noquery\n\nrestrict 127.0.0.1\nrestrict -6 ::1  \n\ndriftfile /var/lib/ntp/ntp.drift\nlogfile /var/log/ntp.log\n```\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "このセクションでは ntpd やその他の ntp パッケージに入っているコマンドの使い方を扱います。\n\n"
    },
    {
      "title": "デーモンとして使う",
      "level": 3,
      "content": "NTP デーモンを起動する基本コマンドは:\n\n```\n# ntpd\n```\n\nただし、これだと root としてバックグラウンドで動作します。このため、user オプションを毎回指定するべきです:\n\n```\n# ntpd -u ntp:ntp\n```\n\n#systemd サービス も見て下さい。\n\n"
    },
    {
      "title": "デーモンが正しく同期を実行しているか確認する",
      "level": 4,
      "content": "ntpq を使って設定されたピアの一覧を見て下さい:\n\n```\n$ ntpq -p\n```\n\ndelay, offset, jitter のカラムがゼロではないはずです。ntpd が同期しているサーバーにはアスタリスクが前に付けられます。ntpd が同期するサーバーを選ぶまで数分間かかることがあります。17分 (1024秒) 後に確認してみてください。\n\n"
    },
    {
      "title": "デーモンを使わない",
      "level": 3,
      "content": "デーモンを使わずにシステム時刻を同期させることも可能です。ただし、この方法は数日以上再起動を行わないようなマシンには相応しくありません。システム時刻を一度だけ同期するには、ntpd を起動する代わりに、次を実行してください:\n\n```\n# ntpd -q\n```\n\n-q フラグは ntpd で時刻を一度だけ設定して終了します。つまりデーモンは起動しません。この操作が失敗した場合、システムクロックは同期されません。\n\nまた、システムプロセスの実行を保護するために、システム時刻と ntp サーバーの時刻が所与の閾値以上に食い違っている場合はシステム時刻は同期されません (いわゆる panic-gate)。ただし、-g オプションを使うことでこの閾値は無効にすることができ制限を越えることができます (時刻を初めて設定するときやハードウェアクロックが誤っている場合など)。\n\n"
    },
    {
      "title": "systemd サービス",
      "level": 3,
      "content": "ブート時に systemd によって ntpd を自動起動することが可能です。\n\n"
    },
    {
      "title": "ブート時にデーモンを起動する",
      "level": 4,
      "content": "ntp パッケージには systemd 用に ntpd.service が入っています。このサービスを systemctl を使ってブート時にデーモンを起動してください。\n\nもしくは次のコマンドを使って下さい:\n\n"
    },
    {
      "title": "起動毎に同期する",
      "level": 4,
      "content": "ntp パッケージには ntpdate.service が入っています。このサービスを systemd によって有効化して起動毎に時刻を同期するようにできます。この oneshot サービスは、一度時刻同期が完了したらもうデーモンを起動し続ける必要がない場合に助けになる選択肢になります。\n\n同期した時刻をハードウェアクロックにも書き込む必要があるときは、systemd#ユニットファイルの編集 に書かれているように既存のユニットを設定してください:\n\n```\n/etc/systemd/system/ntpdate.service.d/hwclock.conf\n```\n\n```\n[Service]\nExecStart=/usr/bin/hwclock -w\n```\n\nそれから起動してください。\n\n"
    },
    {
      "title": "ネットワーク接続時",
      "level": 3,
      "content": "ntpd をネットワークマネージャによって起動させることも可能です。こうすることでコンピュータがオンラインのときだけデーモンが動くようになります。\n\n"
    },
    {
      "title": "Netctl",
      "level": 4,
      "content": "以下の行をあなたの netctl プロファイルに追加してください:\n\n```\nExecUpPost='/usr/bin/ntpd || true'\nExecDownPre='killall ntpd || true'\n```\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 4,
      "content": "NetworkManager の dispatcher スクリプトを使ってネットワーク接続にあわせて ntpd デーモンを立ち上げたり終了することができます。公式リポジトリから networkmanager-dispatcher-ntpdAUR をインストールしてください。\n\n"
    },
    {
      "title": "Wicd",
      "level": 4,
      "content": "Wicd の場合、postconnect に起動スクリプトを、predisconnect ディレクトリに停止スクリプトを作成してください。スクリプトは忘れずに実行可能にしてください:\n\n```\n/etc/wicd/scripts/postconnect/ntpd\n```\n\n```\n#!/bin/bash\n\n/usr/bin/ntpd &\n-or-\nsystemctl start ntpd &\n```\n\n```\n/etc/wicd/scripts/predisconnect/ntpd\n```\n\n```\n#!/bin/bash\n\nkillall ntpd &\n-or-\nsystemctl stop ntpd &\n```\n\nWicd#スクリプト も参照。\n\n"
    },
    {
      "title": "GPS で ntpd を使う",
      "level": 3,
      "content": "GPS から時刻を取得するように ntpd を設定する方法が書かれたネット上の記事は大抵 SHM (共有メモリ) を使うことを推奨しています。しかしながら、ntpd バージョン 4.2.8 からはさらに良い方法が存在します。直接 gpsd に接続するため、gpsd をインストールしてください。\n\n以下の行を /etc/ntp.conf に追加:\n\n```\n/etc/ntp.conf\n```\n\n```\n#=========================================================\n#  GPSD native ntpd driver\n#=========================================================\n# This driver exists from at least ntp version 4.2.8\n# Details at\n#   https://www.eecis.udel.edu/~mills/ntp/html/drivers/driver46.html\nserver 127.127.46.0 \nfudge 127.127.46.0 time1 0.0 time2 0.0 refid GPS\n```\n\ngpsd が動作していれば上記で問題なく動作します。ローカルソケットを使って gpsd に接続し、返ってきた \"gpsd_json\" オブジェクトを問い合わせます。\n\nセットアップをテストするには、まず以下を実行して gpsd が動作していることを確認してください:\n\n```\n$ cgps -s\n```\n\nそれから数分待ってから ntpq -p を実行します。ntpd が gpsd と対話できていれば以下のように表示されます:\n\n```\n$ ntpq -p\n```\n\n```\nremote           refid            st t when poll reach   delay   offset  jitter\n ==================================================================================\n*GPSD_JSON(0)    .GPS.            0 l   55   64  377    0.000    2.556  14.109\n```\n\n"
    },
    {
      "title": "chroot で実行する",
      "level": 3,
      "content": "新しいディレクトリ /etc/systemd/system/ntpd.service.d/ を作成してその中に customexec.conf という名前のファイルを以下の内容で追加してください:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/ntpd -g -u ntp:ntp -i /var/lib/ntp\n```\n\nそして /etc/ntp.conf を編集して driftfile のパスを実際の root ではなく chroot ディレクトリの相対パスに変えて下さい:\n\n```\ndriftfile       /var/lib/ntp/ntp.drift\n```\n\nを\n\n```\ndriftfile       /ntp.drift\n```\n\nに変えて下さい。適切な chroot 環境を作成してください。getaddrinfo() を動作させるために適切なディレクトリとファイルを (root で) 作成し:\n\n```\n# mkdir /var/lib/ntp/etc /var/lib/ntp/lib /var/lib/ntp/proc\n# mkdir /var/lib/ntp/usr /var/lib/ntp/usr/lib\n# touch /var/lib/ntp/etc/resolv.conf /var/lib/ntp/etc/services\n```\n\nそして上記のファイルをバインドマウントしてください:\n\n```\n/etc/fstab\n```\n\n```\n...\n#ntpd chroot mounts\n/etc/resolv.conf  /var/lib/ntp/etc/resolv.conf none bind 0 0\n/etc/services\t  /var/lib/ntp/etc/services none bind 0 0\n/lib\t\t  /var/lib/ntp/lib none bind 0 0\n/usr/lib\t  /var/lib/ntp/usr/lib none bind 0 0\n/proc\t\t  /var/lib/ntp/proc none bind 0 0\n```\n\n```\n# mount -a\n```\n\n最後に、デーモンを再起動してください。再起動したら /proc/{PID}/root のシンボリックリンク先をチェックすることでデーモンプロセスが chroot されてることを確認できます:\n\n```\n# ps -C ntpd | awk '{print $1}' | sed 1d | while read -r PID; do ls -l /proc/$PID/root; done\n```\n\n/ ではなく /var/lib/ntp にリンクしているはずです。\n\nntpd は読み書きをあまり頻繁に行わないため、driftfile の設定が実際に機能しているか確認するには少し待つしかありません。何か問題が起こったら、エラーをログ出力します。問題がない場合、タイムスタンプが更新されます。一日中動かして何もエラーが表示されない、そしてタイムスタンプが更新されていれば大丈夫だと思われます。\n\n"
    },
    {
      "title": "受信ソケットを制限する",
      "level": 3,
      "content": "ntpd が listen するソケットを制限するには interface オプションを使います:\n\n```\ninterface [listen | ignore | drop] [all | ipv4 | ipv6 | wildcard | name | address[/prefixlen]]\n```\n\n設定例:\n\n```\n/etc/ntp.conf\n```\n\n```\ninterface listen lo\ninterface listen enp3s0\ninterface ignore enp5s0\n```\n\n"
    },
    {
      "title": "Cannot assign requested address",
      "level": 3,
      "content": "以下のように Cannot assign requested address メッセージが表示される場合:\n\n```\n$ journalctl -u ntpd\n```\n\n```\nntpd[2130]: bind(21) AF_INET6 fe80::6ef0:49ff:fe51:4946%2#123 flags 0x11 failed: Cannot assign requested address\nntpd[2130]: unable to create socket on eth0 (5) for fe80::6ef0:49ff:fe51:4946%2#123\nntpd[2130]: failed to init interface for address fe80::6ef0:49ff:fe51:4946%2\n```\n\nIPv6 を無効化することでメッセージを消すことができます。ntpd.service を編集して -4 を追加:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/ntpd -g -u ntp:ntp -4\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- http://www.ntp.org/\n- https://support.ntp.org/\n- http://www.pool.ntp.org/\n- https://www.eecis.udel.edu/~mills/ntp/html/index.html\n- http://www.akadia.com/services/ntp_synchronize.html\n\n"
    }
  ]
}