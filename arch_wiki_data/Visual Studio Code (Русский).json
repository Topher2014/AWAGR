{
  "title": "Visual Studio Code (Русский)",
  "url": "https://wiki.archlinux.org/title/Visual_Studio_Code_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Code — кроссплатформенный текстовый редактор, разрабатываемый Microsoft, основанный на фреймворке Electron. Visual Studio Code — бинарный дистрибутив, основанный на коде из репозитория Code - OSS, имеющий дополнительные изменения от Microsoft и распространяемый на условиях проприеатрной лицензии (подробнее о лицензировании написано в этом комментарии на GitHub). Также есть поддерживаемый сообществом и распространяемый по лицензии MIT форк VSCodium с отключенной по умолчанию телеметрией.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Редактор VSCode доступен для установки с помощью следующих пакетов:\n\n- Code - OSS — Свободная сборка из официального репозитория code-oss.\n\n- Visual Studio Code — Проприетарная сборка от Microsoft.\n\n- VSCodium — Поддерживаемый сообщством форк с лицензией MIT.\n\nРазница между \"Code - OSS\" (open-source) и \"Visual Studio Code\" (сборка от Microsoft без исходного кода) описана здесь.\n\n"
    },
    {
      "title": "Поддержка расширений",
      "level": 3,
      "content": "Использование Microsoft marketplace для расширений ограничено продуктами семейства Visual Studio Code. Следовательно, он не может быть использован в Code-OSS (смотрите FS#67780).\n\nПакеты code и vscodium-binAUR/vscodiumAUR/vscodium-gitAUR настроены на использование Open VSX registry, поддерживаемого Eclipse Foundation. Это объясняет, почему Code-OSS не может найти некоторые расширения.\n\nИзвестные способы решения проблемы следующие:\n\n- вручную установить расширение из его файла .vsix, который можно получить в Microsoft Visual Studio Code Marketplace;\n- попросить сопровождающего загрузить расширение в Open VSX registry;\n- добавить Microsoft Visual Studio Code Marketplace с помощью одного из следующих пакетов, относящихся к используемой вами сборке: code-marketplaceAUR/vscodium-bin-marketplaceAUR/vscodium-marketplaceAUR. Эти пакеты устанавливают хук pacman, который патчит файл product.json, как показано в этом комментарии на GitHub, после каждого обновления пакета. Обратите внимание, что использование Microsoft Marketplace таким образом не соответствует его условиям использования.\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Запустите командой code (code-git для пакета code-gitAUR или codium для vscodium-binAUR/vscodiumAUR/vscodium-gitAUR).\n\nЕсли требуется запустить несколько экземпляров приложения, добавьте ключ -n без параметров.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Пакет code хранит конфигурацию в файле ~/.config/Code - OSS/User/settings.json.\n\nПакет visual-studio-code-binAUR хранит конфигурацию в файле ~/.config/Code/User/settings.json.\n\nvscodiumAUR и связанные пакеты хранят конфигурацию в файле ~/.config/VSCodium/User/settings.json.\n\nПри миграции с Code на Codium (или наоборот) каталог настроек может быть скопирован или перемещён, поскольку они имеют общую кодовую базу и настройки совместимы.\n\n"
    },
    {
      "title": "Встроенный терминал",
      "level": 3,
      "content": "Меню Вид > Терминал или Ctrl + ` открывает встроенный терминал. По умолчанию используется Bash без каких-либо параметров, но настройки, указанные далее позволяют изменить данное взаимодействие.\n\n- terminal.integrated.shell.linux устанавливает терминал по умолчанию\n- terminal.integrated.shellArgs.linux устанавливает передаваемые в терминал аргументы\n\nНапример, установить по умолчанию fish с параметрами.\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.integrated.shell.linux\": \"/usr/bin/fish\",\n\"terminal.integrated.shellArgs.linux\": [\"--login\",\"--debug-level 3\"]\n```\n\nВы можете столкнуться со странными запросами при установке встроенного терминала, удалением некоторых строк, поэтому рекомендуется либо не использовать аргументы, либо использовать внешний терминал.\n\n"
    },
    {
      "title": "Внешний терминал",
      "level": 3,
      "content": "Если вы используете Terminator как терминал по умолчанию, у вас могут возникнуть проблемы в VS Code с ошибками вида: Unable to launch debugger worker process (vsdbg) through the terminal. spawn truecolor ENOENT, поэтому следует сменить терминал на другой, например, gnome-terminal.\n\nСтрока настроек \"terminal.external.linuxExec\": \"имя терминала\" установит терминал на требуемый. Пример установки gnome-terminal:\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.external.linuxExec\": \"gnome-terminal\"\n```\n\n"
    },
    {
      "title": "Глобальное меню не работает в KDE Plasma",
      "level": 3,
      "content": "Visual Studio Code использует D-Bus для меню, поэтому для него следует установить пакет libdbusmenu-glib.\n\n"
    },
    {
      "title": "Невозможно переместить объект в корзину",
      "level": 3,
      "content": "По умолчанию все приложения, использующие Electron, используют gio для удаления. В Plasma используется kioclient5. Другой инструмент удаления можно выбрать с помощью переменной окружения ELECTRON_TRASH.\n\nНапример, для удаления с помощью trash-cli:\n\n```\n$ ELECTRON_TRASH=trash-cli code\n```\n\nОднако, в новых версиях Electron поддерживает и kioclient5, и kioclient, и trash-cli, и gio (по умолчанию), и gvfs-trash (отмечен устаревшим). Смотрите также страницу environment-variables в GitHub репозитории Electron.\n\n"
    },
    {
      "title": "Невозможно отладить C#",
      "level": 3,
      "content": "Для отладки приложений на C# (платформа .NET) испольуется расширение OmniSharp, которое требует проприетарный компонент .NET Core Debugger (смотри пакеты в разделе установка). Смотри также объяснение в репозитории GitHub.\n\nЕсли вы используете свободный пакет, отладка упадёт почти незаметно, лишь оставив в консоли сообщение:\n\n```\nYou may only use the Microsoft .NET Core Debugger (vsdbg) with\nVisual Studio Code, Visual Studio or Visual Studio for Mac software\nto help you develop and test your applications.\n```\n\nДля отладки в свободном пакете можно использовать пакет netcoredbgAUR. Чтобы использовать его для отладки проектов, требуется в настройке проекта указать соответствующую конфигурацию, например:\n\n```\n./.vscode/launch.json\n```\n\n```\n\"configurations\": [\n    {\n...\n    \"pipeTransport\": {\n        \"pipeCwd\": \"${workspaceFolder}\",\n        \"pipeProgram\": \"/usr/bin/bash\",\n        \"pipeArgs\": [\"-c\"],\n        \"debuggerPath\": \"/usr/bin/netcoredbg\"\n    }\n...\n```\n\n"
    },
    {
      "title": "Невозможно открыть .csproj с сервером OmniSharp, ошибка расположения Microsoft.Common.props",
      "level": 3,
      "content": "Требуется сменить путь к SDK. Вот, как выглядит файл до изменений.\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\n```\n\nВот, как выглядит файл после изменения.\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n/opt/dotnet/sdk/{VERSION}/Current/Microsoft.Common.props\n```\n\n"
    },
    {
      "title": "OmniSharp не может обнаружить MSBuild",
      "level": 3,
      "content": "На странице OmniSharp introduction в GitHub написано, что пользователям Arch Linux требуется установить mono-msbuild. Ошибка, которая появляется при отсутствии пакета:\n\n```\nOmniSharp Log\n```\n\n```\n[info]: OmniSharp.MSBuild.Discovery.MSBuildLocator\n        Registered MSBuild instance: StandAlone 15.0 - \"~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\"\n            MSBuildExtensionsPath = /usr/lib/mono/xbuild\n            BypassFrameworkInstallChecks = true\n            CscToolPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin/Roslyn\n            CscToolExe = csc.exe\n            MSBuildToolsPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\n            TargetFrameworkRootPath = /usr/lib/mono/xbuild-frameworks\nSystem.TypeLoadException: Could not load type of field 'OmniSharp.MSBuild.ProjectManager:_queue' (13) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.5.24.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\n...\n```\n\nВозможно, потребуется собрать пакет самостоятельно.\n\nOmnisharp поставляется со своей собственной версией mono, поэтому, если он не может найти установленную версию, если вы хотите сказать omnisharp искать «глобальный» mono, установленный на вашей машине, поместите это в ваш settings.json:\n\n```\nsettings.json\n```\n\n```\n\"omnisharp.useGlobalMono:\"always\"\n```\n\n"
    },
    {
      "title": "«Повторить попытку в режиме Sudo» не работает",
      "level": 3,
      "content": "К сожалению, пакет code не поддерживает эту функцию в полной мере, так как официально Microsoft не поддерживает пакет для Arch Linux. Смотри также FS#61516 или тикет на GitHub.\n\nПакет visual-studio-code-binAUR не имеет данной проблемы.\n\n"
    },
    {
      "title": "Проблемы с сопоставлением клавиш",
      "level": 3,
      "content": "Как сказано в wiki на GitHub:\n\nСогласно вики, есть два возможных решения:\n\n1. убедитесь, что setxkbmap -query возвращает в качестве первой раскладки клавиатуры ту, с которой вы хотите работать в VS Code.\n1. укажите \"keyboard.dispatch\": \"keyCode\" в настройках и перезапустите VS Code. Это предотвратит попытки VS Code определить раскладку клавиатуры.\n\n"
    },
    {
      "title": "Команда \"...\" не найдена",
      "level": 3,
      "content": "В официальной сборке VS Code есть файл product.json со списком расширений, которым разрешено использовать определённые API. Однако этого файла нет в OSS-сборке code [1]\n\nДля включения определённых API могут потребоваться некоторые флаги. [2] Вы можете либо запустить code с этими флагами, либо добавить соответствующие записи в раздел extensionAllowedProposedApi в файле product.json (пакет code устанавливает его в /usr/lib/code/product.json).\n\n```\n\"extensionAllowedProposedApi\": [\n    \"ms-vsliveshare.vsliveshare\",\n    \"ms-vscode.node-debug\",\n    \"ms-vscode.node-debug2\"\n]\n```\n\nТакже можно установить пакет code-featuresAUR, который устанавливает хук pacman, исправляющий этот файл при каждом обновлении пакета. В качестве альтернативы вы можете установить проприетарные сборки от Microsoft: visual-studio-code-binAUR, visual-studio-code-insiders-binAUR.\n\n"
    },
    {
      "title": "VS Live Share missing API",
      "level": 4,
      "content": "Отредактируйте product.json, или запустите VS Code с опцией:\n\n```\n$ code --enable-proposed-api ms-vsliveshare.vsliveshare\n```\n\n"
    },
    {
      "title": "Команда 'remote-containers.openFolder' не найдена",
      "level": 4,
      "content": "Для решения проблемы требуется открыть VS Code со включённым API remote-containers (см. баг FS#63374)\n\n```\n$ code-oss --enable-proposed-api ms-vscode-remote.remote-containers\n```\n\n"
    },
    {
      "title": "Command 'GitHub Pull Requests: Configure Remotes...' resulted in an error (command 'pr.configureRemotes' not found)",
      "level": 4,
      "content": "Запустите VS Code с опцией:\n\n```\n$ code --enable-proposed-api GitHub.vscode-pull-request-github\n```\n\n"
    },
    {
      "title": "Git: ssh_askpass: exec(/usr/lib/ssh/ssh-askpass): No such file or directory",
      "level": 3,
      "content": "Эта ошибка возникает из-за зашифрованного ssh-ключа, и её можно решить, установив какой-нибудь провайдер диалога, например SSH keys#x11-ssh-askpass или альтернативы, перечисленные там, например ksshaskpass для KDE.\n\nСледует отметить, что для ksshaskpass, например, вам потребуется сделать ссылку на него из /usr/lib/ssh/ssh-askpass, чтобы VSCode нашёл его:\n\n```\n# ln /usr/bin/ksshaskpass /usr/lib/ssh/ssh-askpass\n```\n\n"
    },
    {
      "title": "Обрезанные символы во встроенном терминале",
      "level": 3,
      "content": "Слишком широкие символы могут обрезаться. Например, курсивный полужирный текст в стек-трейсах Deno.\n\nЭтого можно избежать, установив для параметра \"terminal.integrated.rendererType\" значение \"experimentalWebgl\".\n\n"
    },
    {
      "title": "No such interface“org.freedesktop.Secret.Collection”",
      "level": 3,
      "content": "Смотрите settings-sync#_troubleshooting-keychain-issues\n\n"
    },
    {
      "title": "Аутентификация на Github через VSCodium не работает",
      "level": 3,
      "content": "При подключении аккаунта Github измените \"vscodium\" на \"vscode\" в URL, как показано в этом комментарии. Затем скопируйте идентификационный токен в VSCodium.\n\n"
    },
    {
      "title": "Внешний вид диалога выбора файла не согласован с внешним видом системы",
      "level": 3,
      "content": "На данный момент vscodium использует диалог gtk даже в kde. Смотрите Единый вид приложений Qt и GTK#Согласованный диалог выбора файлов для более подробной информации.\n\n"
    }
  ]
}