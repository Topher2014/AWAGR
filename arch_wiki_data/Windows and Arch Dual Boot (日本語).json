{
  "title": "Windows and Arch Dual Boot (日本語)",
  "url": "https://wiki.archlinux.org/title/Windows_and_Arch_Dual_Boot_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "この記事では Arch と Windows を共存させる方法を説明しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 重要情報 1.1 Windows の UEFI と BIOS の制限 1.2 ブートローダーの UEFI と BIOS の制限 1.3 UEFI セキュアブート 1.4 高速スタートアップとハイバネート 1.4.1 Windows 設定 1.4.1.1 高速スタートアップとハイバネートを無効化する 1.4.1.2 高速スタートアップを無効化し、ハイバネートを有効化する 1.4.1.3 高速スタートアップとハイバネートを有効化する 1.5 Windows のファイル名の制限\n- 2 インストール 2.1 Linux の前に Windows をインストール 2.1.1 BIOS システム 2.1.1.1 Linux のブートローダーを使う 2.1.1.2 Windows 7/8/8.1 のブートローダーを使う 2.1.2 UEFI システム 2.2 Windows の前に Linux をインストール 2.2.1 UEFI ファームウェア 2.2.1.1 GRUB で Windows 10 を起動 2.3 トラブルシューティング 2.3.1 Couldn't create a new partition or locate an existing one 2.3.2 Windows をインストールしたら Linux が起動できなくなった 2.3.3 Windows のブートレコードの修復 2.3.4 間違って削除してしまった EFI システムパーティションを復元する 2.3.5 Windows Setup によって作成された EFI システムパーティションが小さすぎる 2.3.6 BIOS システム上で Windows 累積更新プログラムをインストールできない\n- 3 時刻系\n- 4 Bluetooth ペアリング\n- 5 参照\n\n- 1.1 Windows の UEFI と BIOS の制限\n- 1.2 ブートローダーの UEFI と BIOS の制限\n- 1.3 UEFI セキュアブート\n- 1.4 高速スタートアップとハイバネート 1.4.1 Windows 設定 1.4.1.1 高速スタートアップとハイバネートを無効化する 1.4.1.2 高速スタートアップを無効化し、ハイバネートを有効化する 1.4.1.3 高速スタートアップとハイバネートを有効化する\n- 1.5 Windows のファイル名の制限\n\n- 1.4.1 Windows 設定 1.4.1.1 高速スタートアップとハイバネートを無効化する 1.4.1.2 高速スタートアップを無効化し、ハイバネートを有効化する 1.4.1.3 高速スタートアップとハイバネートを有効化する\n\n- 1.4.1.1 高速スタートアップとハイバネートを無効化する\n- 1.4.1.2 高速スタートアップを無効化し、ハイバネートを有効化する\n- 1.4.1.3 高速スタートアップとハイバネートを有効化する\n\n- 2.1 Linux の前に Windows をインストール 2.1.1 BIOS システム 2.1.1.1 Linux のブートローダーを使う 2.1.1.2 Windows 7/8/8.1 のブートローダーを使う 2.1.2 UEFI システム\n- 2.2 Windows の前に Linux をインストール 2.2.1 UEFI ファームウェア 2.2.1.1 GRUB で Windows 10 を起動\n- 2.3 トラブルシューティング 2.3.1 Couldn't create a new partition or locate an existing one 2.3.2 Windows をインストールしたら Linux が起動できなくなった 2.3.3 Windows のブートレコードの修復 2.3.4 間違って削除してしまった EFI システムパーティションを復元する 2.3.5 Windows Setup によって作成された EFI システムパーティションが小さすぎる 2.3.6 BIOS システム上で Windows 累積更新プログラムをインストールできない\n\n- 2.1.1 BIOS システム 2.1.1.1 Linux のブートローダーを使う 2.1.1.2 Windows 7/8/8.1 のブートローダーを使う\n- 2.1.2 UEFI システム\n\n- 2.1.1.1 Linux のブートローダーを使う\n- 2.1.1.2 Windows 7/8/8.1 のブートローダーを使う\n\n- 2.2.1 UEFI ファームウェア 2.2.1.1 GRUB で Windows 10 を起動\n\n- 2.2.1.1 GRUB で Windows 10 を起動\n\n- 2.3.1 Couldn't create a new partition or locate an existing one\n- 2.3.2 Windows をインストールしたら Linux が起動できなくなった\n- 2.3.3 Windows のブートレコードの修復\n- 2.3.4 間違って削除してしまった EFI システムパーティションを復元する\n- 2.3.5 Windows Setup によって作成された EFI システムパーティションが小さすぎる\n- 2.3.6 BIOS システム上で Windows 累積更新プログラムをインストールできない\n\n"
    },
    {
      "title": "Windows の UEFI と BIOS の制限",
      "level": 3,
      "content": "Microsoft は Windows のバージョンによって使用できるファームウェアのブートモードとパーティションスタイルを制限しています:\n\n- Windows 8/8.1 と 10 x86 32ビット は GPT ディスクからの IA32 UEFI モードによる起動、あるいは MBR/msdos ディスクからの BIOS モードによる起動のみサポートしています。GPT/MBR ディスクからの x86_64 UEFI ブート、MBR/msdos ディスクからの x86_64 UEFI ブート、GPT ディスクからの BIOS ブートなどはサポートしていません。市場に出ているマシンとしては古い Intel Mac (2010年以前のモデル) や Intel Atom System-on-Chip (Clover Trail と Bay Trail) が搭載された Windows タブレットだけに IA32 (U)EFI が含まれており、GPT ディスクからの IA32 UEFI モードによる起動を行います。\n- Windows 8/8.1 と 10 x86_64 は GPT ディスクからの x86_64 UEFI モードによる起動、あるいは MBR/msdos ディスクからの BIOS モードの起動をサポートしています。IA32 UEFI ブート、MBR/msdos ディスクからの x86_64 UEFI ブート、GPT ディスクからの BIOS ブートなどには対応していません。\n- Windows 11 は x86_64 と UEFI モードによる GPT ディスクからの起動のみをサポートしています。\n\nWindows がマシンにプリインストールされている場合:\n\n- Windows XP, Vista, 7 の32ビット版がプリインストールされているマシンはデフォルトで BIOS-MBR モードで起動します。サービスパックやビット数、Windows のエディション (SKU) やファームウェアが UEFI をサポートしているかどうかは関係ありません。\n- Windows 7 x86_64 がプリインストールされているマシンの大多数はデフォルトで BIOS-MBR モードで起動します。サービスパックやビット数、エディション (SKU) は無関係です。Windows 7 がプリインストールされている最新のシステムにはデフォルトで x86_64 UEFI-GPT モードで起動するものも少数ながらあります。\n- Windows 8/8.1, 10, 11 がプリインストールされたマシンは全て UEFI-GPT モードで起動します。Windows 10 までは、ファームウェアのビット数は Windows のビット数と一致します。例えば x86_64 の Windows は x86_64 UEFI モードで起動し32ビットの Windows は IA32 UEFI モードで起動します。\n\nWindows のブートモードは以下の手順で確認できます ([1] を参照):\n\n- Windows を起動\n- Win キーを押しながら 'R' で起動ダイアログを開く\n- 起動ダイアログに \"msinfo32\" と入力してエンター\n- システム情報から左側のシステムの要約を選択して右の BIOS モードの値を確認\n- 値が UEFI であれば、Windows は UEFI-GPT モードで起動しています。値が Legacy の場合、Windows は BIOS-MBR モードで起動しています。\n\n一般に、Windows では使用しているファームウェアのモードによってパーティションのタイプが強制的に決定されます。Windows が UEFI モードで起動していれば、GPT ディスクにしかインストールすることができません。Windows がレガシー BIOS モードで起動している場合、MBR ディスクにしかインストールできません (別名 msdos)。これは Windows インストーラーによる制約であり、2014年4月現在、UEFI-MBR や BIOS-GPT の組み合わせで Windows をインストールする公式(Microsoft)の方法はありません。したがって Windows は UEFI-GPT あるいは BIOS-MBR しかサポートしていません。\n\nLinux カーネルにはそのような制限はありませんが、使用するブートローダーやその設定方法が変わってきます。ブートローダーのインストール手順はファームウェアの種類やディスクのパーティショニングの設定に依るので、Windows と Linux を同一のディスクからデュアルブートする場合、Windows の制限には注意が必要です。できる限り、Windows が使用する方法、つまり UEFI-GPT あるいは BIOS-MBR ブートにあわせることを推奨します。詳しくは https://support.microsoft.com/kb/2581408 を見てください。\n\n"
    },
    {
      "title": "ブートローダーの UEFI と BIOS の制限",
      "level": 3,
      "content": "ほとんどの Linux ブートローダーはインストールされたものと別のタイプのファームウェアのブートローダーを起動したりチェインロードすることができません。したがって、Arch を UEFI-GPT あるいは UEFI-MBR モードでインストールして、Windows を他のディスクに BIOS-MBR モードでインストールした場合、Arch の UEFI ブートローダーで Windows をチェインロードすることは不可能です。同じように BIOS-MBR や BIOS-GPT モードで Arch をインストールして、Windows を UEFI-GPT を使って他のディスクにインストールした場合、Arch の BIOS ブートローダーで Windows をチェインロードすることはできません。\n\nApple Mac における GRUB(2) だけが上記の例外であり、appleloader コマンドを使って EFI でインストールされた GRUB(2) から BIOS でインストールされた OS を起動したり、rEFInd を使って UEFI 環境からレガシー BIOS の OS を起動できますが、ツールの作者である Rod Smith によれば Apple 以外の UEFI 環境では機能しません。\n\nただし Arch を BIOS-GPT でインストールして、Windows を他のディスクに BIOS-MBR でインストールした場合、ブートローダーが他のディスクをチェインロードできれば、Arch の使用しているブートローダーで他のディスクに入っている Windows を起動できます。\n\nWindows セットアップ は 100 MiB の EFI システムパーティション を作成します(ただし、Advanced Format の 4K ネイティブドライブには 300 MiB の ESPが作成されます)。故に、使用できるカーネルの数は制限されます。回避策は:\n\n- ESP を /efi にマウントする。そして、ファイルシステムドライバーがあり、他のパーティションにあるカーネルを起動できるブートローダーを使用する。\n- ESP を拡張する。通常の方法としては、回復パーティションのサイズを減らすか、Windows パーティションを移動する(これにより UUID が変わります)かです。\n- バックアップをとり、esp/EFI/Microsoft/Boot/Fonts/ 内にある不要なフォントを削除する[2]。\n- バックアップをとり、esp/EFI/Microsoft/Boot/ 内にある不要な言語ディレクトリを削除する。(例えば、en-US のみを残す)\n- より圧縮率の高い (だが、遅い) 圧縮を initramfs イメージに使う。ただし、ローダブルなカーネルモジュールとファームウェアは解凍しておく。例:\n\n```\nCOMPRESSION=\"xz\"\nCOMPRESSION_OPTIONS=(-9e)\nMODULES_DECOMPRESS=\"yes\"\n```\n\n"
    },
    {
      "title": "UEFI セキュアブート",
      "level": 3,
      "content": "Windows 8/8.1, 10, 11 がプリインストールされている場合、デフォルトで UEFI-GPT モードで起動するようになっており UEFI Secure Boot が有効になっています。これは全ての OEM プリインストールで Microsoft によって強制されています。\n\nArch Linux のインストールメディアは現在 Secure Boot をサポートしています。セキュアブート#インストールメディアを起動するを見てください。\n\nArch Linux を起動する前に UEFI Secure Boot を無効化することが推奨されます。Secure Boot を無効にしても Windows 8/8.1, 10, 11 は問題なく起動できるはずです。UEFI Secure Boot のサポートを無効化するには物理的にコンピュータにアクセスして、ファームウェアの設定で Secure Boot オプションを無効化する必要があるというのが唯一の問題です。Microsoft は、Windows 8/8.1 以上のプリインストール済みのシステムにおいて、リモートで、または(OS 中から)プログラムを使って Secure Boot を無効化する方法を明確に禁止しています。\n\n- Windows で Bitlocker を使用していて、起動時に自動的にロックを解除するために TPM 内にキーを保存している場合、セキュアブートを無効化すると起動に失敗して Bitlocker の回復画面が表示されます。しかし、これは恒久的なものではなく、単にセキュアブートを有効化すれば Windows を簡単に再び起動できるようになります。\n- Windows 11 では、TPM が正常に動作している限り、インストール後にセキュアブートを無効化しても問題は発生しません。\n\n"
    },
    {
      "title": "高速スタートアップとハイバネート",
      "level": 3,
      "content": "ハイバネート可能な OS が2つあるとき、Windows と Linux (または、他の OS)の一方をハイバネートしてもう一方を起動したり、両方をハイバネートする場合があります。\n\n同じ理由で、1つの EFI システムパーティションを Windows と Linux の間で共有している場合に、Windows をハイバネート(または、高速スタートアップを有効化した状態でシャットダウン)して Linux を起動したり、その逆をしたりすると、EFI システムパーティションが損傷するかもしれません。\n\nハイバネートされたディスクを読み書きでマウントすることを防ぐセーフガード が ntfs-3g には追加されていますが、Linux カーネルの NTFS ドライバーにはそうしたセーフガードが存在しません。\n\nWindows はデフォルトで、Linux で一般的に使用されている ext4 のようなファイルシステムを読み込むことができません。Windows にこれらのファイルシステム用のドライバーをインストールしていない限り、これらのファイルシステムを考慮する必要はありません。\n\n"
    },
    {
      "title": "Windows 設定",
      "level": 4,
      "content": "Windows 8 以上には高速スタートアップという新しい機能が含まれており、シャットダウンを実際に行う代わりにハイバネートをすることで起動時間を短縮します。\n\n高速スタートアップとハイバネートに対する Windows 設定の複数の選択肢が次のセクションで言及されています。\n\n- 高速スタートアップとハイバネートを無効化する\n- 高速スタートアップを無効化し、ハイバネートを有効化する\n- 高速スタートアップとハイバネートを有効化する\n\n高速スタートアップを無効化する手順については、Windows 8 はここに、Windows 10 はここに、Windows 11 はここにあります。如何なる設定を無効化する場合においても、Linux をインストールする前にその設定を無効化したことを確認して Windows をシャットダウンしてください。再起動では不十分であることに注意してください。\n\nこの選択肢は、ある OS から別の OS に再起動するときにユーザの注意を最も必要としません。よって最も安全で、先の問題についてよくわからない場合に推奨されます。1つの同じ EFI システムパーティションを Windows と Linux の間で共有することができます。\n\nWindows のコマンドラインシェルを管理者権限で実行し、以下のコマンドを実行してください:\n\n```\n> powercfg /H off\n```\n\nこの選択肢は、ある OS から別の OS に再起動するときにユーザの注意を必要とします。 一般的な使用ケースとして、Windows がハイバネートしているときに Linux を起動したい場合:\n\n- EFI システムパーティション(ESP)を Windows 用と Linux 用とで分けなければならず、Windows が Linux 用の ESP をマウントしないようにしなければなりません。ドライブごとに1つの ESP しか存在できないので、Linux 用の ESP は Windows 用の ESP があるドライブとは別のドライブに存在していなければなりません。この場合、Linux の root パーティションとは別のドライブに Linux 用の ESP を置けば、Windows と Linux は同じドライブの別々のパーティションにインストール可能です。\n- Windows がハイバネートしているときに、Windows によってマウントされているファイルシステムを読み書き可能な状態で Linux からマウントすることはできません。これについては非常に注意するべきです。また、自動マウント の挙動についても考慮すべきです。\n- Windows をハイバネートでなく完全にシャットダウンした場合は、先に述べたようなファイルシステムを読み書き可能な状態でマウントすることができます。\n\n「高速スタートアップを無効化し、ハイバネートを有効化する」場合と同じ考慮が適用されますが、Windows が完全にシャットダウンされずハイバネートするだけなので、Windows がハイバネートしているときに、Windows によってマウントされていたファイルシステムを読み書き可能な状態でマウントすることはできません。\n\n"
    },
    {
      "title": "Windows のファイル名の制限",
      "level": 3,
      "content": "Windows ではファイルパスが 260 文字 以下までに制限されています。\n\nまた、Windows はファイル名で 特定の文字を使用禁止 にしています。これは昔の DOS の名残です:\n\n- < (小なり)\n- > (大なり)\n- : (コロン)\n- \" (ダブルクオーテーション)\n- / (スラッシュ)\n- \\ (バックスラッシュ)\n- | (縦線またはパイプ)\n- ? (クエスチョンマーク)\n- * (アスタリスク)\n\n以上の制約は Windows のものであって NTFS にはありません、つまり NTFS パーティションを使用する他の OS は影響を受けません。Windows はこれらのファイルを検出することができなくて chkdsk を実行すると大抵はファイルを削除しようとします。\n\nNTFS-3G では windows_filenames オプションを使用すると Windows の制限が新しく作成したファイルに適用されます (fstab を見てください)。\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "Linux/Windows のデュアルブートをセットアップする場合、最初に Windows をインストールするのが推奨されます。Windows はディスクの一部を使ってパーティションを作ります。Windows のセットアップが終わったら、Linux のインストール環境にブートして、既存の Windows のパーティションには触れずに Linux 用のパーティションを作成することができます。Windows をインストールすると、Linux のブートローダーから使うことができる EFI System Partition が作成されます。\n\n"
    },
    {
      "title": "BIOS システム",
      "level": 4,
      "content": "マルチブートをサポートする BIOS ブートローダーを使うことができます。\n\nこのセクションでは次のことをする方法を説明しています: Linux のブートローダーを MBR 以外のパーティションにインストールする; そのブートローダーを Windows のブートローダーから読み込めるパーティションにコピーする; Windows のブートローダーを使って Linux のブートローダーのコピーを起動する。\n\n- GRUB ブートローダーをインストールする際に、MBR ではなく /boot パーティションにインストールしてください。GRUB でこれをする場合は、GRUB/ヒントとテクニック#パーティションやパーティションレスディスクにインストールするを見てください。Syslinux の場合は、Syslinux#手動 にあるノートを見てください。LILO の場合は、LILO#パーティション、またはパーティションレスディスクにインストールを見てください。\n\n- VBR のコピーを作成します: dd if=/dev/disk of=/path/to/linux.bin bs=512 count=1 /dev/disk の部分はブートローダーがインストールされているパーティションのパスです。/path/to/ の部分は Windows のブートローダーによって読み込めるブートローダーのコピーを置くマウント済みファイルシステムです。\n\n```\ndd if=/dev/disk of=/path/to/linux.bin bs=512 count=1\n```\n\n- Windows を起動して下さい、Windows から linux.bin ファイルにアクセス可能なはずです。コマンドプロンプト cmd を管理者として実行し以下を実行してください(スタート > 全てのプログラム > アクセサリ から コマンドプロンプト を右クリックして 管理者として実行 を選択): bcdedit /create /d \"Linux\" /application BOOTSECTOR BCDEdit はエントリの UUID を返します。以下の残りの手順では、この UUID を UUID と表記します。bcdedit /set UUID device partition=c: (or the drive letter on which linux.bin is kept) bcdedit /set UUID path \\path\\to\\linux.bin bcdedit /displayorder UUID /addlast bcdedit /timeout 30\n\n```\nbcdedit /create /d \"Linux\" /application BOOTSECTOR\n```\n\n```\nbcdedit /set UUID device partition=c: (or the drive letter on which linux.bin is kept)\nbcdedit /set UUID path \\path\\to\\linux.bin\nbcdedit /displayorder UUID /addlast\nbcdedit /timeout 30\n```\n\n再起動すると Windows と Linux が Windows のブートローダーに表示されているはずです。\n\n詳細については https://www.iceflatline.com/2009/09/how-to-dual-boot-windows-7-and-linux-using-bcdedit/ をご覧ください。\n\n"
    },
    {
      "title": "UEFI システム",
      "level": 4,
      "content": "既に Windows がインストールされている場合、GPT でフォーマットされたディスクにはいくつかのパーティションがすでに作成されています。\n\n- Windows 回復環境パーティション。一般的に 499 MiB で、Windows の起動に必要なファイルが含まれます(例えば、Linux の /boot に相当します)。\n- FAT32 ファイルシステムの EFI システムパーティション\n- Microsoft 予約パーティション。一般的に 128 MiB。\n- NTFS ファイルシステムの Microsoft basic data パーティション。C: に対応します。\n- もしかすると、システム回復用かバックアップ用のパーティションや他のデータパーティション(D: などに対応)もあるかもしれません。\n\nWindows の「ディスクの管理」ユーティリティを使って、パーティションのラベルやタイプを調べられます。これは、どのパーティションが Windows に必須で、どのパーティションを再利用できるかを理解する助けになります。Windows の「ディスクの管理」ユーティリティは Windows の(NTFS)パーティションを縮小するのにも利用できます。これで Linux パーティション用の空き領域を作ることができます。\n\nそしたら、必要に応じてパーティショニングの作業に移れます。使用するブートローダーは、Windows や Linux とデュアルブートするために他の EFI アプリケーションのチェインロードをサポートしている必要があります。追加の EFI システムパーティションは作成すべきではありません。作成すると Windows が起動できなくなるかもしれません。\n\n単にすでにある EFI システムパーティションをマウントしてください。\n\n- rEFInd と systemd-boot は Windows Boot Manager (\\EFI\\Microsoft\\Boot\\bootmgfw.efi)を自動検出し、ブートメニューに自動的に表示します。GRUB の場合は、GRUB#UEFI/GPT モードでインストールされた Windows に従って手動でエントリをブートメニューに追加するか、 GRUB#他の OS の検出に従って設定ファイルを生成してください。\n- EFI システムパーティションのスペースを節約したい場合 (特に、複数のカーネルを保存するために)、initramfs の圧縮率を上げてください。\n\n新しいバージョンの Windows を搭載しているコンピュータではしばしばセキュアブートが有効化されています。セキュアブートを無効化するかインストールメディアをセキュアブートに対応させるには追加の手順を踏む必要があります(このページの上の部分に行ってリンクページを見てください)。\n\n"
    },
    {
      "title": "Windows の前に Linux をインストール",
      "level": 3,
      "content": "Linux/Windows をデュアルブートするには Windows からインストールするのが推奨されますが、逆に Linux からインストールすることも可能です。Linux の前に Windows をインストールする場合とは対照的に、Windows 用のパーティションを(例えば40GB以上)確保しておく必要があります。あるいは、パーティショニングされていないディスク領域を用意しておいたり、Windows のインストール前に Linux から Windows 用のパーティションを作成しリサイズしておく必要があります。\n\n"
    },
    {
      "title": "UEFI ファームウェア",
      "level": 4,
      "content": "Windows はすでに存在しているEFI システムパーティションを使用します。\n\nファームウェアでセキュアブートが無効になっていることを前提として概要に移ります。\n\n1. Windows インストーラーを起動してください。意図したパーティションのみを使用させるように注意してください。それ以外は Linux がインストールされていないかのように動作させてください。\n1. #高速スタートアップとハイバネートセクションに従ってください。\n1. 起動時に Linux をロードできるように修正してください。おそらく、#Windows をインストールしたら Linux が起動できなくなったに従えばできます。#UEFI システムで言及されているように、一部の Linux ブートマネージャーは Windows Boot Manager を自動検出します。新しい Windows インストーラーには高度な再起動オプションがあり、それを使って Linux を起動できます。しかし、Arch インストールメディアや live CD などの Linux を起動するには別の方法を取ることを推奨します。\n\n以下ではブートローダーとして GRUB が使用されていることを前提とします(ですが、他のブートローダーの場合でも手順は似ているでしょう)。また、EFI システムパーティションがすでにある GPT ブロックデバイス上に Windows 10 がインストールされるとします(さらなる情報については、Microsoft documentation の \"System partition\" セクションをご覧ください)。\n\ngdisk を使ってブロックデバイス上に以下の3つのパーティションを新しく作成してください。より正確なパーティションサイズは[5]をご覧ください。\n\nTable content:\n最小サイズ | コード | 名前 | ファイルシステム\n16 MB | 0C01 | Microsoft 予約領域 | N/A\n~40 GB | 0700 | Microsoft 基本データ | NTFS\n300 MB | 2700 | Windows リカバリ領域 | NTFS\n\nntfs-3g パッケージに含まれる mkntfs プログラムを使って、NTFS ファイルシステムを新しい Microsoft basic data パーティション上と Windows RE (recovery) パーティション上に作成してください。\n\nシステムを再起動し、Windows 10 インストールメディアを起動してください。インストール画面が表示されたら、カスタムインストールオプションを選び、先ほど作成した Microsoft basic data パーティション上に Windows をインストールしてください。これで EFI システムパーティション上に Microsoft EFI ファイルもインストールされるはずです。\n\nインストール後は(Windows のセットアップとログインは必要ありません)、再起動して Linux を起動し、GRUB の設定ファイルを生成して、GRUB のブートメニューから Windows ブートマネージャーを利用できるようにしてください。\n\n"
    },
    {
      "title": "Couldn't create a new partition or locate an existing one",
      "level": 4,
      "content": "Windows 8.1 のインストール USB スティックは MBR パーティションテーブルを必要としており、存在しない場合、パーティションは作成されるのにかかわらず、\"Couldn't create a new partition or locate an existing one\" と出力されます。\n\n"
    },
    {
      "title": "Windows をインストールしたら Linux が起動できなくなった",
      "level": 4,
      "content": "UEFI#Windows によってブート順序が変わってしまうを見てください。\n\n"
    },
    {
      "title": "Windows のブートレコードの修復",
      "level": 4,
      "content": "習慣的に、Windows は1番目のパーティションにインストールされ、パーティションの1番目のセクタにパーティションテーブルとブートローダーの位置がインストールされることになっています。間違えて GRUB などのブートローダーを Windows のパーティションにインストールしてしまったなど何らかの理由でブートレコードを破損した場合は、ユーティリティを使用して修復する必要があります。Microsoft はリカバリディスクの中にブートセクタの修復ユーティリティである FIXBOOT と MBR の修復ユーティリティである FIXMBR を用意しています。インストールディスクから使うことができる場合もあります。修復できたら、本来のとおりに MBR に GRUB を再インストールしてください。\n\nWindows が使用できるように戻したい場合、FIXBOOT コマンドを使うことで Windows オペレーティングシステムが自動的にロードされるようにすることができます。\n\nまた、ms-sysAUR という Linux ユーティリティも存在します。ただし、このユーティリティが書き込むことができるのは新しい MBR とブートセクタだけです。ほとんどの LiveCD にはユーティリティがデフォルトでは含まれていないため、あらかじめインストールするか、Parted Magic などのようなレスキュー CD が必要です。\n\nまず、パーティション情報 (パーティションテーブル) を書き出すには:\n\n```\n# ms-sys --partition /dev/sda1\n```\n\n次に Windows 2000/XP/2003 の MBR を書き出すには:\n\n```\n# ms-sys --mbr /dev/sda  # Read options for different versions\n```\n\nそして、新しいブートセクタ (ブートレコード) を書き出すには:\n\n```\n# ms-sys -(1-6)          # Read options to discover the correct FAT record type\n```\n\nms-sys が書き出すことができるのは Windows 98, ME, Vista, 7 の MBR です。詳しくは ms-sys -h を見てください。\n\n"
    },
    {
      "title": "間違って削除してしまった EFI システムパーティションを復元する",
      "level": 4,
      "content": "GPT でパーティショニングされているディスクで EFI システムパーティションを消去してしまった場合 (例えば、mkfs.fat -F32 /dev/sdx で)、Windows Boot Manager がブートオプションから消えたり、そのオプションを選択すると UEFI に戻されたりします。\n\nこれを修正するには、Windows のインストールメディアを起動し、Shift+F10 を押してコンソールを開いてください (または、次へ > コンピューターを修復する > トラブルシューティング > 詳細オプション > コマンドプロンプト をクリックしてください)。そして、diskpart ユーティリティを起動してください:\n\n```\nX:\\Sources> diskpart\nDISKPART> list disk\n```\n\n以下を入力して、適切なハードドライブを選択してください:\n\n```\nDISKPART> select disk number\n```\n\n「システム」というタイプのパーティション (EFI システムパーティション) が存在することを確認してください:\n\n```\nDISKPART> list partition\n```\n\nそのパーティションを選択してください:\n\n```\nDISKPART> select partition number\n```\n\nそして、そのパーティションに一時的なドライブレターを割り当ててください:\n\n```\nDISKPART> assign letter=G:\n```\n\n```\nDiskPart successfully assigned the drive letter or mount point.\n```\n\nドライブレターが正しく割り当てられたことを確認してください:\n\n```\nDISKPART> list vol\n```\n\n```\nVolume ###  Ltr  Label        Fs     Type        Size     Status     Info\n ----------  ---  -----------  -----  ----------  -------  ---------  --------\n Volume 0     E                       DVD-ROM         0 B  No Media\n Volume 1     C                NTFS   Partition    195 GB  Healthy    Boot\n Volume 2         WINRE        NTFS   Partition    400 MB  Healthy    Hidden\n Volume 3     G                FAT32  Partition    499 MB  Healthy    System\n```\n\ndiskpart を終了してください:\n\n```\nDISKPART> exit\n```\n\nC:\\ (または、あなたのシステムドライブのレター) に移動してください:\n\n```\nX:\\Sources> cd /d C:\\\n```\n\n次は、「魔法」のコマンドです。BCD ストアを再作成します (/s はマウントポイント、/f はファームウェアタイプ、オプションで /v は詳細を表示します):\n\n```\nC:\\> bcdboot C:\\Windows /s G: /f UEFI\n```\n\nこれで、ブートオプションとして機能する Windows Boot Manager が作成され、Windows にアクセスできます。次は EFI システムパーティションをフォーマットしないように気をつけましょう。\n\n[6]、[7]、[8] を参照。\n\n"
    },
    {
      "title": "Windows Setup によって作成された EFI システムパーティションが小さすぎる",
      "level": 4,
      "content": "デフォルトでは、Windows Setup は 100 MiB の EFI システムパーティションを作成します (ただし、Advanced Format の 4K ネイティブドライブには 300 MiB の ESP が作成されます)。一般的に、このサイズは必要なものを格納するには小さすぎます。ESP をリサイズするには様々なツールを試せますが、たいてい他のパーティションが邪魔をするので難しくなります。\n\nWindows をゼロからインストールする場合、インストール中に EFI システムパーティションのサイズを指定することができます [9]:\n\n1. インストール場所を選んでください。その場所にパーティションが存在しないことを確認してください。\n1. 新規 をクリックし、次に 適用 をクリックしてください。すると、Windows インストーラはパーティションを生成し (ほぼ全ての領域がプライマリパーティションに割り当てられます)、EFI には 100MB だけ割り当てられます。\n1. UI を使って、システム パーティション、MSR パーティション、プライマリ パーティションを削除してください。リカバリ パーティションは (存在していれば) 残してください。\n1. Shift+F10 を押し、コマンドプロンプトを開いてください。\n1. diskpart.exe と入力し Enter を押して、ディスクパーティショニングツールを開いてください。\n1. list disk と入力し Enter を押して、ディスクの一覧を表示してください。変更したいディスクを見つけ、ディスク番号をメモってください。\n1. select disk ディスク番号 と入力し、Enter を押してください。\n1. create partition efi size=サイズ と入力し (サイズ の部分は ESP のサイズをメビバイト (MiB) で入力してください)、Enter を押してください。推奨される ESP のサイズは EFI システムパーティション#パーティションの作成 に書かれてあるノートを見てください。\n1. ESP をフォーマットするために format quick fs=fat32 label=System と入力し Enter を押してください。\n1. exit と入力し Enter を押してディスクパーティショニングツールを終了し、更に exit と入力し Enter を押してコマンドプロンプトを閉じてください。\n\nWindows のインストールが終わったら、Windows 内でプライマリパーティションをリサイズすることができます。その後、再起動して、作ったスペース内で通常の Arch インストールを始めてください。\n\nあるいは、Windows をドライブにインストールする前に、Arch インストールメディアを使って EFI システムパーティションだけを好きなサイズで作成することもできます。Windows セットアップはその EFI システムパーティションを使ってくれます。\n\n"
    },
    {
      "title": "BIOS システム上で Windows 累積更新プログラムをインストールできない",
      "level": 4,
      "content": "BIOS システム上では、Windows 累積更新プログラムが We couldn’t complete the updates. Undoing changes. Don’t turn off your computer. というエラーで失敗する場合があります。その場合、Windows を実行中に Windows パーティションをアクティブに設定する必要があります。\n\n```\nC:\\> diskpart\nDISKPART> list disk\nDISKPART> select disk 番号\nDISKPART> list partition\nDISKPART> select partition 番号\nDISKPART> active\nDISKPART> exit\n```\n\nWindows 更新プログラムをインストールできたら、上記のコマンドを使って、Linux パーティションをアクティブに戻してください。\n\n"
    },
    {
      "title": "時刻系",
      "level": 2,
      "content": "- 推奨: システム時刻#Windows で UTC を使うに従って、Arch Linux と Windows のどちらも UTC に設定します。Windows のバージョンによっては、オンラインで時刻を同期するように設定されている場合、ハードウェアクロックが 地方時(localtime) に戻ります。この問題は Windows 10 では修正されています。\n\n- 非推奨: Arch Linux を localtime に設定して NTPd のような時刻関係のサービスを無効にします。こうするとハードウェアクロックの修正の面倒を Windows に押し付けることになるので、一年に夏時間が入るときに少なくとも２回(春と秋に)は Windows を起動しないといけないことを覚えておく必要があります。Windows をしばらく起動しなかったら時計が1時間すすんだりおくれたりするのは何故？とフォーラムで聞くのはやめましょう。\n\n"
    },
    {
      "title": "Bluetooth ペアリング",
      "level": 2,
      "content": "Bluetooth デバイスを Linux と Windows の両方でペアリングする場合、両方のシステムは同じ MAC アドレスを持ちますが、ペアリング処理で生成された異なるリンクキーを使用します。その結果、一方の OS にペアリングすると、もう一方の OS からの接続が切断されます。再ペアリングせずにどちらの OS からも接続できるようにするには、Bluetooth#デュアルブートペアリングに従ってください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Booting Windows from a desktop shortcut\n- One-time boot into Windows partition from desktop shortcut\n- Windows 7/8/8.1/10 ISO to Flash Drive burning utility for Linux (MBR/GPT, BIOS/UEFI, FAT32/NTFS)\n\n"
    }
  ]
}