{
  "title": "Music Player Daemon (日本語)",
  "url": "https://wiki.archlinux.org/title/Music_Player_Daemon_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Music Player Daemon/ヒントとテクニック\n- Music Player Daemon/トラブルシューティング\n\nMPD (music player daemon) はサーバー・クライアントアーキテクチャを持った音声プレイヤーです。ほとんどリソースを消費しないで音声ファイルを再生したり、プレイリスト・音楽データベースを管理することができます。インターフェイスで接続するには、クライアントが必要になります。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 ローカル設定 (ユーザーごと) 2.1.1 ファイルとディレクトリの場所を設定する 2.1.2 オーディオ設定 2.1.3 systemd で自動起動 2.1.4 tty ログイン時の自動起動 2.1.5 スクリプトによる設定 2.2 グローバル設定 2.2.1 Music ディレクトリ 2.2.2 音声の設定 2.2.3 systemd で自動起動 2.2.3.1 ソケットのアクティベーション 2.2.4 ユーザー ID の起動ワークフロー 2.3 mpd のマルチ設定 2.3.1 icecast サーバーを実行 2.3.2 Satellite セットアップ\n- 3 クライアント 3.1 コンソール 3.2 グラフィカル\n- 4 参照\n\n- 2.1 ローカル設定 (ユーザーごと) 2.1.1 ファイルとディレクトリの場所を設定する 2.1.2 オーディオ設定 2.1.3 systemd で自動起動 2.1.4 tty ログイン時の自動起動 2.1.5 スクリプトによる設定\n- 2.2 グローバル設定 2.2.1 Music ディレクトリ 2.2.2 音声の設定 2.2.3 systemd で自動起動 2.2.3.1 ソケットのアクティベーション 2.2.4 ユーザー ID の起動ワークフロー\n- 2.3 mpd のマルチ設定 2.3.1 icecast サーバーを実行 2.3.2 Satellite セットアップ\n\n- 2.1.1 ファイルとディレクトリの場所を設定する\n- 2.1.2 オーディオ設定\n- 2.1.3 systemd で自動起動\n- 2.1.4 tty ログイン時の自動起動\n- 2.1.5 スクリプトによる設定\n\n- 2.2.1 Music ディレクトリ\n- 2.2.2 音声の設定\n- 2.2.3 systemd で自動起動 2.2.3.1 ソケットのアクティベーション\n- 2.2.4 ユーザー ID の起動ワークフロー\n\n- 2.2.3.1 ソケットのアクティベーション\n\n- 2.3.1 icecast サーバーを実行\n- 2.3.2 Satellite セットアップ\n\n- 3.1 コンソール\n- 3.2 グラフィカル\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "mpd パッケージを インストール または開発版の mpd-gitAUR\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "MPD は ユーザーごとの設定 または システム全体の設定 (設定がすべてのユーザーに適用される) モードで実行することができます。また、#マルチMPD設定 で複数の MPD インスタンスを動作させることも可能です。 MPD の設定方法は、使用目的によって異なります: ユーザーごとのローカルな設定は簡単で、デスクトップシステムにはより適しています。システム全体の設定は、複数のユーザがいる常時接続のオーディオサーバで、MPDインスタンスを共有する場合に適しているかもしれません。\n\nMPD がオーディオを再生できるようにするには、ALSA、オプションで PulseAudio または PipeWire をセットアップして動作させる必要があります。その後の オーディオ設定 セクションでは、ALSA、PulseAudio、または PipeWire に必要なパラメーターについて説明します。\n\nMPD は mpd.conf(5) ファイルで構成され、選択したセットアップ (システム全体またはユーザーごと) に応じてさまざまなパスに配置できます。つまり、使用される一般的な場所は次の 2 つです。\n\n1. ~/.config/mpd/mpd.conf ユーザーごとの設定モードでは、これが最初に検索される場所です。\n1. /etc/mpd.conf システム全体の設定。\n\nこれらは、最も一般的に使用される設定オプションの一部です。\n\n- pid_file - mpd がプロセス ID を保存するファイル\n- db_file - 音楽データベース\n- state_file - MPD の現在の状態\n- playlist_directory - プレイリストが保存されるフォルダ\n- music_directory - MPD が音楽を探すフォルダ\n- sticker_file - sticker データベース\n\n"
    },
    {
      "title": "ローカル設定 (ユーザーごと)",
      "level": 3,
      "content": "MPD はユーザーごとに設定することが可能です (基本的に MPD はグローバルに設定します)。通常ユーザーとして MPD を実行するメリットは:\n\n- ひとつのディレクトリ ~/.config/mpd/ (もしくは $HOME 下の他のディレクトリ) に MPD の設定ファイル全てが入ります。\n- 予期できない読み書きのパーミッションエラーを避けやすくなります。\n\n必要なファイルとプレイリストを集めた一つのディレクトリを作成すると良いでしょう。読み書きができるディレクトリならどれでも結構です (例: ~/.config/mpd/ もしくは ~/.mpd/)。このセクションでは ~/.config/mpd/ を使うことを前提にしています。これは $XDG_CONFIG_HOME のデフォルトの値に一致しています (XDG Base Directory Specification)。\n\nMPD は $XDG_CONFIG_HOME/mpd/mpd.conf や ~/.mpdconf で設定ファイルを検索します。他のパスをコマンドラインの引数で指定することも可能です。\n\n設定ファイルのサンプルを好きな場所にコピーしてください、例えば:\n\n```\n$ mkdir -p ~/.config/mpd\n$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf\n```\n\n~/.config/mpd/mpd.conf を編集して必要なファイルを指定してください:\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\n# Required files\ndb_file            \"~/.config/mpd/database\"\nlog_file           \"~/.config/mpd/log\"\n\n# Optional\nmusic_directory    \"~/Music\"\nplaylist_directory \"~/.config/mpd/playlists\"\npid_file           \"~/.config/mpd/pid\"\nstate_file         \"~/.config/mpd/state\"\nsticker_file       \"~/.config/mpd/sticker.sql\"\n```\n\n上で設定したプレイリストディレクトリを作成してください:\n\n```\n$ mkdir ~/.config/mpd/playlists\n```\n\n必要なファイルのパスを設定したら、MPD を起動できます。設定ファイルの場所を指定するには:\n\n```\n$ mpd config_file\n```\n\n"
    },
    {
      "title": "ファイルとディレクトリの場所を設定する",
      "level": 4,
      "content": "ユーザーモードでは、設定は $XDG_CONFIG_HOME/mpd/mpd.conf から読み取られます。\n\n```\nここでは、$XDG_CONFIG_HOME が ~/.config の デフォルト に等しいと仮定します。\n```\n\nユーザー設定を構築するには、パッケージに含まれている MPD 構成の例 が出発点として適切です。次の行を使用してコピーします。\n\n```\n$ mkdir ~/.config/mpd\n$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf\n```\n\nこの新しく作成された ~/.config/mpd/ ディレクトリを使用して、設定ファイルと共に、データベースやプレイリストなどの他の MPD 関連ファイルを保存することをお勧めします。ユーザーは、このディレクトリへの読み取り/書き込みアクセス権を持っている必要があります。\n\n次に、設定ファイルを編集して、必須オプションのファイルとディレクトリを指定します。\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\n# Recommended location for database\ndb_file            \"~/.config/mpd/database\"\n\n# If running mpd using systemd, delete this line to log directly to systemd.\nlog_file           \"syslog\"\n\n# The music directory is by default the XDG directory, uncomment to amend and choose a different directory\n#music_directory    \"~/music\"\n\n# Uncomment to refresh the database whenever files in the music_directory are changed\n#auto_update \"yes\"\n\n# Uncomment to enable the functionalities\n#playlist_directory \"~/.config/mpd/playlists\"\n#pid_file           \"~/.config/mpd/pid\"\n#state_file         \"~/.config/mpd/state\"\n#sticker_file       \"~/.config/mpd/sticker.sql\"\n```\n\n構成でプレイリストが有効になっている場合は、指定されたプレイリストディレクトリを作成する必要があります。\n\n```\n$ mkdir ~/.config/mpd/playlists\n```\n\nMPD を開始できるようになりました (設定ファイルのオプションのカスタムパスを指定します。)\n\n```\n$ mpd [config_file]\n```\n\nデータベースファイルを構築するために、MPD は上で定義した music_directory をスキャンする必要があります。このタスクを要求するには、MPD クライアント のいずれかを使用する必要があります。たとえば、mpc の場合、コマンドは次のようになります。\n\n```\n$ mpc update\n```\n\nまたは、オプション auto_update を \"yes\" に設定して、music_directory でファイルが変更されるたびにデータベースを更新することもできます。\n\n"
    },
    {
      "title": "オーディオ設定",
      "level": 4,
      "content": "ALSA が使われている場合、デフォルトのデバイスの 自動検出 は特に設定しなくてもすぐに動作するはずです。そうでない場合、ALSA オーディオ出力定義のシンタックスはこの後に提供されます: 必須の name パラメータはオーディオ出力に一意な名前を指定します。 alsa-utils パッケージの aplay --list-pcm を使って表示される正確なデバイスは、device オプションで指定することができます。\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type          \"alsa\"\n        name          \"ALSA sound card\"\n        # Optional\n        #device        \"iec958:CARD=Intel,DEV=0\"\n        #mixer_control \"PCM\"\n}\n```\n\nPulseAudio のユーザーは、次の変更を行う必要があります。\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type            \"pulse\"\n        name            \"pulse audio\"\n}\n```\n\nPipeWire を使用した出力も設定できます。\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type            \"pipewire\"\n        name            \"PipeWire Sound Server\"\n}\n```\n\n"
    },
    {
      "title": "systemd で自動起動",
      "level": 4,
      "content": "mpd パッケージは user サービス ファイルを提供します。このサービスはユーザとしてプロセスを起動するので、MPD 設定ファイル中の user と group 変数を使用したりパーミッションを変更する必要はありません。\n\nユーザーユニット mpd.service を 起動/有効化 します。(すなわち、--userフラグを使用)\n\n"
    },
    {
      "title": "tty ログイン時の自動起動",
      "level": 4,
      "content": "ログイン時に MPD を開始するには、次を ~/.profile または別の 自動起動ファイル に追加します。\n\n```\n# MPD daemon start (if no other user instance exists)\n[ ! -s ~/.config/mpd/pid ] && mpd\n```\n\n"
    },
    {
      "title": "スクリプトによる設定",
      "level": 4,
      "content": "こちら に正しいディレクトリ構造・設定ファイルを作成してユーザーの音楽ディレクトリをたずねるスクリプトが存在します。\n\n"
    },
    {
      "title": "グローバル設定",
      "level": 3,
      "content": "デフォルトの /etc/mpd.conf では /var/lib/mpd に設定が保存され mpd をデフォルトグループとして使います。\n\n"
    },
    {
      "title": "Music ディレクトリ",
      "level": 4,
      "content": "音楽ディレクトリは、設定ファイル /etc/mpd.conf のオプション music_directory によって定義されます。\n\nMPD は、音楽コレクションの all 親ディレクトリに対する実行権限と、音楽ファイルを含むすべてのディレクトリに対する読み込み権限が必要です。これは、音楽が格納されている ~/Music のようなユーザディレクトリのデフォルト設定と衝突する可能性があります。\n\nこの問題にはいくつかの解決策がありますが、これらのうちの1つが最も実用的なはずです。\n\n- ユーザーごとの設定 にモードを切り替える。\n- mpd ユーザーをユーザーのグループに追加し、グループにユーザーディレクトリへの実行権限を付与します。このようにして、mpd ユーザーはユーザーディレクトリを開く権限を持ちます。\n\n```\n# gpasswd -a mpd user_group\n$ chmod 710 /home/user_directory\n```\n\n- 音楽コレクションを次のいずれかの別のパスに保存します。: 全体を動かすことで、 バインドマウントで、 または Btrfs#サブボリューム で変更できます (この変更は /etc/fstab へのエントリで永続化する必要があります。))\n\n- 全体を動かすことで、\n- バインドマウントで、\n- または Btrfs#サブボリューム で変更できます (この変更は /etc/fstab へのエントリで永続化する必要があります。))\n\nMPD設定ファイルでは、ミュージックディレクトリを1つだけ定義する必要があります。もし、音楽ディレクトリが複数ある場合は、main music ディレクトリの下に /var/lib/mpd というシンボリックリンクを作成します。このとき、リンク先のディレクトリのパーミッションを適切に設定することを忘れないでください。\n\nあるファイル (複数可) を更新対象から除外するには、その親ディレクトリに .mpdignore という名前のファイルを作成します。このファイルの各行には、シェル ワイルドカードのリストを含めることができます。現在のディレクトリとすべてのサブディレクトリにあるファイルにマッチすると、それ以降の更新から除外されます。\n\n"
    },
    {
      "title": "音声の設定",
      "level": 4,
      "content": "ALSA ユーザーは以下のデバイス定義を使うことで、MPD クライアントで他のアプリケーションとは独立してボリュームを操作することができます:\n\n```\n/etc/mpd.conf\n```\n\n```\naudio_output {\n        type            \"alsa\"\n        name            \"My Sound Card\"\n        mixer_type      \"software\"      # optional\n}\n```\n\nMy Sound Card はサウンドカードや pcm の名前に置き換えてください (aplay --list-pcms で確認できます)。\n\nPulseAudio ユーザーは以下の修正をする必要があるかもしれません:\n\n```\n/etc/mpd.conf\n```\n\n```\naudio_output {\n        type            \"pulse\"\n        name            \"pulse audio\"\n}\n```\n\nPulseAudio は複数の高度な操作 (例: 音声を他のマシンへ転送する) をサポートしています。MPD で高度な設定を使うには Music Player Daemon Community Wiki を見て下さい。\n\n"
    },
    {
      "title": "systemd で自動起動",
      "level": 4,
      "content": "MPD は mpd.service ユニット で制御できます。MPD が音楽ディレクトリをスキャンするため、最初の起動には時間がかかる場合があります。\n\nクライアントアプリケーション (ncmpc は軽量で使いやすいクライアントです) を起動してすべてをテストし、音楽を再生します。\n\nmpd は mpd.socket ユニットを提供します。mpd.socket が有効になっている (そして mpd.service が無効になっている) 場合、systemd はすぐに MPD を開始せず、適切なソケットをリッスンするだけです。次に、MPD クライアントがこれらのソケットの 1つに接続しようとするたびに、systemd が mpd.service を開始し、これらのポートの制御を透過的に MPD プロセスに引き渡します。\n\n異なる UNIX ソケットまたはネットワークポート (各タイプの複数のソケットであっても) をリッスンしたい場合、またはネットワーク ポートをまったくリッスンしたくない場合は、mpd.socket ユニット /etc/mpd.conf を構成に合わせて適切に 編集 します (詳細については、mpd.conf(5) を参照してください。)\n\n"
    },
    {
      "title": "ユーザー ID の起動ワークフロー",
      "level": 4,
      "content": "MPD は root として実行しないでください。構成で user オプションを使用して、初期化後に MPD にユーザー ID を変更させることができます。非特権ユーザーとして MPD を開始する場合は、このオプションを使用しないでください。 MPD がスーパーユーザー権限を削除し、構成で設定されたユーザーの権限に切り替える方法を説明するために、通常の MPD 起動の手順を次に示します。\n\n1. MPD は systemd によって root として起動されるため、まず /etc/mpd.conf ファイルを読みます。\n1. MPD は設定ファイル中の user 変数を読み、root からこのユーザへ変更します。\n1. MPD は設定ファイルの残りの部分を読み込んで、それに従って設定を行います。設定ファイル中の ~ は、root のディレクトリではなく、ホームユーザの ディレクトリを指しています。\n\n"
    },
    {
      "title": "icecast サーバーを実行",
      "level": 4,
      "content": "二番目の MPD (例: ネットワークを介して音楽を共有するための icecast 出力) で上で示しているのと同じ音楽・プレイリストを使うには、上記の設定ファイルをコピーして新しいファイルを作って下さい (例: /home/username/.mpd/config-icecast) そして log_file, error_file, pid_file, state_file パラメータを変更してください (例: mpd-icecast.log, mpd-icecast.error など); 音楽やプレイリストのディレクトリに同じディレクトリのパスを使うことで二番目の mpd も一番目の mpd と同じ音楽コレクションを使うようになります。例えば、一番目のデーモンがでプレイリストを作成・編集すれば二番目のデーモンにも同じく影響を与えます。ユーザーは二番目のデーモンのために同じプレイリストを作る必要はありません。二番目のデーモンは ~/.xinitrc から同じ方法で呼び出して下さい (ポート番号は変えておく必要があります、そうしないと一番目の mpd デーモンと衝突がおこります)。\n\n"
    },
    {
      "title": "Satellite セットアップ",
      "level": 4,
      "content": "上記の方法でも動作しますが、理論的に、両方の mpd インスタンスが同じデータベースファイルに書き込みを行おうとしたときに、データベースに問題が発生する可能性があります。MPD には satellite モード があり、動作中の mpd インスタンスから他のインスタンスにデータベースを受け渡すことができます。\n\nconfig-icecast に以下を追加してください、host と port はプライマリの mpd サーバーに合わせて置き換えてください:\n\n```\ndatabase {\n    plugin \"proxy\"\n    host \"localhost\"\n    port \"6600\"\n}\n```\n\n"
    },
    {
      "title": "クライアント",
      "level": 2,
      "content": "mpd を操作するには別にクライアントが必要です。mpd wiki にあるクライアントのリストを見て下さい。人気のあるクライアントは以下の通りです:\n\n"
    },
    {
      "title": "コンソール",
      "level": 3,
      "content": "- mpc — MPD サーバーのコマンドラインインターフェイス。\n\n- ncmpc — mpd の ncurses クライアント。\n\n- ncmpcpp — 新しい機能が加わった C++ で書かれている ncmpc の正確なクローン (タグエディタ、検索エンジン)。\n\n- pms — 細かく設定・アクセスができる ncurses クライアント。\n\n- vimpc — ncurses ベースの MPD クライアント、vi ライクなキーバインド。\n\n- vimus — Haskell で書かれた vim ライクなキーバインドを備えた MPD クライアント。\n\n"
    },
    {
      "title": "グラフィカル",
      "level": 3,
      "content": "- Ario — Rhythmbox にインスパイアされた、mpd 用の機能豊富な GTK2 の GUI クライアント。\n\n- QmpdClient — Qt 4.x で書かれた GUI クライアント。\n\n- Sonata — エレガントな Python GTK+ クライアント。\n\n- gmpc — Music Player Daemon の GTK2 フロントエンド。軽量で使いやすいように設計されており、MPD の機能全てに完全にアクセスすることが可能。ユーザーは複数の方法で音楽をブラウズできるようになっています。多数のプラグインで拡張もできます。\n\n- Cantata — 多数の機能があり、インターフェイスが細かく設定できる MPD の Qt4/Qt5/KDE クライアント。\n\n- Xfmpc — リソースの消費力が少ないグラフィカルな GTK+ の MPD クライアント。\n\n- pymp'd — MPD の GTK+ フロントエンドクライアント。\n\n- Quimup — C++ と Qt3 で書かれた MPD のクライアント。\n\n- SkyMPC — Qt5 ベースのシンプルな MPD クライアント。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- MPD フォーラム\n- MPD ユーザーマニュアル\n\n"
    }
  ]
}