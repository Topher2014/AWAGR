{
  "title": "Python (日本語)",
  "url": "https://wiki.archlinux.org/title/Python_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Python パッケージガイドライン\n- Python/仮想環境\n- mod_wsgi\n- Django\n- IDE#Python IDEs\n\nWhat is Python? から:\n\nPython はインタプリタ型の対話的なオブジェクト指向プログラミング言語です。モジュール、例外、動的型付け、非常に高度な動的データ型、クラスなどが組み込まれています。また、オブジェクト指向にとどまらず、手続き型プログラミングや関数型プログラミングなど、様々なプログラミングパラダイムをサポートしています。Python は、非常に明快な構文と驚くべきパワーを兼ね備えています。多くのシステムコールやライブラリ、様々なウィンドウシステムへのインタフェースを持ち、C や C++ による拡張が可能です。また、プログラム可能なインターフェースを必要とするアプリケーションのための拡張言語としても使用可能です。Python は Linux や macOS を含む多くの Unix 系 OS や Windows で動作し、移植性に優れています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 その他のバージョン 1.2 代替実装 1.3 代替シェル\n- 2 パッケージの管理 2.1 Arch リポジトリ 2.2 サードパーティ製パッケージ 2.3 歴史的な背景\n- 3 ウィジェットバインディング\n- 4 ヒントとテクニック 4.1 仮想環境 4.2 Python シェルでのタブ補完機能 4.3 特定の Python バージョン用にビルドされたパッケージをリストする\n- 5 トラブルシューティング 5.1 Python のバージョンアップデート後にモジュールが見つからない\n- 6 参照 6.1 オフィシャル 6.2 サードパーティー\n\n- 1.1 その他のバージョン\n- 1.2 代替実装\n- 1.3 代替シェル\n\n- 2.1 Arch リポジトリ\n- 2.2 サードパーティ製パッケージ\n- 2.3 歴史的な背景\n\n- 4.1 仮想環境\n- 4.2 Python シェルでのタブ補完機能\n- 4.3 特定の Python バージョン用にビルドされたパッケージをリストする\n\n- 5.1 Python のバージョンアップデート後にモジュールが見つからない\n\n- 6.1 オフィシャル\n- 6.2 サードパーティー\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "Python 3 の最新リリースを提供する python パッケージを インストール して下さい。\n\n"
    },
    {
      "title": "その他のバージョン",
      "level": 3,
      "content": "Python の以前および将来のバージョンは AUR を介して入手でき、現在のバージョンで実行されない古いアプリケーション、他のバージョンで実行することを意図したプログラム、または単なる好奇心のために役立つ場合があります。\n\n- Python 3.13: python313AUR プレリリース\n- Python 3.12: python312AUR\n- Python 3.10: python310AUR\n- Python 3.9: python39AUR\n- Python 3.8: python38AUR (メンテナンスされていません)\n- Python 3.7: python37AUR (メンテナンスされていません)\n- Python 3.6: python36AUR (メンテナンスされていません)\n- Python 2.7: python2AUR (メンテナンスされていません)\n\nこれらの各パッケージは、バージョン番号に基づいて名前が付けられた個別のバイナリをインストールします。たとえば、Python 3.9 の場合は python3.9 であり、システム上で複数のバージョンが共存できるようにします。pyenv を使用して、複数のバージョンの Python を簡単に切り替えることもできます。\n\n古いバージョンの Python 用の追加のモジュール/ライブラリは、AUR で python<version without period> を検索することで見つけることができます。たとえば、Python 3.9 モジュールの場合は python39 を検索します。\n\nhttps://www.python.org/downloads/ ページで、任意のリリースのソースをダウンロードすることもできます。\n\n"
    },
    {
      "title": "代替実装",
      "level": 3,
      "content": "python パッケージは、Python のリファレンス実装である CPython をインストールします。 他にも利用可能な他の実装もあります。これらの実装は通常、古いバージョンの Python に基づいており、CPython との完全な互換性はありません。\n\nArch Linux で利用可能な実装には以下が含まれます:\n\n- PyPy — Python で書かれた Python 実装。CPython と比較して、速度とメモリ使用量の利点があります。\n\n- Jython — Java で書かれた Python 言語の実装。Python スクリプトを Java プログラムに埋め込んだり、Python プログラムで Java ライブラリを使用したりするために使用できます。\n\n- micropython — マイクロコントローラー用の Python。これには、Python 標準ライブラリの小さなサブセットが含まれており、マイクロコントローラーおよび制約のある環境で実行するように最適化されています。\n\n- IronPython — .NET と緊密に統合された Python プログラミング言語の実装。.NET ライブラリを使用でき、.NET プログラムで Python ライブラリを使用できます。\n\nより多くの実装が存在します Stackless、Pyston、Cinder などの一部] は大規模なテクノロジー企業の内部で使用されています。 他のものは歴史的に注目に値しますが、最も一般的な実装の改善により、もはや維持されていません。\n\n"
    },
    {
      "title": "代替シェル",
      "level": 3,
      "content": "python パッケージには、python コマンドで起動できるインタラクティブな Python shell/REPL が含まれています。 次のシェルも利用できます。\n\n- bpython — Python インタープリター用のすばらしいインターフェース。\n\n- IPython — 強力なインタラクティブ Python シェル。\n\n- Jupyter — IPython を利用した Web ベースの計算アプリケーション。\n\n- ptpython — prompt-toolkit で構築された高度な PythonREPL。\n\n"
    },
    {
      "title": "パッケージの管理",
      "level": 2,
      "content": "Arch Linux に Python パッケージをインストールするには、いくつかの方法があります。\n\n"
    },
    {
      "title": "Arch リポジトリ",
      "level": 3,
      "content": "多くの人気のあるパッケージは、公式リポジトリや AUR で利用できます。これは、システム全体のパッケージをインストールするための推奨される方法であり、Arch Linux で公式にサポートされている唯一の方法です。\n\n"
    },
    {
      "title": "サードパーティ製パッケージ",
      "level": 3,
      "content": "Python を使用する開発者は、Arch リポジトリにないパッケージや特定のバージョンのパッケージを使用する必要がある場合があります。推奨される方法は、各プロジェクトを分離するために別の仮想環境を使用し、/usr 内のシステムパッケージとの競合を防ぐことです。仮想環境内でパッケージをインストールするためのさまざまなツールが利用可能です。\n\n- pip(1) — Python の公式パッケージインストーラーです。Python Package Index やその他のインデックスから pip を使ってパッケージをインストールできます。\n\n- pipx — pip とよく似ていますが、実行するユーザーのために、各アプリケーションとその関連パッケージのための独立した環境を作成し、システムパッケージとの競合を防ぎます。アプリケーションとしてコマンドラインから直接実行できるパッケージに重点を置いています。pipx を使って Python Package Index やその他のインデックスからパッケージをインストールできます。\n\nPoetry — Python の依存関係管理とパッケージングを簡単にするツール。Poetry は、Python プロジェクトの開発、ビルド、公開、依存関係の管理を 1 つのツールで行うことができます。\n\n- Conda — Conda は、あらゆる言語のパッケージ、依存関係、および環境管理を提供します。もともとは Python 向けに作成され、科学計算、データサイエンス、機械学習の分野で広く使用されています。Conda は、miniforge コミュニティディストリビューション、および Anaconda や Miniconda ディストリビューションのパッケージマネージャーです。\n\n- uv — Rust で書かれた非常に高速な Python パッケージインストーラーおよび依存関係解決ツール。pip、pip-tools、pipx、poetry、pyenv、twine、virtualenv などを置き換えることができるオールインワンツール。\n\npip、pipx、poetry、および uv は、Python Package Index やその他のインデックスからパッケージをインストールします。Conda および Miniconda は、Anaconda リポジトリ を使用します。\n\n仮想環境の代替として、pip install --user を使用すると、パッケージを /usr ではなくユーザースキームにインストールできます。これにより、プロジェクトごとではなくユーザーごとにパッケージを分離できますが、通常は仮想環境を使用する方が推奨されます。\n\nパッケージ管理に関する公式のベストプラクティスについては、Python Packaging User Guide を参照してください。\n\n"
    },
    {
      "title": "歴史的な背景",
      "level": 3,
      "content": "歴史的に、easy_install (python-setuptools の一部) は、Eggとして配布されたパッケージをインストールするために使用されていました。easy_install と Eggs は、pip と Wheel に置き換えられました。詳細については、pip vs easy_install と パッケージフォーマット を参照してください。\n\n以前のバージョンの pip は、サードパーティのパッケージをシステム全体にインストールできましたが、これはPEP668で説明されているようにいくつかの問題を引き起こしました。システム全体の環境は現在、外部管理環境としてマークされ、pip はシステム全体へのインストールを許可しなくなりました。\n\n"
    },
    {
      "title": "ウィジェットバインディング",
      "level": 2,
      "content": "以下の ウィジェットツールキット のバインディングが存在します:\n\n- Tkinter — Tk GUI ツールキットへの標準の Python インターフェイス。\n\n- Qt for Python (PySide2) — Qt 5 の公式 Python バインディング。\n\n- Qt for Python (PySide6) — Qt 6 の公式 Python バインディング。\n\n- pyQt — Qt 用の Python バインディングのセット。\n\n- PyGObject — GTK、GStreamer、WebKitGTK、GLib、GIO などの GObject ベースのライブラリの Python バインディング。\n\n- wxPython — wxWidgets をラップする Python 用のクロスプラットフォーム GUI ツールキット。\n\nこれらを Python で使用するには、関連するウィジェットツールキットパッケージもインストールする必要ががあります (たとえば、Tkinter を使用するには tk もインストールする必要があります)\n\n"
    },
    {
      "title": "仮想環境",
      "level": 3,
      "content": "Python は他の仮想環境や、システムの Python パッケージに干渉されることなくパッケージをインストールすることのできる隔離された環境を作成するツールを提供しています。特定のアプリケーションで利用される Python インタプリタを変更することもできます。\n\n詳細は Python/仮想環境 を見てください。\n\n"
    },
    {
      "title": "Python シェルでのタブ補完機能",
      "level": 3,
      "content": "タブ補完 は対話型シェルでデフォルトで利用可能です。 readline completer はグローバル名前空間内の名前のみを補完することに注意してください。python-jedi を使えば、よりリッチなタブ補完を体験できます [1]\n\n"
    },
    {
      "title": "特定の Python バージョン用にビルドされたパッケージをリストする",
      "level": 3,
      "content": "場合によっては、インストールされているパッケージが特定のバージョンの Python 用にビルドされたものであることを知ると便利です。例えば、\n\n```\n$ pacman -Qoq /usr/lib/python3.11\n```\n\nPython バージョン 3.11 用に構築されたすべてのものがリストされます。これは、公式の Python バージョンが更新され、インストールされていない可能性のある Python バージョン用にビルドされているために再構築が必要なパッケージのリストを AUR から取得したい場合に特に便利です。Python バージョンを更新後 # Python のバージョンアップデート後にモジュールが見つからない を参照してください。\n\n"
    },
    {
      "title": "Python のバージョンアップデート後にモジュールが見つからない",
      "level": 3,
      "content": "Python ベースのアプリケーションでは、module_name という名前のインストールされた依存関係に対して、module_name という名前のモジュールが無いと出力するかもしれません。\n\n上記のシナリオは、依存関係がその Python のバージョンで利用できないか、全くインストールされていない場合に起こります。Python のパッケージは、バージョン管理された site-packages ディレクトリ (/usr/lib/pythonX.Y/site-packages システム全体なら ~/.local/lib/pythonX.Y/site-packages/ ユーザ単位なら X.Y' は \"3.11\" といったバージョン) にインストールします。そのため、新しいマイナーバージョンアップがあるたびに、以前の Python バージョンで構築された Python ベースのパッケージを正しく使用するためには、新しい Python バージョンに対して再構築する必要があります。\n\nAUR からインストールされた Python ベースのパッケージを含む、非公式パッケージを再構築するのはユーザーの責任であることに注意してください。FAQ#システムの完全アップグレードを実行すると、共有ライブラリの更新は行われるが、それに依存するアプリケーションの更新は行われない場合はどうなりますか? を参照してください。\n\n"
    },
    {
      "title": "オフィシャル",
      "level": 3,
      "content": "- Official Python documentation\n- Official Python tutorial\n\n"
    },
    {
      "title": "サードパーティー",
      "level": 3,
      "content": "- O'Reilly's Learning Python, 5th edition (初めての Python 第3版)\n- Dive Into Python, Dive Into Python3 (日本語訳)\n- A Byte of Python\n- Learn Python the Hard Way\n- Learn Python\n- Crash into Python (他のプログラミング言語に慣れていることを前提としてます)\n- Beginning Game Development with Python and Pygame\n- Think Python (日本語訳)\n- Pythonspot Python Tutorials - 無料のオンライン チュートリアル\n- Learn Python Step by Step\n- awesome-python - Python フレームワーク・ライブラリ・ソフトウェア・資料の厳選リスト。\n- boltons - 標準ライブラリで使える構造・レシピ・スニペット。\n- Learn Python Basics to Advanced - Python の基本から上級者向けまでを学ぶ\n\n"
    }
  ]
}