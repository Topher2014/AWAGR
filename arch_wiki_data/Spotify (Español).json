{
  "title": "Spotify (Español)",
  "url": "https://wiki.archlinux.org/title/Spotify_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2020-02-19** \n\nSpotify es un servicio de streaming de música de tipo freemium. Este artículo trata principalmente sobre el cliente semioficial y privativo Spotify para Linux, que es desarrollado por los ingenieros de Spotify en su tiempo libre y no cuenta con el apoyo activo de Spotify.[1] Alternativamente, hay un reproductor web y un puñado de clientes de terceros de código libre.\n\n"
    },
    {
      "title": "Clientes de terceros",
      "level": 2,
      "content": "- Clementine — Es capaz de reproducir desde Spotify con una cuenta premium después de activar (descargar) un complemento en la configuración.\n\n- Librespot — Una biblioteca-cliente de código abierto para Spotify. Permite a las aplicaciones usar el servicio de Spotify (streaming) sin usar el código privativo de libspotify.\n\n- Mopidy — Una alternativa basada en Music Player Daemon que es capaz de reproducir desde Spotify con una extensión.\n\n- ncspot — Cliente ncurses multiplataforma escrito en Rust, inspirado por ncmpc y similares.\n\n- Spotifyd — Un cliente de Spotify de código abierto que se ejecuta como daemon UNIX. Spotifyd reproduce música como el cliente oficial, pero es más liviano y está disponible en más plataformas. Spotifyd también admite el protocolo Spotify Connect, que lo hace aparecer como un dispositivo que se puede controlar desde los clientes oficiales.\n\n- spotify-tui — Un cliente de Spotify para la terminal escrito en Rust.\n\n- Tizonia — Reproductor de música en la nube de línea de comandos para Linux con soporte para Spotify, Google Play Music, YouTube, SoundCloud, servidores Plex y dispositivos Chromecast..\n\n- Tomahawk — Un reproductor de música escrito en C ++ / Qt. Ya no se desarrolla activamente\n\n"
    },
    {
      "title": "Limitar el almacenamiento",
      "level": 3,
      "content": "Spotify maneja automáticamente un tamaño determinado de caché. Sim embargo, tal vez quieras limitarlo para que tu sistema de archivos no se llene.\n\nAgrega storage.size (en MB) a /home/user/.config/spotify/prefs. Por ejemplo, para un tamaño de 3072MB:\n\n```\n~/.config/spotify/prefs\n```\n\n```\nstorage.size=3072\n```\n\n"
    },
    {
      "title": "Atajos de teclado",
      "level": 3,
      "content": "Para los entornos en los que el control de Spotify a través del teclado no funciona de forma automática, el cliente oficial de Linux tiene soporte para teclas multimedia como XF86AudioPlay. Podemos usar en este caso xbindkeys para captar los atajos de teclado y luego reenviarlas a Spotify utilizando uno de los métodos siguientes. Si utilizas xbindkeys, asegúrate de que Spotify se reinicie después de la instalación y configuración de teclas, de lo contrario no se capturarán correctamente las pulsaciones.\n\n"
    },
    {
      "title": "MPRIS",
      "level": 4,
      "content": "El cliente de Spotify implementa la interfaz D-Bus MPRIS2 que permite un control externo.\n\nLa utilidad playerctl proporciona una herramienta de línea de comandos para enviar comandos a los clientes de MPRIS. Los únicos comandos que probablemente necesites vincular globalmente son play-pause, next y previous\n\n```\n$ playerctl play-pause\n$ playerctl next\n$ playerctl previous\n```\n\nPlayerctl enviará el comando al primer reproductor que encuentre, por lo que este método también funcionará con otros reproductores como vlc. Para ignorar a otros reproductores, pon --player=spotify como argumento.\n\nUn Auricular Bluetooth#Controles y dispositivos similares pueden ser reenviados a mpris2 para que trabajen con spotify.\n\nUna alternativa a lo anterior es utilizar manualmente el D-Bus, que debería estar disponible por defecto ya que es una dependencia de systemd.\n\nUtiliza los siguientes comandos para controlar Spotify:\n\n```\n$ dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\n$ dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\n$ dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\n$ dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop\n```\n\nPuedes vincularlos a las teclas multimedia. Visita Atajos de teclado para más detalles.\n\n"
    },
    {
      "title": "pactl (pulseaudio)",
      "level": 4,
      "content": "Como habrás notado, los comandos del protocolo MPRIS no incluyen control de volumen. Esto se rompe dentro del mismo Spotify, que ignora las peticiones de cambio de volumen. Sin embargo, existe la posibilidad de controlar el volumen a través del sink de entrada de pulseaudio:\n\n```\n$ pactl set-sink-input-volume \"$current_sink_num\" +1% #volume up by 1%\n$ pactl set-sink-input-volume \"$current_sink_num\" -1% #volume down by 1%\n$ pactl set-sink-input-mute \"$current_sink_num\" toggle #mute toggler\n```\n\nEl número sink para \"$current_sink_num\" se puede encontrar en el resultado de este comando:\n\n```\n$ pactl list sink-inputs\n```\n\n```\nSink Input #3 << here\nDriver: protocol-native.c\n[...]\napplication.name = \"Spotify\"\n```\n\nPuedes crear un guión para cambiar el volumen y vincularlo, por ejemplo, a un atajo de teclado a través de la configuración entornos de escritorio o la xdotool descrita en la siguiente sección. Aquí hay algunos ejemplos:\n\nBash:\n\n```\n#!/bin/bash\nLANGUAGE=\"en_US\"\napp_name=\"Spotify\"\ncurrent_sink_num=\nsink_num_check=\napp_name_check=\npactl list sink-inputs |while read line; do \\\n    sink_num_check=$(echo \"$line\" |sed -rn 's/^Sink Input #(.*)/\\1/p')\n    if [ \"$sink_num_check\" != \"\" ]; then\n        current_sink_num=\"$sink_num_check\"\n    else\n        app_name_check=$(echo \"$line\" \\\n            |sed -rn 's/application.name = \"([^\"]*)\"/\\1/p')\n            if [ \"$app_name_check\" = \"$app_name\" ]; then\n                pactl set-sink-input-volume \"$current_sink_num\" +1%\n            fi\n    fi\ndone\n```\n\nEste script fue hecho por el usuario Mikołak en este post.\n\nDesafortunadamente este script no es la solución más rápida y si lo ejecutas varias veces a través del atajo del teclado, puede ser un poco lento.\n\nMás rápido (como 10 veces) es el código escrito en Python (requiere al menos Python 3.7 para ser instalado):\n\n```\n#!/usr/bin/env python3\n#Author: Marcin Kocur, attribution license: https://creativecommons.org/licenses/by/4.0/\nimport subprocess\nimport os\nx=0\ny=0\nenv = os.environ\nenv['LANG'] = 'en_US'\napp = '\"Spotify\"'\npactl = subprocess.check_output(['pactl', 'list', 'sink-inputs'], env=env).decode().strip().split()\nif app in pactl:\n    for e in pactl:\n        x += 1\n        if e == app:\n            break\n    for i in pactl[0 : x -1 ]:\n        y += 1\n        if i == 'Sink' and pactl[y] == 'Input' and '#' in pactl[y + 1]:\n            sink_id = pactl[y+1]\n        if i == 'Volume:' and '%' in pactl[y + 3]:\n            volume = pactl[y + 3]\n    sink_id = sink_id[1: ]\n    volume = volume[ : -1 ]\n    if int(volume) < 100:\n        subprocess.run(['pactl', 'set-sink-input-volume', sink_id, '+1%'])\n```\n\nPuedes guardarlo en un archivo .py. La última línea hace el trabajo, así que puedes ajustar el comando para bajar el volumen o silenciar.\n\n"
    },
    {
      "title": "Deshabilitar las notificaciones de cambio de canción",
      "level": 3,
      "content": "Después de la versión 0.9.10, las notificaciones de cambio de canción estaban habilitadas por defecto. Pueden ser bastante intrusivas. Para deshabilitarlas, añade la siguiente línea a ~/.config/spotify/Users/<spotifylogin>-user/prefs\n\n```\nui.track_notifications_enabled=false\n```\n\nTambién es posible lanzar Spotify con la opción --ui.track_notifications_enabled=false\n\n"
    },
    {
      "title": "Mostrar notificaciones de pista",
      "level": 3,
      "content": "No es específico de Spotify.\n\nplayerctl provee una biblioteca que puedes usar con python-gobject y un daemon de notificación como dunst para mostrar el artista y el título en una notificación cuando la canción cambie.\n\n```\n#!/usr/bin/env python3\n\nfrom gi.repository import Playerctl, GLib\nfrom subprocess import Popen\n\nplayer = Playerctl.Player()\n\ndef on_track_change(player, e):\n    track_info = '{artist} - {title}'.format(artist=player.get_artist(), title=player.get_title())\n    Popen(['notify-send', track_info])\n\nplayer.on('metadata', on_track_change)\n\nGLib.MainLoop().run()\n```\n\n"
    },
    {
      "title": "Saltar las pistas de radio que han sido reproducidas muchas veces",
      "level": 3,
      "content": "No es específico de Spotify.\n\nOtro uso de la biblioteca de playerctl es saltarse las pistas que se reproducen demasiado en la radio cuando no necesariamente quieres bajar la calificación de estas porque puede que quieras volver a escucharlas más tarde en esa emisora.\n\n```\n#!/usr/bin/env python3\n\nfrom gi.repository import Playerctl, GLib\n\nplayer = Playerctl.Player()\n\nplayed_out = ['Zu Fuss', 'Walk And Talk', 'Neuland']\n\ndef on_track_change(player, e):\n    if player.get_title() in played_out:\n        player.next()\n\nplayer.on('metadata', on_track_change)\n\nGLib.MainLoop().run()\n```\n\n"
    },
    {
      "title": "spotblock",
      "level": 4,
      "content": "spotblock (spotblock-gitAUR) es un bloqueador de anuncios eficiente en cuanto a recursos que se ejecuta como un daemon.\n\n"
    },
    {
      "title": "Spotify-AdKiller",
      "level": 4,
      "content": "Spotify-AdKiller (spotify-adkiller-gitAUR) es otra alternativa para bloquear los anuncios de Spotify.\n\n"
    },
    {
      "title": "Archivo de hosts",
      "level": 4,
      "content": "También puedes añadir las siguientes líneas a tu archivo de hosts para bloquear anuncios en Spotify :\n\n```\n/etc/hosts\n```\n\n```\n# Block spotify ads\n127.0.0.1 media-match.com\n127.0.0.1 adclick.g.doublecklick.net\n127.0.0.1 www.googleadservices.com\n127.0.0.1 open.spotify.com\n127.0.0.1 pagead2.googlesyndication.com\n127.0.0.1 desktop.spotify.com\n127.0.0.1 googleads.g.doubleclick.net\n127.0.0.1 pubads.g.doubleclick.net\n127.0.0.1 audio2.spotify.com\n127.0.0.1 www.omaze.com\n127.0.0.1 omaze.com\n127.0.0.1 bounceexchange.com\n#127.0.0.1 spclient.wg.spotify.com\n127.0.0.1 securepubads.g.doubleclick.net\n127.0.0.1 8.126.154.104.bc.googleusercontent.com\n127.0.0.1 104.154.126.8\n```\n\nspclient.wg.spotify.com ahora parece bloquear la radio y los daily mixes, así como las canciones recién reproducidas.\n\n"
    },
    {
      "title": "Enviar comandos a través de SSH",
      "level": 4,
      "content": "Si configuras ssh en el servidor, puedes enviar los controles de un cliente a una instancia remota de Spotify con\n\n```\n$ ssh user@host yourcommand\n```\n\ndonde yourcommand puede ser spotifycmd que instalaste en el servidor, o un script dbus para la versión de linux, como se describe arriba.\n\n"
    },
    {
      "title": "Intercepta la ventana de Spotify a través de SSH",
      "level": 4,
      "content": "Además de interceptar todo el escritorio con TeamViewer o VNC para controlar remotamente tu servidor, también puedes hacer lo mismo con la ventana de Spotify del servidor a tu cliente.\n\nPara ello necesitas configurar sshd en tu servidor e instalar x11vnc tanto en el servidor como en el cliente, así como tigervnc en el cliente. Luego puedes usar estos scripts para tomar el dektop completo o solo la ventana de Spotify, lo que esencialmente te da un comportamiento similar al de un cliente de la interfaz gráfica de usuario como con el MPD.\n\n```\n#!/bin/bash\n# vncget.sh\n\nif [[ $1 == all ]];then\n  ssh -f -t -L 5900:localhost:5900 user@host \"x11vnc -q -display :0 -auth .Xauthority\"\nelse\n  ssh -f -t -L 5900:localhost:5900 user@host \".bin/vncgetspotify.sh\"\nfi\n \nfor i in {1..4}; do\n  sleep 2\n  if vncviewer localhost:0; then break; fi\ndone\n```\n\n```\n#!/bin/bash\n# vncgetspotify.sh\n\nexport DISPLAY=:0\n\nid=$(wmctrl -lx | awk '/spotify.exe.Wine/ {print $1}')\n[[ -z $id ]] && id=$(wmctrl -lx | awk '/spotify.Spotify/ {print $1}')\n\nx11vnc -sid $id -display :0 -auth .Xauthority\n```\n\nNecesitarás copiar el segundo script a ~/.bin/vncgetspotify.sh en el servidor y el primer script a cualquier lugar de tu cliente.\n\nFinalmente, para interceptar Spotify, corre:\n\n```\n$ sh vncget.sh\n```\n\no para el escritorio entero:\n\n```\n$ sh vncget.sh all\n```\n\n"
    },
    {
      "title": "Modo HiDPI",
      "level": 3,
      "content": "Como el actual build de Spotify no detecta DPI, la cantidad por la que se puede escalar la interfaz se puede especificar usando el siguiente comando:\n\n```\n$ spotify --force-device-scale-factor='X\n```\n\ndonde X es la cantidad para escalar la interfaz por. Por ejemplo, 2.\n\nEste cambio puede ser añadido al archivo spotify.desktop para aplicar la escala cuando se lanza desde el escritorio.\n\nPara asegurarse de que el archivo no se sobrescribe cuando se actualiza el paquete, cópielo en su carpeta de aplicaciones locales:\n\n```\n$ cp /usr/share/applications/spotify.desktop ~/.local/share/applications/\n```\n\nAhora edita ~/.local/share/applications/spotify.desktop y añade la opción --force-device-scale-factor:\n\n```\nspotify.desktop\n```\n\n```\n[Desktop Entry]\nName=Spotify\nGenericName=Music Player\nComment=Spotify streaming music client\nIcon=spotify-client\nExec=spotify --force-device-scale-factor=2 %U\nTryExec=spotify\nTerminal=false\nType=Application\nCategories=Audio;Music;Player;AudioVideo\nMimeType=x-scheme-handler/spotify\n```\n\nEs posible que tengas que relanzar tu Desktop Manager antes de que estos cambios se hagan efectivos.\n\n"
    },
    {
      "title": "El entorno de escritio silencia Spotify",
      "level": 3,
      "content": "Comente \"module-role-cork\" en el archivo de configuración de pulseaudio.\n\nAbre /etc/pulse/default.pa con tu editor de texto y coméntalo:\n\n```\nload-module module-role-cork\n```\n\nO simplemente desactivalo con:\n\n```\npactl unload-module module-role-cork\n```\n\n"
    },
    {
      "title": "El buscador hace que toda la interfaz parpadee y luego se cuelgue",
      "level": 3,
      "content": "Spotify utiliza una versión antigua de Chromium Embedded Framework y genera un error que hace que se cuelgue repetidamente al intentar utilizar la búsqueda. Esto se puede solucionar usando la siguiente opción de línea de comandos:\n\n```\n--force-device-scale-factor=1.0000001\n```\n\n"
    },
    {
      "title": "Imágenes parpadeantes y renderización defectuosa mientras se usa Spotify Linux con DWM",
      "level": 3,
      "content": "Ejecuta spotify como una ventana flotante.\n\nPuedes añadir esta regla en tu config.h:\n\n```\n\"Spotify\", NULL, NULL, 2, True, -1 },\n```\n\nEsto le dirá a dwm que ejecute spotify como una ventana flotante asociada a la etiqueta \"2\" sin importar el modo de ventana en el que se encuentre. Recompila e instala el dwm para aplicar tu nueva configuración.\n\n"
    },
    {
      "title": "Búsqueda, navegación o radio sin funcionar",
      "level": 3,
      "content": "Si varias pestañas como la de navegación sólo muestran una pantalla en blanco, el campo de búsqueda no parece hacer nada o la página de radio no funciona (atascada al iniciar y sin respuesta al teclado o mouse), puede que estés usando un locale personalizado.\n\nIntenta configurar la variable de entorno LC_NUMERIC a en_US.utf8 antes de iniciar Spotify.\n\n"
    },
    {
      "title": "Punto muerto en la interfaz",
      "level": 3,
      "content": "Puede ocurrir en los gestores de ventanas tiling, como Awesome, cuando se hace doble clic en una nueva canción o lista de reproducción. Edita el archivo ~/.config/spotify/Users/[1-9]*-user/prefs para añadir o cambiar lo siguiente:\n\n```\nui.track_notifications_enabled=false\n```\n\nReinicia Spotify. Ten en cuenta que parecen existir varias causas para este problema, y esta solución en particular sólo se aplica a algunas versiones del cliente de Spotify, i3 y Awesome, y puede ser que existan causas adicionales de raíz para los usuarios de Debian y Ubuntu que informen de este problema. Observado con Spotify 0.9.17.1.g9b85d436 y Awesome 3.4.15 y i3-gaps 4.13-2 y Spotify 1.0.64.407.g9bd02c2d.\n\nNote: Este número tiene causas múltiples, así que mantén un registro de lo que cambias mientras investigas esto. Actualiza esta sección con escenarios adicionales y correcciones.\n\n"
    },
    {
      "title": "Las portadas de los álbumes y las imágenes han desaparecido; aparecen como cuadros vacíos",
      "level": 3,
      "content": "Salte de Spotify, luego abre las preferencias de Spotify ~/.config/spotify/prefs\n\nCambia @https a @http:\n\n```\nnetwork.proxy.addr=\"your-proxy.com:80@http\"\n network.proxy.mode=2\n```\n\nVer el post del formulario original aquí.\n\n"
    },
    {
      "title": "Spotify no detecta otros dispositivos en la red local",
      "level": 3,
      "content": "Si hay un cortafuegos, abre los puertos 57621 para UDP y TCP. Si utilizan una variante de las iptables Un simple cortafuegos con estado, haz lo siguiente:\n\n```\niptables -A TCP -p tcp --dport 57621 -j ACCEPT -m comment --comment spotify\niptables -A UDP -p udp --dport 57621 -j ACCEPT -m comment --comment spotify\n```\n\nTambién es posible restringir la fuente y el destino a la red local.\n\nSi utilizas Spotify Connect para reproducir música en un altavoz inalámbrico o en un AVR, tu cortafuegos debe estar configurado para la búsqueda de mDNS de Spotify. Lamentablemente, utiliza un puerto aleatorio sin privilegios [4] lo que hace que estas reglas del cortafuegos sean bastante engorrosas. Afortunadamente, puedes restringir las reglas al puerto de origen 1900 o 5353.\n\n```\niptables -A UDP -p udp --sport 1900 --dport 1025:65535 -j ACCEPT -m comment --comment spotify\niptables -A UDP -p udp --sport 5353 --dport 1025:65535 -j ACCEPT -m comment --comment spotify\n```\n\n"
    },
    {
      "title": "El texto de la barra de búsqueda es invisible cuando se usa un tema oscuro",
      "level": 3,
      "content": "El texto de la barra de búsqueda parece estar codificado en blanco, lo que lo hace invisible cuando se utiliza un tema Qt oscuro. Para arreglar esto, necesitarás anularlo.\n\nPrimero, crea un archivo css en algún lugar donde tu cuenta tenga permiso para leer/escribir (como tu carpeta de inicio). Llámalo como quieras (por ejemplo, spotify-override.css).\n\nAbre el archivo css recién creado y añade lo siguiente:\n\n```\nQLineEdit { color: #000 }\n```\n\nGuarda el archivo y ciérralo. A continuación, tienes que añadir lo siguiente al final de tu lanzador de Spotify (sustituye la ruta por la ruta real de tu archivo css):\n\n```\n-stylesheet=/home/user/spotify-overide.css\n```\n\nTu ruta de ejecución completa debería verse algo así:\n\n```\n/usr/share/spotify/spotify-client/spotify -stylesheet=/home/user/spotify-override.css\n```\n\n"
    },
    {
      "title": "Spotify no hace caso a las reglas de ventana",
      "level": 3,
      "content": "Los gestores de ventanas que intentan aplicar reglas específicas, como iniciarlo en un espacio de trabajo determinado o maximizarlo al inicio, no tienen ningún efecto, ya que Spotify no establece la propiedad WM_CLASS antes de crear la ventana, violando las especificaciones del ICCCM. Una solución es usar spotifywm-gitAUR.\n\n"
    },
    {
      "title": "La interfaz gráfica se cuelga mientras suena la música",
      "level": 3,
      "content": "También los botones de la pista anterior y la siguiente actúan con un retraso de 10 a 40 segundos. Spotify por defecto intenta enviar una notificación sobre la siguiente pista. Si no tienes un demonio de notificación instalado, la interfaz gráfica de Spotify se cuelga.\n\nLa solución es desactivar las notificaciones en la configuración o instalar un daemon de notificación desde notificaciones de escritorio.\n\n"
    },
    {
      "title": "Los bordes de la interfaz no aparecen y la aplicación ocupa toda la pantalla sobre el panel de Cinnamon",
      "level": 3,
      "content": "Si tiene problemas con la desaparición de los bordes de la ventana y la aplicación se pone en pantalla completa pero no puedes arrastrar la ventana o cambiar su tamaño, eso puede ser causado por las preferencias localizadas por defecto en el archivo de texto /home/yourusername/.config/Spotify/Users/yourusername-user/prefs configs:\n\n```\napp.window.position.width=1366\napp.window.position.height=768\n```\n\nLo que probablemente ocurre es que cuando ambas resoluciones coinciden con los valores de resolución de tu monitor \"principal\" o superiores. Esto puede ocurrir al pasar de dos monitores a uno solo. Como solución, cierra Spotify, edita el archivo prefs para eliminar las dos configuraciones anteriores, guárdalo y vuelve a ejecutar Spotify.\n\n"
    },
    {
      "title": "No se puede abrir la configuración en Wayland",
      "level": 3,
      "content": "Cuando se usa Wayland, al hacer clic en el botón 'Settings' no pasa nada. Usar el teclado en su lugar funcionará (flechas e intro). Ver [5]\n\n"
    },
    {
      "title": "Véase también",
      "level": 2,
      "content": "- playerctl — Un programa de línea de comandos para controlar varios reproductores\n- Spotify for Linux — Página principal del cliente Linux de Spotify\n\n"
    }
  ]
}