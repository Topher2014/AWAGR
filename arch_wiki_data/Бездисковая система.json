{
  "title": "Бездисковая система",
  "url": "https://wiki.archlinux.org/title/%D0%91%D0%B5%D0%B7%D0%B4%D0%B8%D1%81%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- NFS (Русский)\n- NFS Troubleshooting\n- PXE (Русский)\n- Mkinitcpio (Русский)#При использовании net\n- iSCSI Boot\n\nИз Википедии:Бездисковая рабочая станция:\n\n"
    },
    {
      "title": "Настройка сервера",
      "level": 2,
      "content": "Прежде всего, мы должны установить следующие компоненты:\n\n- Сервер DHCP для назначения IP-адресов нашим бездисковым узлам.\n- Сервер TFTP для передачи загрузочного образа (требование всех опций roms PXE).\n- Сетевое хранилище (NFS, Samba или NBD) для экспорта установки Arch на бездисковый узел.\n\n- dnsmasq способен одновременно действовать как сервер DHCP и TFTP. Для получения дополнительной информации смотрите статью dnsmasq.\n- Вы можете загрузить Arch Linux по сети не используя PXE. См. пункт SKUF\n\n"
    },
    {
      "title": "DHCP",
      "level": 3,
      "content": "Установите ISC dhcp и настройте его:\n\n```\n/etc/dhcpd.conf\n```\n\n```\nallow booting;\nallow bootp;\n\nauthoritative;\n\noption domain-name-servers 10.0.0.1;\n\noption architecture code 93 = unsigned integer 16;\n\ngroup {\n    next-server 10.0.0.1;\n\n    if option architecture = 00:07 {\n        filename \"/grub/x86_64-efi/core.efi\";\n    } else {\n        filename \"/grub/i386-pc/core.0\";\n    }\n\n    subnet 10.0.0.0 netmask 255.255.255.0 {\n        option routers 10.0.0.1;\n        range 10.0.0.128 10.0.0.254;\n    }\n}\n```\n\nRFC:4578 определяет параметр dhcp \"Client System Architecture Type\". В приведенной выше конфигурации, если клиент PXE запрашивает двоичный файл x86_64-efi (тип 0x7), мы соответствующим образом предоставляем его, в противном случае возвращаемся к устаревшему двоичному файлу. Это позволяет одновременно загружать UEFI и устаревшие клиенты BIOS в один и тот же сегмент сети.\n\nЗапустите службу systemd ISC DHCP.\n\n"
    },
    {
      "title": "TFTP",
      "level": 3,
      "content": "TFTP-сервер будет использоваться для передачи загрузчика, ядра и initramfs клиенту.\n\nУстановите корень TFTP в /srv/arch/boot. Смотрите статью TFTP для установки и настройки.\n\n"
    },
    {
      "title": "Сетевое хранилище",
      "level": 3,
      "content": "Основное различие между использованием NFS и NBD заключается в том, что, хотя с обоими вы можете иметь несколько клиентов, использующих одну и ту же установку, с NBD (по характеру манипулирования файловой системой напрямую) вам нужно будет использовать режим copyonwrite для этого, который в конечном итоге отбрасывает все записи при отключении клиента. Однако в некоторых ситуациях это может быть очень полезно.\n\n"
    },
    {
      "title": "NFS",
      "level": 4,
      "content": "Установите nfs-utils на сервере.\n\nВам нужно будет добавить корень вашей установки Arch в ваш экспорт NFS:\n\n```\n/etc/exports\n```\n\n```\n/srv       *(rw,fsid=0,no_root_squash,no_subtree_check)\n/srv/arch  *(rw,no_root_squash,no_subtree_check)\n```\n\nЗатем запустите службы NFS: nfs-idmapd nfs-mountd.\n\n"
    },
    {
      "title": "NBD",
      "level": 4,
      "content": "Установите nbd и настройте его.\n\n```\n/etc/nbd-server/config\n```\n\n```\n[generic]\n    user = nbd\n    group = nbd\n[arch]\n    exportname = /srv/arch.img\n    copyonwrite = false\n```\n\nЗапустите nbd службу systemd.\n\n"
    },
    {
      "title": "SKUF",
      "level": 4,
      "content": "SKUF Network Boot System - проект, который позволяет загрузить Arch Linux по сети, используя в качестве корня разрежённый файл, расположенный на Samba сервере.\n\nДля начала, установите samba и создайте для неё конфигурационный файл:\n\n```\n/etc/samba/smb.conf\n```\n\n```\n[global]\n\tworkgroup = WORKGROUP\n\tsecurity = user\n\n[arch]\n\tpath = /srv/samba\n\tvalid users = @skuf\n\twrite list = @skuf\n\tguest ok = no\n\tread only = no\n\twriteable = yes\n\tbrowseable = yes\n```\n\nЗапустите smb службу systemd\n\nПосле этого создайте группу skuf и пользователей, которые будут участниками этой группы и через которых будет происходить монтирование папки SAMBA на клиентской машине.\n\n```\n# groupadd skuf\n# useradd test -g skuf\n# smbpasswd -a test\n```\n\n"
    },
    {
      "title": "Установка клиента",
      "level": 2,
      "content": "Затем мы создадим полную установку Arch Linux в подкаталоге на сервере. Во время загрузки бездисковый клиент получает IP-адрес от DHCP-сервера, а затем загружается с хоста с помощью PXE и монтирует эту установку в качестве своего корня.\n\n"
    },
    {
      "title": "Настройка каталога",
      "level": 3,
      "content": "Создайте разрежённый файл размером не менее 2 ГиБ и создайте на нём файловую систему btrfs (вы также можете использовать реальное блочное устройство или LVM, если хотите).\n\n```\n# truncate -s 2G /srv/arch.img\n# mkfs.btrfs /srv/arch.img\n# export root=/srv/arch\n# mount --mkdir -o loop,compress=lzo /srv/arch.img \"$root\"\n```\n\n"
    },
    {
      "title": "Установка базовой системы",
      "level": 3,
      "content": "Установите devtools и arch-install-scripts, а затем запустите pacstrap, чтобы установить основные пакеты для клиента:\n\n```\n# pacstrap -K \"$root\" base linux linux-firmware mkinitcpio-nfs-utils nfs-utils\n```\n\nТеперь необходимо создать initramfs.\n\n"
    },
    {
      "title": "NFS",
      "level": 4,
      "content": "Для того, чтобы монтирование NFSv4 работало (не поддерживается nfsmount - по умолчанию для хука net), необходимы тривиальные модификации хука net.\n\n```\n# sed s/nfsmount/mount.nfs4/ \"$root/usr/lib/initcpio/hooks/net\" > \"$root/usr/lib/initcpio/hooks/netnfs4\"\n# cp $root/usr/lib/initcpio/install/net{,nfs4}\n```\n\nКопия net, к сожалению, необходима, чтобы он не перезаписывался при обновлении mkinitcpio-nfs-utils во время установки клиента.\n\nОтредактируйте $root/etc/mkinitcpio.conf и добавьте nfsv4 в MODULES, netnfs4 в HOOKS и /usr/bin/mount.nfs4 в BINARIES.\n\nЗатем мы выполним chroot для нашей установки и запустим mkinitcpio:\n\n```\n# arch-chroot \"$root\" mkinitcpio -p linux\n```\n\n"
    },
    {
      "title": "NBD",
      "level": 4,
      "content": "Пакет mkinitcpio-nbdAUR должен быть установлен на клиенте. Соберите его с помощью makepkg и установите его:\n\n```\n# pacman --root \"$root\" --dbpath \"$root/var/lib/pacman\" -U mkinitcpio-nbd-0.4-1-any.pkg.tar.xz\n```\n\nЗатем вам нужно добавить nbd в ваш массив HOOKS после net; net настроит вашу сеть для вас, но не пытайтесь монтировать NFS, если nfsroot не указан в параметрах ядра.\n\n"
    },
    {
      "title": "SKUF",
      "level": 4,
      "content": "Для установки Arch Linux на разрежённый файл используя SKUF Network Boot System, склонируйте git репозиторий:\n\n```\n$ git clone https://github.com/BiteDasher/skuf.git\n$ cd skuf\n$ ./switch-tag latest\n```\n\nЗатем соберите пакет skuf и ISO-образ, который позже будет использован в качестве переходного этапа для запуска основной системы через kexec\n\nПеред сборкой пакета настройте метод шифрования паролей для SAMBA (см. [1]):\n\n```\ntune.crypt\n```\n\n```\nA B\nX Y\nI O\n```\n\n```\ntune.password\n```\n\n```\n1234 Test password!\n```\n\nПотом задайте параметры по-умолчанию:\n\n```\ndefaults\n```\n\n```\nSAMBA_USERNAME=\"testuser\"\nSAMBA_PASSWORD=\"pa33w0rd\"\nSAMBA_ADDRESS=\"192.168.0.5\"\nSAMBA_PORT=\"445\"\nSAMBA_VERSION=\"3.0\"\n...\n```\n\nУстановите необходимые пакеты:\n\n```\n# ./install_deps.sh\n```\n\nИ, наконец, соберите пакет skuf:\n\n```\n$ ./tune_crypt.sh\n$ ./tune_password.sh\n$ ./setup_defaults.sh\n$ ./build_rootfs_tar.sh\n$ ./build_package.sh\n```\n\nISO-образ:\n\n```\n# ./setup_repo.sh\n# ./build_iso.sh\n```\n\nи разрежённый файл:\n\n```\n# ./create_image.sh -s РАЗМЕР_В_ГИГАБАЙТАХ дополнительные_пакеты\n```\n\nКогда закончите, переместите arch.ext4 в /srv/samba.\n\n"
    },
    {
      "title": "Настройка клиента",
      "level": 2,
      "content": "В дополнение к настройке, упомянутой здесь, вы также должны установить свои имя хоста, часовой пояс, локаль и раскладку клавиатуры, а затем следуйте любым другим соответствующим разделам руководства по установке.\n\n"
    },
    {
      "title": "GRUB",
      "level": 4,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\nНесмотря на то, что GRUB плохо документирован, он загружается через PXE.\n\n```\n# pacman --root \"$root\" --dbpath \"$root/var/lib/pacman\" -S grub\n```\n\nСоздайте префикс grub для целевой установки для обеих архитектур, используя grub-mknetdir.\n\n```\n# arch-chroot \"$root\" grub-mknetdir --net-directory=/boot --subdir=grub\n```\n\nК счастью для нас, grub-mknetdir создает префиксы для всех компилированных/установленных целей, а сопровождающие grub были достаточно хороши, чтобы предоставить нам обоих в одном пакете, поэтому grub-mknetdir нужно запускать только один раз.\n\nТеперь мы создаем тривиальную конфигурацию GRUB:\n\n```\n# vim \"$root/boot/grub/grub.cfg\"\n```\n\n```\nmenuentry \"Arch Linux\" {\n    linux /vmlinuz-linux quiet add_efi_memmap ip=:::::eth0:dhcp nfsroot=10.0.0.1:/arch\n    initrd /initramfs-linux.img\n}\n\nmenuentry \"Arch Linux (NBD)\" {\n    linux /vmlinuz-linux quiet add_efi_memmap ip=:::::eth0:dhcp nbd_host=10.0.0.1 nbd_name=arch root=/dev/nbd0\n    initrd /initramfs-linux.img\n}\n```\n\nGRUB сделает set root=(tftp,10.0.0.1) автоматически, так что ядро и initramfs будут переданы через TFTP без какой-либо дополнительной настройки, хотя вы можете явно установить его, если у вас есть другие пункты меню без tftp.\n\n- Все файлы GRUB и файлы initcpio должны быть доступны через TFTP. Например, для установки NBD с корнем TFTP, установленным на /srv/tftp, для успешной загрузки должны присутствовать файлы /srv/tftp/grub/x86_64-efi/core.efi и /srv/tftp/vmlinuz-linux. Вы можете скопировать все файлы /boot внутри образа в корень TFTP-сервера.\n- Вы можете сгенерировать конфигурацию grub командой grub-mkconfig, чтобы убедиться, что настройки видео установлены правильно. Однако после этого нужно изменить boot.cfg, чтобы удалить search --no-floppy ... и убедиться, что опции linux initrd (пути, настройки NBD, настройки NFS) установлены правильно.\n- Измените параметры ядра по необходимости, обратитесь к параметрам PXELINUX для NBD.\n\n"
    },
    {
      "title": "PXELINUX",
      "level": 4,
      "content": "PXELINUX предоставляется пакетом syslinux, для получения дополнительной информации смотрите Syslinux (Русский)#PXELINUX.\n\n"
    },
    {
      "title": "Корень NBD",
      "level": 4,
      "content": "В конце загрузки вы захотите переключить монтирование корневой файловой системы на rw и включить compress=lzo, что значительно улучшит производительность диска по сравнению с NFS.\n\n```\n# vim \"$root/etc/fstab\"\n```\n\n```\n/dev/nbd0  /  btrfs  rw,noatime,compress=lzo  0 0\n```\n\n"
    },
    {
      "title": "Каталоги состояний программ",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nВы можете смонтировать /var/log, например, как tmpfs, чтобы журналы с нескольких хостов не смешивались непредсказуемо и делали то же самое с /var/spool/cups, поэтому 20 экземпляров cups, использующих один и тот же spool, не сражаются друг с другом и делают 1 498 заданий на печать и едят целую бумагу (или, что еще хуже: тонер-картридж) в одночасье.\n\n```\n# vim \"$root/etc/fstab\"\n```\n\n```\ntmpfs   /var/log        tmpfs     nodev,nosuid    0 0\ntmpfs   /var/spool/cups tmpfs     nodev,nosuid    0 0\n```\n\nБыло бы лучше настроить программное обеспечение, которое имеет какое-то состояние/базу данных для использования уникальных каталогов для хранения состояния/баз данных для каждого хоста. Например, если вы хотите запустить puppet, вы можете просто использовать спецификатор %H в файле юнита puppet:\n\n```\n# vim \"$root/etc/systemd/system/puppetagent.service\"\n```\n\n```\n[Unit]\nDescription=Puppet agent\nWants=basic.target\nAfter=basic.target network.target\n\n[Service]\nType=forking\nPIDFile=/run/puppet/agent.pid\nExecStartPre=/usr/bin/install -d -o puppet -m 755 /run/puppet\nExecStart=/usr/bin/puppet agent --vardir=/var/lib/puppet-%H --ssldir=/etc/puppet/ssl-%H\n\n[Install]\nWantedBy=multi-user.target\n```\n\nPuppet-агент создаёт vardir и ssldir, если они не существуют.\n\nЕсли ни один из этих подходов не подходит, последним разумным вариантом будет создание systemd.generator(7), который создаёт узел монтирования, специфичный для текущего хоста (к сожалению, спецификаторы не разрешены в юнитах монтирования).\n\n"
    },
    {
      "title": "NBD",
      "level": 3,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\nЕсли вы используете NBD, вам нужно будет размонтировать arch.img до/во время загрузки вашего клиента.\n\nЭто особенно интересно, когда дело доходит до обновлений ядра. У вас не может быть смонтирована ваша файловая система клиента при загрузке клиента, но это также означает, что вам нужно использовать ядро отдельно от вашей файловой системы клиента, чтобы его собрать.\n\nВам нужно сначала скопировать $root/boot с установки клиента на ваш корень tftp (то есть в /srv/boot).\n\n```\n# cp -r \"$root/boot\" /srv/boot\n```\n\nЗатем вам нужно будет размонтировать $root перед запуском клиента.\n\n```\n# umount \"$root\"\n```\n\n"
    },
    {
      "title": "SKUF",
      "level": 3,
      "content": "Запишите skuflinux-smth.iso на флешку, воткните её в компьютер и выберите в настройках загрузки UEFI или BIOS.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- kernel.org: Монтирование корневой файловой системы через NFS (nfsroot)\n- syslinux.org: pxelinux FAQ\n\n"
    }
  ]
}