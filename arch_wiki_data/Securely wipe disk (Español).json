{
  "title": "Securely wipe disk (Español)",
  "url": "https://wiki.archlinux.org/title/Securely_wipe_disk_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2019-11-01** \n\nArtículos relacionados\n\n- Securely wipe disk/Tips and tricks\n- File recovery\n- Benchmarking (Español)\n- Data-at-rest encryption (Español)#Preparar el disco\n- dm-crypt (Español)\n\nLa limpieza de un disco se realiza escribiendo nuevos datos sobre cada bit.\n\n"
    },
    {
      "title": "Borrar todos los datos que quedan en el dispositivo",
      "level": 3,
      "content": "El caso de uso más común para limpiar un dispositivo de forma completa e irrevocable será cuando el dispositivo se va a regalar o vender. Es posible que queden datos (sin cifrar) en el dispositivo y que desee protegerlos contra una investigación forense simple que puede ser un juego de niños con, por ejemplo, el software recuperación de archivos.\n\nSi desea borrar rápidamente todo del disco, utilidades como /dev/zero o patrones simples, permiten un rendimiento aceptable, en tanto que una aleatoriedad adecuada puede ser ventajosa en algunos casos que deberían tratarse para #Remanencia de datos.\n\nCada bit sobrescrito significa proporcionar un nivel de borrado de datos que no permite la recuperación con funciones normales del sistema (como las órdenes estándar ATA/SCSI) e interfaces de hardware. Cualquier software de recuperación de archivos mencionado anteriormente debería estar especializado con funcionalidades propietarias de hardware de almacenamiento.\n\nEn el caso de un disco HDD, la recreación de datos no será posible sin, al menos, órdenes de disco no documentadas o alterando el controlador o el firmware del dispositivo para que se lean, por ejemplo, sectores reasignados (bloques defectuosos que S.M.A.R.T. retiró de su uso).\n\nExisten diferentes problemas de borrado relacionados con ciertas tecnologías de almacenamiento físico, en particular todos los dispositivos basados ​​en memoria flash y almacenamiento magnético más antiguo (discos duros antiguos, disquetes, cintas).\n\n"
    },
    {
      "title": "Preparativos para el cifrado de dispositivos de bloque",
      "level": 3,
      "content": "Si desea preparar su unidad para configurar de forma segura el cifrado de dispositivo de bloque dentro del área borrada, debe usar #Datos aleatorios generados por una cadena de números aleatorios criptográficamente segura (denominado RNG en este artículo en adelante).\n\nVéase también Wikipedia:Random number generation.\n\n"
    },
    {
      "title": "Remanencia de datos",
      "level": 2,
      "content": "Véase también Wikipedia:es:Persistencia de datos.\n\nLa representación residual de los datos puede permanecer incluso después de que se hayan hecho intentos para eliminar o borrar los datos.\n\nLos datos residuales pueden borrarse escribiendo datos (aleatorios) en el disco con una o más iteraciones. Sin embargo, más de una iteración puede no disminuir significativamente la posibilidad de reconstruir los datos de las unidades de disco duro. Vea #Magnetismo residual.\n\n"
    },
    {
      "title": "Sistema operativo, programas y sistema de archivos",
      "level": 3,
      "content": "El sistema operativo, los programas ejecutados o los sistemas de archivos journaling pueden copiar sus datos no cifrados en todo el dispositivo de bloque. Al escribir en discos planos, esto solo debería ser relevante en conjunción con uno de los anteriores.\n\nSi los datos pueden ubicarse exactamente en el disco y nunca se copiaron en ningún otro lugar, el borrado con datos aleatorios puede ser exhaustivo e impresionantemente rápido siempre que haya suficiente entropía en el agrupamiento.\n\nUn buen ejemplo es cryptsetup utilizando /dev/urandom para limpiar los espacios de keyslots de LUKS.\n\n"
    },
    {
      "title": "Memoria flash",
      "level": 4,
      "content": "La amplificación de la escritura y otras características hacen de la memoria flash (donde se incluye explícitamente SSD) un objetivo obstinado para un borrado confiable. Como hay mucha abstracción transparente entre los datos tal y como se ven en el chip de la controladora del dispositivo y los datos expuestos en el sistema operativo, nunca se sobrescribe la posición y borrar bloques o archivos particulares no es fiable.\n\nOtras «características» como la compresión transparente (todos los SSD SandForce) pueden comprimir su /dev/zero o patrón de flujo, por lo que si el borrado es rápido más allá de lo razonable, este podría ser el caso.\n\nDesensamblar dispositivos de memoria flash, desoldar los chips y analizar el contenido de datos sin la controladora de por medio es posible sin dificultad utilizando hardware simple. Las empresas de recuperación de datos lo hacen por poco dinero.\n\nPara más información, vea:\n\n- Solid state drive/Memory cell clearing\n- Borrado fiable de datos de unidades de estado sólido basadas en flash.\n- #Seleccionar un objetivo\n\n"
    },
    {
      "title": "Sectores defectuosos marcados",
      "level": 4,
      "content": "Si un disco duro marca un sector como defectuoso, lo acordona y la sección se vuelve imposible de escribir a través del software. Por lo tanto, una sobrescritura completa no lo alcanzaría. Sin embargo, debido al tamaño de los bloques, estas secciones solo equivaldrían a unos pocos KB teóricamente recuperables.\n\n"
    },
    {
      "title": "Magnetismo residual",
      "level": 4,
      "content": "Una sola sobrescritura completa con ceros o datos aleatorios no genera datos recuperables en un dispositivo de almacenamiento moderno de alta densidad.[1] No obstante, las indicaciones se refieren a bits residuales únicos; la reconstrucción de los patrones de bytes generalmente no es factible.[2] Consulte también [3], [4] y [5].\n\n"
    },
    {
      "title": "Seleccionar un objetivo",
      "level": 2,
      "content": "Utilice fdisk (Español) para localizar todos los dispositivos de lectura/escritura a los que el usuario tiene acceso de lectura.\n\nVerifique en la salida las líneas que comienzan con dispositivos como /dev/sd\"X\".\n\nEste es un ejemplo para un disco HDD formateado para arrancar un sistema Linux:\n\n```\n# fdisk -l\n```\n\n```\nDisk /dev/sda: 250.1 GB, 250059350016 bytes, 488397168 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x00ff784a\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048      206847      102400   83  Linux\n/dev/sda2          206848   488397167   244095160   83  Linux\n```\n\nO la imagen de instalación de Arch escrita en una memoria USB de 4GB:\n\n```\n# fdisk -l\n```\n\n```\nDisk /dev/sdb: 4075 MB, 4075290624 bytes, 7959552 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x526e236e\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1   *           0      802815      401408   17  Hidden HPFS/NTFS\n```\n\nSi le preocupa causar un daño involuntario a datos importantes del equipo principal, considere usar un entorno aislado como un entorno virtual (VirtualBox, VMWare, QEMU, etc...) con unidades de disco conectadas directamente a él o un único equipo con un solo disco de almacenamiento que necesita limpiar arrancado desde un soporte Live (USB, CD, PXE, etc.) o utilice un script para evitar limpiar particiones montadas por un error tipográfico.\n\n"
    },
    {
      "title": "Seleccionar un tamaño de bloque",
      "level": 2,
      "content": "Vea también Wikipedia:Dd (Unix)#Block size, blocksize io-limits.\n\nSi tiene un disco duro de formato avanzado, se recomienda que especifique un tamaño de bloque mayor que los 512 bytes predeterminados. Para acelerar el proceso de sobrescritura, elija un tamaño de bloque que coincida con la geometría física de su unidad, agregando la opción de tamaño de bloque a la orden dd (es decir, bs=4096 para 4KB).\n\nfdisk muestra el tamaño del sector físico y lógico para cada disco. Alternativamente, sysfs expone información:\n\n```\n/sys/block/sdX/size\n/sys/block/sdX/queue/physical_block_size\n/sys/block/sdX/queue/logical_block_size\n/sys/block/sdX/sdXY/alignment_offset\n/sys/block/sdX/sdXY/start\n/sys/block/sdX/sdXY/size\n```\n\n"
    },
    {
      "title": "Calcular bloques para borrar manualmente",
      "level": 3,
      "content": "A continuación, la determinación del área de datos a borrar se realiza en un ejemplo.\n\nUn dispositivo de almacenamiento de bloque contiene sectores y un tamaño único para cada sector que puede usarse para calcular el tamaño completo del dispositivo en bytes. Puede hacerlo multiplicando el número de sectores con el tamaño del sector.\n\nComo ejemplo, vamos a usar los parámetros con la orden dd para borrar una partición:\n\n```\n# dd if=fuente_datos of=/dev/sd\"X\" bs=tamaño_sector count=número_sector seek=sector_inicio_partición status=progress\n```\n\nAquí verá solo una parte de la salida de la orden fdisk -l /dev/sdX ejecutada con root, que muestra la información de la partición de ejemplo:\n\n```\nDevice     Boot      Start        End         Sectors     Size  Id Type\n/dev/sd\"XA\"            2048         3839711231  3839709184  1,8T  83 Linux\n/dev/sd\"XB\"            3839711232   3907029167  67317936    32,1G  5 Extended\n```\n\nLa primera línea de la salida de fdisk muestra el tamaño del disco en bytes y los sectores lógicos:\n\n```\nDisk /dev/sd\"X\": 1,8 TiB, 2000398934016 bytes, 3907029168 sectors\n```\n\nPara calcular el tamaño de un solo sector lógico, utilice echo $((2000398934016 / 3907029168)) o utilice los datos de la segunda línea de salida de fdisk:\n\n```\nUnits: sectors of 1 * 512 = 512 bytes\n```\n\nPara calcular los sectores físicos que harán que funcione más rápido, podemos usar la tercera línea:\n\n```\nSector size (logical/physical): 512 bytes / 4096 bytes\n```\n\nPara obtener el tamaño del disco en sectores físicos, necesitará el tamaño del disco conocido en bytes dividido por el tamaño de un solo sector físico echo $((2000398934016 / 4096)), puede obtener el tamaño del dispositivo de almacenamiento o partición del mismo con la orden blockdev --getsize64 /dev/sd\"XY\".\n\n- En los ejemplos siguientes utilizaremos el tamaño del sector lógico.\n- Puede incluso borrar el espacio en disco no asignado con una orden dd calculando la diferencia entre el final de uno y el inicio de la siguiente partición.\n\nPara borrar la partición /dev/sd\"XA\", los parámetros de ejemplo con sectores lógicos se usarían así:\n\n```\nStart=2048\nEnd=3839711231\nBytesInSector=512\n```\n\nPara utilizar la dirección de inicio de la partición en el dispositivo para establecerla en la opción seek=:\n\n```\n# dd if=data_source of=/dev/sd\"X\" bs=${BytesInSector} count=${End - Start} seek=${Start} status=progress\n```\n\nPara utilizar el tamaño de las particiones (en sectores lógicos):\n\n```\nLogicalSectors=3839709184\n```\n\n```\n# dd if=data_source of=/dev/sd\"XA\" bs=${BytesInSector} count=${LogicalSectors} status=progress\n```\n\nO, para borrar todo el disco utilizando los sectores físicos:\n\n```\nAllDiskPhysicalSectors=488378646\nPhysicalSectorSizeBytes=4096\n```\n\n```\n# dd if=data_source of=/dev/sd\"X\" bs=${PhysicalSectorSizeBytes} count=${AllDiskPhysicalSectors} seek=0 status=progress\n```\n\n"
    },
    {
      "title": "Seleccionar una fuente de datos",
      "level": 2,
      "content": "Como se acaba de decir si desea borrar datos confidenciales, puede usar cualquier opción que se ajuste a sus necesidades.\n\nSi desea configurar el cifrado de dispositivos de bloque después, siempre debe borrar, al menos, con un algoritmo de cifrado como fuente o, incluso, con datos pseudoaleatorios.\n\nPara datos que no son verdaderamente aleatorios, la velocidad de escritura de su disco debería ser el único factor limitante. Si necesita datos aleatorios, el rendimiento del sistema requerido para generarlos puede depender en gran medida de lo que elija como fuente de entropía.\n\n"
    },
    {
      "title": "Datos no aleatorios",
      "level": 3,
      "content": "La sobrescritura con /dev/zero o patrones simples se considera segura en la mayoría de los recursos. En el caso de los discos duros actuales, debería ser suficiente para limpiar rápidamente los discos.\n\n"
    },
    {
      "title": "Prueba de escritura de patrón",
      "level": 4,
      "content": "#Badblocks puede escribir patrones simples en cada bloque de un dispositivo y luego leerlos y verificarlos buscando áreas dañadas (al igual que memtest86* hace con la memoria).\n\nComo el patrón se escribe en cada bloque accesible, esto efectivamente borra el dispositivo.\n\n"
    },
    {
      "title": "Datos aleatorios",
      "level": 3,
      "content": "Para conocer las diferencias entre los datos aleatorios y pseudoaleatorios como fuente, consulte Random number generation.\n\n"
    },
    {
      "title": "Datos cifrados",
      "level": 3,
      "content": "Al preparar una unidad para el cifrado de disco completo, generalmente no es necesario obtener una entropía de alta calidad. La alternativa es usar un flujo de datos cifrado. Por ejemplo, si va a utilizar AES para su partición encriptada, debe limpiarla con un cifrado de encriptación equivalente antes de crear el sistema de archivos para hacer que el espacio vacío no se distinga del espacio utilizado.\n\n"
    },
    {
      "title": "Sobrescribir el objetivo",
      "level": 2,
      "content": "La unidad elegida se puede sobrescribir con varias utilidades, haga su elección. Si solo desea borrar un solo archivo, Securely wipe disk/Tips and tricks#Wipe a single file tiene consideraciones adicionales además de las utilidades mencionadas a continuación.\n\n"
    },
    {
      "title": "Redirigir la salida",
      "level": 3,
      "content": "La salida redirigida se puede usar tanto para la creación de los archivos como para reescribir el espacio libre en la partición, borrar todo el dispositivo o una sola partición.\n\nA continuación se presentan ejemplos que se pueden usar para reescribir la partición o un dispositivo de bloque al redirigir stdout (salida estándar) desde otras utilidades:\n\n```\n$ cat /dev/urandom > /dev/sd\"XY\"\n```\n\n```\ncat: write error: No space left on device\n```\n\n```\n$ xz -z0 /dev/urandom -c > /dev/sd\"XY\"\n```\n\n```\nxz: (stdout): Write error: No space left on device\n```\n\n```\n$ dd if=/dev/urandom > /dev/sd\"XY\"\n```\n\n```\ndd: writing to ‘standard output’: No space left on device\n20481+0 records in\n20480+0 records out\n10485760 bytes (10 MB, 10 MiB) copied, 2.29914 s, 4.6 MB/s\n```\n\nLa orden de copia de archivos cp también se puede utilizar para reescribir el dispositivo, ya que ignora el tipo de destino:\n\n```\n$ cp /dev/urandom /dev/sd\"XY\"\n```\n\n```\ncp: error writing ‘/dev/sd\"XY\"’: No space left on device\n cp: failed to extend ‘/dev/sd\"XY\"’: No space left on device\n```\n\nPara mostrar la velocidad y el tiempo, puede usar pv:\n\n```\n# pv --timer --rate --stop-at-size -s \"$(blockdev --getsize64 /dev/sd\"XY\" )\" /dev/zero > /dev/sd\"XY\"\n```\n\n"
    },
    {
      "title": "dd",
      "level": 3,
      "content": "Consulte también Core utilities (Español)#Esenciales.\n\nNote: **verifique repetidamente** \n\nRellene con ceros el disco escribiendo un byte de cero en cada ubicación dirigida al disco utilizando la secuencia /dev/zero.\n\n```\n# dd if=/dev/zero of=/dev/sdX bs=4096 status=progress\n```\n\nO la secuencia /dev/urandom:\n\n```\n# dd if=/dev/urandom of=/dev/sdX bs=4096 status=progress\n```\n\nEl proceso finaliza cuando dd informa No space left on device y devuelve el control:\n\n```\ndd: writing to ‘/dev/sdb’: No space left on device\n7959553+0 records in\n7959552+0 records out\n4075290624 bytes (4.1 GB, 3.8 GiB) copied, 1247.7 s, 3.3 MB/s\n```\n\nPara acelerar la limpieza de una unidad grande, consulte también:\n\n- Securely wipe disk/Tips and tricks#dd - advanced example que utiliza OpenSSL;\n- Securely wipe disk/Tips and tricks#Using a template file que borra datos preestablecidos no aleatorios (por ejemplo, sobrescribe un disco completo con un solo archivo) pero es muy rápido;\n- dm-crypt (Español)/Drive preparation (Español)#Métodos específicos de dm-crypt que utiliza dm-crypt.\n\n"
    },
    {
      "title": "wipe",
      "level": 3,
      "content": "Especializado en borrar archivos, está disponible como el paquete wipe. Para borrar rápidamente un destino, puede usar algo como:\n\n```\n$ wipe -r /path/to/wipe\n```\n\nVea también wipe(1). La herramienta se actualizó por última vez en 2009. Su página SourceForge sugiere que está actualmente sin mantenimiento.\n\n"
    },
    {
      "title": "shred",
      "level": 3,
      "content": "shred (del paquete coreutils) es una orden de Unix que se puede usar para eliminar de forma segura archivos individuales o dispositivos completos de modo que puedan recuperarse solo con hardware especializado no sin gran dificultad, si es que lo hacen. Por defecto, shred usa tres pasadas, escribiendo datos pseudoaleatorios en el dispositivo durante cada pasada. Esto se puede reducir o aumentar.\n\nLa siguiente orden invoca shred con su configuración predeterminada y muestra el progreso.\n\n```\n# shred -v /dev/sdX\n```\n\nAlternativamente, se le puede indicar a shred que haga solo una pasada, con entropía de, por ejemplo, /dev/urandom.\n\n```\n# shred --verbose --random-source=/dev/urandom -n1 /dev/sdX\n```\n\n"
    },
    {
      "title": "Badblocks",
      "level": 3,
      "content": "Para permitir que badblocks (del paquete e2fsprogs) realice una limpieza de disco, se debe realizar una prueba de lectura-escritura destructiva:\n\n```\n# badblocks -c <NUMBER_BLOCKS> -wsv /dev/<drive>\n```\n\n"
    },
    {
      "title": "hdparm",
      "level": 3,
      "content": "hdparm admite ATA Secure Erase, que es funcionalmente equivalente a llenar un disco con ceros. Sin embargo, es manejado por el firmware del disco duro e incluye «áreas de datos ocultos». Como tal, puede verse como una orden moderna de «formato de bajo nivel». Según los informes, las unidades SSD alcanzan el rendimiento de fábrica después de emitir esta orden, pero es posible que no se borren lo suficiente (consulte #Memoria flash).\n\nAlgunas unidades admiten Enhanced Secure Erase, que utiliza distintos patrones definidos por el fabricante. Si la salida de hdparm -I para el dispositivo indica una ventaja de tiempo múltiple para el borrado Enhanced, el dispositivo probablemente tenga una función de cifrado por hardware y el borrado se realizará con las claves de dicho cifrado solamente.\n\nPara obtener instrucciones detalladas sobre el uso de ATA Secure Erase, consulte Solid state drive/Memory cell clearing y la Linux ATA wiki.\n\n"
    },
    {
      "title": "Véase también",
      "level": 2,
      "content": "- Limpiar el espacio libre en Linux\n\n"
    }
  ]
}