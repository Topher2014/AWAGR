{
  "title": "Git (Русский)",
  "url": "https://wiki.archlinux.org/title/Git_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Bisecting bugs with Git\n- Concurrent Versions System\n- Git server\n- Gitweb\n- HTTP tunneling#Tunneling Git\n- Subversion\n- VCS package guidelines\n\nGit — система управления версиями (VCS), созданная Линусом Торвальдсом, создателем ядра Linux. Git используется во множестве проектов, в том числе для управления исходным кодом ядра Linux. Также Git используется для управления файлами сборки пакетов в официальных репозиториях Arch и в AUR.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет git. Также доступна разрабатываемая версия git-gitAUR. Для использования некоторых инструментов (таких как git svn, git gui или gitk) понадобится установить опциональные зависимости.\n\n"
    },
    {
      "title": "Графические интерфейсы",
      "level": 3,
      "content": "Смотрите также git GUI Clients.\n\n- Giggle — GTK-фронтенд для git.\n\n- GitAhead — Графический интерфейс для git со встроенным Merge Tool.\n\n- GitButler — Клиент git на базе Tauri/Rust/Svelte.\n\n- Git Cola — Изящный и мощный графический интерфейс для Git, написанный на Python.\n\n- Git Extensions — Графический интерфейс для Git, позволяющий управлять им без использования командной строки.\n\n- gitg — Клиент GNOME для просмотра репозиториев git. Входит в состав gnome-extra.\n\n- git-gui — Графический интерфейс для Git на базе Tcl/Tk.\n\n- GitHub Desktop — Графический интерфейс на базе Electron, созданный командой GitHub.\n\n- gitk — Просмотрщик репозиториев Git на базе Tcl/Tk.\n\n- Gittyup — Клиент Git на базе Qt.\n\n- Guitar — Графический клиент Git.\n\n- gitui — Быстрый консольный интерфейс для git, написанный на Rust.\n\n- Kommit — Клиент Git для KDE.\n\n- lazygit — Простой консольный интерфейс для команд git.\n\n- QGit — Графический инструмент для просмотра истории ревизий, содержимого патчей и изменённых файлов, графического отслеживания различных веток разработки.\n\n- RabbitVCS — Набор графических инструментов, написанных для обеспечения простого и понятного доступа к используемым вами системам контроля версий.\n\n- Sublime Merge — Клиент Git от создателей Sublime Text.\n\n- Tig — Консольный интерфейс для git на базе ncurses.\n\n- ungit — Обеспечивает удобство работы с git, не жертвуя при этом универсальностью git.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Перед использованием Git как минимум укажите свои имя и почту, которые будут добавляться в создаваемые вами патчи и коммиты:\n\n```\n$ git config --global user.name  \"John Doe\"\n$ git config --global user.email \"johndoe@example.com\"\n```\n\nСмотрите Введение - Первоначальная настройка Git.\n\nПримеры дополнительных настроек есть в разделе #Советы и рекомендации.\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Git-репозиторий находится в каталоге .git, в нём хранится история ревизий и другие метаданные. Каталог, который отслеживается этим репозиторием (по умолчанию родительский), называется рабочим каталогом. Изменения в рабочем дереве должны быть добавлены в индекс (staged), прежде чем они будут записаны (commit) в репозиторий. Git также позволяет отменять изменения в файлах, восстанавливая их старые версии из ранее созданных коммитов.\n\nСмотрите Введение - О системе контроля версий.\n\n"
    },
    {
      "title": "Получение Git-репозитория",
      "level": 3,
      "content": "Смотрите Основы Git - Создание Git-репозитория.\n\n"
    },
    {
      "title": "Запись изменений",
      "level": 3,
      "content": "Смотрите Основы Git - Запись изменений в репозиторий.\n\n"
    },
    {
      "title": "Просмотр истории изменений",
      "level": 3,
      "content": "Смотрите Основы Git - Просмотр истории коммитов.\n\n"
    },
    {
      "title": "Операции отмены",
      "level": 3,
      "content": "Смотрите Основы Git - Операции отмены.\n\n"
    },
    {
      "title": "Работа с удалёнными репозиториями",
      "level": 3,
      "content": "Смотрите Основы Git - Работа с удалёнными репозиториями.\n\n"
    },
    {
      "title": "Ветвление",
      "level": 3,
      "content": "Смотрите Ветвление в Git - О ветвлении в двух словах.\n\n"
    },
    {
      "title": "Основы ветвления и слияния",
      "level": 4,
      "content": "Смотрите Ветвление в Git - Основы ветвления и слияния.\n\n"
    },
    {
      "title": "Управление ветками",
      "level": 4,
      "content": "Смотрите Ветвление в Git - Управление ветками.\n\n"
    },
    {
      "title": "Работа с ветками",
      "level": 4,
      "content": "Смотрите Ветвление в Git - Работа с ветками.\n\n"
    },
    {
      "title": "Удалённые ветки",
      "level": 4,
      "content": "Смотрите Ветвление в Git - Удалённые ветки.\n\n"
    },
    {
      "title": "Перебазирование",
      "level": 4,
      "content": "Смотрите Ветвление в Git - Перебазирование.\n\n"
    },
    {
      "title": "Распределённый рабочий процесс",
      "level": 4,
      "content": "Смотрите Распределённый Git - Распределённый рабочий процесс.\n\n"
    },
    {
      "title": "Участие в проекте",
      "level": 4,
      "content": "Смотрите Распределённый Git - Участие в проекте.\n\n"
    },
    {
      "title": "Сопровождение проекта",
      "level": 4,
      "content": "Смотрите Распределённый Git - Сопровождение проекта.\n\n"
    },
    {
      "title": "Выбор ревизии",
      "level": 4,
      "content": "Смотрите Инструменты Git - Выбор ревизии.\n\n"
    },
    {
      "title": "Интерактивное индексирование",
      "level": 4,
      "content": "Смотрите Инструменты Git - Интерактивное индексирование.\n\n"
    },
    {
      "title": "Припрятывание и очистка",
      "level": 4,
      "content": "Смотрите Инструменты Git - Припрятывание и очистка.\n\n"
    },
    {
      "title": "Подпись",
      "level": 4,
      "content": "Смотрите Инструменты Git - Подпись.\n\n"
    },
    {
      "title": "Поиск",
      "level": 4,
      "content": "Смотрите Инструменты Git - Поиск.\n\n"
    },
    {
      "title": "Перезапись истории",
      "level": 4,
      "content": "Смотрите Инструменты Git - Перезапись истории.\n\n"
    },
    {
      "title": "Раскрытие тайн reset",
      "level": 4,
      "content": "Смотрите Инструменты Git - Раскрытие тайн reset.\n\n"
    },
    {
      "title": "Продвинутое слияние",
      "level": 4,
      "content": "Смотрите Инструменты Git - Продвинутое слияние.\n\n"
    },
    {
      "title": "Rerere",
      "level": 4,
      "content": "Смотрите Инструменты Git - Rerere.\n\n"
    },
    {
      "title": "Обнаружение ошибок с помощью Git",
      "level": 4,
      "content": "Смотрите Инструменты Git - Обнаружение ошибок с помощью Git.\n\n"
    },
    {
      "title": "Подмодули",
      "level": 4,
      "content": "Смотрите Инструменты Git - Подмодули.\n\n"
    },
    {
      "title": "Создание пакетов",
      "level": 4,
      "content": "Смотрите Инструменты Git - Создание пакетов.\n\n"
    },
    {
      "title": "Замена",
      "level": 4,
      "content": "Смотрите Инструменты Git - Замена.\n\n"
    },
    {
      "title": "Хранилище учётных данных",
      "level": 4,
      "content": "Смотрите Инструменты Git - Хранилище учётных данных.\n\n"
    },
    {
      "title": "Использование git-config",
      "level": 3,
      "content": "Git считывает свои настройки из четырёх INI-подобных файлов:\n\n- /etc/gitconfig для общесистемных настроек\n- ~/.gitconfig и ~/.config/git/config (с версии 1.7.12) для пользовательских настроек\n- .git/config для настроек, специфичных для конкретного репозитория\n\nМожно редактировать эти файлы напрямую, но обычно лучше использовать git config; ниже приведены несколько примеров.\n\nСписок текущих установленных переменных:\n\n```\n$ git config {--local,--global,--system} --list\n```\n\nИзменение редактора по умолчанию на nano:\n\n```\n$ git config --global core.editor \"nano -w\"\n```\n\nИзменение действия по умолчанию при выполнении git push:\n\n```\n$ git config --global push.default simple\n```\n\nИзменение инструмента git difftool (по умолчанию meld):\n\n```\n$ git config --global diff.tool vimdiff\n```\n\nПодробнее смотрите git-config(1) и Конфигурация Git.\n\n"
    },
    {
      "title": "Этикет",
      "level": 3,
      "content": "- Если вы собираетесь внести свой вклад в существующий проект, прочитайте и поймите его лицензию, поскольку она может существенно ограничивать ваши возможности по изменению кода. Некоторые лицензии могут порождать споры о праве собственности на код.\n- Подумайте о сообществе проекта и о том, насколько хорошо вы сможете в него вписаться. Чтобы почувствовать направление развития проекта, почитайте любую документацию и даже историю коммитов.\n- Если вы собираетесь предложить внести свои изменения в проект (отправить патч), старайтесь делать эти изменения минимальными и хорошо документированными; это поможет сопровождающим понять их и решить, стоит ли принять их или попросить вас внести поправки.\n- Если предложенное вами изменение отклонено, не расстраивайтесь; в конце концов, это их проект. Если это важно, обсудите причины отклонения как можно более чётко и терпеливо: может быть, в процессе обсуждения вы найдёте устраивающее всех решение.\n\n"
    },
    {
      "title": "Ускорение аутентификации",
      "level": 3,
      "content": "Если вам не нравится ручная аутентификация при каждом обращении к Git-серверу, есть способы упростить её.\n\n- Если вы аутентифицируетесь с помощью ключей SSH, используйте агент SSH. Смотрите также OpenSSH (Русский)#Увеличение скорости SSH и OpenSSH (Русский)#Поддержание подключения.\n- Если вы аутентифицируетесь с помощью имени пользователя и пароля, перейдите на ключи SSH, если сервер поддерживает SSH, в противном случае используйте git-credential-libsecret, или попробуйте git-credential-cache или git-credential-store.\n\n"
    },
    {
      "title": "Использование git-credential-libsecret",
      "level": 3,
      "content": "Git может считывать учётные данные из поддерживающего org.freedesktop.secrets хранилища ключей, например GNOME Keyring, KeePassXC или KDE Wallet. Если вы используете такое хранилище, убедитесь, что оно зарегистрировано в dbus:\n\n```\n$ dbus-send --session --print-reply --dest=org.freedesktop.DBus / \\\n    org.freedesktop.DBus.GetConnectionUnixProcessID \\\n    string:org.freedesktop.secrets\n```\n\nи затем выполните\n\n```\n$ git config --global credential.helper /usr/lib/git-core/git-credential-libsecret\n```\n\nчтобы git стал его использовать.\n\n"
    },
    {
      "title": "Использование git-credential-netrc",
      "level": 3,
      "content": "Git может считывать учётные данные из файла netrc. Включите его использование в git командой:\n\n```\n$ git config --global credential.helper /usr/share/git/credential/netrc/git-credential-netrc.perl\n```\n\nИ создайте файл .netrc:\n\n```\n~/.netrc\n```\n\n```\nmachine git-host\nlogin username\npassword password\n```\n\nТакже поддерживаются файлы, зашифрованные с помощью gpg (~/.netrc.gpg).\n\n"
    },
    {
      "title": "Протокол по умолчанию",
      "level": 3,
      "content": "Если вы настроили увеличение скорости SSH, как упоминалось выше, Git через SSH может оказаться быстрее, чем HTTPS. Кроме того, некоторые серверы (например, AUR) позволяют выполнять git push только через SSH. Следующая конфигурация настроит подключение к AUR через SSH в любых репозиториях.\n\n```\n~/.gitconfig\n```\n\n```\n[url \"ssh://aur@aur.archlinux.org/\"]\n\tinsteadOf = https://aur.archlinux.org/\n\tinsteadOf = http://aur.archlinux.org/\n\tinsteadOf = git://aur.archlinux.org/\n```\n\n"
    },
    {
      "title": "Автодополнение для Bash",
      "level": 3,
      "content": "Чтобы включить автодополнение команд git в Bash, добавьте /usr/share/git/completion/git-completion.bash в файл настроек Bash или установите bash-completion.\n\n"
    },
    {
      "title": "Строка приглашения Git",
      "level": 3,
      "content": "Пакет Git предоставляет скрипт для отображения информации о репозитории в строке приглашения Bash или zsh. Для его использования выполните source файла /usr/share/git/completion/git-prompt.sh в вашей командной оболочке и задайте строку приглашения с параметром %s:\n\n- Для Bash: PS1='[\\u@\\h \\W$(__git_ps1 \" (%s)\")]\\$ '\n- Для Zsh: setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 \" (%s)\")]\\$ ' Совет: Zsh предоставляет функцию vcs_info, которую можно использовать в качестве альтернативы. Смотрите zshcontrib(1) § GATHERING INFORMATION FROM VERSION CONTROL SYSTEMS.\n\nИмейте в виду, что подстановку команд необходимо экранировать; смотрите раздел Bash/Настройка приглашения#Встроенные команды. Чтобы сделать это постоянным, запишите эти команды в настройках вашей командной оболочки; смотрите Командная оболочка#Файлы настроек.\n\nПри переходе в каталог с репозиторием Git строка приглашения будет показывать название ветки. Можно включить отображение дополнительной информации через специальные переменные:\n\nTable content:\nПеременная | Информация\nGIT_PS1_SHOWDIRTYSTATE | Добавляет + при наличии изменений в индексе (staged) и * при наличии изменений не в индексе (unstaged).\nGIT_PS1_SHOWSTASHSTATE | Добавляет $, если что-то спрятано в git stash.\nGIT_PS1_SHOWUNTRACKEDFILES | Добавляет %, если есть неотслеживаемые файлы.\nGIT_PS1_SHOWUPSTREAM | Добавляет =, <, >, <> — сравнение состояния с апстримом.\nGIT_PS1_STATESEPARATOR | Задаёт разделитель между названием ветки и символами состояния.\nGIT_PS1_DESCRIBE_STYLE | Задаёт способ отображения коммита, тега или ветки при отсоединённом (detached) HEAD.\nGIT_PS1_SHOWCOLORHINTS | Включает использование цветов при отображении.\n\nПодробнее о переменных можно почитать в комментариях к скрипту.\n\n- Если у вас $(__git_ps1) выдаёт ((unknown)), значит в текущем каталоге есть подкаталог .git, в котором нет репозитория. Например, такое может случиться, если вы по ошибке создали ~/.git/config вместо ~/.gitconfig.\n- Если в репозиториях с большим числом файлов строка приглашения появляется с заметной задержкой, причиной этого может быть включенный GIT_PS1_SHOWUNTRACKEDFILES, который вынужден просматривать все файлы рабочего каталога в поисках неотслеживаемых, что замедляет работу командной оболочки. Чтобы отключить его только в определённом репозитории, выполните git config --local bash.showUntrackedFiles false.\n\nТакже есть другие реализации строки приглашения Git, например bash-git-promptAUR или gittifyAUR.\n\n"
    },
    {
      "title": "Визуальное представление",
      "level": 3,
      "content": "Краткая статистика про количество внесённых изменений:\n\n```\n$ git diff --stat\n```\n\nИстория коммитов с визуальным отображением веток:\n\n```\n$ git log --graph --oneline --decorate\n```\n\nДля удобства можно создать псевдоним, например git graph:\n\n```\n$ git config --global alias.graph 'log --graph --oneline --decorate'\n```\n\n"
    },
    {
      "title": "Коммиты",
      "level": 3,
      "content": "Откат к предыдущему коммиту (очень опасная команда, стирает все изменения в отслеживаемых файлах и сбрасывает их состояние на указанный коммит):\n\n```\n$ git reset --hard HEAD~\n```\n\nИзменение адреса удалённого репозитория:\n\n```\n$ git remote set-url origin git@адрес:пользователь/репозиторий.git\n```\n\nИли можно отредактировать .git/config, прописав в нём новый адрес.\n\nДобавление строки Signed-off-by (требуется в некоторых проектах):\n\n```\n$ git commit -s\n```\n\nАвтоматическое добавление Signed-off-by в патчах (при использовании git format-patch коммит):\n\n```\n$ git config --local format.signoff true\n```\n\nРучной выбор добавляемых в индекс изменений вместо добавления файлов целиком. Полезно, если вы внесли в один файл много разных изменений и хотите разделить их на несколько небольших коммитов:\n\n```\n$ git add -p\n```\n\n"
    },
    {
      "title": "Подпись коммитов",
      "level": 3,
      "content": "Git позволяет добавлять криптографические подписи к коммитам и тегам с помощью GnuPG. Смотрите Инструменты Git - Подпись.\n\nВключить автоматическую подпись всех создаваемых коммитов:\n\n```\n$ git config --global commit.gpgSign true\n```\n\n"
    },
    {
      "title": "Работа в отдельной ветке",
      "level": 3,
      "content": "Иногда сопроводители проектов просят вносить изменения не в ветке master или main, а в отдельной ветке, например devel или testing. Сперва склонируйте репозиторий как обычно.\n\nЧтобы переключиться на другую ветку (посмотреть список веток можно с помощью команды git branch -a):\n\n```\n$ git checkout -b ветка origin/ветка\n```\n\nЗатем вносите изменения как обычно, но не забывайте периодически синхронизировать состояние локального репозитория с удалённым:\n\n```\n$ git pull --all\n$ git push --all\n```\n\n"
    },
    {
      "title": "Отправка патчей в список рассылки",
      "level": 3,
      "content": "Можно отправлять письмо с патчем в список рассылки (mailing list) непосредственно через Git. Для этого установите пакеты perl-authen-sasl и perl-io-socket-ssl.\n\nУбедитесь, что имя и почта в настройках Git заданы (смотрите раздел #Настройка).\n\nНастройте отправку почты через ваш SMTP-сервер:\n\n```\n$ git config --global sendemail.smtpserver smtp.example.com\n$ git config --global sendemail.smtpserverport 465\n$ git config --global sendemail.smtpencryption ssl\n$ git config --global sendemail.smtpuser foobar@example.com\n```\n\nПосле этого отправка патчей должна заработать (смотрите также OpenEmbedded: Sending the Patches via Email и git-send-email.io):\n\n```\n$ git add файл\n$ git commit -s\n$ git send-email --to=pacman-contrib@lists.archlinux.org --confirm=always -M -1\n```\n\n"
    },
    {
      "title": "Работа с большим репозиторием git",
      "level": 3,
      "content": "При работе с большим удалённым репозиторием приходится скачивать значительный объём данных. Примеры ниже демонстрируют, как оптимизировать работу с большими репозиториями, на примере репозитория ядра Linux.\n\n"
    },
    {
      "title": "Получение репозитория целиком",
      "level": 4,
      "content": "Самый простой, но не очень удобный способ:\n\n```\n$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git\n```\n\nОбновлять репозиторий можно с помощью git pull.\n\n"
    },
    {
      "title": "Получение репозитория частично",
      "level": 4,
      "content": "Чтобы скачать только небольшое подмножество данных, можно использовать shallow clone:\n\n```\n$ git clone --shallow-exclude v4.13 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\n```\n\nДанная команда скачает все коммиты начиная с версии v4.14, но более старые коммиты скачивать не будет.\n\nСкачать только самый последний снимок (но лучше по возможности просто скачайте tar-архив):\n\n```\n$ git clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\n```\n\nМожно докачать отсутствующие коммиты позже, например:\n\n```\n$ git fetch --tags --shallow-exclude v4.1\n$ git fetch --tags --shallow-since 2016-01-01\n```\n\n"
    },
    {
      "title": "Использование Scalar",
      "level": 4,
      "content": "Scalar (ранее Virtual File System for Git) позволяет получить доступ к репозиториям git без локального экземпляра.\n\nСмотрите scalar(1).\n\n"
    },
    {
      "title": "Получение других веток",
      "level": 4,
      "content": "Показанные выше примеры получают данные только из master-ветки, то есть mainline-ядро. Если вы, например, хотите получить последнюю LTS-версию ядра 4.14, можно использовать такие команды:\n\n```\n$ git remote set-branches --add origin linux-4.14.y\n$ git fetch --shallow-exclude v4.14\n$ git branch --track linux-4.14.y origin/linux-4.14.y\n```\n\nПоследняя команда необязательна, но вы скорее всего хотите её выполнить. (Чтобы узнать правильное название нужной вам ветки, можно, например, заглянуть на страницу «refs» в интерфейсе gitweb.)\n\nПосле этого можно переключиться на ветку:\n\n```\n$ git checkout linux-4.14.y\n```\n\nИли сделать клон в отдельном каталоге:\n\n```\n$ mkdir /path/to/src-4.14; cd /path/to/src-4.14\n$ git clone --no-local --depth 1 -b linux-4.14.y ../linux-stable\n```\n\nИспользуйте git pull как обычно для обновления.\n\n"
    },
    {
      "title": "Фильтрация конфиденциальной информации",
      "level": 3,
      "content": "Иногда программы хранят пароли не в хранилище паролей, а в открытом виде в своих файлах настроек. В таких случаях может пригодиться git clean-filters, чтобы не допустить случайного добавления конфиденциальной информации в репозиторий. Например, если есть «какой-то-dotfile» с паролем внутри, можно включить фильтр для него:\n\n```\n.gitattributes\n```\n\n```\nкакой-то-dotfile filter=remove-pass\n```\n\nТеперь каждый раз, когда «какой-то-dotfile» будет добавляться в репозиторий, git будет запускать фильтр «remove-pass» для этого файла перед его добавлением. Этот фильтр нужно создать в настройках, например (не забудьте отредактировать команду в соответствии с форматом вашего файла):\n\n```\n.git/config\n```\n\n```\n[filter \"remove-pass\"]\nclean = \"sed -e 's/^password=.*/#password=TODO/'\"\n```\n\n"
    },
    {
      "title": "Документация в формате HTML",
      "level": 3,
      "content": "Документация, отображаемая командой git help, также доступна в виде HTML; установить её можно с помощью пакета git-htmldocsAUR. После установки можно использовать опцию -w для открытия документации в браузере, например:\n\n```\n$ git help -w merge\n```\n\nЧтобы всегда открывать html по умолчанию, можно изменить настройки:\n\n```\n$ git config --global help.format html\n```\n\n"
    },
    {
      "title": "Расширения",
      "level": 2,
      "content": "- gitflow-avh — Дополняет git моделью ветвления от Винсента Дриссена. Версия AVH Edition добавляет больше функциональности.\n\n- git-extras — Некоторые утилиты для git (сводка по репозиторию, repl, генерация списка изменений, статистика по авторам коммитов и т. п.). Пользователи oh-my-zsh также могут включить плагин git-extras.\n\n- gitmoji-cli — Интерактивный клиент на NodeJS для использования gitmoji в сообщениях коммитов.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Документация: git(1)\n- Pro Git — книга на русском языке\n- Git Reference на GitHub\n- Git workflow: Forks, remotes, and pull requests\n- Статья на VideoLAN wiki\n- Git на сервере - Протоколы\n- How to GitHub\n\n"
    }
  ]
}