{
  "title": "Netctl (日本語)",
  "url": "https://wiki.archlinux.org/title/Netctl_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- netctl でブリッジ接続\n- NetworkManager\n- ワイヤレスネットワーク設定\n\nnetctl はプロファイルを使ってネットワーク接続を管理・設定する CLI ベースのツールです。netctl は古い netcfg ユーティリティを置き換える新しい Arch Linux の独自プロジェクトです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 必読\n- 3 設定 3.1 プロファイルの設定 3.2 自動操作 3.2.1 基本的な方法 3.2.2 プロファイルの自動切り替え 3.3 サンプルプロファイル 3.3.1 有線 3.3.2 ワイヤレス (WPA-PSK)\n- 4 ヒントとテクニック‎ 4.1 GUI を使う 4.2 'netcfg current' の代用 4.3 Eduroam 4.4 ボンディング 4.4.1 ロードバランシング 4.4.2 有線から無線へのフェイルオーバー 4.5 全てのインターフェイスを使う 4.6 フックを使う 4.6.1 サンプル 4.6.1.1 接続の確立時にコマンドを実行 4.6.1.2 network-online.target の有効化 4.6.1.3 デフォルトの DHCP クライアントの設定\n- 5 トラブルシューティング 5.1 Job for netctl@wlan(...).service failed 5.2 dhcpcd: ipv4_addroute: File exists 5.3 DHCP がタイムアウトする問題 5.4 接続がタイムアウトする問題 5.5 復帰時の netctl-auto の問題 5.6 netctl-auto で突然 WiFi アダプタが動作しなくなる 5.7 netctl-auto で自動的にワイヤレスカードのブロックを解除してインターフェイスを使うことができない\n- 6 参照\n\n- 3.1 プロファイルの設定\n- 3.2 自動操作 3.2.1 基本的な方法 3.2.2 プロファイルの自動切り替え\n- 3.3 サンプルプロファイル 3.3.1 有線 3.3.2 ワイヤレス (WPA-PSK)\n\n- 3.2.1 基本的な方法\n- 3.2.2 プロファイルの自動切り替え\n\n- 3.3.1 有線\n- 3.3.2 ワイヤレス (WPA-PSK)\n\n- 4.1 GUI を使う\n- 4.2 'netcfg current' の代用\n- 4.3 Eduroam\n- 4.4 ボンディング 4.4.1 ロードバランシング 4.4.2 有線から無線へのフェイルオーバー\n- 4.5 全てのインターフェイスを使う\n- 4.6 フックを使う 4.6.1 サンプル 4.6.1.1 接続の確立時にコマンドを実行 4.6.1.2 network-online.target の有効化 4.6.1.3 デフォルトの DHCP クライアントの設定\n\n- 4.4.1 ロードバランシング\n- 4.4.2 有線から無線へのフェイルオーバー\n\n- 4.6.1 サンプル 4.6.1.1 接続の確立時にコマンドを実行 4.6.1.2 network-online.target の有効化 4.6.1.3 デフォルトの DHCP クライアントの設定\n\n- 4.6.1.1 接続の確立時にコマンドを実行\n- 4.6.1.2 network-online.target の有効化\n- 4.6.1.3 デフォルトの DHCP クライアントの設定\n\n- 5.1 Job for netctl@wlan(...).service failed\n- 5.2 dhcpcd: ipv4_addroute: File exists\n- 5.3 DHCP がタイムアウトする問題\n- 5.4 接続がタイムアウトする問題\n- 5.5 復帰時の netctl-auto の問題\n- 5.6 netctl-auto で突然 WiFi アダプタが動作しなくなる\n- 5.7 netctl-auto で自動的にワイヤレスカードのブロックを解除してインターフェイスを使うことができない\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "netctl パッケージが公式リポジトリから利用できます。netctl をインストールすると netcfgAUR が置き換えられます。\n\nnetctl と netcfgAUR は衝突するパッケージです。プロファイルが正しく設定されていないと、netctl をインストールした後に接続を失う可能性があります。\n\n"
    },
    {
      "title": "必読",
      "level": 2,
      "content": "netctl を使う前に以下の man ページを読むのを推奨します:\n\n- netctl\n- netctl.profile\n- netctl.special\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "netctl はプロファイルを使ってネットワーク接続を管理します。様々な動作方法があり、プロファイルを自動的に起動したり、必要に応じて手動で起動することができます。\n\n"
    },
    {
      "title": "プロファイルの設定",
      "level": 3,
      "content": "netctl のプロファイルは /etc/netctl/ に保存されています。ユーザーがネットワーク接続を設定するのを助けるために、設定のサンプルファイルが提供されています。これらのサンプルプロファイルが置かれている場所は /etc/netctl/examples/ です。一般的な設定として以下が用意されています:\n\n- ethernet-dhcp\n- ethernet-static\n- wireless-wpa\n- wireless-wpa-static\n\nサンプルプロファイルを使うには、プロファイルのどれかを /etc/netctl/examples/ から /etc/netctl/ にコピーしてあなたの設定にあわせてプロファイルを修正して下さい:\n\n```\n# cp /etc/netctl/examples/wireless-wpa /etc/netctl/profile\n```\n\n- ワイヤレス設定のために、wifi-menu -o を使ってプロファイルを /etc/netctl/ に生成することができます。\n- ケーブルが接続されているかどうかにかかわらず有線インターフェイスで固定 IP プロファイルを有効にしたい場合は、プロファイルに SkipNoCarrier=yes を使ってください。\n\nプロファイルを作成したら、新しく作ったプロファイルを使って接続を確立するために次を実行して下さい:\n\n```\n# netctl start profile\n```\n\n上のコマンドが失敗する場合、journalctl -xn や netctl status profile を使って失敗の詳細情報を取得して下さい。そして設定を修正してから再テストして下さい。\n\n"
    },
    {
      "title": "自動操作",
      "level": 3,
      "content": "プロファイルを(一つのインターフェイスに)一つしか使わなかったり、手動でプロファイルを切り替える場合、基本的な方法を使って下さい。一般的な例として、サーバー・ワークステーション・ルーターなどがあります。\n\n頻繁に複数のプロファイルを切り替える必要がある時は、プロファイルの自動切り替えを使って下さい。一般的な例として、ラップトップがあります。\n\n"
    },
    {
      "title": "基本的な方法",
      "level": 4,
      "content": "この方法では、インターフェイス毎に一つのプロファイルを固定して起動することができます。最初にプロファイルが問題なく起動することを手動で確認します:\n\n```\n# netctl start profile\n```\n\nそれから次のコマンドで enabled にしてください:\n\n```\n# netctl enable profile\n```\n\nこのコマンドによって systemd サービスが作成・有効にされ、コンピュータが立ち上がる時にサービスが起動するようになります。ただし、netctl はネットワークインターフェイスデバイスが既に起動している場合 (例えば dhcpcd を使っている場合) はプロファイルを実行しません。\n\nプロファイルへの変更はサービスファイルに自動的には適用されません。変更後、プロファイルを再度有効にする必要があります:\n\n```\n# netctl reenable profile\n```\n\nブート時 (もしくはサービスの起動時) にプロファイルの起動が成功した時に初めて接続は確立されます。具体的に言うと、有線接続の場合はケーブルが挿さっている必要があり、無線接続の場合、ネットワークが圏内である必要があります。\n\n"
    },
    {
      "title": "プロファイルの自動切り替え",
      "level": 4,
      "content": "netctl は自動でプロファイルを切り替えるために2つの特別な systemd サービスを用意しています:\n\n- 有線インターフェイス: netctl-ifplugd@interface.service。これを使うと、あなたがケーブルを抜き差しするたびに netctl プロファイルが変更されます。\n- 無線インターフェイス: netctl-auto@interface.service。これを使うと、あなたが特定のネットワークの圏内から他のネットワークの圏内に移動したときに netctl のプロファイルが変更されます。\n\nまず必要なパッケージをインストールしてください:\n\n- netctl-auto@interface.service を使うには wpa_actiondAUR パッケージが必要です。\n- netctl-ifplugd@interface.service を使うには ifplugd パッケージが必要です。\n\nそして netctl-auto@interface.service や netctl-ifplugd@interface.service が起動できるプロファイルを全て設定してください。\n\nnetctl-auto@interface.service によって無線プロファイルが自動的に起動しないようにしたい場合は、そのプロファイルに ExcludeAuto=yes を加える必要があります。また、Priority= を使うことで複数のプロファイルが利用可能な場合に、どのプロファイルを優先的に使うか設定できます。netctl-ifplugd@interface.service は DHCP を使うプロファイルを優先します。固定 IP のプロファイルを優先させるために、AutoWired=yes を使うことができます。詳しくは netctl.profile(5) を見て下さい。\n\nプロファイルを設定して、動作するのを確認したら、systemctl を使ってサービスを有効にしてください:\n\n```\n# systemctl enable netctl-auto@interface.service \n# systemctl enable netctl-ifplugd@interface.service\n```\n\n- Key= の値が空だったり、プロファイルのどれかにエラーがある場合、このユニットは起動時に \"Failed to read or parse configuration '/run/network/wpa_supplicant_wlan0.conf' というメッセージを残して (そのプロファイルが使われていなかったとしても) 失敗します。\n- この方法は基本的な方法と衝突します。以前 netctl でプロファイルを有効にしていたのならば、# netctl disable profile を実行してプロファイルを二重に起動しないようにしてください。\n\nnetctl 1.3 から、netctl-auto サービスを止めないで netctl-auto によって管理されているインターフェイスを手動で操作できるようになりました。netctl-auto コマンドを使ってこれを行うことが可能です。利用可能な操作のリストを表示するには次を実行してください:\n\n```\n# netctl-auto --help\n```\n\n"
    },
    {
      "title": "有線",
      "level": 4,
      "content": "DHCP 接続を使う場合、サンプルプロファイルの /etc/netctl/examples/ethernet-dhcp を /etc/netctl にコピーして Interface を設定するだけです。例:\n\n```\n/etc/netctl/my_dhcp_profile\n```\n\n```\nInterface=enp1s0\nConnection=ethernet\nIP=dhcp\n```\n\n固定 IP 設定を使う場合、サンプルプロファイルの /etc/netctl/examples/ethernet-static を /etc/netctl にコピーして Interface, Address, Gateway, DNS を適切に変更してください。例:\n\n```\n/etc/netctl/my_static_profile\n```\n\n```\nInterface=enp1s0\nConnection=ethernet\nIP=static\nAddress=('10.1.10.2/24')\nGateway='10.1.10.1'\nDNS=('10.1.10.1')\n```\n\nサブネットを指定する /24 に注意してください。255.255.255.0 のネットマスクと同じであり、これがないとプロファイルを起動しません。詳しくは CIDR 表記を参照してください。Address=('10.1.10.2/24' '192.168.1.2/24') と設定することで複数の IP アドレスを NIC にエイリアスできます。\n\n"
    },
    {
      "title": "ワイヤレス (WPA-PSK)",
      "level": 4,
      "content": "パスワードを平文で保存したくない場合、256-bit Encrypted PSK を生成するという方法があります。これはパスフレーズと SSID から標準アルゴリズムを使って計算します。\n\n- 方法 1: wifi-menu -o を実行して /etc/netctl に設定ファイルを生成する\n- 方法 2: 手順に従って手動設定する\n\nどちらの方法でも、chmod 600 /etc/netctl/<config_file> をしてパスワードにユーザーがアクセスできないようにするのを提案します。\n\nwpa_passphrase を使ってあなたの 256-bit Encrypted PSK を生成してください:\n\n```\n$ wpa_passphrase your_essid passphrase\n```\n\n```\nnetwork={\n  ssid=\"your_essid\"\n  #psk=\"passphrase\"\n  psk=64cf3ced850ecef39197bb7b7b301fc39437a6aa6c6a599d0534b16af578e04a\n}\n```\n\n新しいターミナルを開き、サンプルファイル wireless-wpa を /etc/netctl/examples から /etc/netctl にコピーしてください。\n\n```\n# cp /etc/netctl/examples/wireless-wpa /etc/netctl/wireless-wpa\n```\n\nそれからお好きなテキストエディタを使って /etc/netctl/wireless-wpa を編集する必要があります。先に wpa_passphrase を使って生成された Encrypted Pre-shared Key (psk) をプロファイルの Key 変数に追加してください。\n\n256-bit Encrypted PSK を含むネットワークプロファイル wireless-wpa は以下のようになるはずです:\n\n```\n/etc/netctl/wireless-wpa\n```\n\n```\nDescription='A simple WPA encrypted wireless connection using 256-bit Encrypted PSK'\nInterface=wlp2s2\nConnection=wireless\nSecurity=wpa\nIP=dhcp\nESSID=your_essid\nKey=\\\"64cf3ced850ecef39197bb7b7b301fc39437a6aa6c6a599d0534b16af578e04a\n```\n\n- Key 変数には netctl.profile(5) の最後で説明されている special quoting rules を使うようにして下さい。\n- パスフレーズが失敗する場合、Key の中の \\\" を削除してみてください。\n\n"
    },
    {
      "title": "GUI を使う",
      "level": 3,
      "content": "netctl や接続を管理するのにグラフィカルユーザーインターフェースが欲しい場合、netguiAUR をインストールすることができます。ただし、netgui はまだベータなので問題が起こった時のために基本的な netctl の構文には慣れておいて下さい。\n\n"
    },
    {
      "title": "'netcfg current' の代用",
      "level": 3,
      "content": "以前 netcfg current を使っていた場合は、netctl-auto で起動した接続の代わりとして # netctl-auto current を使うことができます (netctl-1.3 以降の機能)。\n\n接続を手動でパースするには、次を使って下さい:\n\n```\n# netctl list | awk '/*/ {print $2}'\n```\n\n"
    },
    {
      "title": "Eduroam",
      "level": 3,
      "content": "WPA2 Enterprise#netctl を見て下さい。\n\n"
    },
    {
      "title": "ボンディング",
      "level": 3,
      "content": "kernel documentation より:\n\n"
    },
    {
      "title": "ロードバランシング",
      "level": 4,
      "content": "netctl とボンディングを使うには、公式リポジトリから追加のパッケージをインストールする必要があります: ifenslave.\n\n/etc/netctl/examples/bonding を /etc/netctl/bonding にコピーして、以下のように編集してください:\n\n```\n/etc/netctl/bonding\n```\n\n```\nDescription='Bond Interface'\nInterface='bond0'\nConnection=bond\nBindsToInterfaces=('eth0' 'eth1')\nIP=dhcp\nIP6=stateless\n```\n\n古い設定を無効にして、bonding を自動的に起動するよう設定してください。新しいプロファイルに切り替えるには:\n\n```\n# netctl switch-to bonding\n```\n\n```\n$ cat /proc/net/bonding/bond0\n```\n\n"
    },
    {
      "title": "有線から無線へのフェイルオーバー",
      "level": 4,
      "content": "ここでは有線のイーサネットが切断されたときに無線にフォールバックするボンディングを使用する方法を説明します。有線と無線のインターフェイスがどちらも同じネットワークに接続されるような場合に有用です。無線ルーター/アクセスポイントが bridge モードに設定されている必要があります。\n\n公式リポジトリから以下のパッケージをインストールしてください: ifenslave と wpa_supplicant。\n\nまずは起動時に bonding モジュールがロードされるように設定します (カーネルモジュール#ロードを参照):\n\n```\n/etc/modules-load.d/bonding.conf\n```\n\n```\nbonding\n```\n\nそして、active-backup を使うように bonding ドライバーのオプションを設定して、primary パラメータを使用したいデバイス (普通は有線インターフェイス) に設定します。また、ip link を実行したときに返されるのと同じデバイス名を使うようにしてください:\n\n```\n/etc/modprobe.d/bonding.conf\n```\n\n```\noptions bonding mode=active-backup miimon=100 primary=eth0 max_bonds=0\n```\n\nmiimon オプションはリンクが切れたのを検出するために必要です。max_bonds オプションは Interface bond0 already exists エラーを回避します。詳しい情報は カーネルドキュメント を参照してください。\n\n次に、2つのハードウェアインターフェイスを従属させる netctl プロファイルを設定します。使用したい全てのデバイスの名前を使ってください。有線・無線インターフェイスが3つ以上ある場合、全てのインターフェイスを bond インターフェイスに接続させることができます。ただし、大抵の場合は、有線と無線、2つのデバイスだけを使用します:\n\n```\n/etc/netctl/failover\n```\n\n```\nDescription='A wired connection with failover to wireless'\nInterface='bond0'\nConnection=bond\nBindsToInterfaces=('eth0' 'wlan0')\nIP='dhcp'\n```\n\n前に使っていた他のプロファイル (特に有線や無線のプロファイル) は全て無効化して、起動時に failover プロファイルを有効にするようにしてください:\n\n```\n# netctl enable failover\n```\n\nそれから使用したい既知のネットワークに接続できるように wpa_supplicant を設定する必要があります。インターフェイスごとにファイルを作成して systemd で有効化してください。以下の内容でファイルを作成:\n\n```\n/etc/wpa_supplicant/wpa_supplicant-wlan0.conf\n```\n\n```\nctrl_interface=/run/wpa_supplicant\nupdate_config=1\n```\n\nファイルの末尾に接続したいネットワークを追加してください:\n\n```\nnetwork={\n    ssid=\"SSID\"\n    psk=PSK\n}\n```\n\n難読化された PSK を生成するには WPA supplicant#wpa_passphrase で接続する のページに書かれているように wpa_passphrase を実行します。\n\nそして、wpa_supplicant@ テンプレートサービスにネットワークインターフェイスを指定して有効化してください。例: wpa_supplicant@wlan0。\n\nマシンを再起動して設定が上手く機能するかどうか確認できます。\n\n```\nwlan0 is up - this may be due to an out of date ifenslave\n```\n\nこのエラーは failover netctl プロファイルよりも前に wpa_supplicant が実行されてしまっているのが原因です。特に指定がないかぎり systemd は何もかもを同時に実行してしまうからです。bond0 インターフェイスにボンディングする前に、ifenslave は全てのインターフェイスが立ち上がっていないを要求します。ネットワークをスキャンするためにはインターフェイスが立ち上がっている必要があるため、有線インターフェイスだけがボンディングされることにもなります。\n\nこのような場合、wpa_supplicant@wlan0 サービスと netctl@failover の依存関係をカスタマイズする必要があります。特に、netctl プロファイルの後に wpa_supplicant が起動されるようにしなくてはなりません。systemd#依存関係を解決する に書かれているようにして、カスタム依存関係ファイルを作成してください:\n\n```\n/etc/systemd/system/wpa_supplicant@wlan0.service.d/customdependency.conf\n```\n\n```\n[Unit]\nAfter=netctl@failover.service\n```\n\nその後、システムをもう一度再起動して問題ないか確認してください。netctl@failover.service ユニットの journal を確認することでボンディングの状態をチェックできます。インターフェイスを確認:\n\n```\n# ip link\n```\n\n以下のように表示されるはずです:\n\n```\n1: eth0: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master bond0 state UP mode DEFAULT group default qlen 1000\n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n2: wlan0: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc mq master bond0 state UP mode DORMANT group default qlen 1000\n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n3: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default \n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n```\n\n巨大なダウンロードをすることで、ファイルオーバーの設定をテストすることができます。ダウンロードの途中に有線インターフェイスを抜いて見て下さい。無線インターフェイスに切り替わってダウンロードが継続するはずです。そして、もう一度有線インターフェイスを接続すると有線でダウンロードが続行されるはずです。netctl@failover.service と wpa_supplicant@wlan0.service ユニットの journal を確認することでデバッグできます。\n\n"
    },
    {
      "title": "全てのインターフェイスを使う",
      "level": 3,
      "content": "ときには、プロファイルでシステム上の全てのインターフェイスを使いたいという場合もあります。例えば、様々なハードウェアの様々なマシンにまたがって共通のディスクイメージを使用するケースです (ヘッドレスサーバーの場合、特にこういうことがあります)。カーネルの命名規則を使って、マシンにイーサネットインターフェイスが一つしかない場合、おそらく適切なインターフェイスは eth0 です。しかしながら、udev の Predictable Network Interface Names を使うとすると、ハードウェアが検出された順番ではなく (例: eth0, eth1)、名前はそれぞれのハードウェアに基づいて命名されます (例: enp1s0)。その場合、マシンによってインターフェイスの名前が変わってしまうため、netctl プロファイルを他のマシンで使うことはできなくなります。\n\n簡単で粗雑な解決方法は /etc/netctl/interfaces/ ディレクトリを利用する方法です。インターフェイスのエイリアス (下記の例では en-any) の名前を決めて、その名前を使ったファイルに以下を記述します (ファイルには実行可能権限を付与してください)。\n\n```\n/etc/netctl/interfaces/en-any\n```\n\n```\n#!/bin/bash\nfor interface in /sys/class/net/en*; do\n        break;\ndone\nInterface=$(basename $interface)\necho \"en-any: using interface $Interface\";\n```\n\nそしてインターフェイスのエイリアスを使用するプロファイルを作成してください。Interface ディレクティブに特に注意してください。後はサンプルと同じです。\n\n```\n/etc/netctl/wired\n```\n\n```\nDescription='Wired'\nInterface=en-any\nConnection=ethernet\nIP=static\nAddress=('192.168.1.15/24')\nGateway='192.168.1.1'\nDNS=('192.168.1.1')\n```\n\nwired プロファイルを起動すると、上記の2つのファイルを使用するマシンは自動的に、udev によって割り当てられた名前は無視して、システムで一番最初に認識されたイーサネットインターフェイスを立ち上げて設定します。インターフェイスの設定としてはあまり信頼性がある方法ではないので注意してください。インターフェイスが複数ある場合、netctl によって全てのインターフェイスに同じインターフェイスが割り当てられ、接続ができなくなってしまう可能性があります。ソリューションが複雑になるのを気にしないときは、netctl-auto のほうが信頼できます。\n\n"
    },
    {
      "title": "フックを使う",
      "level": 3,
      "content": "netctl は /etc/netctl/hooks/ からフックを使うことができ、インターフェイスごとのフックは /etc/netctl/interfaces/ に保存します。フック/インターフェイスではプロファイルで使えるあらゆるオプションが設定できます。プロファイルと同じように読み込まれて、特に重要なのは ExecUpPost と ExecDownPre です。\n\nプロファイルを読み込むとき、netctl は hooks にある全ての実行可能なスクリプトを読み込んで、それからプロファイルを読み込み接続を行います。そして、最後に interfaces ディレクトリに入っている、使用するインターフェイスと同じ名前の実行可能なスクリプトを読み込みます。そのため、インターフェイススクリプトで定義したオプションはプロファイル (とフック) の宣言を上書きします。\n\nnetctl-auto を使用する場合、フックやインターフェイスで使うことができる変数は $INTERFACE, $SSID, $ACTION, $Profile だけです。\n\n"
    },
    {
      "title": "サンプル",
      "level": 4,
      "content": "```\n/etc/netctl/hooks/myservices\n```\n\n```\n#!/bin/sh\nExecUpPost=\"systemctl start crashplan.service; systemctl start dropbox@<username>.service\"\nExecDownPre=\"systemctl stop crashplan.service; systemctl stop dropbox@<username>.service\"\n```\n\n```\n/etc/netctl/hooks/status\n```\n\n```\n#!/bin/sh\nExecUpPost=\"systemctl start network-online.target\"\nExecDownPre=\"systemctl stop network-online.target\"\n```\n\nこのフックを使うことで、ネットワーク接続が必要な systemd サービスを network-online.target の後に起動するように順番を変えることができ、接続が切断される前にサービスが停止されます。\n\n全てのプロファイルで使用する DHCP クライアントを設定・変更するには:\n\n```\n/etc/netctl/hooks/dhcp\n```\n\n```\n#!/bin/sh\nDHCPClient='dhclient'\n```\n\nもしくは、以下の行を含んだ実行可能ファイル /etc/netctl/interfaces/<interface> を作成することで、特定のネットワークインターフェイスでクライアントを指定することもできます:\n\n```\nDHCPClient='dhclient'\n```\n\n"
    },
    {
      "title": "Job for netctl@wlan(...).service failed",
      "level": 3,
      "content": "netctl でネットワークに接続するときに、以下のような問題が発生することがあります:\n\n```\n# netctl start wlan0-ssid\n```\n\n```\nJob for netctl@wlan0\\x2ssid.service failed. See 'systemctl status netctl@wlan0\\x2ssid.service' and 'journalctl -xn' for details.\n```\n\njournalctl -xn を確認して、以下のどちらかを行なって下さい:\n\n1. デバイスが立ち上がっている場合 (上記の場合 wlan0):\n\n```\nnetwork[2322]: The interface of network profile 'wlan0-ssid' is already up\n```\n\nインターフェイスを落とすように設定すれば問題は解決します:\n\n```\n# ip link set wlan0 down\n```\n\n一度落としてから再試行してください:\n\n```\n# netctl start wlan0-ssid\n```\n\n2. インターフェイスが落ちている場合:\n\n```\ndhcpcd[261]: wlan0: ipv4_sendrawpacket: Network is down\n```\n\ndhclient など、別の DHCP クライアントを使えば解決します。クライアントのパッケージをインストールしてから netctl を設定してください:\n\n```\n/etc/netctl/wlan0-ssid\n```\n\n```\n...\nDHCPClient='dhclient'\n```\n\nForceConnect オプションを追加することで解決することもあります:\n\n```\n/etc/netctl/wlan0-ssid\n```\n\n```\n...\n\nForceConnect=yes\n```\n\nプロファイルを保存したら再度接続を試行してください:\n\n```\n# netctl start wlan0-ssid\n```\n\n"
    },
    {
      "title": "dhcpcd: ipv4_addroute: File exists",
      "level": 3,
      "content": "dhcpcd と netctl を組み合わせた場合、特にスリープしている間にネットワークを切り替えたときに、復帰時にタイムアウトの問題が発生することがあります。netctl は接続が成功したと報告しますがタイムアウトしてしまいます。このような場合、古いデフォルトルートが残存していて新しくなっていません。この問題を回避するにはデフォルトの dhcp クライアントとして dhclient を使うようにしてください。詳しくは こちら を参照。\n\n"
    },
    {
      "title": "DHCP がタイムアウトする問題",
      "level": 3,
      "content": "DHCP でリースを要求するときにタイムアウトの問題が発生する場合、タイムアウトの値を netctl のデフォルト値である30秒よりも高く設定することができます。/etc/netctl/hooks/ や /etc/netctl/interfaces/ にファイルを作成して、ファイルに TimeoutDHCP=40 を追加して実行可能権限を与えればタイムアウト値が40秒になります。\n\n"
    },
    {
      "title": "接続がタイムアウトする問題",
      "level": 3,
      "content": "DHCP と関係ない (固定イーサネット接続などで) タイムアウトの問題が発生したり、プロファイルを起動するときに以下のようなエラーが表示される場合:\n\n```\n# journalctl _SYSTEMD_UNIT=netctl@profile.service\n```\n\n```\nStarting network profile 'profile'...\nNo connection found on interface 'eth0' (timeout)\nFailed to bring the network up for profile 'profile'\n```\n\nプロファイルに TimeoutUp= と TimeoutCarrier= を追加して、キャリアタイムアウトとアップタイムアウトの時間を増やしてください:\n\n```\n/etc/netctl/profile\n```\n\n```\n...\nTimeoutUp=300\nTimeoutCarrier=300\n```\n\n設定を変更したらプロファイルを reenable してください:\n\n```\n# netctl reenable profile\n```\n\n"
    },
    {
      "title": "復帰時の netctl-auto の問題",
      "level": 3,
      "content": "サスペンドからシステムが復帰したときに netctl-auto がときどき再接続に失敗することがあります。一番簡単な解決法は netctl-auto のサービスを再起動することです。以下のようなサービスを作ることで自動で再起動させることができます:\n\n```\n/etc/systemd/system/netctl-auto-resume@.service\n```\n\n```\n[Unit]\nDescription=restart netctl-auto on resume.\nRequisite=netctl-auto@%i.service\nAfter=suspend.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/systemctl restart netctl-auto@%i.service\n\n[Install]\nWantedBy=suspend.target\n```\n\nワイヤレスカードでサービスを有効化するには、root で netctl-auto-resume@wlan0.service などを有効化してください。wlan0 は適当なネットワークインターフェイスに置き換えてください。\n\n"
    },
    {
      "title": "netctl-auto で突然 WiFi アダプタが動作しなくなる",
      "level": 3,
      "content": "この問題は最近の wpa_supplicant のアップデートが関連しています (FS#44731 を参照)。ただし回避方法はとても簡単です。/etc/netctl/interfaces にあなたの使っているインターフェイスの名前のファイル (例: wlp3s0) を以下の内容で作成して実行可能属性を付与してください:\n\n```\n/etc/netctl/interfaces/wlp3s0\n```\n\n```\nWPAOptions=\"-m ''\"\n```\n\nその後、netctl-auto サービスを再起動すれば WiFi の自動検出がまた動作するようになります。\n\n"
    },
    {
      "title": "netctl-auto で自動的にワイヤレスカードのブロックを解除してインターフェイスを使うことができない",
      "level": 3,
      "content": "多くのノートパソコンにはワイヤレスカードをオフにするハードウェアボタン (あるいはスイッチ) が付いていますが、カードのブロックはカーネルでも行われます。ブロックは rfkill によって処理されています。\n\nnetctl-auto でワイヤレスカードのブロックを自動的に解除して特定のネットワークに接続したい場合、使用するワイヤレス接続のプロファイルで RFKill=++auto++ オプションを設定してください。詳しくは netctl.profile(5) の man ページを参照。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- 公式アナウンススレッド: https://bbs.archlinux.org/viewtopic.php?id=157670\n- AUR に cinnamon アプレットがあります: cinnamon-applet-netctl-systray-menuAUR[リンク切れ: アーカイブ: aur-mirror]\n\n"
    }
  ]
}