{
  "title": "Vim (Español)",
  "url": "https://wiki.archlinux.org/title/Vim_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2022-11-08** \n\nArtículos relacionados\n\n- List of applications/Documents#Vi-style text editors\n\nVim es un editor de texto para terminal. Es la versión mejorada (la \"m\" de Vim) de vi con características adicionales como resaltado de sintaxis, un sistema de ayuda amplio, scripting nativo (Vim script), un modo de selección de texto visual, comparación de archivos (vimdiff(1)) y herramientas con características restringidas como rview(1) y rvim(1).\n\n"
    },
    {
      "title": "Instalación",
      "level": 2,
      "content": "Instale uno de los siguientes paquetes:\n\n- vim — con soporte para los interpretes de Python 2/3, Lua, Ruby y Perl, pero no para GTK/X.\n- gvim — provee lo mismo que el paquete de vim anterior, pero incluye soporte para GTK/X.\n\n- El paquete vim está compilado sin soporte para Xorg; esto desactiva la opción +clipboard, así que Vim no podrá operar con los buffers de selección primary y clipboard. El paquete gvim incluye la versión de consola compilada con +clipboard.\n- El repositorio no oficial herecura provee variantes de Vim/gVim como: vim-cli, vim-gvim-common, vim-gvim-gtk, vim-gvim-qt, vim-rt y vim-tiny.\n\n"
    },
    {
      "title": "Utilización",
      "level": 2,
      "content": "Para ver una introducción básica sobre como usar Vim, siga el tutorial ejecutando vimtutor (para la versión de consola) o gvimtutor (para la versión gráfica).\n\nVim incluye un amplio sistema de ayuda al que puede acceder con el comando :h tema. Los temas abarcan desde comandos, opciones de configuración, atajos de teclado, plugins, etc. Puede usar el comando :h (sin especificar un tema) para obtener información acerca del sistema de ayuda y navegar entre estos.\n\n"
    },
    {
      "title": "Configuración",
      "level": 2,
      "content": "El archivo de configuración para cada usuario está en su carpeta home respectiva, ~/.vimrc y otros archivos de Vim en ~/.vim/. El archivo de configuración global está en /etc/vimrc. Los archivos globales para Vim como defaults.vim y archlinux.vim están en la carpeta /usr/share/vim/.\n\n- Un comportamiento por defecto esperado, como por ejemplo tener el resaltado de sintaxis habilitado, está definido en defaults.vim, el cual es cargado si no hay un ~/.vimrc presente. Añada let skip_defaults_vim=1 a /etc/vimrc para evitar que defaults.vim sea cargado. [1]. También puede hacer que defaults.vim sea cargado incluso si hay un ~/.vimrc presente, véase :h defaults (configuración por defecto) en Vim.\n- gVim carga su propio archivo de configuración junto con el de Vim; Vim solo carga el suyo.\n\n"
    },
    {
      "title": "Portapapeles",
      "level": 3,
      "content": "Las órdenes de Vim como :yank o :put normalmente funcionan con el registro sin nombre \"\". Si la característica +clipboard está disponible y su valor incluye unnamed, entonces las operaciones de extracción, eliminación, cambio y colocación de Vim que normalmente irían al registro sin nombre usarán el registro del portapapeles \"* en su lugar, que es el búfer PRIMARY en X.\n\nPara cambiar el buffer a CLIPBOARD (PORTAPAPELES), ejecute :set clipboard=unnamedplus que hará que se use el registro del portapapeles correspondiente (\"+) en X. Cabe señalar que la opción clipboard se puede establecer en un valor delimitado por comas. Si :set clipboard=unnamedplus,unnamed, las operaciones de extracción también copiarán el texto extraído en el registro \"* además del registro \"+ (sin embargo, las operaciones de eliminación, cambio y colocación solo funcionarán en el registro \"+).\n\nPara más información, véase :help 'clipboard'. Hay otros valores que se pueden establecer para la función clipboard. Puede utilizar :help clipboard-unnamed para ir al tema de ayuda para el primer valor válido que se puede establecer para esta función, seguido de la ayuda para todos los demás valores válidos.\n\n- Puede establecer atajos de teclado alternativos para las operaciones de copiado y pegado, por ejemplo, véase [2] para usar Ctrl+c, Ctrl+v y Ctrl+x.\n- El portapapeles de X se vacía cuando sale de vim. Para que la selección de vim sea persistente dentro del portapapeles de X, necesita un gestor de portapapeles. Alternativamente, puede añadir autocmd VimLeave * call system(\"echo -n $'\" . escape(getreg(), \"'\") . \"' | xsel --input --clipboard\") a su .vimrc (requiere el paquete xsel).\n\n"
    },
    {
      "title": "Resaltado de sintaxis",
      "level": 3,
      "content": "El resaltado de sintaxis está disponible para varios lenguajes de programación. Para activarlo, ejecute:\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "Indentado",
      "level": 3,
      "content": "Para cargar los archivo de reglas de indentado para distintos tipos de archivos, ejecute:\n\n```\n:filetype indent on\n```\n\n"
    },
    {
      "title": "Ajustado de líneas visual",
      "level": 3,
      "content": "La opción wrap (de 'wrap line': ajustar linea) está habilitada por defecto, y esta hace que Vim rompa las líneas que sean más largas que el ancho de la ventana y que el resto de esta sea mostrada en la linea siguiente. Esta opción solo afecta como el texto es mostrado, sin modificar el texto en sí.\n\nLa ruptura normalmente se hace después del ultimo carácter que quepa en la ventana, incluso si es en medio de una palabra. Puede habilitar un comportamiento más inteligente con la opción linebreak (romper linea). Cuando esta opción es habilitada (con set linebreak), la linea se rompe después de los caracteres especificados en la cadena de la opción breakat (romper en), la que por defecto contiene un espacio y algunas formas de puntuación (véase :help breakat).\n\nEl resto de la linea se muestra en la linea siguiente sin ninguna indentación. La opción breakindent (indentado del resto de linea) indica que se tiene que respetar el indentado establecido, haciendo que la linea use el indentado de la linea anterior. El comportamiento de esta opción puede ser personalizado con breakindentopt (opciones del indentado del resto de linea); por ejemplo, para que el resto de una linea quede 4 espacios más a la derecha que la anterior en archivos Python (véase :help breakindentopt para más detalles):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "Utilización del ratón",
      "level": 3,
      "content": "Se puede utilizar el ratón en Vim, pero solo en algunas terminales:\n\n- Emuladores de terminal basados en xterm o urxvt.\n- La consola Linux con gpm (véase más detalles en GPM).\n- PuTTY.\n\nPara habilitar esta característica, añada la siguiente linea a su ~/.vimrc:\n\n```\nset mouse=a\n```\n\nEsta opción está establecida en defaults.vim.\n\n"
    },
    {
      "title": "Moverse entre las líneas con las teclas de dirección",
      "level": 3,
      "content": "Por defecto, cuando presiona ← al inicio de una linea o → al fina de esta, el cursor no se moverá a la linea anterior o a la siguiente.\n\nEste comportamiento puede ser cambiado añadiendo set whichwrap=b,s,<,>,[,] a su archivo ~/.vimrc.\n\n"
    },
    {
      "title": "Combinando archivos",
      "level": 2,
      "content": "Vim incluye un editor de diferencias (programa que muestra las diferencias entre dos o más archivos, y asiste en su combinación). Ejecute vimdiff para usar el editor de diferencias–solo tiene que especificar algunos archivos, p.ej: vimdiff archivo1 archivo2. Aquí hay una lista de los comandos de vimdiff con sus descripciones:\n\nTable content:\nAccion | Atajo\nSiguiente cambio | ]c\nCambio anterior | [c\nIguala el buffer actual al otro | do\nIguala el otro buffer al actual | dp\nAbrir región | zo\nCerrar región | zc\nVolver a cargar archivos | :diffupdate\n\n"
    },
    {
      "title": "Números de linea",
      "level": 3,
      "content": "Para mostrar la columna con los números de linea, ocupe :set number (números). Por defecto muestra los números de linea absolutos; puede activar los números relativos con :set relativenumber (números relativos a la linea actual). Cuando se activan ambas opciones obtiene números de linea híbridos–la linea actual es absoluta y el resto son relativas a esta.\n\nPuede saltar a una linea especifica usando :numero de linea o numero de lineagg. Los saltos son guardados en la \"jump list\" (lista de saltos), véase :h jump-motions (saltos) para más detalles.\n\n"
    },
    {
      "title": "Corrección ortográfica",
      "level": 3,
      "content": "Puede utilizar el corrector ortográfico ingresando:\n\n```\nset spell\n```\n\nPor defecto solo están instalados (en /usr/share/vim/vim82/spell/) los diccionarios para el idioma inglés. Puede encontrar más diccionarios en los Repositorios oficiales buscando vim-spell. También puede encontrar otros en el Directorio FTP de Vim[enlace roto 2025-01-22]. Si descarga manualmente diccionarios, tiene que ponerlos en la carpeta ~/.vim/spell/ y puede activarlos con el comando: :setlocal spell spelllang=en_us (reemplazando en_us con el nombre del diccionario a usar).\n\nTable content:\nAcción | Atajo\nSiguiente error | ]s\nError anterior | [s\nSugerencias para el reemplazo | z=\nAñadir al diccionario global como correcto | zg\nAñadir al diccionario de la sesión como correcto | zG\nAñadir al diccionario global como incorrecto | zw\nAñadir al diccionario de la sesión como incorrecto | zW\nAplicar reemplazo en todo el archivo | :spellr\n\nNote: **tex** \n\n- Para activar la corrección ortográfica en dos idiomas (por ejemplo, inglés y alemán), añada set spelllang=en,de en su ~/.vimrc o en /etc/vimrc y reinicie Vim.\n- Puede activar la corrección ortográfica en ciertos tipos de archivo (p.ej. .txt) usando el plugin FileType y una regla para detectar la extensión. Para activar la corrección ortográfica en archivos que terminen en .txt, cree el archivo /usr/share/vim/vimfiles/ftdetect/plaintext.vim con la siguiente linea: autocmd BufRead,BufNewFile *.txt set filetype=plaintext. Después, añada autocmd FileType plaintext setlocal spell spelllang=en_us en su ~/.vimrc o en /etc/vimrc y reinicie Vim. Sino, también puede añadir autocmd BufRead,BufNewFile *.txt setlocal spell a su ~/.vimrc o en /etc/vimrc, y reiniciar Vim. Para cambiar la extensión tiene que editar esta linea (específicamente en *.txt) para incluir la o las extensiones en las que quiera corregir la ortografía automáticamente.\n- Para habilitar la corrección ortográfica solo en documentos LaTeX (o TeX), añada autocmd FileType tex setlocal spell spelllang=en_us a su ~/.vimrc o en /etc/vimrc y reinicie Vim.\n\n"
    },
    {
      "title": "Mantener el estado de ejecución",
      "level": 3,
      "content": "Normalmente, al salir de vim se descarta toda la información relacionada a la sesión, como los archivos abiertos, el historial de comandos, texto en los registros, etc. En las siguientes secciones se muestran varias formas de como preservar esta información.\n\n"
    },
    {
      "title": "Archivos viminfo",
      "level": 4,
      "content": "Puede usar un archivo viminfo para guardar el historial de comandos, de búsqueda, de entrada, el contenido de los registros, marcas que apuntan archivos o ubicaciones especificas en estos, el ultimo patrón de búsqueda/sustitución (para usar con n y & dentro de la sesión), la lista de buffers y las variables globales que haya establecido. Para poder usar los archivos viminfo, su versión de vim instalada tiene que estar compilado con la opción +viminfo.\n\nPara configurar lo que se va a guardar en su archivo viminfo, añada (por ejemplo) lo siguiente a ~/.vimrc:\n\n```\nset viminfo='10,<100,:100,%,n~/.vim/.viminfo\n```\n\nEn la cadena se establecen los parámetros con su identificadores:\n\n```\n'q  : q archivos editados recordados\n<m  : m líneas guardadas por cada registro\n:p  : p líneas del historial de comandos guardadas\n%   : Se guarda y carga la lista de buffers\nn...: Ubicación de los archivos viminfo (una \"n\" seguida de la ruta, sin espacio en medio)\n```\n\nVéase la documentación oficial de viminfo para ver como un archivo viminfo existente es modificado al actualizarlo con la información de la sesión actual; por ejemplo, la información de los buffers de la sesión siendo cerrada.\n\n"
    },
    {
      "title": "Archivos de sesión",
      "level": 4,
      "content": "Los archivos de sesión son utilizados para guardar el estado de las sesiones a través del tiempo. Un archivo de sesión es utilizado para cada sesión o proyecto en el que trabaje. Para que estos archivos puedan ser utilizados, su versión de vim instalada tiene que estar compilada con la opción +mksession.\n\nEn una sesión, el comando :mksession[!] [nombre_de_la_sesion.vim] hará que Vim escriba un vim-script a nombre_de_la_sesion.vim en la carpeta actual, o escribirá a Session.vim por defecto si no especifica un nombre de archivo. Opcionalmente puede sobrescribir un archivo de sesión en la misma carpeta y con el mismo nombre añadiendo !.\n\nPuede restaurar la sesión al iniciar vim desde una terminal añadiendo el siguiente argumento:\n\n```\n$ vim -S [nombre_de_la_sesion.vim]\n```\n\nO desde una sesión que se esté ejecutando con el comando:\n\n```\n:source nombre_de_la_sesion.vim\n```\n\nPuede ver que es guardado específicamente o ver detalladamente las opciones de los archivos de sesión en la documentación de Vim. Aquí puede encontrar ejemplos con comentarios.\n\n"
    },
    {
      "title": "Restaurar la posición del cursor en un archivo",
      "level": 4,
      "content": "Véase Restaurar la posición del cursor en un archivo de una sesión anterior (en ingés) en la wiki de Vim.\n\n"
    },
    {
      "title": "Reemplazar el comando vi con Vim",
      "level": 3,
      "content": "Cree un alias de vi a vim.\n\nSi quiere que al ejecutar sudo vi se ejecute vim, instale vi-vim-symlinkAUR, el cual va a quitar vi y lo reemplazará con un enlace vim. También puede hacer usted este enlace y ponerlo en una ubicación superior para que tome precedencia a /usr/bin.\n\n"
    },
    {
      "title": "Retornos de carro de DOS/Windows",
      "level": 3,
      "content": "Si al final de cada linea del archivo que esté editando hay un ^M, significa que es un archivo creado en MS-DOS o en Windows. En Linux solo se utiliza un carácter de salto de linea (LF: Line Feed), pero en sistemas Windows/MS-DOS se ocupa una secuencia de un carácter de retorno de carro (CR: Carriage Return) y uno de salto de linea (LF) para hacer lo mismo. Este retorno de carro se muestra como ^M.\n\nPara quitar todos los retornos de carro de un archivo, ejecute:\n\n```\n:%s/^M//g\n```\n\nEl ^ que aparece es un carácter de control. Para ingresar la secuencia de control ^M presione Ctrl+v,Ctrl+m.\n\nTambién puede instalar el paquete dos2unix y ejecutar dos2unix archivo para corregir el archivo.\n\n"
    },
    {
      "title": "Corregir espacio vacío al final de las ventanas de gVim",
      "level": 3,
      "content": "Cuando usa un gestor de ventanas configurado para ignorar el tamaño establecido de la ventana, gVim llena las áreas no funcionales con el color de fondo del tema GTK.\n\nPara solucionarlo tiene que ajustar el espacio que gVim reserva al final de las ventanas. Añada la siguiente linea a ~/.vimrc:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Vim como pager",
      "level": 3,
      "content": "Usando scripts puede utilizar Vim como un terminal pager, pero con las características de Vim como por ejemplo, los temas de color.\n\nVim tiene incluido el script /usr/share/vim/vim82/macros/less.sh, el que usted puede utilizar creándole un alias. Tome en cuenta que este script no soporta ningún argumento descrito en less(1) § OPTIONS.\n\nTambién puede instalar el script vimpager. Para cambiar el pager por defecto, exporte la variable de entorno PAGER. Este script no soporta todos los argumentos; la lista de los que están soportados está disponible en su GitHub.\n\n"
    },
    {
      "title": "Resaltar los resultados de búsqueda",
      "level": 3,
      "content": "Para resaltar la primera cadena coincidente al escribir la búsqueda, añada la siguiente linea a su ~/.vimrc:\n\n```\nset incsearch\n```\n\nPara resaltar todas las cadenas coincidentes al escribir la búsqueda y después de haberla ejecutado, añada la siguiente linea a su ~/.vimrc:\n\n```\nset hlsearch\n```\n\n- Al establecer hlsearch se van a resaltar todas las cadenas coincidentes hasta que una búsqueda siguiente se ejecute. Esto puede ser innecesario u obstructor, así que puede desactivarlo temporalmente hasta que haga otra búsqueda ejecutando :nohlsearch. Si nota que lo ejecuta a menudo, considere asignarle un atajo.\n- El resalte también va a ser aplicado cuando se coincida con expresiones regulares en comandos que las utilicen, como s o g.\n\n"
    },
    {
      "title": "Plugins",
      "level": 2,
      "content": "El uso de plugins en Vim pueden incrementar su productividad al extender las características de este programa. Estos pueden alterar la interfaz de usuario, añadir nuevos comandos, habilitar soporte para completado de código, integrar otros programas y utilidades, añadir soporte para más idiomas, y más.\n\n"
    },
    {
      "title": "Con el gestor de paquetes integrado",
      "level": 4,
      "content": "Vim 8 añadió la posibilidad de cargar plugins de manera nativa. Esto se hace instalando los plugins en la carpeta ~/.vim/pack. La estructura de esta carpeta difiere un poco de la usual en los gestores de plugins, que usualmente tienen una carpeta por cada plugin. Lo siguiente es un proceso de instalación común y una demostración de la estructura de la carpeta (con el plugin vim-surround de Tim Pope como ejemplo):\n\n```\n$ mkdir -p ~/.vim/pack/tpope/start\n```\n\nDebe tomar en cuenta que ~/.vim/pack/tpope es el package directory (directorio de plugin/s), lo cual es la definición vaga en la Documentación de Vim para una carpeta que contiene uno o más plugins. Note que a esta carpeta no debe descargar repositorios de plugins y su nombre es arbitrario. Usted puede instalar todos sus plugins en una sola carpeta; o como se muestra aquí, en una con el nombre del autor en Github: tpope.\n\nEsta carpeta puede contener las siguientes subcarpetas:\n\n- start - (Inicio): Los plugins de esta subcarpeta son cargados automáticamente al inicio de Vim. Es el lugar de instalación más frecuente.\n- opt - (Opcional): Los plugins de esta subcarpeta son cargados al ejecutar el comando :packadd dentro de una sesión.\n\nIngrese a la carpeta start y clone el repositorio:\n\n```\n$ cd ~/.vim/pack/tpope/start\n$ git clone https://tpope.io/vim/surround.git\n```\n\nSe creará una subcarpeta adicional, ~/.vim/pack/tpope/start/surround, donde están los archivos del plugin.\n\nDespués, actualize el indice de ayuda para comprobar si el plugin tiene archivos de ayuda:\n\n```\n$ vim -u NONE -c \"helptags surround/doc\" -c q\n```\n\nEl plugin va a ser cargado automáticamente cuando inicie Vim. No necesita hacer cambios a su ~/.vimrc, excepto por las opciones para plugin que necesite.\n\n"
    },
    {
      "title": "Con un gestor de plugins",
      "level": 4,
      "content": "Un gestor de plugins es (también) un plugin que instala, maneja y actualiza otros plugins para Vim. Puede ser más conveniente si está usando Vim en otras plataformas, y necesita una manera consistente de actualizar los plugins.\n\n- Vim-plug es un gestor de plugins minimalista con varias características como la posibilidad de cargar plugins bajo demanda y actualizar varios al mismo tiempo; se puede instalar desde vim-plugAUR o vim-plug-gitAUR.\n- Vundle, disponible como vundleAUR o vundle-gitAUR.\n- pathogen.vim es un plugin simple para gestionar el runtimepath (directorio de archivos de inicio) de Vim; se puede instalar desde vim-pathogenAUR o vim-pathogen-gitAUR.\n- Dein.vim es un gestor de plugins que reemplaza a NeoBundle, se puede instalar desde vim-deinAUR o vim-dein-gitAUR.\n\n"
    },
    {
      "title": "Desde los repositorios oficiales",
      "level": 4,
      "content": "El grupo vim-plugins provee varios plugins; ejecute el comando pacman -Sg vim-plugins para mostrar los paquetes disponibles e instalarlos.\n\n"
    },
    {
      "title": "cscope",
      "level": 4,
      "content": "Cscope es una herramienta para navegar proyectos. Después de poner el cursor en alguna palabra, símbolo o función, cscope puede encontrar al ser invocado (usualmente con atajo) otras funciones que llamen a la función, la definición de esta, y más.\n\nInstale el paquete cscope.\n\nCopie el archivo con la configuración por defecto donde pueda ser leído automáticamente por Vim:\n\n```\nmkdir -p ~/.vim/plugin\nwget -P ~/.vim/plugin https://cscope.sourceforge.net/cscope_maps.vim\n```\n\n```\nset timeoutlen=4000\nset ttimeout\n```\n\nCree un archivo que contenga una lista de los archivos que cscope deba indexar (este plugin soporta varios lenguajes, pero en el ejemplo solo se usaran los archivos .c, .cpp y .h, que son específicos para proyectos en C/C++):\n\n```\n$ cd /ruta/a/la/carpeta/del/proyecto\n$ find . -type f -print | grep -E '\\.(c(pp)?|h)$' > cscope.files\n```\n\nInicie la base de datos que va a usar cscope:\n\n```\n$ cscope -bq\n```\n\nLos atajos de teclado por defecto son:\n\n```\nCtrl-\\ con\n      c: Buscar funciones que llamen esta función\n      d: Buscar funciones llamadas por esta función\n      e: Buscar con patrón egrep\n      f: Buscar este archivo\n      g: Buscar definición\n      i: Buscar archivos que incluyan (con #include) este archivo\n      s: Buscar símbolo\n      t: Buscar texto\n```\n\nTambién puede cambiar los los atajos.\n\n```\n#Hace que se use ctrl-c para encontrar funciones que llamen esta función\nnnoremap <C-c> :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n```\n\n"
    },
    {
      "title": "Taglist",
      "level": 4,
      "content": "Taglist provee una forma de visualizar la estructura de varios archivos de código fuente en varios lenguajes y le permite navegar por estos de manera eficaz.\n\nInstale el paquete vim-taglistAUR.\n\nAlgunas opciones útiles para añadir a su ~/.vimrc:\n\n```\nlet Tlist_Compact_Format = 1\nlet Tlist_GainFocus_On_ToggleOpen = 1\nlet Tlist_Close_On_Select = 1\nnnoremap <C-l> :TlistToggle<CR>\n```\n\n"
    },
    {
      "title": "gVim funciona lento",
      "level": 3,
      "content": "La interfaz visual de Vim en GTK 3 puede ser más lenta que la versión en GTK 2 (véase FS#51366). Como solución puede instalar gvim-gtk2AUR.\n\n"
    },
    {
      "title": "Información oficial",
      "level": 3,
      "content": "- Pagina de Vim\n- Documentación\n- Wiki de Vim\n- Vim Scripts\n\n"
    },
    {
      "title": "Tutoriales",
      "level": 3,
      "content": "- Tutorial de vim e introducción\n- Tutorial de vi y guía referencial\n- Hoja de referencia gráfica y tutorial\n- Introducción a Vim y tutorial\n- Open Vim — colección de herramientas para el aprendizaje de Vim\n- Learn Vim Progressively (Aprenda Vim progresivamente)\n- Learning Vim in 2014 (Aprenda Vim en el 2014)\n- Siete hábitos para editar texto efectivamente\n- Sugerencias básicas para Vim[enlace roto 2025-03-15]\n\n"
    },
    {
      "title": "Videos",
      "level": 4,
      "content": "- Vimcasts–Grabaciones de pantalla en formato .ogg.\n- Videos tutoriales para Vim–Cubriendo desde lo básico hasta temas avanzados.\n\n"
    },
    {
      "title": "Hojas de referencia",
      "level": 4,
      "content": "- https://devhints.io/vim\n- https://vim.rtorr.com/ –Una hoja de referencias compatible con navegadores móviles–Fuentes\n\n"
    },
    {
      "title": "Juegos",
      "level": 4,
      "content": "- Vim Adventures (Aventuras en Vim)\n- VimGolf\n\n"
    },
    {
      "title": "Configuración",
      "level": 3,
      "content": "- Configuración de nion\n- Configuración completa y detallada por Amir Salihefendic\n- Bart Trojanowski\n- Distrubución de plugins y recursos para Vim de Steve Francia\n- Vim Awesome - Plugins para Vim\n- Configuración de Vim de W4RH4WK\n- Vimrc y tema de colores por askapache\n- Vimrc básico\n- Usevim\n\n"
    },
    {
      "title": "Colores",
      "level": 4,
      "content": "- Vivify\n- Como personalizar el tema de colores de Vim\n\n"
    }
  ]
}