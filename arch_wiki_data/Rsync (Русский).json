{
  "title": "Rsync (Русский)",
  "url": "https://wiki.archlinux.org/title/Rsync_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- System backup\n- Программы синхронизации и резервного копирования\n\nrsync — утилита с открытым исходным кодом для быстрого инкрементного перемещения файлов.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет rsync.\n\nrsync должен быть установлен как на устройстве-отправителе, так и на устройстве-получателе.\n\n"
    },
    {
      "title": "Графические интерфейсы",
      "level": 3,
      "content": "- Grsync — GTK-фронтенд.\n\n- JotaSync — графический пользовательский интерфейс Java Swing для rsync со встроенным планировщиком.\n\n- luckyBackup — Qt-фронтенд, написанный на C++.\n\nДругие утилиты, использующие rsync: rdiff-backupAUR и osyncAUR.\n\n"
    },
    {
      "title": "Как альтернатива cp/mv",
      "level": 2,
      "content": "rsync может использоваться как продвинутая альтернатива команде cp или mv, особенно при копировании больших файлов.\n\n```\n$ rsync -P источник назначение\n```\n\nОпция -P эквивалентна --partial --progress, которая оставляет частично переданные файлы и показывает шкалу прогресса во время передачи.\n\nИспользуйте опцию -r/--recursive для рекурсивного обхода каталогов.\n\nФайлы могут копироваться локально, как при помощи cp, но rsync интересна прежде всего возможностью удалённого копирования файлов, то есть между двумя разными хостами. Удалённые расположения могут быть указаны при помощи синтаксиса хост-двоеточие:\n\n```\n$ rsync источник хост:назначение\n```\n\nили\n\n```\n$ rsync хост:источник назначение\n```\n\nПередача файлов по сети по умолчанию использует протокол SSH и хост может быть как реальным именем хоста, так и предопределённым профилем/псевдонимом из .ssh/config.\n\nПри локальной или удалённой передаче файлов rsync сперва создаёт список файлов, содержащий информацию (по умолчанию это размер файла и время его последнего изменения), которая затем будет использована для определения, нуждается ли файл в построении. Для каждого файла, нуждающегося в построении, находится слабая и сильная контрольная сумма для каждого блока так, что каждый блок имеет длину S байт, не пересекается с другими и имеет сдвиг, который делится на S. Благодаря этой информации, большие файлы могут быть построены с помощью rsync без необходимости передачи файла целиком. Для более детального практического и математического объяснения см. как работает rsync (англ.) и алгоритм rsync (англ.) соответственно.\n\nДля быстрого использования разумных значений по умолчанию, можете использовать следующие псевдонимы:\n\n```\ncpr() {\n  rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 \"$@\"\n} \nmvr() {\n  rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 --remove-source-files \"$@\"\n}\n```\n\n- -hh : вывод чисел в удобном для чтения виде\n\n- --info=stats1,progress2 : stats1 выводит статистику трансфера rsync с уровнем детализации 1. progress2 выводит общий прогресс трансфера, а не по каждому файлу (progress1)\n\n- --modify-window=1 : при сравнении временных меток у файлов, считать их эквивалентными если разница составляет не более 1 секунды.\n\n- --remove-source-files : удалить файлы из каталога источника после успешной передачи.\n\n"
    },
    {
      "title": "Предостережение о замыкающем слэше",
      "level": 3,
      "content": "По умолчанию Arch использует GNU cp (часть GNU coreutils). Однако rsync следует соглашениям BSD cp, которые особо обрабатывают каталоги источника с замыкающим слэшем \"/\". Несмотря на то, что\n\n```\n$ rsync -r источник назначение\n```\n\nсоздаёт каталог \"назначение/источник\" с содержимым \"источника\", команда\n\n```\n$ rsync -r источник/ назначение\n```\n\nкопирует все файлы из \"источник/\" напрямую в \"назначение\", без промежуточного каталога - так же, как при вызове\n\n```\n$ rsync -r источник/. назначение\n```\n\nЭто поведение отличается от такового в GNU cp, которая одинаково обрабатывает \"источник\" и \"источник/\" (но не \"источник/.\"). Кроме того, некоторые оболочки автоматически добавляют замыкающий слэш при tab-дополнении имён каталогов. Ввиду этих обстоятельств, новые или нечастые пользователи rsync могут зачастую забывать про отличающееся поведение rsync и случайно создавать беспорядок или даже перезаписывать важные файлы, оставляя замыкающий слэш в командной строке.\n\nПоэтому имеет смысл использовать сценарий-обёртку, чтобы автоматически удалять замыкающий слэш перед вызовом rsync:\n\n```\n#!/bin/sh\nnew_args=();\nfor i in \"$@\"; do\n    case $i in /) i=/;; */) i=${i%/};; esac\n    new_args=\"$new_args $i\";\ndone\nexec rsync \"${(@)new_args}\"\n```\n\nЭтот сценарий может быть размещён где-нибудь в $PATH и назначен псевдонимом для rsync в файле инициализации оболочки.\n\n"
    },
    {
      "title": "Как утилита для резервного копирования",
      "level": 2,
      "content": "Протокол rsync легко может использоваться для резервного копирования, передавая только файлы, изменённые с момента последней резервной копии. Этот раздел описывает очень простой сценарий, выполняемый по расписанию, использующий rsync, обычно используемый для копирования на извлекаемый носитель.\n\n"
    },
    {
      "title": "Автоматическое резервное копирование",
      "level": 3,
      "content": "В этом примере сценарий будет создан в каталоге /etc/cron.daily и будет запускаться ежедневно, если демон cron должным образом установлен и настроен. Настройка и использование cron выходит за рамки этой статьи.\n\nСперва создайте сценарий, содержащий подходящие опции команды:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\nrsync -a --delete --quiet /каталог/для/резервного/копирования /расположение/резервной/копии\n```\n\n- -a : означает, что файлы должны быть архивированы, то есть большинство их характеристик сохранятся (но не список контроля доступа, жёсткие ссылки или расширенные атрибуты, такие как их возможности)\n- --delete : означает, что файлы, удалённые в источнике, должны быть удалены и из резервной копии\n\nЗдесь /каталог/для/резервного/копирования следует заменить на каталог, нуждающийся в резервной копии (например /home), а /расположение/резервной/копии на каталог, куда следует сохранять резервную копию (например /media/disk).\n\nВ конце надо сделать сценарий исполняемым.\n\n"
    },
    {
      "title": "Автоматическое резервное копирование по SSH",
      "level": 3,
      "content": "Для резервного копирования на удалённый хост при помощи SSH, используйте следующий сценарий:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\nrsync -a --delete --quiet -e ssh /каталог/для/резервного/копирования пользователь@хост:/расположение/резервной/копии\n```\n\n- -e ssh : указывает rsync использовать SSH\n- пользователь : пользователь на хост\n- -a : включает опции -rlptgoD (рекурсивно, ссылки, разрешения, времена, группы, владелец, устройства)\n\n"
    },
    {
      "title": "Автоматическое резервное копирование с помощью NetworkManager",
      "level": 3,
      "content": "Этот сценарий запускает резервное копирование при установлении сетевого соединения.\n\nСперва создайте сценарий, содержащий подходящие опции команды:\n\n```\n/etc/NetworkManager/dispatcher.d/backup\n```\n\n```\n#!/bin/sh\n\nif [ x\"$2\" = \"xup\" ] ; then\n        rsync --force --ignore-errors -a --delete --bwlimit=2000 --files-from=files.rsync /каталог/для/резервного/копирования /расположение/резервных/копий\nfi\n```\n\n- -a : включает опции -rlptgoD (рекурсивно, ссылки, разрешения, времена, группы, владелец, устройства)\n- --files-from : считывает относительный путь /каталога/для/резервного/копирования из этого файла\n- --bwlimit : ограничивает пропускную способность ввода/вывода; килобайты в секунду\n\nRoot должен владеть сценарием (для изучения подробностей см. NetworkManager#Network services with NetworkManager dispatcher (англ.))\n\n"
    },
    {
      "title": "Автоматическое резервное копирование с помощью systemd и inotify",
      "level": 3,
      "content": "- В связи с ограничениями inotify и systemd (см. этот вопрос и ответ(англ.)), рекурсивный мониторинг файловой системы невозможен. Несмотря на возможность просматривать каталог и его содержимое, нельзя рекурсивно заходить в подкаталоги и просматривать их содержимое; вам необходимо явно указывать каждый каталог для просмотра, даже если этот каталог является дочерним для другого указанного каталога.\n- Эта настройка основана на systemd/User.\n\nВместо запуска резервного копирования по расписанию, например при помощи cron, можно запускать резервное копирование каждый раз, когда в один из файлов, подлежащих резервному копированию, вносятся изменения. Модули systemd.path используют inotify для мониторинга файловой системы, и могут быть использованы в связке с файлами systemd.service для запуска любого процесса (в данном случае резервного копирования при помощи rsync) на основе события файловой системы.\n\nСперва, создайте юнит systemd.path, который будет отслеживать файлы для резервного копирования:\n\n```\n~/.config/systemd/user/backup.path\n```\n\n```\n[Unit]\nDescription=Проверяет, изменились ли файлы, для которых необходимо создавать резервные копии\n\n[Path]\nPathChanged=%h/documents\nPathChanged=%h/music\n\n[Install]\nWantedBy=default.target\n```\n\nЗатем создайте файл systemd.service, который будет активирован при обнаружении изменений. По умолчанию будет запущен файл службы, названный так же, как и модуль пути (в данном случае backup.path), за исключением расширения .service вместо .path (в данном случае backup.service).\n\n```\n~/.config/systemd/user/backup.service\n```\n\n```\n[Unit]\nDescription=Создаёт резервные копии файлов\n\n[Service]\nExecStart=/usr/bin/rsync %h/./documents %h/./music -CERrltm --delete ubuntu:\n```\n\nТеперь запустите/включите backup.path, как обычную службу systemd и она начнёт отслеживать изменения в файлах и автоматически запускать backup.service.\n\n"
    },
    {
      "title": "Дифференциальное резервное копирование в течение недели",
      "level": 3,
      "content": "Это полезная возможность rsync, заключающаяся в создании полной резервной копии (при каждом запуске) и поддержании дифференциальной резервной копии только измененных файлов в отдельном каталоге для каждого дня недели.\n\nСперва создайте сценарий, содержащий подходящие командные опции:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\n\nDAY=$(date +%A)\n\nif [ -e /расположение/для/инкрементной/копии/$DAY ] ; then\n  rm -fr /расположение/для/инкрементной/копии/$DAY\nfi\n\nrsync -a --delete --quiet --inplace --backup --backup-dir=/расположение/для/инкрементной/копии/$DAY /каталог/для/резервного/копирования/ /расположение/для/полной/резервной/копии/\n```\n\nОпция --inplace автоматически включает --partial и обновляет целевые файлы напрямую.\n\n"
    },
    {
      "title": "Резервное копирование при помощи создания снимков",
      "level": 3,
      "content": "Эта же идея может использоваться для поддержания дерева снимков ваших файлов. Другими словами, каталога с копиями файлов, упорядоченных по дате. Копии создаются при помощи жёстких ссылок, то есть только изменённые файлы будут занимать пространство. В общих чертах, эта идея лежит в основе TimeMachine от Apple.\n\nЭтот легко реализуемый базовый сценарий создаёт быстрые инкрементные снимки, используя опцию --link-dest для создания жёстких ссылок на неизменённые файлы:\n\n```\n/usr/local/bin/snapbackup.sh\n```\n\n```\n#!/bin/sh\n\n# Базовый скрипт для создания снимков при помощи rsync\n\n# Config\nOPT=\"-aPh\"\nLINK=\"--link-dest=/snapshots/пользователь/last/\" \nSRC=\"/home/пользователь/файлы/\"\nSNAP=\"/snapshots/пользователь/\"\nLAST=\"/snapshots/пользователь/last\"\ndate=`date \"+%Y-%b-%d:_%T\"`\n\n# Запуск rsync для создания снимка\nrsync $OPT $LINK $SRC ${SNAP}$date\n\n# Удаление символической ссылки на предыдущий снимок\nrm -f $LAST\n\n# Создание новой символической ссылки на последний снимок, на который следует создавать жёсткие ссылки\nln -s ${SNAP}$date $LAST\n```\n\nСимволическая ссылка должна уже существовать в качестве назначения --link-dest. Если предыдущий снимок удаляется, то символическая ссылка должна быть пересоздана на наиболее недавний снимок. Если --link-dest не найдёт работающей символической ссылки, rsync продолжит копировать все исходные файла вместо копирования только изменений.\n\nБолее продвинутая версия поддерживает актуальную полную резервную копию $SNAP/latest и в случае изменения определённого количества файлов с прошлой полной резервной копии, создаёт снимок $SNAP/$DATETAG текущей полной резервной копии, используя cp -al для создания жёстких ссылок на неизменённые файлы:\n\n```\n/usr/local/bin/rsnapshot.sh\n```\n\n```\n#!/bin/sh\n\n## Моя процедура для создания снимков на основе rsync\n## (cc) marcio rps AT gmail.com\n\n# Конфигурационные переменные\n\nSRC=\"/home/пользователь/файлы/\" #не забудьте замыкающий слэш!\nSNAP=\"/snapshots/пользователь\"\nOPTS=\"-rltgoi --delay-updates --delete --chmod=a-w\"\nMINCHANGES=20\n\n# запуск этого процесса с низким приоритетом\n\nionice -c 3 -p $$\nrenice +12  -p $$\n\n# синхронизация\n\nrsync $OPTS $SRC $SNAP/latest >> $SNAP/rsync.log\n\n# проверка, достаточно ли файлов поменялось, если да, то\n# создаётся жёсткая ссылка, называемая по дате\n\nCOUNT=$( wc -l $SNAP/rsync.log|cut -d\" \" -f1 )\nif [ $COUNT -gt $MINCHANGES ] ; then\n        DATETAG=$(date +%Y-%m-%d)\n        if [ ! -e $SNAP/$DATETAG ] ; then\n                cp -al $SNAP/latest $SNAP/$DATETAG\n                chmod u+w $SNAP/$DATETAG\n                mv $SNAP/rsync.log $SNAP/$DATETAG\n               chmod u-w $SNAP/$DATETAG\n         fi\nfi\n```\n\nЧтобы сделать всё намного проще, этот сценарий можно запускать как модуль systemd/Timers.\n\n"
    },
    {
      "title": "Полная резервная копия системы",
      "level": 3,
      "content": "Этот раздел об использовании rsync для передачи копии полного дерева /, исключая несколько выбранных каталогов. Этот подход считается лучше, чем клонирование диска с помощью dd, так как он позволяет использовать различные размеры, таблицы разделов и файловые системы и лучше, чем копирование с помощью cp -a, так как предоставляет больший контроль над разрешениями, атрибутами файлов, списками контроля доступа и расширенными атрибутами (англ.).\n\nrsync будет работать даже при запущенной системе, но файлы, изменённые во время передачи, могут быть как переданы, так и нет, что может вызывать неопределённое поведение некоторых программ, использующих переданные файлы.\n\nЭтот подход хорошо подходит для переноса существующей установки на новый жёсткий диск или SSD.\n\nЗапустите следующую команду с правами root, чтобы удостовериться, что rsync имеет доступ ко всем системным файлам и может сохранять владельцев:\n\n```\n# rsync -aAXHv --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\"} / /каталог/для/резервного/копирования\n```\n\nПри использовании набора опций -aAX, файлы передаются в режиме архива, что гарантирует сохранность символических ссылок, устройств, разрешений, владельцев, времени изменения, списков контроля доступа и расширенных атрибутов, в предположении, что целевая файловая система поддерживает соответствующие функции. Опция -H сохраняет жёсткие ссылки, но использует больше памяти.\n\nОпция --exclude исключает файлы, подходящие под заданные шаблоны. Каталоги /dev, /proc, /sys, /tmp и /run будут созданы этой командой, однако их содержимое будет исключено из резервной копии. /lost+found зависит от файловой системы. Команда выше зависит расширения скобок в оболочках bash (англ.) и zsh (англ.). При использовании другой оболочки. шаблоны в --exclude должны повторяться вручную. Кавычки в исключаемых шаблонах позволят избежать расширения оболочкой, что важно например при резервном копировании по SSH. Окончание исключаемых путей символом * гарантирует, что сами каталоги будут созданы, если они ещё не существуют.\n\n- Если вы планируете записывать резервную копию в каталог, отличный от /mnt или /media, не забудьте добавить его в список исключаемых шаблонов, чтобы избежать бесконечного цикла.\n- Если в системе есть смонтированные привязанные каталоги, то они должны быть также исключены, чтобы их содержимое скопировалось только один раз.\n- Если вы используете файл подкачки, убедитесь, что вы его исключили.\n- Примите к сведению, если хотите создать резервную копию каталога /home/. Если он содержит ваши данные, то может оказаться значительно больше, чем система. В ином случае, исключите неважные подкаталоги, такие как /home/*/.thumbnails/*, /home/*/.cache/mozilla/*, /home/*/.cache/chromium/*, и /home/*/.local/share/Trash/*, в зависимости от программного обеспечения, установленного в системе.\n- Если установлен GVFS, то необходимо исключить /home/*/.gvfs чтобы избежать ошибок rsync.\n- Если установлен Dhcpcd ≥ 9.0.0, исключите каталог /var/lib/dhcpcd/* т.к. dhcpcd монтирует туда несколько системных каталогов в качестве подкаталогов.\n\nВозможно вы захотите добавить или убрать некоторые опции rsync, например следующие. Смотрите rsync(1) для полного списка.\n\n- Если в вашей системе очень мало памяти, может иметь смысл убрать опцию -H; однако это не должно быть проблемой на большинстве современных устройств. Количество жёстких ссылок в файловой системе может быть большим при использовании некоторых программ, например Flatpak. Много жёстких ссылок находится в каталоге /usr/.\n- Вы можете захотеть добавить опцию rsync --delete, если запускаете его несколько раз для одного и того же каталога. В этом случае, убедитесь, что каталог источника на заканчивается на /*, иначе эта опция затронет файлы внутри подкаталогов источника, но не затронет файлы, находящиеся в самом источнике.\n- Если вы используете разреженные файлы, такие как виртуальные диски, образы Docker и т.п., добавьте опцию -S.\n- Опция --numeric-ids отключит сопоставление имён для групп и пользователей; вместо этого передаваться будут цифровые идентификаторы групп и пользователей. Это полезно при резервном копировании через SSH или при использовании live системы для резервного копирования другого системного диска.\n- Выбрав опцию --info=progress2 вместо -v, вы увидите информацию об общем прогрессе и скорости передачи вместо списка передаваемых файлов.\n- Для избежания выхода за пределы файловой системы при рекурсивном обходе, добавьте опцию -x/--one-file-system. Она предотвратит резервное копирование любых точек монтирования в иерархии.\n\n"
    },
    {
      "title": "Восстановление резервной копии",
      "level": 3,
      "content": "Если вы желаете восстановить резервную копию, используйте запущенную ранее команду rsync, поменяв источник и назначение.\n\n"
    },
    {
      "title": "Клонирование файловой системы",
      "level": 2,
      "content": "rsync предоставляет способ создания копии всех данных в файловой системы с сохранением максимально возможного количества информации, включая метаданные файловой системы. Это процедура клонирования на уровне файловой системы, где файловые системы источника и назначения не обязаны совпадать. Она может использоваться для резервного копирования, смены файловой системы или восстановления данных.\n\nРежим архива rsync неплохо подходит для этой цели, но он не создаёт резервную копию специальных метаданных файловой системы, таких как списки контроля доступа, расширенные атрибуты или свойства разреженных файлов. Для успешного копирования на уровне файловой системы, некоторые дополнительные опции должны быть включены:\n\n```\nrsync -qaHAXS ИСТОЧНИК НАЗНАЧЕНИЕ\n```\n\nИх значение (из справочной страницы):\n\n```\n--hard-links, -H      сохранять жёсткие ссылки\n--acls, -A            сохранять списки контроля доступа (вызывает --perms)\n--xattrs, -X          сохранять расширенные атрибуты\n--sparse, -S          сжимать последовательности нулей в разреженные блоки\n```\n\nКроме того, используйте -x, если другие файловые системы, которые желаете исключить из копии, примонтированы в дерево.\n\nПолученная копия может быть легко прочитана заново и проверена (например после попытки восстановления файлов) на уровне файловой системы с помощью рекурсивной опции diff:\n\n```\ndiff -r ИСТОЧНИК НАЗНАЧЕНИЕ\n```\n\nВозможно осуществить успешный переход на другую файловую систему, используя rsync как описано в этой статье и обновив fstab и загрузчик, как описано в Перенос установки на новое оборудование (англ.). Это в сущности позволяет поменять любую корневую файловую систему на любую другую.\n\n"
    },
    {
      "title": "Демон rsync",
      "level": 2,
      "content": "rsync можно запускать на сервере в качестве демона, слушающего порт 873.\n\nОтредактируйте шаблон /etc/rsyncd.conf, настройте общий доступ и запустите rsyncd.service.\n\nИспользование на клиенте, например перечисление содержимого сервера:\n\n```\n$ rsync rsync://server/share\n```\n\nпередача файла с клиента на сервер:\n\n```\n$ rsync локальный-файл rsync://server/share/\n```\n\nПодумайте об использовании iptables для открытия порта 873 и аутентификации пользователей.\n\n"
    },
    {
      "title": "Раздача файлов по списку",
      "level": 4,
      "content": "```\n/etc/rsyncd.conf\n```\n\n```\n...\n\n# Необходимо при пересечении границ файловой системы.\n#use chroot  = no\nread only = yes\n\n...\n\n[sync]\n    path         = /\n# Список файлов для копирования.\n    include from = /backup.list\n# Исключение оставшихся.\n    exclude      = *\n```\n\nВсе промежуточные пути необходимы в списке файлов, если не используется шаблон ***:\n\n```\n/backup.list\n```\n\n```\n/etc/\n/etc/conf.d/\n/etc/conf.d/hwclock\n/etc/fonts/***\n```\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Больше примеров использования можно найти на форумах Вклад Сообщества (англ.) и Общее Программирование (англ.)\n- Локальные и удалённые снимки с использованием rsync и жёстких ссылок Включает дедупликацию файлов с помощью жёстких ссылок, MD5 подписи, защиту 'chattr', правил фильтров, квоту на диск, политику хранения с экспоненциальным распределением (ротация резервных копий с сохранением большего числа недавних копий, чем более старых)\n- Использование файлов ключей/идентификатора SSH с rsync (англ.)\n\n"
    }
  ]
}