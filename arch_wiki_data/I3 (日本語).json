{
  "title": "I3 (日本語)",
  "url": "https://wiki.archlinux.org/title/I3_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- タイル型ウィンドウマネージャの比較\n- ウィンドウマネージャ\n\ni3 は wmii にインスパイアされて開発された動的タイル型ウィンドウマネージャで、主に開発者や上級ユーザーをターゲットにしています。\n\ni3 が公表している目標は、わかりやすいドキュメント、適切なマルチモニタサポート、ウィンドウのツリー構造、vim のような様々なモードなどです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 起動 2.1 tty 2.2 ディスプレイマネージャー\n- 3 使用方法 3.1 キーバインド 3.2 コンテナとレイアウト 3.3 アプリケーションランチャー 3.3.1 KDE Plasma/i3 のアプリケーションランチャーとしての KRunner\n- 4 設定 4.1 設定ウィザードとキーボードレイアウト 4.2 自動起動 4.3 カラースキーム 4.4 i3bar 4.4.1 i3bar の代替 4.5 i3status 4.5.1 i3status の代替 4.5.2 i3status のラッパー 4.5.3 ステータスバーにアイコンフォント 4.6 ターミナルエミュレータ 4.7 タイトルクリックを無効にする\n- 5 ヒントとテクニック 5.1 開いているウィンドウにジャンプ 5.2 緊急ウィンドウにジャンプ 5.3 ウィンドウレイアウトの保存と復元 5.3.1 ワークスペースの現在のウィンドウレイアウトを保存 5.3.2 ワークスペースのウィンドウレイアウトを復元 5.4 スクラッチパッドコンテナ 5.5 スクリーンセーバーと電源管理 5.6 シャットダウン, 再起動, 画面ロック 5.7 ターミナルウィンドウを飲み込む 5.8 外部ディスプレイの手動管理 5.9 タブまたはスタックによるウェブブラウジング 5.10 ワークスペース変数 5.11 フロートするダイアログを正しく扱う 5.12 ネットワークのダウンロード・アップロード速度をステータスバーに表示 5.13 ウィンドウの分割方向を自動的に水平/垂直に切り替える\n- 6 トラブルシューティング 6.1 一般 6.2 i3 メッセージバーのボタンが動作しない 6.3 タイル化されたターミナルで行の折り返しがおかしい 6.4 マウスカーソルが待機状態のままになる 6.5 キーバインドが反応しない 6.6 ティアリング 6.7 トレイアイコンが表示されない 6.8 Spotify のためのデフォルトのワークスペース\n- 7 参照\n\n- 2.1 tty\n- 2.2 ディスプレイマネージャー\n\n- 3.1 キーバインド\n- 3.2 コンテナとレイアウト\n- 3.3 アプリケーションランチャー 3.3.1 KDE Plasma/i3 のアプリケーションランチャーとしての KRunner\n\n- 3.3.1 KDE Plasma/i3 のアプリケーションランチャーとしての KRunner\n\n- 4.1 設定ウィザードとキーボードレイアウト\n- 4.2 自動起動\n- 4.3 カラースキーム\n- 4.4 i3bar 4.4.1 i3bar の代替\n- 4.5 i3status 4.5.1 i3status の代替 4.5.2 i3status のラッパー 4.5.3 ステータスバーにアイコンフォント\n- 4.6 ターミナルエミュレータ\n- 4.7 タイトルクリックを無効にする\n\n- 4.4.1 i3bar の代替\n\n- 4.5.1 i3status の代替\n- 4.5.2 i3status のラッパー\n- 4.5.3 ステータスバーにアイコンフォント\n\n- 5.1 開いているウィンドウにジャンプ\n- 5.2 緊急ウィンドウにジャンプ\n- 5.3 ウィンドウレイアウトの保存と復元 5.3.1 ワークスペースの現在のウィンドウレイアウトを保存 5.3.2 ワークスペースのウィンドウレイアウトを復元\n- 5.4 スクラッチパッドコンテナ\n- 5.5 スクリーンセーバーと電源管理\n- 5.6 シャットダウン, 再起動, 画面ロック\n- 5.7 ターミナルウィンドウを飲み込む\n- 5.8 外部ディスプレイの手動管理\n- 5.9 タブまたはスタックによるウェブブラウジング\n- 5.10 ワークスペース変数\n- 5.11 フロートするダイアログを正しく扱う\n- 5.12 ネットワークのダウンロード・アップロード速度をステータスバーに表示\n- 5.13 ウィンドウの分割方向を自動的に水平/垂直に切り替える\n\n- 5.3.1 ワークスペースの現在のウィンドウレイアウトを保存\n- 5.3.2 ワークスペースのウィンドウレイアウトを復元\n\n- 6.1 一般\n- 6.2 i3 メッセージバーのボタンが動作しない\n- 6.3 タイル化されたターミナルで行の折り返しがおかしい\n- 6.4 マウスカーソルが待機状態のままになる\n- 6.5 キーバインドが反応しない\n- 6.6 ティアリング\n- 6.7 トレイアイコンが表示されない\n- 6.8 Spotify のためのデフォルトのワークスペース\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "i3 は、i3-wm パッケージでインストールできます。\n\ni3 パッケージグループも利用可能です。これには、ウィンドウマネージャ、スクリーンロッカー、標準出力を介して i3bar にステータスラインを書き込む２つのプログラムが含まれています。\n\n"
    },
    {
      "title": "tty",
      "level": 3,
      "content": "xinit で i3 を実行します\n\n"
    },
    {
      "title": "ディスプレイマネージャー",
      "level": 3,
      "content": "i3-wm にはウィンドウマネージャーを起動する Xsession として i3.desktop が含まれています。i3-with-shmlog.desktop はログを有効にします(デバッグに便利です)。i3-gnomeAUR は i3 を GNOME に統合します。\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "詳しい情報は 公式のドキュメント、すなわち i3 User’s Guide を見て下さい。\n\n"
    },
    {
      "title": "キーバインド",
      "level": 3,
      "content": "i3 では修飾キー ($mod と表記されます) を使ってコマンドを呼び出します。デフォルトでは Alt (Mod1) ですが、Super (Mod4) も良く使われます。大抵のキーボードでは Super は Windows アイコンが印されたキーになります。Apple キーボードなら Command キーです。\n\nデフォルトのキーバインドについては i3 リファレンスカード や Using i3 を見て下さい。新しくショートカットを追加する方法は Keyboard bindings に載っています。\n\nQwerty 以外のキーボード配列を使っている場合は設定ウィザードとキーボードレイアウトに書かれているように設定ウィザードを迂回すると良いでしょう。\n\n"
    },
    {
      "title": "コンテナとレイアウト",
      "level": 3,
      "content": "i3 はコンテナを基本単位としたツリー構造でウィンドウを管理します。この構造は縦や横に分岐していきます。デフォルトではコンテナはタイル状に並べられますが、タブでまとめたり積み重ねるレイアウトに設定したり、フロートさせることもできます (ダイアログウィンドウのように)。フローティングウィンドウは常に一番上に表示されます。\n\n詳しくは i3 Tree や Containers and the tree data structure を見て下さい。\n\n"
    },
    {
      "title": "アプリケーションランチャー",
      "level": 3,
      "content": "i3 はアプリケーションランチャーとして dmenu を使っており、デフォルトでは $mod+d で呼び出せます。dmenu の代わりに、透過機能や xft フォントのサポートなどが搭載されている AUR の dmenu2AUR を使うこともできます。\n\ni3-wm には dmenu の Perl ラッパーである i3-dmenu-desktop が含まれており、デスクトップエントリを利用してインストールされている全てのアプリケーションのリストを作成します。また、j4-dmenu-desktop-gitAUR パッケージを使うこともできます。こちらは i3-dmenu-desktop とほぼ同様に使える上に、高速に動作します [1]。\n\nrofi は人気のある dmenu の代替品であり、デスクトップエントリを一覧表示できます。\n\n"
    },
    {
      "title": "KDE Plasma/i3 のアプリケーションランチャーとしての KRunner",
      "level": 4,
      "content": "ここに示すように、KDE Plasma といっしょにi3を実行することができます: KDE#KDE で別のウィンドウマネージャを使う\n\nKDEWM=/usr/bin/i3 で Plasma を実行している場合、i3 の設定に以下を追加することで、KRunner を $mod+d でアプリケーションランチャーとして代替することができます:\n\n```\n~/.config/i3/config\n```\n\n```\nset $menu --no-startup-id qdbus org.kde.krunner /App display\nbindsym $mod+d exec $menu\n```\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "詳しくは Configuring i3 を参照。この記事では i3 の設定ファイルは ~/.config に置くことにします (i3-config-wizard では ~/.i3/config に作成されます)。\n\n"
    },
    {
      "title": "設定ウィザードとキーボードレイアウト",
      "level": 3,
      "content": "i3 を最初に起動したとき、設定ウィザードの i3-config-wizard が実行されます。このツールは /etc/i3/config.keycodes にあるテンプレート設定ファイルを書き換えることで ~/.i3/config を作成します。デフォルトテンプレートには以下の2つの変更が加えられます:\n\n1. ウィザードはデフォルトの修飾キーを何にするかユーザーに尋ねます。set $mod Mod1 のような行がテンプレートに追加されます。\n1. ユーザーの現在のキーボードレイアウトにあわせて bindcode 行をすべて bindsym 行で置き換えます。\n\n後者が実行されることで、4つのナビゲーションショートカット j, k, l と Qwerty キーボードの\"セミコロン\"が正しいキーシムにマッピングされます。例えば Dvorak キーボードなら h, t, n, s になります。ただし副作用として他のキーシムのマッピングが変更されるため Dvorak ユーザーはむしろ混乱してしまうかもしれません。\"再起動\"は $mod1+r ではなく $mod1+p に、\"横に分割\"は $mod1+h ではなく $mod1+d にバインドされます。チュートリアルに記載されているバインドと同じ、覚えやすいキーバインドを使いたい場合は /etc/i3/config を ~/.config/i3/config (または ~/.i3/config) にコピーしてください。\n\nキーボードレイアウトを頻繁に変更するユーザーなどに対応するために、キーコードによる設定も可能です。\n\n"
    },
    {
      "title": "自動起動",
      "level": 3,
      "content": "~/.config/i3/config ファイルに exec コマンドを追加します。例えば、以下のようになります。\n\n```\nexec terminator\n```\n\nまた、XDG Autostart を使用することもできます。\n\n"
    },
    {
      "title": "カラースキーム",
      "level": 3,
      "content": "設定ファイルを使ってウィンドウ装飾の色をカスタマイズすることができますが、構文のためにテーマを作成したり共有するのは現実的ではありません。ユーザーが様々なテーマを作るのを楽にさせるプロジェクトが複数存在します。\n\n- j4-make-config — あなたの設定をテーマのコレクションや個人用の設定パーツ (たとえばホスト用の設定) と組み合わせます。テーマの簡単な変更や、柔軟でダイナミックな設定のカスタマイズを可能にします。\n\n"
    },
    {
      "title": "i3bar",
      "level": 3,
      "content": "i3bar はワークスペースの情報を表示するほかに、次のセクションで説明している、i3status などに入力を行うこともできます。例:\n\n```\n~/.config/i3/config\n```\n\n```\nbar {\n    output            LVDS1\n    status_command    i3status\n    position          top\n    mode              hide\n    workspace_buttons yes\n    tray_output       none\n    \n    font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n\n    colors {\n        background #000000\n        statusline #ffffff\n\n        focused_workspace  #ffffff #285577\n        active_workspace   #ffffff #333333\n        inactive_workspace #888888 #222222\n        urgent_workspace   #ffffff #900000\n    }\n}\n```\n\n詳しくは Configuring i3bar を見て下さい。\n\n"
    },
    {
      "title": "i3bar の代替",
      "level": 4,
      "content": "旧来のデスクトップ環境に入っているようなパネルを使いたいというユーザーもいるかもしれません。起動時に i3 の中でパネルアプリケーションを起動することで他のパネルを使うことができます。\n\nXFCE パネルの場合、次の行を ~/.config/i3/config のどこかに追加してください:\n\n```\nexec --no-startup-id xfce4-panel --disable-wm-check\n```\n\n~/.config/i3/config の bar{ } セクションをコメントアウトすることで i3bar は無効にできます。もしくは以下を使ってください:\n\n```\n~/.config/i3/config\n```\n\n```\n# bar toggle, hide or show\nbindsym $mod+m bar mode toggle\n```\n\nこの方法では好きなようにバーを表示したり隠したりできます。\n\n以下はデスクトップ環境に依存しない置き換えです。\n\n- polybar — 高速で使いやすく拡張性の高いステータスバー。一般的なサービスの情報を表示する機能が予め組み込まれています。\n\n- excalibar — C言語で実装された軽量かつカスタマイズ可能なステータスバー。\n\n"
    },
    {
      "title": "i3status",
      "level": 3,
      "content": "デフォルトの設定ファイルをホームディレクトリにコピーしてください:\n\n```\n$ cp /etc/i3status.conf ~/.config/i3status/config\n```\n\nデフォルトの設定では定義されていないプラグインがあり、いくつかの設定はあなたのシステムでは無効かもしれません。そのためシステムに応じて設定を更新する必要があります。詳しくは man 1 i3status を見て下さい。\n\n"
    },
    {
      "title": "i3status の代替",
      "level": 4,
      "content": "- conky — 拡張性の高いシステムモニター。i3bar で使用する場合は このチュートリアル を見て下さい。\n\n- i3blocks — シェルスクリプトで拡張することができます。クリックイベントや割り込み、ブロックごとによるリフレッシュ間隔の定義などを管理可能。\n\n- i3phtatus — PHP で書かれた i3status の代替。簡単に拡張できます。\n\n- goi3bar — Go で書かれた i3status の代替。コンポーネントを自由にアップデートすることができます。\n\n- i3pystatus — デフォルトで多数のプラグインと設定オプションがある拡張可能な Python 3 ステータスバー。\n\n- i3situation — もうひとつの Python 3 ステータスバージェネレータ。\n\n- j4status — C で書かれており、プラグインで設定ができる、ステータスラインを提供します。追加プラグインは j4status-plugins-gitAUR に入っています。\n\n"
    },
    {
      "title": "i3status のラッパー",
      "level": 4,
      "content": "- h2status — i3status の Bash ラッパー、カスタム json エントリを入力として、非同期のステータスバーの更新だけでなくクリックイベントの処理が可能。\n\n- i3cat — go ベースのラッパーで外部の複数のソースからの入力を繋げることができます。クリックイベントの処理、ユーザーが定義した信号を子プロセスに転送することが可能。\n\n- py3status — Python による拡張可能な i3status ラッパー。\n\n"
    },
    {
      "title": "ステータスバーにアイコンフォント",
      "level": 4,
      "content": "i3bar には XBM アイコンサポートのパッチをあてることができますが、代わりにアイコンフォントを使うこともできます。\n\n- ttf-font-awesome — CSS でカスタマイズできるスケーラブルなベクターアイコン。それぞれの記号の Unicode を記した チートシート があります。\n\n- ttf-font-icons — Awesome と Ionicons の重複をなくしてサイズを合わせたミックス。DejaVu Sans と Awesome が重複しないようにします。\n\nフォントを混ぜ合わせるには、設定ファイルにフォントのフォールバックを定義してください、以下のように , でフォントを区切ります:\n\n```\n~/.config/i3/config\n```\n\n```\nbar {\n  ...\n  font pango:DejaVu Sans Mono, Icons 8\n  ...\n}\n```\n\npango syntax に従って、カンマで区切ったフォントファミリーのリストを記述してそれから一番後ろにサイズをひとつだけ指定してください。各フォントにサイズを設定するのは最後のフォントを除いて無視される原因となります。\n\n最後に、アイコングラフをフォーマット文字列にして ~/.config/i3status/config に入力します。入力するために、上でリンクしているチートシートを見てユニコード番号を使います。入力方法はテキストエディタによって異なります。例えば \"ハート\" アイコン (ユニコード番号 f004) を入力するには:\n\n- 様々な GUI のテキストエディタ (例: gedit や Leafpad) とターミナル (例: GNOME Terminal, xfce4-terminal): ctrl+shift+u, f004, Enter\n- Emacs: ctrl+x, 8, Enter, f004, Enter\n- Vim (挿入モード): Ctrl+v, uf004\n- urxvt: Ctrl+Shift を押して、f004 を入力\n\n"
    },
    {
      "title": "ターミナルエミュレータ",
      "level": 3,
      "content": "デフォルトでは $mod+Return を押すとターミナルを呼び出すスクリプトの i3-sensible-terminal が起動します。ターミナルを呼び出す順番については man i3-sensible-terminal を見て下さい。\n\n他のターミナルを起動するには、~/.config/i3/config の次の行を変更してください:\n\n```\nbindsym $mod+Return exec i3-sensible-terminal\n```\n\nまたは、$TERMINAL 変数をローカルで定義してください:\n\n```\n$ export TERMINAL=yourterminal\n```\n\n"
    },
    {
      "title": "タイトルクリックを無効にする",
      "level": 3,
      "content": "タイトルフレームをクリックしたときにウィンドウを選択しないようにするための bindsym button1 nop を追加します。デフォルトのレイアウトがタブになっていて、アプリケーション内で何かをクリックする代わりに i3 のタブをクリックしてしまうことが多い場合に便利です。\n\n"
    },
    {
      "title": "開いているウィンドウにジャンプ",
      "level": 3,
      "content": "- quickswitch-i3 — i3 でウィンドウを素早く切り替え・確認するための Python ユーティリティ。\n\n- i3-wm-scripts — 正規表現にマッチする名前を持ったウィンドウを検索してジャンプ。\n\n- winmenupy — クライアントのリストと一緒に dmenu を起動、ワークスペースの後にソートされます。クライアントを選択するとそのウィンドウにジャンプ。\n\n- rofi — スクラッチパッドウィンドウを検索してジャンプして開く。\n\n"
    },
    {
      "title": "緊急ウィンドウにジャンプ",
      "level": 3,
      "content": ".i3/config に次を追加: [2]\n\n```\nbindsym $mod+x [urgent=latest] focus\n```\n\n"
    },
    {
      "title": "ウィンドウレイアウトの保存と復元",
      "level": 3,
      "content": "バージョン 4.8 から、i3 のワークスペースレイアウトの保存・復元が可能になっています。これを行うには、次のパッケージが必要です: 公式リポジトリの perl-anyevent-i3 と perl-json-xs。\n\n"
    },
    {
      "title": "ワークスペースの現在のウィンドウレイアウトを保存",
      "level": 4,
      "content": "現在のウィンドウレイアウトを保存するには、以下の手順を実行:\n\n1. まず、様々なコマンドを使ってワークスペースにウィンドウを開いて適当にリサイズしてください。それぞれのウィンドウを開くのに実行したコマンドを書き出します。\n1. 次に、新しいワークスペースで、ターミナルを開いて次を実行: i3-save-tree --workspace N > ~/.i3/workspace_N.jsonN は保存したいワークスペースの番号に置き換えてください。これで N 番目のワークスペースのレイアウトが ~/.i3/workspace_N.json ファイルに保存されます。\n1. 作成したファイルを編集してください。次のコマンドで行うことができます: tail -n +2 ~/.i3/workspace_N.json | fgrep -v '// splitv' | sed 's|//||g' > ~/.i3/workspace_N.json\n\n```\ni3-save-tree --workspace N > ~/.i3/workspace_N.json\n```\n\n```\ntail -n +2 ~/.i3/workspace_N.json | fgrep -v '// splitv' | sed 's|//||g' > ~/.i3/workspace_N.json\n```\n\n"
    },
    {
      "title": "ワークスペースのウィンドウレイアウトを復元",
      "level": 4,
      "content": "ワークスペースのレイアウトを復元する方法は2つ存在します: スクリプトを書くか、あるいは ~/.i3/config を編集して自動的にレイアウトをロードするかです。このセクションでは前者だけを説明します。後者については 公式ドキュメント を参照。\n\n前のセクションで保存したレイアウトを復元するには、以下の内容で load_layout.sh というファイルを作成します:\n\n- 最初の行:\n\n```\n~/load_layout.sh\n```\n\n```\n#!/bin/bash\ni3-msg \"workspace M; append_layout ~/.i3/workspace_N.json\"\n```\n\nM は保存したレイアウトをロードしたいワークスペースの番号に、N は前のセクションで保存したワークスペースの番号に置き換えてください。\n\n- 前のセクションでウィンドウを開くのに使用したコマンド (コマンドは括弧で括り、閉じ括弧の前にアンパサンドを追加します)。\n\n例えば、3つの uxterm ウィンドウを開く場合:\n\n```\n~/load_layout.sh\n```\n\n```\n#!/bin/bash\n\n# First we append the saved layout of worspace N to workspace M\ni3-msg \"workspace M; append_layout ~/.i3/workspace_N.json\"\n\n# And finally we fill the containers with the programs they had\n(uxterm &)\n(uxterm &)\n(uxterm &)\n```\n\nそれからファイルに実行可能属性を付与:\n\n```\n$ chmod u+x ~/load_layout.sh\n```\n\n最後に、スクリプトを実行して N 番目のワークスペースのレイアウトを M 番目のワークスペースにロードします:\n\n```\n$ ~/load_layout.sh\n```\n\n"
    },
    {
      "title": "スクラッチパッドコンテナ",
      "level": 3,
      "content": "デフォルトでは、スクラッチパッド は一つのウィンドウしか含んでいません。しかしながら、コンテナをスクラッチパッドにすることが可能です。\n\n新しいコンテナを作成して (例えば、Mod+Enter)、コンテナを分割し (Mod+v) 別のコンテナを作成します。親にフォーカスして (Mod+a)、反対方向に分割し (Mod+h)、もう一度作成します。\n\n最初のコンテナにフォーカスして (必要なら親にもフォーカス)、ウィンドウをフロートさせ (Mod+Shift+Space)、スクラッチパッドに移動します (Mod+Shift+-)。これで自由にコンテナを分割できます。\n\nマルチスクラッチパッドについては [3] も参照してください。\n\n"
    },
    {
      "title": "スクリーンセーバーと電源管理",
      "level": 3,
      "content": "xss-lock を使うことで i3 セッションの画面ロッカーを登録することが可能です。\n\nもしくは、xautolock の -lockaftersleep オプションを使って、スリープやハイバネーションから復帰した後に画面をロックすることができます。-time オプションは指定時間後に画面をロックします。\n\n```\nxautolock -time 10 -locker \"i3lock -i 'background_image.png'\" -lockaftersleep &\n```\n\nDPMS も参照。\n\n"
    },
    {
      "title": "シャットダウン, 再起動, 画面ロック",
      "level": 3,
      "content": "シャットダウン、再起動、画面ロックのキーコンビネーションを ~/.config/i3/config に追加することができます。以下の例では電源管理コマンドを実行する権限がないユーザーに権限を与えるために polkit をインストールする必要があります。\n\n```\nset $Locker i3lock && sleep 1\n\nset $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Shift+s) shutdown\nmode \"$mode_system\" {\n    bindsym l exec --no-startup-id $Locker, mode \"default\"\n    bindsym e exec --no-startup-id i3-msg exit, mode \"default\"\n    bindsym s exec --no-startup-id $Locker && systemctl suspend, mode \"default\"\n    bindsym h exec --no-startup-id $Locker && systemctl hibernate, mode \"default\"\n    bindsym r exec --no-startup-id systemctl reboot, mode \"default\"\n    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode \"default\"  \n\n    # back to normal: Enter or Escape\n    bindsym Return mode \"default\"\n    bindsym Escape mode \"default\"\n}\n\nbindsym $mod+Pause mode \"$mode_system\"\n```\n\n追加したら $mod+pause を押すことでプロンプトが表示されます。より複雑な動作をさせたい場合は、スクリプトに分離し、mode の中で参照してください [4]。\n\n- sleep 1 で小さなディレイを追加することで、サスペンドにより起こりうる競合状態を防いでいます [5]。\n- systemctl poweroff の -i 引数は、たとえ他のユーザーがログインしていたり (polkit を必要とします)、logind が (誤って) そのように認識していてもシャットダウンを行います [6]。\n\n他の画面ロッカーについては、アプリケーション一覧/セキュリティ#スクリーンロックを参照。\n\n"
    },
    {
      "title": "ターミナルウィンドウを飲み込む",
      "level": 3,
      "content": "dwm と同じように、i3は現在のターミナルウィンドウをそこから起動された新しいGUIウィンドウで「飲み込む」（置き換える）ことができます。これをするには i3-swallow-gitAUR パッケージを使います。\n\n例えば、mpv のウィンドウが元のターミナルを飲み込むようにするには以下のようにします:\n\n```\n$ swallow mpv video.mp4\n```\n\nあるいは、使用していないときにターミナルウィンドウを非表示にするために、タブ付きコンテナまたはスタックコンテナを使用してターミナルの飲み込みをシミュレートすることもできます。ただし、これには常にコンテナの上部にウィンドウリストが表示されるという欠点があります。\n\n"
    },
    {
      "title": "外部ディスプレイの手動管理",
      "level": 3,
      "content": "xrandr を使うことで簡単にディスプレイを管理することができます。以下は i3 の設定ファイルを使って統合する例で、上記の電源管理セクションと同じように振る舞います。\n\nVGA と HDMI 出力が存在するノートパソコンでメニューを使ってオンオフを切り替えます:\n\n```\n## Manual management of external displays\n# Set the shortcuts and what they do\nset $mode_display Ext Screen (v) VGA ON, (h) HDMI ON, (x) VGA OFF, (y) HDMI OFF\nmode \"$mode_display\" {\n    bindsym v exec --no-startup-id xrandr --output VGA1 --auto --right-of LVDS1, mode \"default\"\n    bindsym h exec --no-startup-id xrandr --output HDMI1 --auto --right-of LVDS1, mode \"default\"\n    bindsym x exec --no-startup-id xrandr --output VGA1 --auto --off, mode \"default\"\n    bindsym y exec --no-startup-id xrandr --output HDMI1 --auto --off, mode \"default\"\n\n    # back to normal: Enter or Escape\n    bindsym Return mode \"default\"\n    bindsym Escape mode \"default\"\n}\n# Declare here the shortcut to bring the display selection menu\nbindsym $mod+x mode \"$mode_display\"\n```\n\nオフになったディスプレイで表示していたウィンドウは自動的に他のアクティブなディスプレイに移動されます。\n\nデバイスの名前を確認したいときは、使用したいデバイスを接続して次を実行してください:\n\n```\n$ xrandr --query\n```\n\n利用可能なオプションについては xrandr のページや man ページ、i3 ユーザーガイド や i3 reddit の FAQ を見てください。\n\n"
    },
    {
      "title": "タブまたはスタックによるウェブブラウジング",
      "level": 3,
      "content": "タブの管理はブラウザの仕事ではなく、ウィンドウマネージャの仕事だとして、故意にタブを実装していないウェブブラウザというのが存在します。\n\nuzbl など、タブのないウェブブラウザを i3 で管理するには、次の行を ~/.config/i3/config に追加して下さい:\n\n```\nfor_window [class=\"Uzbl-core\"] focus child, layout stacking, focus\n```\n\nこれはスタックのウェブブラウジング用で、ウィンドウは縦に表示されます。タブブラウジングと違って、たとえブラウザのウィンドウを大量に開いていても、ウィンドウのタイトルを全て見ることができます。\n\n水平方向のタブブラウジングの方が良い場合は ('タブ')、次を使って下さい:\n\n```\nfor_window [class=\"Uzbl-core\"] focus child, layout tabbed, focus\n```\n\n"
    },
    {
      "title": "ワークスペース変数",
      "level": 3,
      "content": "i3 ではワークスペースを複数定義するので、ワークスペース変数を指定すると便利です。例えば [7]:\n\n```\nset $WS1 term\nset $WS2 web\nset $WS3 misc\nset $WS4 media\nset $WS5 code\n```\n\n次にワークスペースの名前を対応する変数で置き換えます:\n\n```\nbindsym $mod+1          workspace $WS1\n...\nbindsym $mod+Shift+1    move container to workspace $WS1\n```\n\n詳しくは Changing named workspaces を見て下さい。\n\n"
    },
    {
      "title": "フロートするダイアログを正しく扱う",
      "level": 3,
      "content": "デフォルトではダイアログはフロートモードで開かれることになっていますが [8]、ダイアログはタイルモードで開いてしまうこともあります。この挙動を変更するには xorg-xprop でダイアログの WM_WINDOW_ROLE をチェックして適切なルールを ~/.i3/config に追加してください:\n\n```\nfor_window [window_role=\"pop-up\"] floating enable\nfor_window [window_role=\"task_dialog\"] floating enable\n```\n\nまた、タイトルルールと正規表現を使うこともできます:\n\n```\nfor_window [title=\"Preferences$\"] floating enable\n```\n\nまたは WM_CLASS:\n\n```\nfor_window [class=\"(?i)mplayer\"] floating enable\n```\n\n"
    },
    {
      "title": "ネットワークのダウンロード・アップロード速度をステータスバーに表示",
      "level": 3,
      "content": "上流の スクリプト を編集して使うことができます。\n\n- システムに応じて両方のネットワークカードをリネームしてください (ip addr を使ってください)。\n- /sys/devices でネットワークカードを検索して適切に置き換えます:\n\n```\n$ find /sys/devices -name network_interface\n```\n\nスクリプトを適切な場所 (例: ~/.config/i3) に保存して、ステータスプログラムから実行するように設定してください。\n\n"
    },
    {
      "title": "ウィンドウの分割方向を自動的に水平/垂直に切り替える",
      "level": 3,
      "content": "autotilingAUR パッケージ は、ウィンドウの分割方向を自動的に水平/垂直に切り替えることができます。インストール後、~/.config/i3/config に以下を追加し、i3 をリロードしてください。\n\n```\nexec_always --no-startup-id autotiling\n```\n\n"
    },
    {
      "title": "一般",
      "level": 3,
      "content": "多くの場合、開発版である i3-gitAUR と i3status-gitAUR でバグは修正されているため、上流では開発版を使ってエラーが再現できるかどうか訊いてきます [9]。デバッグ - トレースを取得#一般も見てください。\n\n"
    },
    {
      "title": "i3 メッセージバーのボタンが動作しない",
      "level": 3,
      "content": "i3-nagbar の \"Edit config\" などのボタンは i3-sensible-terminal を呼び出します。ターミナルエミュレータが i3 によって認識されていることを確認してください。\n\n"
    },
    {
      "title": "タイル化されたターミナルで行の折り返しがおかしい",
      "level": 3,
      "content": "i3 v4.3 以上ではタイル配置したウィンドウのサイズ増加ヒントは無視されます [10]。これによってターミナルで行が早いところで折り返されてしまうなどの問題が生じます。解決方法としては、問題のウィンドウをフロートさせてから、もう一度タイル化してください。\n\n"
    },
    {
      "title": "マウスカーソルが待機状態のままになる",
      "level": 3,
      "content": "起動通知をサポートしていないスクリプやアプリケーションを起動すると、マウスカーソルは60秒間の間、ビジー/砂時計状態になります。\n\n特定のアプリケーションでこの問題を解決するには、--no-startup-id パラメータを使って下さい、例えば:\n\n```\nexec --no-startup-id ~/script\nbindsym $mod+d exec --no-startup-id dmenu_run\n```\n\nこのアニメーションを全てのアプリケーションで無効にするには、カーソルテーマを見て下さい。\n\n"
    },
    {
      "title": "キーバインドが反応しない",
      "level": 3,
      "content": "標準のキーバインド (キーを押して実行) を使っている場合、scrot などのツールが動作しないことがあります。そのようなときは、--release でキーをリリースしてからコマンドを実行してください:\n\n```\nbindsym --release Print exec --no-startup-id scrot '%Y-%m-%d$\nbindsym --release Shift+Print exec --no-startup-id scrot '%Y$\n```\n\n[11] を参照。\n\n"
    },
    {
      "title": "ティアリング",
      "level": 3,
      "content": "i3 は ダブルバッファをちゃんと実装していない ためにティアリングやちらつきが発生することがあります。問題を修正したいときは、コンポジットマネージャを使ってみて下さい。\n\n"
    },
    {
      "title": "トレイアイコンが表示されない",
      "level": 3,
      "content": "tray_output primary ディレクティブでは、 xrandr でプライマリ出力を設定する必要があります。明示的に出力を指定するか、ディレクティブを削除してください [12]。詳しくは Xrandr を参照。i3 のバージョン 4.12 から、i3-config-wizard によって作成されるデフォルト設定ではディレクティブが追加されないようになりました。\n\n"
    },
    {
      "title": "Spotify のためのデフォルトのワークスペース",
      "level": 3,
      "content": "Spotify ウィンドウにデフォルトのワークスペースを割り当てるには、assign で標準ルートを使用することはできず、次のような for_window コマンドを使用する必要があります。\n\n```\n~/.config/i3/config\n```\n\n```\n...\nfor_window [class=\"Spotify\"] move to workspace $ws10\n```\n\nfor_window がすでに ws10 にある場合にウィンドウを移動しないようにするには、代わりに move --no-auto-back-and-forth を使用できます。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- 公式ウェブサイト\n- funtoo Wiki\n- i3 ソースコード\n- i3-extras - スクリプトとパッチのコレクション\n- i3ipc-glib - i3 拡張のためのライブラリ\n- i3ipc-ruby - An improved library for i3 extensions in Ruby\n- j4tools - non-official tools designed to work with i3\n\nArch Linux フォーラム\n\n- The i3 thread - A general discussion about i3\n- i3 desktop screenshots and config sharing\n\nスクリーンキャスト\n\n- i3 ウィンドウマネージャの v4.1 スクリーンキャスト\n- i3 window manager v4.1X screencasts\n\n"
    }
  ]
}