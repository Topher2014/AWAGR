{
  "title": "Tmux (日本語)",
  "url": "https://wiki.archlinux.org/title/Tmux_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- dtach\n- GNU Screen\n\ntmux は「ターミナルマルチプレクサ: 一つのスクリーンから別々のプログラムが動作する多数のターミナル (またはウィンドウ) を作成・アクセス・制御することができます。tmux はスクリーンから分離させてバックグラウンドで動作させることができ、後でまた繋ぎ直すことができます。」です。\n\ntmux は GNU Screen の代わりになるものとして ISC ライセンスで配布されています。似ているところもありますが、プログラムには様々な違いが存在します。tmux の FAQ ページ を見て下さい。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 キーバインド 2.1.1 コピーモード 2.2 URL のブラウズ 2.3 適切なターミナルの設定 2.3.1 256色 2.3.2 24ビットカラー 2.3.3 xterm-keys 2.4 テーマ設定 2.5 他の設定 2.6 systemd で自動起動\n- 3 セッションの開始\n- 4 クリップボード統合 4.1 Xorg 環境 4.2 Wayland 環境 4.3 Urxvt の中クリック\n- 5 ヒントとテクニック 5.1 デフォルトのセッションレイアウトで tmux を起動 5.1.1 デフォルトのレイアウト値を取得 5.1.2 デフォルトの tmux レイアウトを定義する 5.1.3 デフォルトの tmux レイアウトで tmux を自動起動 5.1.4 デフォルトセッションの代替アプローチ 5.2 urxvt で tmux を起動 5.3 すべてのシェルのログイン時に tmux を起動 5.4 非ログインシェルを起動する 5.5 tmux のウィンドウをタブのように使う 5.6 様々なウィンドウのセッションを同時に操作するクライアント 5.7 ターミナルタイプにあわせて TERM 変数を修正する 5.8 tmux を再起動せずに変更した設定を適用する 5.9 既存のセッションに新しいセッションがアタッチされるたびにプログラムを実行するテンプレートスクリプト 5.10 ターミナルエミュレータのウィンドウタイトル 5.11 自動レイアウト 5.12 Vim の colorscheme がロードされない 5.13 Vim フレンドリな設定 5.14 フレンドリーなペイン分割 5.15 システムの停止を禁止\n- 6 トラブルシューティング 6.1 スクロールの問題 6.2 マウスのスクロール 6.3 UTF-8 のマウスイベントをターミナルエミュレータがサポートしていない 6.4 Shift+F6 が Midnight Commander で動作しない\n- 7 参照\n\n- 2.1 キーバインド 2.1.1 コピーモード\n- 2.2 URL のブラウズ\n- 2.3 適切なターミナルの設定 2.3.1 256色 2.3.2 24ビットカラー 2.3.3 xterm-keys\n- 2.4 テーマ設定\n- 2.5 他の設定\n- 2.6 systemd で自動起動\n\n- 2.1.1 コピーモード\n\n- 2.3.1 256色\n- 2.3.2 24ビットカラー\n- 2.3.3 xterm-keys\n\n- 4.1 Xorg 環境\n- 4.2 Wayland 環境\n- 4.3 Urxvt の中クリック\n\n- 5.1 デフォルトのセッションレイアウトで tmux を起動 5.1.1 デフォルトのレイアウト値を取得 5.1.2 デフォルトの tmux レイアウトを定義する 5.1.3 デフォルトの tmux レイアウトで tmux を自動起動 5.1.4 デフォルトセッションの代替アプローチ\n- 5.2 urxvt で tmux を起動\n- 5.3 すべてのシェルのログイン時に tmux を起動\n- 5.4 非ログインシェルを起動する\n- 5.5 tmux のウィンドウをタブのように使う\n- 5.6 様々なウィンドウのセッションを同時に操作するクライアント\n- 5.7 ターミナルタイプにあわせて TERM 変数を修正する\n- 5.8 tmux を再起動せずに変更した設定を適用する\n- 5.9 既存のセッションに新しいセッションがアタッチされるたびにプログラムを実行するテンプレートスクリプト\n- 5.10 ターミナルエミュレータのウィンドウタイトル\n- 5.11 自動レイアウト\n- 5.12 Vim の colorscheme がロードされない\n- 5.13 Vim フレンドリな設定\n- 5.14 フレンドリーなペイン分割\n- 5.15 システムの停止を禁止\n\n- 5.1.1 デフォルトのレイアウト値を取得\n- 5.1.2 デフォルトの tmux レイアウトを定義する\n- 5.1.3 デフォルトの tmux レイアウトで tmux を自動起動\n- 5.1.4 デフォルトセッションの代替アプローチ\n\n- 6.1 スクロールの問題\n- 6.2 マウスのスクロール\n- 6.3 UTF-8 のマウスイベントをターミナルエミュレータがサポートしていない\n- 6.4 Shift+F6 が Midnight Commander で動作しない\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "tmux パッケージをインストールしてください。任意で tmux-bash-completion-gitAUR をインストールすることで tmux の bash 補完を使うことができます。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "デフォルトでは、tmux はユーザ毎の設定として ~/.tmux.conf を探します。しかし、~/.config/tmux/tmux.conf も使用可能です (このパスはハードコードされていて、$XDG_CONFIG_HOME は無視されます)。グローバルな設定ファイルは /etc/tmux.conf を使用できます。しかし、デフォルトでは Arch のパッケージはこのファイルを同梱していません。\n\n"
    },
    {
      "title": "キーバインド",
      "level": 3,
      "content": "デフォルトでは、コマンドのキーバインドには Ctrl-b が前に付きます。例えば、ウィンドウを縦に分割するには Ctrl-b+% を押します。\n\nウィンドウを複数のペインに分割した後、ペインのサイズを変更するには、プレフィックスキー (例: Ctrl-b) を押してから、Ctrl を押しながら、Left/Right/Up/Down を押します。ペイン間の移動も同じ方法で行い、矢印キーの代わりに o を使います。\n\nキーバインドは tmux.conf の bind と unbind コマンドで変更することができます。例えばデフォルトのプレフィックスキーである Ctrl-b を Ctrl-a に変更するには設定ファイルに以下のコマンドを追加します:\n\n```\nunbind C-b\nset -g prefix C-a\nbind C-a send-prefix\n```\n\nさらに、ウィンドウ間の移動をする方法には以下のものもあります:\n\n```\nCtrl-b l (直前に選択されていたウィンドウに移動します)\nCtrl-b w (すべてのウィンドウ、及びウィンドウの番号の一覧を表示します)\nCtrl-b <ウィンドウの番号> (指定された番号のウィンドウに移動する。なお、デフォルトでは 0 - 9 の番号が割り当てられています)\nCtrl-b q  (ペインの番号を表示する。表示された番号を入力すると対応するペインに移動できます)\n```\n\nTmux にはウィンドウを探す機能とそれへのキー割り当てがあり、多数のウィンドウを容易に行き来することができます:\n\n```\nCtrl-b f <ウィンドウの名前> (名前でウィンドウを検索する)\nCtrl-b w (ウィンドウの一覧からウィンドウを選択する)\n```\n\n"
    },
    {
      "title": "コピーモード",
      "level": 4,
      "content": "tmux ウィンドウには複数のモードが存在します。デフォルトのモードではウィンドウにアタッチされたターミナルに直接アクセスすることができ、もうひとつのモードはコピーモードです。コピーモードではバッファを移動することができ履歴をスクロールすることが可能です。vi または emacs スタイルのキーバインドが使えます。VISUAL や EDITOR に ‘vi’ が含まれていない場合、デフォルトでは emacs のキーバインドが使われます。\n\nコピーモードに入るには以下を実行:\n\n```\nCtrl-b [\n```\n\nデフォルトエディタと同じようにバッファを操作することができます。\n\nコピーモードを終了するには、以下のキーバインドのどちらかを使います:\n\nvi モード:\n\n```\nq\n```\n\nemacs モード:\n\n```\nEsc\n```\n\n"
    },
    {
      "title": "URL のブラウズ",
      "level": 3,
      "content": "tmux の中で URL をブラウズするには urlviewAUR をインストールして設定する必要があります。\n\n新しいターミナルの中で:\n\n```\nbind-key u capture-pane \\; save-buffer /tmp/tmux-buffer \\; run-shell \"$TERMINAL -e urlview /tmp/tmux-buffer\"\n```\n\n新しい tmux ウィンドウの中で (新しいターミナルは不要です):\n\n```\nbind-key u capture-pane \\; save-buffer /tmp/tmux-buffer \\; new-window -n \"urlview\" '$SHELL -c \"urlview < /tmp/tmux-buffer\"'\n```\n\n"
    },
    {
      "title": "256色",
      "level": 4,
      "content": "256色のターミナルを使っている場合、tmux で適切なターミナル (tmux または tmux-256color) を設定する必要があります。設定ファイルで以下のように設定できます:\n\n```\ntmux.conf\n```\n\n```\nset -g default-terminal \"tmux-256color\"\n```\n\nまた、tmux の表示がおかしくなってしまう場合、.bashrc に以下のエイリアスを追加することで tmux はターミナルが256色をサポートしていると仮定するようになります:\n\n```\nalias tmux=\"tmux -2\"\n```\n\n"
    },
    {
      "title": "24ビットカラー",
      "level": 4,
      "content": "Tmux はバージョン 2.2 から24ビットカラーをサポートしています [1] 使用しているターミナルが24ビットカラーをサポートしている場合 (gist を参照) ターミナルを terminal-overrides 設定に追加してください。例えば、Termite を使っているのであれば以下のように追加します:\n\n```\nset -ga terminal-overrides \",xterm-termite:Tc\"\n```\n\n他のターミナルの場合、xterm-termite を適切なターミナルのタイプに置き換えてください ($TERM に保存されています)。Tc の terminfo 拡張について詳しくは tmux(1) ページを見てください。\n\n"
    },
    {
      "title": "xterm-keys",
      "level": 4,
      "content": "tmux.conf で xterm-keys を有効にするには、以下の行を追加してください:\n\n```\nset-option -g xterm-keys on\n```\n\ntmux.conf で xterm-keys を有効にしたら、新しいエスケープコードがアプリケーションから認識されるようにカスタム terminfo を作成して宣言する必要があります。tic で以下のコードをコンパイルして TERM に \"xterm-screen-256color\" を指定してください:\n\n```\n# A screen- based TERMINFO that declares the escape sequences\n# enabled by the tmux config \"set-window-option -g xterm-keys\".\n#\n# Prefix the name with xterm- since some applications inspect\n# the TERM *name* in addition to the terminal capabilities advertised.\nxterm-screen-256color|GNU Screen with 256 colors bce and tmux xterm-keys,\n\n# As of Nov'11, the below keys are picked up by\n# .../tmux/blob/master/trunk/xterm-keys.c:\n\tkDC=\\E[3;2~, kEND=\\E[1;2F, kHOM=\\E[1;2H,\n\tkIC=\\E[2;2~, kLFT=\\E[1;2D, kNXT=\\E[6;2~, kPRV=\\E[5;2~,\n\tkRIT=\\E[1;2C,\n\n# Change this to screen-256color if the terminal you run tmux in\n# doesn't support bce:\n\tuse=screen-256color-bce,\n```\n\n"
    },
    {
      "title": "テーマ設定",
      "level": 3,
      "content": "tmux はテーマ設定が可能ですが、そのためにはまず使用できるカラーコードを知る必要があります。以下のコマンドを実行すると、カラーコードとそのサンプルが表示されます。\n\n```\nfor i in {0..255}; do printf \"\\x1b[38;5;${i}mcolor${i} - ██████████\\n\"; done\n```\n\n上記のコマンドで表示されたカラーコードを使用して、tmux のカラースキームを変更できます。以下は、ステータスバーの色を変更する例です:\n\n```\n# Status line colors\nset -g status-bg \"color4\"         # blue background\nset -g status-fg \"color7\"         # gray text color\nset -g status-right \"%l:%M %p\"    # time format\nset-window-option -g window-status-current-style \"bg=color75,fg=color231 bold\"    # current window background + foreground colors\n```\n\nペインの境界線は、以下の例に従ってテーマにすることもできます:\n\n```\n# border colors\nset -g pane-border-style        fg=\"colour255\"\nset -g pane-active-border-style fg=\"colour33\"\n```\n\n"
    },
    {
      "title": "他の設定",
      "level": 3,
      "content": "スクロールバックバッファを10000行に設定:\n\n```\nset -g history-limit 10000\n```\n\nターミナルエミュレータの設定を上書き:\n\n```\nset -ga terminal-overrides ',xterm*:smcup@:rmcup@'\nset -ga terminal-override ',rxvt-uni*:XT:Ms=\\E]52;%p1%s;%p2%s\\007'\n```\n\nマウスを切り替える:\n\n```\nbind-key m set-option -g mouse on \\; display 'Mouse: ON'\nbind-key M set-option -g mouse off \\; display 'Mouse: OFF'\n```\n\n"
    },
    {
      "title": "systemd で自動起動",
      "level": 3,
      "content": "起動時に tmux サーバーを立ち上げることには複数の利点が存在します。特に、新しい tmux セッションを起動する場合、既にサービスが動作していれば起動時間が短縮されます。\n\nさらに、tmux セッションのカスタマイズは維持され、たとえログインしなくても tmux セッションを永続化することができます (tmux の設定をスクリプトで管理している場合やユーザーの tmux セッションを共有する場合などに有用です)\n\n以下のサービスは特定のユーザーで tmux を起動します (tmux@username.service で起動と同じ):\n\n```\n/etc/systemd/system/tmux@.service\n```\n\n```\n[Unit]\nDescription=Start tmux in detached session\n\n[Service]\nType=forking\nUser=%I\nExecStart=/usr/bin/tmux new-session -s %u -d\nExecStop=/usr/bin/tmux kill-session -t %u\n\n[Install]\nWantedBy=multi-user.target\n```\n\nまたは、(User=%I を使わずに) 上記のファイルを systemd/ユーザーディレクトリに配置することもできます、例: ~/.config/systemd/user/tmux.service この方法だと ユーザーインスタンスの自動起動 を有効にしていない場合、ログイン時に tmux サービスが起動します。\n\n"
    },
    {
      "title": "セッションの開始",
      "level": 2,
      "content": "~/.tmux.conf に以下のように記述することでウィンドウがプリロードされた状態で tmux でセッションを開くことができます:\n\n```\nnew  -n WindowName Command\nneww -n WindowName Command\nneww -n WindowName Command\n```\n\nウィンドウが分割された状態でセッションを起動するには (マルチペイン)、分割したい neww の下に splitw コマンドを追加してください:\n\n```\nnew  -s SessionName -n WindowName Command\nneww -n foo/bar foo\nsplitw -v -p 50 -t 0 bar\nselectw -t 1 \nselectp -t 0\n```\n\n上記の場合、ウィンドウが2つ開いて、2番目のウィンドウは foo/bar という名前で縦に半分に分割されます (50%)。bar の上で foo が実行されます。フォーカスはウィンドウ 2 (foo/bar) のトップペイン (foo) になります。\n\n複数のセッションを管理したい場合、設定ファイルから別のセッションファイルを読み込んでください:\n\n```\n# initialize sessions\nbind F source-file ~/.tmux/foo\nbind B source-file ~/.tmux/bar\n```\n\n"
    },
    {
      "title": "クリップボード統合",
      "level": 2,
      "content": "tmux の選択範囲をディスプレイサーバーのクリップボード(プライマリ/セカンダリ選択の両方)にコピーし、tmux 内で貼り付けることが可能です。以下の tmux 設定ファイルのスニペットは、X11 および Wayland のクリップボード/選択を現在の tmux 選択範囲と統合します。\n\n"
    },
    {
      "title": "Xorg 環境",
      "level": 3,
      "content": "最初の選択肢は xsel を使用することです。\n\nEmacs スタイル:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"xsel -i -p && xsel -o -p | xsel -i -b\"\nbind-key C-y run \"xsel -o | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVim スタイル:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"xsel -i -p && xsel -o -p | xsel -i -b\"\nbind-key p run \"xsel -o | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nxclip もこの目的で使用できます。xsel とは異なり、現在のロケールに適合しない生のビットストリームを出力する場合にうまく機能しますが、xclip は tmux バッファから読み取った後に STDOUT を閉じないため、xsel を使用する方がより適切です。そのため、tmux はコピータスクが完了したことを認識せず、xclip が終了するのを待ち続け、tmux が応答しなくなります。回避策は、STDOUT を /dev/null にリダイレクトすることです。\n\nEmacsスタイル:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"xclip -i -sel clip > /dev/null\"\nbind-key C-y run \"xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVimスタイル:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"xclip -i -sel clip > /dev/null\"\nbind-key p run \"xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer\"\n```\n\n"
    },
    {
      "title": "Wayland 環境",
      "level": 3,
      "content": "wl-clipboard がインストールされていることを確認してください。\n\nEmacsスタイル:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"wl-copy && wl-paste -n | wl-copy -p\"\nbind-key C-y run \"wl-paste -n | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVim スタイル:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"wl-copy && wl-paste -n | wl-copy -p\"\nbind-key p run \"wl-paste -n | tmux load-buffer - ; tmux paste-buffer\"\n```\n\n"
    },
    {
      "title": "Urxvt の中クリック",
      "level": 3,
      "content": "urxvt と tmux の間で中マウスボタンクリックを介してコピー/ペーストを有効にする非公式の Perl 拡張機能があります (公式の FAQ で言及されている [2]) を参照してください。\n\nまず、Perl スクリプトをダウンロードして urxvt の Perl ライブラリに配置する必要があります。\n\n```\nwget http://anti.teamidiot.de/static/nei/*/Code/urxvt/osc-xterm-clipboard\nmv osc-xterm-clipboard /usr/lib/urxvt/perl/\n```\n\nまた、.Xdefaults でその Perl スクリプトを有効にする必要があります:\n\n```\n~/.Xdefaults\n```\n\n```\n...\n*URxvt.perl-ext-common:\t\tosc-xterm-clipboard\n...\n```\n\n次に、tmux に新しい関数を通知し、マウスサポートを有効にします(まだ有効にしていない場合)\n\n```\n~/.tmux.conf\n```\n\n```\n...\nset-option -ga terminal-override ',rxvt-uni*:XT:Ms=\\E]52;%p1%s;%p2%s\\007'\nset -g mouse on\n...\n```\n\n新しい中クリック機能を試す前に、tmux のすべてのインスタンスを終了してください。\n\ntmux 内では、Shift+中マウスボタンクリックでクリップボードの選択内容を貼り付け、中マウスボタンクリックのみで tmux バッファを貼り付けます。 tmux 外では、中マウスボタンクリックで tmux バッファを貼り付け、通常の Ctrl+c でコピーします。\n\n"
    },
    {
      "title": "デフォルトのセッションレイアウトで tmux を起動",
      "level": 3,
      "content": "tmuxinator や tmuxp などのセッションマネージャを使うことで共通のセッション設定を簡単に管理できます。\n\ntmuxinator の場合、tmuxinatorAUR パッケージをインストールします。次のコマンドでインストールをテストできます:\n\n```\ntmuxinator doctor\n```\n\n"
    },
    {
      "title": "デフォルトのレイアウト値を取得",
      "level": 4,
      "content": "Tmux を通常通りに起動してウィンドウとペインのレイアウトを好きなように設定してください。設定が完了したら、以下のコマンドを実行することで現在のレイアウト値を取得できます (Tmux セッションの中から実行してください):\n\n```\ntmux list-windows\n```\n\n3つのペインと2つのペインの2つのウィンドウからなるレイアウトの場合、出力は以下のようになります:\n\n```\n0: default* (3 panes) [274x83] [layout 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]}] @2 (active)\n1: remote- (2 panes) [274x83] [layout e3d3,274x83,0,0[274x41,0,0,4,274x41,0,42,7]] @3\n```\n\nコピーする必要があるのは [layout... の後から ... ] @2 (active) を除いた部分です。1番目のウィンドウレイアウトであれば 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]} をコピーします。\n\n"
    },
    {
      "title": "デフォルトの tmux レイアウトを定義する",
      "level": 4,
      "content": "レイアウト値がわかったら現在の tmux セッションを終了してください。その後、Tmuxinator の設定ファイルを編集して Tmux のデフォルトセッションレイアウトを作成します (以下の例をそのままコピーするのではなく、上のセクションで確認したレイアウト値を使ってください):\n\n```\n~/.tmuxinator/default.yml\n```\n\n```\nname: default\nroot: ~/\nwindows:\n  - default:\n      layout: 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]}\n      panes:\n        - clear\n        - vim\n        - clear && emacs -nw\n  - remote:\n      layout: 24ab,274x83,0,0{137x83,0,0,3,136x83,138,0,4}\n      panes:\n        - \n        -\n```\n\n例では2つのウィンドウを \"default\" と \"remote\" として定義しています。適当なレイアウト値を決めてください。各ペインに対して最低でも1行は - を使う必要があります。1番目のウィンドウペインでは、1番目のペインでコマンドライン \"clear\" を、2番目のペインで \"vim\" を、3番目のペインで \"clear && emacs -nw\" を実行します。2番目のウィンドウレイアウトには何も起動コマンドを定義していません。\n\n新しいデフォルトレイアウトをテストするには:\n\n```\nmux default\n```\n\n"
    },
    {
      "title": "デフォルトの tmux レイアウトで tmux を自動起動",
      "level": 4,
      "content": "デフォルトの Tmux セッションレイアウトでターミナルセッションを起動したい場合、以下を編集してください:\n\n```\n~/.bashrc\n```\n\n```\nif [ -z \"$TMUX\" ]; then\n   mux default          \n fi\n```\n\n"
    },
    {
      "title": "デフォルトセッションの代替アプローチ",
      "level": 4,
      "content": "上記の方法を使用する代わりに、実行時にデフォルトのセッションを作成してそれにアタッチする bash スクリプトを作成します。 次に、端末から実行して、その端末で事前に設計された構成を取得できます。\n\n```\n#!/bin/bash\ntmux new-session -d -n WindowName Command\ntmux new-window -n NewWindowName\ntmux split-window -v\ntmux selectp -t 1\ntmux split-window -h\ntmux selectw -t 1\ntmux -2 attach-session -d\n```\n\n"
    },
    {
      "title": "urxvt で tmux を起動",
      "level": 3,
      "content": "以下のコマンドで urxvt を起動することで tmux セッションも起動します。.ratpoisonrc ファイルの exec コマンドなどから使うことができます。\n\n```\nurxvt -e bash -c \"tmux -q has-session && exec tmux attach-session -d || exec tmux new-session -n$USER -s$USER@$HOSTNAME\"\n```\n\n"
    },
    {
      "title": "すべてのシェルのログイン時に tmux を起動",
      "level": 3,
      "content": "```\nif [ -x \"$(command -v tmux)\" ] && [ -n \"${DISPLAY}\" ] && [ -z \"${TMUX}\" ]; then\n    tmux attach || tmux >/dev/null 2>&1\nfi\n```\n\n上記のスニペットは以下のことを行います:\n\n1. tmux が実行可能であることを確認する。\n1. グラフィカルセッションが実行中であることを確認する (tmux をログインシェル内で起動したい場合はこの条件式を削除してください。ただし、ログイン時の X の自動起動と干渉するかもしれません)。\n1. まだ tmux セッション内にいないことを確認する。\n1. これらの条件を満たす場合、アタッチする。アタッチに失敗した場合、新しいセッションを起動する。\n\nsystemd を使用してユーザとしてセッションを維持している場合、if ブロック内のコマンドを以下のコマンドで置き換えることができます。このコマンドは、維持されているセッションにアタッチし、その他の接続済みクライアントをデタッチします:\n\n```\nif ! systemctl --user is-active --quiet tmux.service; then\n    systemctl --user start tmux.service\nfi\nexec tmux attach-session -d -t \"${USER}\" >/dev/null 2>&1\n```\n\n"
    },
    {
      "title": "非ログインシェルを起動する",
      "level": 3,
      "content": "Tmux は デフォルト で ログインシェル を起動するようになっていますが、これは複数の副作用があります:\n\n- fortune を使っている場合、新しいパネルを作成するたびに引用句が表示されることがあります。\n- 新しいパネルを作成するたびに ~/.profile などのログインシェルの設定ファイルが解釈されるため、セッションの初期化時に実行するようにしていたコマンド (例: オーディオレベルの設定) が実行されてしまいます。\n\nこの挙動を無効化するには、以下を ~/.tmux.conf に追加してください:\n\n```\nset -g default-command \"${SHELL}\"\n```\n\n"
    },
    {
      "title": "tmux のウィンドウをタブのように使う",
      "level": 3,
      "content": "以下の設定を ~/.tmux.conf に追加することで tmux のウィンドウをタブのように使うことができます (urxvt のタブ拡張を参照)。仮想タブはターミナルエミュレータから独立しているという利点があります。\n\n```\n#urxvt tab like window switching (-n: no prior escape seq)\nbind -n S-down new-window\nbind -n S-left prev\nbind -n S-right next\nbind -n C-left swap-window -t -1\nbind -n C-right swap-window -t +1\n```\n\nもちろん、ターミナルなど他のアプリケーションのホットキーと重複させてはいけません。そのような場合、ターミナルのタブ機能を無効化して置き換えるほうが良いでしょう。\n\ntmux の detach で EOT ホットキー Ctrl+d を補完するのも便利です:\n\n```\nbind-key -n C-j detach\n```\n\n"
    },
    {
      "title": "様々なウィンドウのセッションを同時に操作するクライアント",
      "level": 3,
      "content": "Practical Tmux で、Brandur Leach は以下のように書いています:\n\n以下の “tmx” スクリプトは上記を実装しています — 2番目のパラメータが “1” の場合は “tmux new-window” を実行するように修正を加えています。tmx <base session name> [1] として呼び出すことで必要に応じてベースセッションが起動します。それ以外の場合は新しい “client” セッションはベースに接続され、任意で新しいウィンドウを追加してアタッチします。“zombie” になったときは終了するように設定します。\n\n```\ntmx\n```\n\n```\n#!/bin/bash\n\n#\n# Modified TMUX start script from:\n#     https://forums.gentoo.org/viewtopic-t-836006-start-0.html\n#\n# Store it to `~/bin/tmx` and issue `chmod +x`.\n#\n\n# Works because bash automatically trims by assigning to variables and by \n# passing arguments\ntrim() { echo $1; }\n\nif [[ -z \"$1\" ]]; then\n    echo \"Specify session name as the first argument\"\n    exit\nfi\n\n# Only because I often issue `ls` to this script by accident\nif [[ \"$1\" == \"ls\" ]]; then\n    tmux ls\n    exit\nfi\n\nbase_session=\"$1\"\n# This actually works without the trim() on all systems except OSX\ntmux_nb=$(trim `tmux ls | grep \"^$base_session\" | wc -l`)\nif [[ \"$tmux_nb\" == \"0\" ]]; then\n    echo \"Launching tmux base session $base_session ...\"\n    tmux new-session -s $base_session\nelse\n    # Make sure we are not already in a tmux session\n    if [[ -z \"$TMUX\" ]]; then\n        echo \"Launching copy of base session $base_session ...\"\n        # Session id is date and time to prevent conflict\n        session_id=`date +%Y%m%d%H%M%S`\n        # Create a new session (without attaching it) and link to base session \n        # to share windows\n        tmux new-session -d -t $base_session -s $session_id\n        if [[ \"$2\" == \"1\" ]]; then\n\t\t# Create a new window in that session\n\t\ttmux new-window\n\tfi\n        # Attach to the new session & kill it once orphaned\n\ttmux attach-session -t $session_id \\; set-option destroy-unattached\n    fi\nfi\n```\n\n~/.tmux.conf に以下の設定を追加すると便利です:\n\n```\nsetw -g aggressive-resize on\n```\n\nセッション全体に接続されている一番小さいクライアントではなく、表示している一番小さいクライアントにあわせてウィンドウのサイズが変更されるようになります。\n\n~/.bashrc に以下を追加する方法もあります [3]:\n\n```\n.bashrc\n```\n\n```\nfunction rsc() {\n  CLIENTID=$1.`date +%S`\n  tmux new-session -d -t $1 -s $CLIENTID \\; set-option destroy-unattached \\; attach-session -t $CLIENTID\n}\n\nfunction mksc() {\n  tmux new-session -d -s $1\n  rsc $1\n}\n```\n\n著者より:\n\n"
    },
    {
      "title": "ターミナルタイプにあわせて TERM 変数を修正する",
      "level": 3,
      "content": "tmux で TERM 変数を固定で設定する代わりに、ターミナルエミュレータのタイプにあわせて適切な TERM (screen または screen-256color) を設定することができます:\n\n```\n~/.tmux.conf\n```\n\n```\n## set the default TERM\nset -g default-terminal screen\n\n## update the TERM variable of terminal emulator when creating a new session or attaching a existing session\nset -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'\n## determine if we should enable 256-colour support\nif \"[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]\" 'set -g default-terminal screen-256color'\n```\n\n```\n~/.zshrc\n```\n\n```\n## workaround for handling TERM variable in multiple tmux sessions properly from https://sourceforge.net/p/tmux/mailman/message/32751663/ by Nicholas Marriott\nif [[ -n ${TMUX} && -n ${commands[tmux]} ]];then\n        case $(tmux showenv TERM 2>/dev/null) in\n                *256color) ;&\n                TERM=fbterm)\n                        TERM=screen-256color ;;\n                *)\n                        TERM=screen\n        esac\nfi\n```\n\n"
    },
    {
      "title": "tmux を再起動せずに変更した設定を適用する",
      "level": 3,
      "content": "デフォルトでは tmux は起動時にしか ~/.tmux.conf を読み込みません。起動した後に設定ファイルを tmux に読み込ませるには、次を実行:\n\n```\ntmux source-file <path>\n```\n\n~/.tmux.conf に以下のように追加することもできます:\n\n```\nbind r source-file <path>\n```\n\n^: を実行してから以下を入力する方法もあります:\n\n```\nsource .tmux.conf\n```\n\n"
    },
    {
      "title": "既存のセッションに新しいセッションがアタッチされるたびにプログラムを実行するテンプレートスクリプト",
      "level": 3,
      "content": "以下のスクリプトはプログラムが以前に実行されたかどうかチェックします。見つからなかった場合、新しい tmux セッションを作成してからウィンドウにアタッチしてプログラムを実行します。プログラムが見つかった場合はセッションにアタッチしてウィンドウを選択だけします:\n\n```\n#!/bin/bash\n\nPID=$(pidof $1)\n\nif [ -z \"$PID\" ]; then\n    tmux new-session -d -s main ;\n    tmux new-window -t main -n $1 \"$*\" ;\nfi\n    tmux attach-session -d -t main ;\n    tmux select-window -t $1 ;\nexit 0\n```\n\nnicklist プラグインを使って irssi を実行する派生版は irssi の ArchWiki ページにあります。\n\n"
    },
    {
      "title": "ターミナルエミュレータのウィンドウタイトル",
      "level": 3,
      "content": "tmux ウィンドウで SSH 接続を行うと、ターミナルエミュレータのウィンドウタイトルが user@localhost のままで user@server にならないことに気づくかもしれません。タイトルバーを接続先のホストにあわせて変えられるようにするには、~/.tmux.conf に以下を設定します:\n\n```\nset -g set-titles on\nset -g set-titles-string \"#T\"\n```\n\nset-titles-string の #T は user@host:~ を表示して、接続したホストによって表示が変わります。\n\n"
    },
    {
      "title": "自動レイアウト",
      "level": 3,
      "content": "新しい分割を作成したり古い分割を解除する際に、現在選択されているレイアウトは適用されません。修正するには、以下のバインドを追加することで新しい、あるいは既存のペインに現在選択中のレイアウトが適用されるようになります:\n\n```\nbind-key -n M-c kill-pane \\; select-layout\nbind-key -n M-n split-window \\; select-layout\n```\n\n"
    },
    {
      "title": "Vim の colorscheme がロードされない",
      "level": 3,
      "content": "vim の colorscheme が tmux に読み込まれていない場合は、以下を参照してください: [4] [5]\n\n"
    },
    {
      "title": "Vim フレンドリな設定",
      "level": 3,
      "content": "vim ユーザーに使いやすい設定は [6] を見て下さい。\n\ntmux 2.4 では、以下の部分を:\n\n```\nbind -t vi-copy 'v' begin-selection\nbind -t vi-copy 'y' copy-selection\nbind -t vi-copy 'Space' halfpage-down\nbind -t vi-copy 'Bspace' halfpage-up\n```\n\n以下のように変更してください:\n\n```\nbind-key -T copy-mode-vi 'v' send -X begin-selection\nbind-key -T copy-mode-vi 'y' send -X copy-selection\nbind-key -T copy-mode-vi 'Space' send -X halfpage-down\nbind-key -T copy-mode-vi 'Bspace' send -X halfpage-up\n```\n\n"
    },
    {
      "title": "フレンドリーなペイン分割",
      "level": 3,
      "content": "ペインを垂直方向に分割するためのデフォルトのキーバインドは Ctrl + b} % であり、ペインを水平方向に分割するためのデフォルトのキーバインドは Ctrl + b \" キーボードのレイアウトによっては入力が難しく、覚えにくい場合もあります。\n\nよりわかりやすいキーバインディングは、水平方向に分割する場合は Ctrl + b h を使用し、ペインを垂直方向に分割する場合は Ctrl + b v を使用することです。これは覚えておくと非常に便利です。\n\nこの変更を行うには、 ~/.tmux.confに次の行を追加します。\n\n"
    },
    {
      "title": "システムの停止を禁止",
      "level": 3,
      "content": "ホストがスリープ状態になると別のデバイスから接続したときに tmux がハングする場合は、セッションのシェルコマンドを禁止してロックします。\n\n```\ntmux new-session -A \"systemd-inhibit --what=idle $SHELL\"\n```\n\n"
    },
    {
      "title": "スクロールの問題",
      "level": 3,
      "content": "ターミナルで Shift-Page Up/Down を使ってスクロールができない場合、以下の設定で xterm から識別子が始まるターミナルで smcup と rmcup の機能を削除できます:\n\n```\nset -ga terminal-overrides ',xterm*:smcup@:rmcup@'\n```\n\n上記の設定を使うとターミナルエミュレータは tmux のことを pico や mutt と同じようなフルスクリーンのアプリケーションと認識するようになり [7]、スクロールバックが正しく記録されるようになります。ただし、ウィンドウやペインを切り替えたときに多少表示が崩れるかもしれません。Tmux のネイティブのスクロールバックを使うことを推奨します。\n\n"
    },
    {
      "title": "マウスのスクロール",
      "level": 3,
      "content": "マウスホイールでスクロールしたい場合、.tmux.conf で mode-mouse をオンにして下さい:\n\n```\nset -g mouse on\n```\n\nスクロール履歴を設定するには:\n\n```\nset -g history-limit 30000\n```\n\ntmux 2.1 からは、マウスホイールでスクロールするには ~/.tmux.conf に以下のどちらかあるいは両方を追加してみてください:\n\n```\nbind -T root WheelUpPane   if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; copy-mode -e; send-keys -M\"\nbind -T root WheelDownPane if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; send-keys -M\"\n```\n\n上記の設定では一行ずつしかスクロールしませんが、以下を追加することでページ単位でスクロールすることができます:\n\n```\nbind -t vi-copy    WheelUpPane   page-up\nbind -t vi-copy    WheelDownPane page-down\nbind -t emacs-copy WheelUpPane   page-up\nbind -t emacs-copy WheelDownPane page-down\n```\n\n"
    },
    {
      "title": "UTF-8 のマウスイベントをターミナルエミュレータがサポートしていない",
      "level": 3,
      "content": "ターミナルエミュレータが UTF-8 のマウスイベントに対応していない場合、tmux の mouse on オプションを設定しても、ターミナルウィンドウの中で左クリックすると [M# や [Ma などの文字列がプロンプトに貼り付けられてしまいます。\n\nこの問題を解決するには以下を設定:\n\n```\nset -g mouse-utf8 off\n```\n\n"
    },
    {
      "title": "Shift+F6 が Midnight Commander で動作しない",
      "level": 3,
      "content": "Midnight Commander#ショートカットが機能しないを参照してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- フォーラムスレッド\n- Screen と tmux の機能比較\n- powerline - tmux で使えるダイナミックステータスバー\n- tmux のプラグイン\n- Oh My Tmux!\n\nチュートリアル\n\n- Practical Tmux\n- man ページ (OpenBSD)\n- Tmux チュートリアル Part 1 と Part 2\n- The Tao of tmux - tmuxp と libtmux を開発した Tony Narlock による電子書籍\n\n"
    }
  ]
}