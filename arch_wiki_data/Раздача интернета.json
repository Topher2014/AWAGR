{
  "title": "Раздача интернета",
  "url": "https://wiki.archlinux.org/title/%D0%A0%D0%B0%D0%B7%D0%B4%D0%B0%D1%87%D0%B0_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82%D0%B0",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Android tethering (Русский)\n- Программная точка доступа\n- Bridge with netctl\n- Ad-hoc networking\n- Sharing PPP Connection\n- Настройка межсетевого экрана\n- Router\n- USB 3G-модем\n\nЭта статья описывает, как раздать подключение к интернету от одного компьютера одному или нескольким другим компьютерам.\n\n"
    },
    {
      "title": "Системные требования",
      "level": 2,
      "content": "Компьютер, выполняющий роль сервера, должен иметь дополнительное сетевое устройство. На нём должно работать соединение канального уровня с компьютером, который будет получать интернет:\n\n- Чтобы иметь возможность поделиться интернетом с несколькими компьютерами, можно использовать коммутатор.\n- Можно раздавать интернет через беспроводную сеть; подробности в статье Программная точка доступа.\n- Если доступ предоставляется только одному компьютеру, достаточно перекрёстного кабеля. Если одна из сетевых карт поддерживает MDI-X, перекрёстный кабель не нужен и можно использовать обычный Ethernet-кабель. Чтобы разобраться в этом, можно выполнить команду ethtool интерфейс | grep MDI от имени root.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "В этом разделе предполагается, что сетевой интерфейс, подсоединяемый к клиентскому компьютеру (компьютерам), называется net0, а сетевой интерфейс, подключенный к интернету называется internet0.\n\nВся настройка выполняется на компьютере, выполняющем роль сервера, за исключением последнего шага в разделе #Назначение ip адресов клиентским компьютерам.\n\n"
    },
    {
      "title": "Статический IP адрес",
      "level": 3,
      "content": "Назначьте статический IPv4 адрес интерфейсу, подключенному к другим компьютерам. Первые 3 байта этого адреса не могут быть такими же как у другого интерфейса.\n\n```\n# ip link set up dev net0\n# ip addr add 192.168.123.100/24 dev net0 # произвольный адрес\n```\n\nЧтобы статический ip был назначен при загрузке, можно использовать какой-нибудь сетевой менеджер.\n\n"
    },
    {
      "title": "Разрешите пересылку пакетов",
      "level": 3,
      "content": "Проверьте текущие настройки перенаправления пакетов:\n\n```\n# sysctl -a | grep forward\n```\n\nВы заметите, что эта опция существует для управления переадресацией по умолчанию, на интерфейсе, а также отдельные опции для IPv4/IPv6 на интерфейсе.\n\nВведите следующую команду для временного разрешения пересылки пакетов во время выполнения:\n\n```\n# sysctl net.ipv4.ip_forward=1\n```\n\nЧтобы разрешение на пересылку для всех интерфейсов осталось после перезагрузки, отредактируйте /etc/sysctl.d/30-ipforward.conf:\n\n```\n/etc/sysctl.d/30-ipforward.conf\n```\n\n```\nnet.ipv4.ip_forward=1\nnet.ipv6.conf.default.forwarding=1\nnet.ipv6.conf.all.forwarding=1\n```\n\nПосле этого рекомендуется дважды проверить, что после перезагрузки пересылка работает как положено.\n\n"
    },
    {
      "title": "С помощью iptables",
      "level": 4,
      "content": "Установите пакет iptables. Используйте iptables, чтобы включить NAT:\n\n```\n# iptables -t nat -A POSTROUTING -o internet0 -j MASQUERADE\n# iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n# iptables -A FORWARD -i net0 -o internet0 -j ACCEPT\n```\n\nИспользуйте -I DOCKER-USER вместо -A FORWARD, если у вас установлен docker. [3]\n\n```\n# iptables -t nat -A POSTROUTING -o internet0 -j MASQUERADE\n# iptables -I DOCKER-USER 1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n# iptables -I DOCKER-USER 2 -i net0 -o internet0 -j ACCEPT\n```\n\nПри подключении через PPPoE уменьшите mss до pmtu, чтобы предотвратить фрагментацию:\n\n```\n# iptables -t mangle -A FORWARD -o ppp0 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu\n```\n\nПрочтите статью iptables (Русский) для дополнительной информации (в особенности о сохранении правил и их автоматическом применении при загрузке). Также есть отличная инструкция по iptables Simple stateful firewall (Русский).\n\n"
    },
    {
      "title": "С помощью nftables",
      "level": 4,
      "content": "Установите пакет nftables. Для включения NAT с помощью nftables создайте цепочку postrouting в новой/существующей таблице:\n\n```\n# nft add table inet nat\n# nft add chain inet nat postrouting '{ type nat hook postrouting priority 100 ; }'\n```\n\nПосле этого включите маскарадинг адресов из интерфейса net0 для интерфейса internet0:\n\n```\n# nft add rule inet nat postrouting oifname internet0 masquerade\n```\n\nВозможно, вы захотите добавить ещё несколько ограничений межсетевого экрана на пересылку (при условии, что таблица фильтров уже существует и настроена как описано в разделе nftables (Русский)#Сервер):\n\n```\n# nft add chain inet filter forward '{ type filter hook forward priority 0; policy drop; }'\n# nft add rule inet filter forward ct state related,established accept\n# nft add rule inet filter forward iifname net0 oifname internet0 accept\n```\n\nДополнительную информацию о NAT в nftables можно найти в nftables Wiki. Чтобы сделать изменения постоянными, следуйте инструкциям в статье nftables (Русский).\n\n"
    },
    {
      "title": "С помощью firewalld",
      "level": 4,
      "content": "Установите пакет firewalld. firewalld — это демон межсетевого экрана, который полагается на nftables и iptables. Сначала измените зоны сетевых интерфейсов firewalld:\n\n```\n# firewall-cmd --zone=external --change-interface=internet0 --permanent\n# firewall-cmd --zone=internal --change-interface=net0 --permanent\n```\n\nЗатем добавьте новую политику для пропуска трафика между внутренней и внешней зоной:\n\n```\n# firewall-cmd --permanent --new-policy int2ext\n# firewall-cmd --permanent --policy int2ext --add-ingress-zone internal\n# firewall-cmd --permanent --policy int2ext --add-egress-zone external\n# firewall-cmd --permanent --policy int2ext --set-target ACCEPT\n# firewall-cmd --reload\n```\n\nNote: Например, чтобы разрешить доступ в интернет только узлам 192.168.2.0/24, выполните:\n\nНапример, чтобы разрешить доступ в интернет только узлам 192.168.2.0/24, выполните:\n\nfirewall-cmd --permanent --policy int2ext --add-rich-rule='rule family=ipv4 source address=192.168.2.0/24 accept' Не забудьте потом перегрузить правила:\n\n"
    },
    {
      "title": "Назначение ip адресов клиентским компьютерам",
      "level": 3,
      "content": "Если вы планируете регулярно подключать какие-то компьютеры для использования интернета через ваш компьютер, хорошей идеей будет установка dhcp сервера. В качестве DHCP-сервера можно использовать, например, dhcpd (Русский) или dnsmasq. Затем установите DHCP-клиент (например, dhcpcd) на каждый клиентский компьютер.\n\nНа стороне сервера должен быть разрешён приём пакетов на UDP-порт 67. Также нужно разрешить входящие соединения с UDP/TCP портом 53 для DNS запросов. Пример для iptables:\n\n```\n# iptables -I INPUT -p udp --dport 67 -i net0 -j ACCEPT\n# iptables -I INPUT -p udp --dport 53 -s 192.168.123.0/24 -j ACCEPT\n# iptables -I INPUT -p tcp --dport 53 -s 192.168.123.0/24 -j ACCEPT\n```\n\nЕсли вы не планируете такое подключение на регулярной основе, вы можете задать ip адреса каждому клиенту вручную.\n\n"
    },
    {
      "title": "Назначение ip адресов вручную",
      "level": 4,
      "content": "Вместо использования DHCP можно вручную задать статический IP-адрес и маршрут по умолчанию через 192.168.123.100. Существует множество инструментов для соответствующей настройки сети. Одним из ярких примеров такого инструмента является ip(8), смотрите раздел Настройка сети#Управление сетевым подключением. Или можно использовать файл .network, смотрите раздел systemd-networkd (Русский)#Проводной интерфейс со статическим IP-адресом для настройки статического IP.\n\nУкажите DNS сервер на каждом клиентском компьютере. Смотрите resolv.conf для дополнительной информации.\n\nТеперь клиентский компьютер должен иметь доступ в Internet.\n\n"
    },
    {
      "title": "Решение проблем",
      "level": 2,
      "content": "Если вы можете подключить два компьютера, но не можете пересылать данные (например, если клиентский делает DHCP запрос к раздающему компьютеру, раздающий компьютер получает запрос и предлагает IP клиенту, но клиент не принимает его, а вместо этого происходит тайм аут), проверьте, что вы не имеете других интерферирующих правил iptables.\n\n"
    },
    {
      "title": "Клиенты не могут получить доступ к интернету или не могут подключиться",
      "level": 3,
      "content": "Симптомы могут быть такие: клиенты получают сообщение host is down, когда пингуют хост, получают no route to host, когда пингуют устройства вне локальной сети (которые должны быть перенаправлены через NAT), DHCP-запросы не проходят через мост, ...\n\nИзвестно, что такие проблемы может вызывать Docker. Простое отключение юнитов docker.service и docker.socket решает проблему.\n\ndocker github issue.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Xyne's guide and scripts for launching a subnet with DHCP and DNS\n- NetworkManager также может раздавать интернет, если он используется для управления сетью.\n\n"
    }
  ]
}