{
  "title": "Python (Português)",
  "url": "https://wiki.archlinux.org/title/Python_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Diretrizes de pacotes Python\n- Python/Virtual environment\n- mod_wsgi\n- Django\n\nDo Wikipédia:\n\n"
    },
    {
      "title": "Python 3",
      "level": 3,
      "content": "Python 3 é a versão mais recente da linguagem e é incompatível com o Python 2. A linguagem é basicamente a mesma, mas muitos detalhes, especialmente como objetos embutidos como dicionários e strings funcionam, mudaram consideravelmente e muitos recursos descontinuados finalmente foram removidos. Além disso, a biblioteca padrão foi reorganizada em alguns lugares de destaque. Para uma visão geral das diferenças, visite Python2orPython3 e os capítulos relevantes no Dive into Python 3.\n\nPara instalar a versão mais recente do Python 3, instale o pacote python.\n\nSe você deseja criar os candidatos a lançamento(RC) ou betas mais recentes a partir do código-fonte, visite Python Downloads. O Arch User Repository também contém bons PKGBUILDs. Se você decidir compilar o RC, observe que o binário (por padrão) é instalado em /usr/local/bin/python3.x. Como alternativa que não requer permissões de superusuário e instala no diretório pessoal do usuário, considere usar pyenv.\n\n"
    },
    {
      "title": "Python 2",
      "level": 3,
      "content": "Para obter a versão mais recente do Python 2, instale o pacote python2AUR.\n\nO Python 2 será executado felizmente ao lado do Python 3. Você precisa especificar python2 para executar esta versão.\n\nQualquer programa que exija o Python 2 precisa apontar para /usr/bin/python2, em vez de /usr/bin/python, que aponta para o Python 3. Para fazer isso, abra o programa ou script em um editor de texto e altere a primeira linha. A linha mostrará um dos seguintes:\n\n```\n#!/usr/bin/env python\n```\n\nou\n\n```\n#!/usr/bin/python\n```\n\nNos dois casos, basta alterar python para python2 e o programa usará o Python 2 em vez do Python 3.\n\nOutra maneira de forçar o uso de python2 sem alterar os scripts é chamá-lo explicitamente com python2:\n\n```\n$ python2 meuScript.py\n```\n\nPor fim, talvez você não consiga controlar as chamadas de script, mas existe uma maneira de enganar o ambiente. Funciona apenas se os scripts usarem #!/usr/bin/env python. Não funcionará com #!/usr/bin/python. Esse truque se baseia na pesquisa do env na primeira entrada correspondente na variável PATH.\n\nPrimeiro, crie uma pasta:\n\n```\n$ mkdir ~/bin\n```\n\nEm seguida, adicione um link simbólico python para python2 e os scripts de configuração:\n\n```\n$ ln -s /usr/bin/python2 ~/bin/python\n$ ln -s /usr/bin/python2-config ~/bin/python-config\n```\n\nPor fim, coloque a nova pasta no início da sua variável PATH:\n\n```\n$ export PATH=~/bin:$PATH\n```\n\nPara verificar qual interpretador Python está sendo usado por env, use o seguinte comando:\n\n```\n$ which python\n```\n\nUma abordagem semelhante ao enganar o ambiente, que também depende de #!/usr/bin/env python a ser chamada pelo script em questão, é usar um #Ambiente virtual.\n\n"
    },
    {
      "title": "Implementações alternativas",
      "level": 3,
      "content": "As seções acima se referem à implementação de referência do Python, chamada de CPython. No entanto, também existem outras implementações disponíveis - as mais populares:\n\n- PyPy é uma implementação Python 2.7/3.6 utilizando um compilador JIT. Geralmente é mais rápido e usa menos memória, mas não é totalmente compatível com o CPython (embora a maioria dos pacotes e códigos funcione sem alterações).\n- Jython é uma implementação do Python 2.7 construída em Java. Permite fácil integração do código Python e Java, mas não é totalmente compatível com as bibliotecas do CPython. É frequentemente usado para fornecer Python como uma linguagem de script em um aplicativo Java maior.\n- IronPython é uma implementação do Python 2.7 construída em .NET - atinge os mesmos objetivos que o Jython, mas para linguagens .NET (como C#/VB).\n- MicroPython é uma implementação limitada do Python 3.4 direcionada a microcontroladores e outros ambientes incorporados (como UEFI), mas é incompatível com a maioria dos pacotes padrão devido a mudanças menores de sintaxe e biblioteca padrão severamente limitada. É frequentemente usado para criação de protótipos em ambientes incorporados (pois fornece um Python REPL).\n- Mais implementações estão disponíveis, embora a maioria não seja mais mantida devido a melhorias nas mais populares.\n\n"
    },
    {
      "title": "Versões antigas",
      "level": 3,
      "content": "As versões antigas do Python estão disponíveis no AUR e podem ser úteis para curiosidade histórica, aplicativos antigos que não são executados nas versões atuais ou para testar programas Python destinados a serem executados em uma distribuição que vem com uma versão mais antiga:\n\n- Python 3.7: python37AUR\n- Python 3.6: python36AUR\n- Python 3.5: python35AUR[link quebrado: package not found]\n- Python 3.4: python34AUR[link quebrado: package not found]\n- Python 2.6: python26AUR[link quebrado: package not found]\n- Python 2.5: python25AUR[link quebrado: package not found]\n\nMódulos/bibliotecas extras para versões antigas do Python podem ser encontrados no AUR pesquisando python<versão sem ponto>, por exemplo procurando por \"python26\" para módulos 2.6.\n\n"
    },
    {
      "title": "Gerenciamento de pacotes",
      "level": 2,
      "content": "Embora um grande número de pacotes Python esteja prontamente disponível nos repositórios oficiais e no AUR, o ecossistema Python fornece seus próprios gerenciadores de pacotes para uso com PyPI, o Índice de Pacotes Python:\n\n- pip — A ferramenta do PyPA para instalar pacotes Python.\n\n- setuptools — Baixe, construa, instale, atualize e desinstale facilmente pacotes Python.\n\nPara um breve histórico e comparação de recursos entre os dois, consulte pip vs easy_install. As melhores práticas de autoridade no gerenciamento de pacotes Python são detalhadas aqui.\n\nSe você precisa usar pip, use um ambiente virtual ou pip install --user para evitar conflitos com pacotes em /usr. É sempre preferível usar o pacman para instalar softwares.\n\n"
    },
    {
      "title": "Ligações de widget",
      "level": 2,
      "content": "As seguintes ligações para toolkit de widget estão disponíveis:\n\n- TkInter — Ligações para Tk\n\n- pyQt — Ligações para Qt\n\n- pySide2 — Ligações para Qt\n\n- pyGTK — Ligações para GTK 2\n\n- PyGObject — Ligações para GTK 2/3 via GObject Introspection\n\n- wxPython — Ligações para wxWidgets\n\nPara usá-los com o Python, pode ser necessário instalar os kits de widgets associados.\n\n"
    },
    {
      "title": "Shells alternativos",
      "level": 3,
      "content": "- bpython — Interface sofisticada para o interpretador Python.\n\n- IPython — Shell Python interativo aprimorado.\n\n- Jupyter Notebook — Interface web para o IPython.\n\n- ptpython — Interface sofisticada para o interpretador Python baseada na interface de entrada prompt-toolkit.\n\n"
    },
    {
      "title": "Ambiente virtual",
      "level": 3,
      "content": "O Python fornece ferramentas para criar ambientes isolados nos quais você pode instalar pacotes sem interferir nos outros ambientes virtuais nem nos pacotes do sistema Python. Pode mudar o interpretador python usado para um aplicativo específica.\n\nVeja Python/Virtual environment para detalhes.\n\n"
    },
    {
      "title": "Conclusão com Tab no shell do Python",
      "level": 3,
      "content": "Desde o Python 3.4, conclusão com Tab está ativado por padrão, no Python 2 você pode ativá-lo manualmente adicionando as seguintes linhas a um arquivo referenciado pela variável de ambiente PYTHONSTARTUP: [1]\n\n```\nimport rlcompleter\nimport readline\nreadline.parse_and_bind(\"tab: complete\")\n```\n\nObserve que o programa de conclusão \"readline\" só concluirá nomes no espaço para nomes global. Você pode recorrer ao python-jedi para obter uma experiência mais completa de conclusão com Tab [2].\n\n"
    },
    {
      "title": "Lidando com problema de versão em scripts de compilação",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nMuitos scripts de compilação de projetos supõem que python seja Python 2, e isso acabaria resultando em um erro — normalmente reclamando que print 'foo' é uma sintaxe inválida. Felizmente, muitos deles chamam python a partir da variável de ambiente PATH em vez de codificar #!/usr/bin/python na linha shebang, e os scripts Python são todos contido na árvore do projeto. Portanto, em vez de modificar os scripts de construção manualmente, há uma solução alternativa. Crie /usr/local/bin/python com conteúdo como este:\n\n```\n/usr/local/bin/python\n```\n\n```\n#!/bin/bash\nscript=$(readlink -f -- \"$1\")\ncase \"$script\" in (/caminho/para/projeto1/*|/caminho/para/projeto2/*|/path/to/project3*)\n    exec python2 \"$@\"\n    ;;\nesac\n\nexec python3 \"$@\"\n```\n\nsendo /path/to/project1/*|/path/to/project2/*|/path/to/project3* uma lista de padrões separados por | correspondendo a todas as árvores do projeto. Para alguns scripts, o caminho pode não ser o primeiro parâmetro. Por exemplo, o Google SDK envia -S como o primeiro parâmetro. O comando readlink deve mudar para script=$(readlink -f -- \"$1\").\n\nNão se esqueça de torná-lo executável. Posteriormente, os scripts nas árvores de projeto especificadas serão executados com o Python 2.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- Documentação oficial do Python\n- O'Reilly's Learning Python, 5th edition\n- Dive Into Python, Dive Into Python3\n- A Byte of Python\n- Learn Python the Hard Way\n- Learn Python\n- Crash into Python (presume familiaridade com outras linguagens de programação)\n- Beginning Game Development with Python and Pygame comercial\n- Think Python\n- Pythonspot\n- OverIQ Python Tutorial\n- Python Tutorial to Learn Step by Step\n- awesome-python - Uma lista com curadoria de estruturas, bibliotecas, software e recursos Python.\n- boltons - Trecho/receitas/trechos que seriam úteis na biblioteca padrão.\n\n"
    }
  ]
}