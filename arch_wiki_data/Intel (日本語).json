{
  "title": "Intel (日本語)",
  "url": "https://wiki.archlinux.org/title/Intel_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Intel GMA 3600\n- Xorg\n- カーネルモード設定\n- Xrandr\n- ハイブリッドグラフィック\n- Vulkan\n- GPGPU\n\nIntel はオープンソースドライバの提供とサポートを行なっているので、インテルグラフィックスは基本的にプラグアンドプレイです。\n\nIntel GPU のモデルや関連するチップセットと CPU の包括的なリストは、Wikipedia:Intel Graphics Technology と Gentoo:Intel#Feature support を見てください。\n\n- PowerVR ベースのグラフィックカード (GMA 3600 シリーズ) はオープンソースドライバではサポートされていません。\n- Intel 第 N 世代 (Gen N) ハードウェアという記述は、CPU の世代を指すものではなく、GPU の世代を指しています。これは CPU の世代とは異なります。\n- あなたのカードを特定する方法については Xorg#ドライバーのインストール を参照してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 ローディング 2.1 早期 KMS 2.2 GuC/HuC ファームウェアのロードを有効にする\n- 3 Xorg の設定 3.1 modesetting ドライバを使う 3.2 Intel ドライバを使う 3.2.1 AccelMethod 3.2.2 最近の GPU で Intel DDX ドライバを使用する 3.2.3 TearFree、TripleBuffer、SwapbuffersWait を無効化する\n- 4 モジュールベースのオプション 4.1 フレームバッファー圧縮 (enable_fbc) 4.2 Fastboot 4.3 Intel GVT-g グラフィック仮想化のサポート 4.4 パフォーマンスサポートを有効化する\n- 5 ヒントとテクニック 5.1 スケーリングモードを設定する 5.2 GMA 4500 での H.264 デコードのハードウェアアクセラレーション 5.3 報告される OpenGL のバージョンを上書き 5.4 モニタリング 5.5 明るさとガンマ値の設定 5.6 試験的な新しい Xe ドライバをテストする\n- 6 トラブルシューティング 6.1 ティアリング 6.1.1 Intel ドライバを使う 6.1.2 modesetting ドライバを使う 6.2 垂直同期 (VSYNC) を無効化する 6.3 DRI3 の問題 6.4 GTK アプリケーションでフォントや画面の表示がおかしい (サスペンド・復帰後に文字が表示されない) 6.5 Intel ドライバで X がフリーズ/クラッシュする 6.6 認識されない解像度を追加する 6.7 バックライトを調整できない 6.8 Chromium や Firefox の表示がおかしい/応答しない 6.9 Broadwell/Core-M チップでカーネル 4.0 以上を使っている場合にクラッシュする 6.10 Windows をゲストとした場合にラグが発生する 6.11 画面がちらつく 6.12 i915 ドライバで OpenGL 2.1 6.13 KMS の問題: コンソールが小さい領域に制限される 6.14 Haswell CPU で HDMI 経由で音声が出ない 6.15 低消費電力 Intel CPU でクラッシュ/フリーズ 6.15.1 高い C ステートで S3 スリープから復帰しなくなってしまう 6.16 165Hz モニタのサポートを追加する 6.17 Raptor Lake と Alder Lake-P 上でスリープ/サスペンドから復帰するとフリーズする 6.18 色が抜けた 6.18.1 Wayland での色の問題を修正する 6.18.2 X11/Xorg での色の問題を修正する\n- 7 参照\n\n- 2.1 早期 KMS\n- 2.2 GuC/HuC ファームウェアのロードを有効にする\n\n- 3.1 modesetting ドライバを使う\n- 3.2 Intel ドライバを使う 3.2.1 AccelMethod 3.2.2 最近の GPU で Intel DDX ドライバを使用する 3.2.3 TearFree、TripleBuffer、SwapbuffersWait を無効化する\n\n- 3.2.1 AccelMethod\n- 3.2.2 最近の GPU で Intel DDX ドライバを使用する\n- 3.2.3 TearFree、TripleBuffer、SwapbuffersWait を無効化する\n\n- 4.1 フレームバッファー圧縮 (enable_fbc)\n- 4.2 Fastboot\n- 4.3 Intel GVT-g グラフィック仮想化のサポート\n- 4.4 パフォーマンスサポートを有効化する\n\n- 5.1 スケーリングモードを設定する\n- 5.2 GMA 4500 での H.264 デコードのハードウェアアクセラレーション\n- 5.3 報告される OpenGL のバージョンを上書き\n- 5.4 モニタリング\n- 5.5 明るさとガンマ値の設定\n- 5.6 試験的な新しい Xe ドライバをテストする\n\n- 6.1 ティアリング 6.1.1 Intel ドライバを使う 6.1.2 modesetting ドライバを使う\n- 6.2 垂直同期 (VSYNC) を無効化する\n- 6.3 DRI3 の問題\n- 6.4 GTK アプリケーションでフォントや画面の表示がおかしい (サスペンド・復帰後に文字が表示されない)\n- 6.5 Intel ドライバで X がフリーズ/クラッシュする\n- 6.6 認識されない解像度を追加する\n- 6.7 バックライトを調整できない\n- 6.8 Chromium や Firefox の表示がおかしい/応答しない\n- 6.9 Broadwell/Core-M チップでカーネル 4.0 以上を使っている場合にクラッシュする\n- 6.10 Windows をゲストとした場合にラグが発生する\n- 6.11 画面がちらつく\n- 6.12 i915 ドライバで OpenGL 2.1\n- 6.13 KMS の問題: コンソールが小さい領域に制限される\n- 6.14 Haswell CPU で HDMI 経由で音声が出ない\n- 6.15 低消費電力 Intel CPU でクラッシュ/フリーズ 6.15.1 高い C ステートで S3 スリープから復帰しなくなってしまう\n- 6.16 165Hz モニタのサポートを追加する\n- 6.17 Raptor Lake と Alder Lake-P 上でスリープ/サスペンドから復帰するとフリーズする\n- 6.18 色が抜けた 6.18.1 Wayland での色の問題を修正する 6.18.2 X11/Xorg での色の問題を修正する\n\n- 6.1.1 Intel ドライバを使う\n- 6.1.2 modesetting ドライバを使う\n\n- 6.15.1 高い C ステートで S3 スリープから復帰しなくなってしまう\n\n- 6.18.1 Wayland での色の問題を修正する\n- 6.18.2 X11/Xorg での色の問題を修正する\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "- 以下のパッケージのうち1つをインストールしてください。これらは、3D アクセラレーションのための DRI ドライバを提供します。 mesa は、第3世代ハードウェアおよびそれ以降用のモダンな Gallium3D ドライバを含む最新の Mesa パッケージです。これを使うことが推奨されます。 mesa-amber は、第2世代から第11世代までのハードウェア用のクラシックドライバ (Gallium3d でない) です。このドライバは、第7世代及びそれ以前のハードウェアにおいて高いパフォーマンスや安定性をもたらすかもしれませんが、メンテナンスされていません。\n- 32ビットアプリケーションのサポートは、multilib リポジトリから lib32-mesa か lib32-mesa-amber パッケージもインストールしてください。\n- Xorg で 2D アクセラレーションを提供する DDX ドライバに関しては、以下のうち1つを使ってください: xorg-server パッケージに含まれる modesetting ドライバは、第4世代及びそれ以降のハードウェアにおいて推奨されます。これは、glamor モジュール経由で DRI ドライバを使用してアクセラレーションを提供します。 xf86-video-intel パッケージは、第2世代から第9世代までのハードウェアにおいてレガシーな Intel DDX ドライバを提供します。一般に、このパッケージを使用することは推奨されません。下記のノートを参照してください。\n- Vulkan サポート (Broadwell 及びそれ以降; それより古いチップにおけるサポートは不完全であるか存在しません) については、vulkan-intel パッケージをインストールしてください。32 ビット Vulkan サポートについては、lib32-vulkan-intel パッケージをインストールしてください。\n\n- mesa は、第3世代ハードウェアおよびそれ以降用のモダンな Gallium3D ドライバを含む最新の Mesa パッケージです。これを使うことが推奨されます。\n- mesa-amber は、第2世代から第11世代までのハードウェア用のクラシックドライバ (Gallium3d でない) です。このドライバは、第7世代及びそれ以前のハードウェアにおいて高いパフォーマンスや安定性をもたらすかもしれませんが、メンテナンスされていません。\n\n- xorg-server パッケージに含まれる modesetting ドライバは、第4世代及びそれ以降のハードウェアにおいて推奨されます。これは、glamor モジュール経由で DRI ドライバを使用してアクセラレーションを提供します。\n- xf86-video-intel パッケージは、第2世代から第9世代までのハードウェアにおいてレガシーな Intel DDX ドライバを提供します。一般に、このパッケージを使用することは推奨されません。下記のノートを参照してください。\n\nハードウェアビデオアクセラレーションも見てください。\n\n- 一部のディストリビューション (Debian & Ubuntu、Fedora、KDE) では、xf86-video-intel ドライバのインストールが推奨されておらず、代わりに modesetting ドライバにフォールバックさせることが推奨されています。[1]、[2]、Xorg#インストール、modesetting(4) を参照してください。しかし、modesetting ドライバは次のような問題を引き起こす可能性があります: XFCE での画面のチラツキやマウスのジッタリング、仮想デスクトップの切り替えを行ったときに Chromium でアーティファクトが発生する、vsync のジッタリング、mpv での動画のスタッタリング。\n- xf86-video-intel ドライバには、第11世代及びそれ以降のハードウェアに対する適切なサポートがありません。それによって、アクセラレーションが提供されなかったり、レンダリングの問題が発生したりし、その結果として Plasma Desktop がほぼ利用不能な状態になります。[3] を参照してください。\n- xf86-video-intel がインストールされている場合、グラフィックススタック全体がハードフリーズし、(Ctrl+Alt+Fn を押して) 他の仮想コンソールに切り替えることすらできなくなり、SysRq でユーザプロセスを kill することしかできなくなるという問題が2件報告されています [4] [5]。\n\n"
    },
    {
      "title": "ローディング",
      "level": 2,
      "content": "Intel カーネルモジュールは、システムの起動時に自動的に正常にロードされるはずです。\n\n正常にロードされない場合は:\n\n- Intel は カーネルモード設定を必要とするので、カーネルパラメータ に nomodeset を指定して いない ことを確認してください。\n- また、/etc/modprobe.d/ や /usr/lib/modprobe.d/ で modprobe ブラックリストを使って Intel を無効にしていないか確認してください。\n\n"
    },
    {
      "title": "早期 KMS",
      "level": 3,
      "content": "カーネルモード設定 (KMS) は i915 ドライバによってサポートされており、mkinitcpio v32 から kms フックがデフォルトで使用されているため (ブートの) 早い段階で有効化されます。他の環境で KMS をブートプロセスのできるだけ早い段階で有効化する方法については カーネルモード設定#KMS の早期開始 を見てください。\n\n"
    },
    {
      "title": "GuC/HuC ファームウェアのロードを有効にする",
      "level": 3,
      "content": "Table content:\nこの記事またはセクションの正確性には問題があります。 理由: Intel のドキュメントに反し、Tiger Lake と Rocket Lake の GPU は実際 enable_guc=3 をサポートし、enable_guc=1 がデフォルトとなっている場合があります。 (議論: トーク:インテルグラフィックス#)\n\n第9世代から (Skylake およびそれ以降)、Intel GPU には以下の機能を提供する Graphics micro (μ) Controller (GuC) が搭載されています [6][リンク切れ 2023-04-23]:\n\n- 一部のメディアデコード機能を CPU から HEVC/H.265 micro (µ) Controller (HuC) にオフロードする。ハードウェアビデオアクセラレーションに intel-media-driver を使用する場合にのみ、適用可能です。第9世代から導入されました。\n- GuC をスケジューリング、コンテキスト送信、電源管理に使用する。第12世代、Alder Lake-P (Mobile) で導入されました。\n\nこの機能を使うには、GuC ファームウェアがロードされていなければなりません。HuC のサポートに関して、一部のビデオ機能 (例: SKL 低電力符号化モードにおける CBR レート制御) は HuC ファームウェアもロードされている必要があります [7]。GuC と HuC ファームウェアのファイルは両方 linux-firmware によって提供されています。\n\nGuC の機能は i915.enable_guc カーネルパラメータ によって制御されます。このパラメータの使用法は次のとおりです。:\n\nTable content:\nenable_guc の値 | GuC 送信 | HuC ファームウェアのロード | デフォルトとなっているプラットフォーム | サポートされているプラットフォーム\n0 | No | No | Tiger Lake、Rocket Lake、Gen12 以前 [8] | すべて\n1 | Yes | No | – | Alder Lake-P (Mobile) およびそれ以降\n2 | No | Yes | Alder Lake-S (Desktop) [9] [10] | Gen9 およびそれ以降\n3 | Yes | Yes | Alder Lake-P (Mobile) 及びそれ以降 | Gen 9.5 及びそれ以降 (一部個体ではこちらがより良い)\n\nGuC 送信や HuC ファームウェアのロードがあなたの GPU ではデフォルトで有効になっていない場合、手動で有効化できます。\n\nまず、linux-firmware がインストール されていることを確認してください。\n\ni915.enable_guc カーネルパラメータ を設定してください。例えば:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 enable_guc=2\n```\n\nInitramfs を再生成 してください。次回の起動時に dmesg を使うことで GuC と HuC が両方有効化されていることを確認できます:\n\n```\n# dmesg\n```\n\n```\n[30130.586970] i915 0000:00:02.0: [drm] GuC firmware i915/icl_guc_33.0.0.bin version 33.0 submission:disabled\n[30130.586973] i915 0000:00:02.0: [drm] HuC firmware i915/icl_huc_9.0.0.bin version 9.0 authenticated:yes\n```\n\nあなたのグラフィックアダプタで GuC と HuC がサポートされていない場合、以下が出力されます\n\n```\n# dmesg\n```\n\n```\n[    0.571339] i915 0000:00:02.0: [drm] Incompatible option enable_guc=2 - GuC is not supported!\n[    0.571340] i915 0000:00:02.0: [drm] Incompatible option enable_guc=2 - HuC is not supported!\n```\n\nあるいは、以下で確認できます:\n\n```\n# less /sys/kernel/debug/dri/*/gt0/uc/guc_info\n# less /sys/kernel/debug/dri/*/gt0/uc/huc_info\n```\n\n```\n# journalctl\n```\n\n```\n... kernel: [drm:intel_gvt_init [i915]] *ERROR* i915 GVT-g loading failed due to Graphics virtualization is not yet supported with GuC submission\n... kernel: i915 0000:00:02.0: [drm:i915_driver_load [i915]] Device initialization failed (-5)\n... kernel: i915: probe of 0000:00:02.0 failed with error -5\n... kernel: snd_hda_intel 0000:00:1f.3: failed to add i915 component master (-19)\n```\n\n[11] で説明されているように、関連する警告は深刻なものではないことに注意してください:\n\n```\n# journalctl -b\n```\n\n```\n... kernel: i915 0000:00:02.0: Direct firmware load for i915/gvt/vid_0x8086_did_0x5916_rid_0x02.golden_hw_state failed with error -2\n```\n\n"
    },
    {
      "title": "Xorg の設定",
      "level": 2,
      "content": "たいてい、Xorg を実行するために設定は特に必要ありません。\n\nしかし、ドライバのオプションを活用したい場合や、Xorg が起動しない場合などは、Xorg の設定ファイルを作成することができます。\n\n"
    },
    {
      "title": "modesetting ドライバを使う",
      "level": 3,
      "content": "xf86-video-intel をインストールしたが、DDX ドライバを優先させずに modesetting ドライバを明示的にロードさせたい場合 (DDX ドライバと modesetting ドライバを比較したい場合など) は、以下のような設定ファイルを使用できます:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"modesetting\"\nEndSection\n```\n\n"
    },
    {
      "title": "Intel ドライバを使う",
      "level": 3,
      "content": "以下のような Xorg 設定ファイルを作成してください:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\nEndSection\n```\n\nその他のオプションは Driver の下の新しい行にユーザが追加します。 オプションの完全なリストは intel(4) の man ページを参照してください。\n\n"
    },
    {
      "title": "AccelMethod",
      "level": 4,
      "content": "設定ファイルを作成する際に、Option \"AccelMethod\" を指定する必要がある場合があります。古典的なオプションは、UXA、SNA (デフォルト)、BLT です。\n\nデフォルトの SNA で問題が発生した場合。(例: ピクセル化したグラフィック、壊れたテキストなど)、代わりに UXA を使ってみてください、これは Xorg 設定ファイル に次の行を追加することで可能です:\n\n```\nOption      \"AccelMethod\"  \"uxa\"\n```\n\nintel(4) § CONFIGURATION DETAILS の \"AccelMethod\" オプションをご覧ください。\n\n"
    },
    {
      "title": "最近の GPU で Intel DDX ドライバを使用する",
      "level": 4,
      "content": "第8世代 (Broadwell) からの Intel GPU では、Iris Mesa ドライバが必要です:\n\n```\nOption      \"DRI\"  \"iris\"\n```\n\n"
    },
    {
      "title": "TearFree、TripleBuffer、SwapbuffersWait を無効化する",
      "level": 4,
      "content": "コンポジタを使用している場合 (GNOME、KDE Plasma、Xfce などの最近のデスクトップ環境ではデフォルトです)、通常、TearFree、TripleBuffer、SwapbuffersWait を無効化することでパフォーマンスを向上させ、電力消費量を削減することができます。\n\n```\nOption      \"TearFree\"        \"false\"\nOption      \"TripleBuffer\"    \"false\"\nOption      \"SwapbuffersWait\" \"false\"\n```\n\n"
    },
    {
      "title": "モジュールベースのオプション",
      "level": 2,
      "content": "i915 カーネルモジュールにより、モジュールオプション を介して設定できます。一部のモジュールオプションは、省電力に影響を与えます。\n\n次のコマンドを使用して、すべてのオプションのリストと簡単な説明およびデフォルト値を生成できます:\n\n```\n$ modinfo -p i915\n```\n\n現在有効になっているオプションを確認するには、\n\n```\n# systool -m i915 -av\n```\n\n多くのオプションのデフォルトは-1であるため、チップごとの省電力のデフォルトになります。ただし、モジュールオプション を使用して、より積極的な省電力を構成することも可能です。\n\n"
    },
    {
      "title": "フレームバッファー圧縮 (enable_fbc)",
      "level": 3,
      "content": "フレームバッファ圧縮 (FBC) は、スクリーンのリフレッシュ中の電力消費量とメモリの帯域幅の使用量を削減できる機能です。\n\nこの機能は、ハードウェアによってサポートされている場合、自動的に有効化されます。以下のコマンドを実行することで、この機能が有効化されているかどうか確認できます:\n\n```\n$ modinfo i915 | grep enable_fbc\n```\n\n```\nparm:           enable_fbc:Enable frame buffer compression for power savings (default: -1 (use per-chip default)) (int)\n```\n\nparm が -1 に設定されている場合、何もする必要はありません。-1 でない場合、i915.enable_fbc=1 をカーネルパラメータに追加するか、以下の内容で /etc/modprobe.d/i915.conf を作成することで、FBC を強制的に有効化できます:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 enable_fbc=1\n```\n\n```\nkernel: drm: not enough stolen space for compressed buffer, disabling.\n```\n\nSandy Bridge 以前の CPU でフレームバッファー圧縮を有効にすると、次のようなエラーメッセージが表示されます。\n\n```\n# dmesg\n```\n\n```\n[ 2360.475430] [drm] not enough stolen space for compressed buffer (need 4325376 bytes), disabling\n[ 2360.475437] [drm] hint: you may be able to increase stolen memory size in the BIOS to avoid this\n```\n\n"
    },
    {
      "title": "Fastboot",
      "level": 3,
      "content": "Intel Fastboot の目標は、BIOS または ブートローダー によってセットアップされたフレームバッファーを保持して、 Xorg が開始されるまでちらつきを回避することです。[17][18]\n\nfastboot がデフォルトでないプラットフォーム上で fastboot を有効にするには、i915.fastboot=1 を カーネルパラメータ として設定するか、/etc/modprobe.d/i915.conf に以下を設定します:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 fastboot=1\n```\n\n"
    },
    {
      "title": "Intel GVT-g グラフィック仮想化のサポート",
      "level": 3,
      "content": "詳細については Intel GVT-g を参照してください。\n\n"
    },
    {
      "title": "パフォーマンスサポートを有効化する",
      "level": 3,
      "content": "第6世代から (Sandy Bridge およびそれ以降) Intel GPU は、内部のパフォーマンスデータをドライバに公開するために使用されるパフォーマンスカウンタを提供しています。ドライバとハードウェアレジスタではこのインフラを Observation Architecture (内部的には \"OA\") と呼んでいますが [19]、Intel のドキュメントではこの機能をより一般的に Observability Performance Counters を提供するものとしています [20] [21]。\n\nデフォルトでは、CAP_SYS_ADMIN (root と等価です) や CAP_PERFMON ケイパビリティで実行されているプログラムのみが observation architecture を利用できます [22] [23]。ほとんどのアプリケーションはこれらのケイパビリティを持たずに実行されるため、以下の警告が出力されます:\n\n```\nMESA-INTEL: warning: Performance support disabled, consider sysctl dev.i915.perf_stream_paranoid=0\n```\n\nこれらのケイパビリティ (または root) を使わずにパフォーマンスサポートを有効化するには、sysctl で説明されているように、(上記の警告で示されている) カーネルパラメータを設定してください。\n\n"
    },
    {
      "title": "スケーリングモードを設定する",
      "level": 3,
      "content": "フルスクリーンを使うアプリケーションで有用かもしれません:\n\n```\n$ xrandr --output LVDS1 --set PANEL_FITTING param\n```\n\n選べる param は:\n\n- center: 解像度は定義した通りに固定され、スケーリングは無効になります\n- full: 画面いっぱいまで解像度がスケールします\n- full_aspect: アスペクト比を維持したまま解像度を可能な限り最大までスケールします\n\nうまく行かない場合は、以下を試してみてください:\n\n```\n$ xrandr --output LVDS1 --set \"scaling mode\" param\n```\n\nparam は \"Full\"、\"Center\"、\"Full aspect\" のいずれかです。\n\n"
    },
    {
      "title": "GMA 4500 での H.264 デコードのハードウェアアクセラレーション",
      "level": 3,
      "content": "libva-intel-driver パッケージは、一部の GMA 4500 シリーズ GPU での MPEG-2 デコードのハードウェアアクセラレーションのみを提供します (H.264 デコードは提供しません)。あなたの GPU も関係しているどうかを確かめるには、そのドライバと libva-utils パッケージの両方をインストールしてください。そして、vainfo ツールの出力を見て、VAProfileH264 で始まるエントリがどれだけあるかを見てください。\n\nH.264 デコードのサポートは、枝分かれた g45-h264 ブランチでメンテナンスされており、libva-intel-driver-g45-h264AUR パッケージをインストールすることで使用できます。しかし、このサポートは実験的で、開発は放棄されていることに注意してください。GMA 4500 シリーズの GPU 上でこのドライバと共にVA-API を使うことで CPU の負荷を減らすことができますが、動画の再生がアクセラレートされていない状態ほどスムーズに再生できないかもしれません。mplayer を使ったテストでは H.264 でエンコードされた 1080p のビデオを vaapi を使って再生したところ (XV オーバーレイに比べて) CPU の負担は下がりましたが、途切れ途切れの再生になりました。一方 720p はうまく動きました [26]。他の報告も同じようなものでした [27]。BIOS で割当済みビデオ RAM のサイズを高く設定すると、より質の高いハードウェアデコード再生が可能です。これを行うと、1080p h264 でもうまく行きます [28]。スムーズな再生 (1080p/720p) は、mpv-gitAUR、ffmpeg-gitAUR、libva-intel-driver-g45-h264AUR を組み合わせて使うことでもうまく行きます。MPV と Firefox のプラグイン \"Send to MPV player\"[29] を用いることで、ハードウェアによりアクセラレートされた YouTube ビデオの再生が可能です。\n\n"
    },
    {
      "title": "報告される OpenGL のバージョンを上書き",
      "level": 3,
      "content": "MESA_GL_VERSION_OVERRIDE 環境変数を使うことで、アプリケーションに報告される OpenGL のバージョンを上書きできます。例えば、MESA_GL_VERSION_OVERRIDE=4.5 と設定することで OpenGL 4.5 と報告されるようになります。\n\n"
    },
    {
      "title": "モニタリング",
      "level": 3,
      "content": "- intel_gpu_top — Intel GPU のための top ライクなタスクモニタ (root 権限が必要)\n\n- nvtop — AMD、Intel、NVIDIA のための GPU プロセスモニタリング (現在、Intel GPU に対しては非常に基本的なサポートしかありません)。\n\n"
    },
    {
      "title": "明るさとガンマ値の設定",
      "level": 3,
      "content": "バックライト を見てください。\n\n"
    },
    {
      "title": "試験的な新しい Xe ドライバをテストする",
      "level": 3,
      "content": "(試験的な) 新しい Xe ドライバを試すには、以下が必要です:\n\n- linux 6.8 以上\n- Tiger Lake 及びそれ以降の統合グラフィックス、またはディスクリートグラフィックカード。\n- mesa。\n\n以下のコマンドで PCI ID を確認してください:\n\n```\n$ lspci -nn | grep VGA\n```\n\n```\n00:02.0 VGA compatible controller [0300]: Intel Corporation TigerLake-LP GT2 [Iris Xe Graphics] [8086:9a49] (rev 01)\n```\n\nそして、適切な PCI ID を使って以下をカーネルパラメータに追加してください:\n\n```\n... i915.force_probe=!9a49 xe.force_probe=9a49\n```\n\n必要なときに元に戻すためのブート手段を確保しておいてください。\n\n"
    },
    {
      "title": "Intel ドライバを使う",
      "level": 4,
      "content": "SNA アクセラレーションメソッドを取っている場合、一部のマシン上でティアリングが発生します。これを修正するには、以下の行を設定ファイルに追加して xf86-video-intel ドライバの TearFree オプションを有効化してください:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\n  Option \"TearFree\" \"true\"\nEndSection\n```\n\n詳細は元のバグレポートを見てください。\n\n- このオプションは、SwapbuffersWait が false のときに動作しない場合があります。\n- このオプションはメモリアロケーションを増加させ、パフォーマンスが低下する場合があります。[30]\n- このオプションは、vsync のタイミングに厳しいアプリケーション (例えば、Super Meat Boy) において問題が発生する場合があります。\n- このオプションはUXA アクセラレーションメソッドでは動作しません。SNA でしか使えません。\n- Intel UHD 620 または 430 では、TearFree を動作させるために Option \"TripleBuffer\" \"true\" を追加する必要があります。\n\n"
    },
    {
      "title": "modesetting ドライバを使う",
      "level": 4,
      "content": "TearFree サポートが modesetting ドライバに追加されました [31][32]。XWayland でないサーバーに対する最後のリリースは2021年のバージョン 21.1 ですが、このパッチはまだ安定リリースに至っていません。なので、安定化されるまで xorg-server-gitAUR を使う必要があります。\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"modesetting\"\n  Option \"TearFree\" \"true\"\nEndSection\n```\n\n"
    },
    {
      "title": "垂直同期 (VSYNC) を無効化する",
      "level": 3,
      "content": "以下のような場合に便利です:\n\n- Chromium/Chrome が、GPU のせいでラグくパフォーマンスが悪く、--disable-gpu スイッチを使うとスムーズに動作する場合。\n- glxgears テストが期待するほどのパフォーマンスを発揮してくれない場合。\n\nintel ドライバは垂直同期に Triple Buffering を使用します。これは、完全なパフォーマンスとティアリングの回避を可能にします。垂直同期をオフにするには (例えば、ベンチマークのために)、以下の .drirc をホームディレクトリ内に追加してください:\n\n```\n~/.drirc\n```\n\n```\n<device screen=\"0\" driver=\"dri2\">\n\t<application name=\"Default\">\n\t\t<option name=\"vblank_mode\" value=\"0\"/>\n\t</application>\n</device>\n```\n\n"
    },
    {
      "title": "DRI3 の問題",
      "level": 3,
      "content": "xf86-video-intel では DIR バージョンのデフォルトは DRI3 です。一部の環境では DRI3 によって問題が発生することがあります [33]。DRI2 を使うには設定ファイルに以下の行を追加してください:\n\n```\nOption \"DRI\" \"2\"\n```\n\nmodesetting ドライバーでは上記の方法で DRI3 を無効化することはできません。代わりに LIBGL_DRI3_DISABLE=1 環境変数を設定してください。\n\n"
    },
    {
      "title": "GTK アプリケーションでフォントや画面の表示がおかしい (サスペンド・復帰後に文字が表示されない)",
      "level": 3,
      "content": "GTK アプリケーションでフォントの文字が表示されなくなってしまう場合、以下の方法で直る可能性があります。/etc/environment を編集して以下の行を追加してください:\n\n```\n/etc/environment\n```\n\n```\nCOGL_ATLAS_DEFAULT_BLIT_MODE=framebuffer\n```\n\nFreeDesktop bug 88584 も参照。\n\n"
    },
    {
      "title": "Intel ドライバで X がフリーズ/クラッシュする",
      "level": 3,
      "content": "X のクラッシュを伴う問題、GPU のハングアップ、X のフリーズに関する問題は、NoAccel オプションを使って GPU の使用を無効化することで修復できる場合があります。以下の行を設定ファイルに追加してください:\n\n```\nOption \"NoAccel\" \"True\"\n```\n\nあるいは、DRI オプションを使って 3D アクセラレーションだけを無効化してみてください:\n\n```\nOption \"DRI\" \"False\"\n```\n\n"
    },
    {
      "title": "認識されない解像度を追加する",
      "level": 3,
      "content": "この問題は、Xrandr のページ で扱っています。\n\n"
    },
    {
      "title": "バックライトを調整できない",
      "level": 3,
      "content": "サスペンドから復帰したあとにホットキーを使用してスクリーンの輝度を変更できない場合、バックライトの記事を見てあなたの設定ファイルをチェックしてみてください。\n\n問題が解消されない場合は、以下のカーネルパラメータのうち1つを試してください:\n\n```\nacpi_osi=Linux\nacpi_osi=\"!Windows 2012\"\nacpi_osi=\n```\n\nまた、fastboot モード (i915.fastboot カーネルパラメータ) を使用していないことを確認してください。これは、バックライト制御を破壊することが知られています。\n\n"
    },
    {
      "title": "Chromium や Firefox の表示がおかしい/応答しない",
      "level": 3,
      "content": "Chromium や Firefox で表示の乱れ、応答なし、ラグ、低パフォーマンスが発生する場合、以下のような解決策があります。\n\n- AccelMethod を \"uxa\" に設定する\n- VSYNC を無効化する\n- TearFree オプションを有効化する\n- \"DRI\" とアクセラレーションのメソッドを無効にする (Intel Iris 第10世代でテスト済み): Option \"NoAccel\" \"True\" Option \"DRI\" \"False\"\n\n```\nOption \"NoAccel\" \"True\"\nOption \"DRI\" \"False\"\n```\n\n"
    },
    {
      "title": "Broadwell/Core-M チップでカーネル 4.0 以上を使っている場合にクラッシュする",
      "level": 3,
      "content": "X/Wayland がロードされた数秒後、マシンがフリーズして、journalctl に以下のようなインテルグラフィックスに関連するカーネルのクラッシュログが残ることがあります:\n\n```\nJun 16 17:54:03 hostname kernel: BUG: unable to handle kernel NULL pointer dereference at           (null)\nJun 16 17:54:03 hostname kernel: IP: [<          (null)>]           (null)\n...\nJun 16 17:54:03 hostname kernel: CPU: 0 PID: 733 Comm: gnome-shell Tainted: G     U     O    4.0.5-1-ARCH #1\n...\nJun 16 17:54:03 hostname kernel: Call Trace:\nJun 16 17:54:03 hostname kernel:  [<ffffffffa055cc27>] ? i915_gem_object_sync+0xe7/0x190 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0579634>] intel_execlists_submission+0x294/0x4c0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa05539fc>] i915_gem_do_execbuffer.isra.12+0xabc/0x1230 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa055d349>] ? i915_gem_object_set_to_cpu_domain+0xa9/0x1f0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ba2ae>] ? __kmalloc+0x2e/0x2a0\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0555471>] i915_gem_execbuffer2+0x141/0x2b0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa042fcab>] drm_ioctl+0x1db/0x640 [drm]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0555330>] ? i915_gem_execbuffer+0x450/0x450 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffff8122339b>] ? eventfd_ctx_read+0x16b/0x200\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ebc36>] do_vfs_ioctl+0x2c6/0x4d0\nJun 16 17:54:03 hostname kernel:  [<ffffffff811f6452>] ? __fget+0x72/0xb0\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ebec1>] SyS_ioctl+0x81/0xa0\nJun 16 17:54:03 hostname kernel:  [<ffffffff8157a589>] system_call_fastpath+0x12/0x17\nJun 16 17:54:03 hostname kernel: Code:  Bad RIP value.\nJun 16 17:54:03 hostname kernel: RIP  [<          (null)>]           (null)\n```\n\nこの問題は execlist のサポート (カーネル 4.0 からデフォルトに変更されました) を無効化することで解決します。以下のカーネルパラメータを追加してください:\n\n```\ni915.enable_execlists=0\n```\n\nこれは、カーネル 4.0.5 以上で壊れていることが知られています。\n\n"
    },
    {
      "title": "Windows をゲストとした場合にラグが発生する",
      "level": 3,
      "content": "VirtualBox でホスト側から（マウスカーソルを動かすなどして）画面を更新しないと Windows ゲストのビデオ出力が止まってしまうことがあります。enable_fbc=1 オプションを削除すれば問題は解決します。\n\n"
    },
    {
      "title": "画面がちらつく",
      "level": 3,
      "content": "Intel iGPU で使用される省電力機能 Panel Self Refresh (PSR) は、一部の例でちらつきを発生させることが知られています FS#49628 FS#49371 FS#50605。一時的な解決策は、カーネルパラメータ i915.enable_psr=0 を使ってこの機能を無効化することです。\n\n"
    },
    {
      "title": "i915 ドライバで OpenGL 2.1",
      "level": 3,
      "content": "mesa-amber パッケージに含まれる第3世代 GPU 用の 古い mesa ドライバは、デフォルトでは OpenGL 2.0 が利用可能であると報告します。これは、対象のハードウェアが OpenGL 2.1 とは完全に互換性がないことが原因です。[34] OpenGL 2.1 のサポートは、/etc/drirc または ~/.drirc で以下のようなオプションを設定することにより、手動で有効化することができます:\n\n```\n/etc/drirc\n```\n\n```\n<driconf>\n...\n    <device driver=\"i915\">\n        <application name=\"Default\">\n            <option name=\"stub_occlusion_query\" value=\"true\" />\n            <option name=\"fragment_shader\" value=\"true\" />\n        </application>\n    </device>\n...\n</driconf>\n```\n\n- OpenGL のバージョンが戻ってしまう理由は、Chromium と他のアプリケーションでエクスペリエンスが悪化するためでした。必要であれば、drirc ファイルを編集して特定のアプリケーションに対して OpenGL 2.1 を chromium 実行ファイルなどで無効化することもできます (参照)。\n- mesa パッケージに含まれる新しい Gallium ベースの i915 ドライバは、常に OpenGL 2.1 が利用可能であると報告します。なので、このドライバに対しては上記の設定は不要です。\n\n"
    },
    {
      "title": "KMS の問題: コンソールが小さい領域に制限される",
      "level": 3,
      "content": "低解像度のビデオポートの1つが起動時に有効になっていて、そのせいでターミナルがスクリーンの小さい領域を使っているのかもしれません。修正するには、ブートローダーでカーネルコマンドラインパラメータの video=SVIDEO-1:d を使って i915 モジュールの設定でそのポートを明示的に無効化してください。詳細は カーネルパラメータ を見てください。\n\nこれでうまく行かない場合、SVIDEO-1 ではなく TV1 か VGA1 を無効化してみてください。ビデオポートの名前は xrandr でリストアップできます。\n\n"
    },
    {
      "title": "Haswell CPU で HDMI 経由で音声が出ない",
      "level": 3,
      "content": "Linux カーネルの issue によると、intel_iommu=on を設定している場合には HDMI から音声が出力されないそうです。この問題を修正するには、以下のカーネルパラメータを設定してください:\n\n```\nintel_iommu=on,igfx_off\n```\n\nあるいは、IOMMU を無効化してください:\n\n```\nintel_iommu=off\n```\n\n"
    },
    {
      "title": "低消費電力 Intel CPU でクラッシュ/フリーズ",
      "level": 3,
      "content": "低消費電力 Intel プロセッサやノート PC プロセッサは、低消費電力 Intel チップで使用されている電源管理機能に関する問題によりランダムにハングアップ/クラッシュする傾向にあります。そのようなクラッシュが発生する場合、この問題を報告するログは見られないでしょう。以下のカーネルパラメータを追加することで、この問題を解決できるかもしれません。\n\n```\nintel_idle.max_cstate=1 i915.enable_dc=0 ahci.mobile_lpm_policy=1\n```\n\nahci.mobile_lpm_policy=1 は、いくつかの Lenovo ノート PC や一部の Acer ノートブックにおける、SATA コントローラーの問題のある電源管理に起因するハングアップを修正します。この回避策はインテルグラフィックスと厳密には関連していませんが、関連する問題を解決します。このカーネルパラメータを追加すると、link power management をファームウェアのデフォルトから最大パフォーマンスに変更し、特定の Lenovo マシンでディスプレイ輝度を変更した際にハングする問題を解決しますが、modern ultrabook でアイドル時の電力消費量が 1~1.5W 増加します。詳細 (特に他の状態に関するもの) については、Linux カーネルメーリングリストや Red Hat ドキュメントを見てください。\n\ni915.enable_dc=0 は、GPU の電源管理を無効化します。これは、特定の Intel システム (特に、Goldmount と Kaby Lake Refresh チップ) におけるランダムなハングを解決します。このパラメータを使用すると、電力消費量が増え、ノート PC/notebook のバッテリー寿命が短くなります。\n\nintel_idle.max_cstate=1 は、プロセッサのスリープ状態を制限し、プロセッサがディープスリープ状態に移行するのを防ぎます。これは絶対に理想的ではなく、電力消費量の増加とバッテリーの短命化を招きます。しかし、多くの Intel システムでランダムなハングを解決します。Intel Baytrail や Kaby Lake Refresh チップを使用している場合は、このパラメータを使用してください。Intel \"Baytrail\" チップは、このカーネルパラメータを使用しないと、ファームウェアの欠陥によりランダムにハングしてしまうことが知られていましたが、理論的には 2019-04-26 に修正されました。 max_cstate パラメータに関する詳細はカーネルドキュメントで、cstate に関する一般的な情報は GitHub 上の記事で見られます。\n\n頻繁にハングする問題を解決するために intel_idle.max_cstate=1 i915.enable_dc=0 ahci.mobile_lpm_policy=1 を追加して問題が解決した場合は、その後パラメータを一つずつ取り除いて、どのパラメータが実際に問題の解決になっているかを確かめるべきです。実際の問題が SATA の電源管理に関係していて、問題を実際に解決するパラメータが ahci.mobile_lpm_policy=1 である場合、cstate やディスプレイの電源管理が無効化されている状態でマシンを走らせることは推奨されていません。\n\n詳細は Linux Reviews を見てください。\n\n"
    },
    {
      "title": "高い C ステートで S3 スリープから復帰しなくなってしまう",
      "level": 4,
      "content": "システムが低頻度で復帰後に黒画面になるが、たいていは正常に復帰できてジャーナルに CPU pipe A FIFO underrun というメッセージ記録され、かつ intel_idle.max_cstate=1 で C ステートを制限すると正常に復帰できるようになる場合、スリープフックと cpupower-idle-set(1) を使えば、-D0 と -E オプションでサスペンドサイクル中に C ステートを効果的に制御することができます。[35] そうすることで、CPU を常に低い C ステートで動作させる必要がなくなります。\n\n"
    },
    {
      "title": "165Hz モニタのサポートを追加する",
      "level": 3,
      "content": "一部の 165Hz モニタで、xrandr が 165Hz のオプションを表示しない場合があり、さらに #認識されない解像度を追加する の方法ではこれを解決できません。この場合、i915-driver-stuck-at-40hz-on-165hz-screen を見てください。\n\n```\n/etc/initcpio/install/edid\n```\n\n```\n#!/bin/bash\n\nbuild() {\n    add_file /lib/firmware/edid/edid.bin\n}\n\nhelp() {\n    cat <<HELPEOF\nThis hook add support for 165Hz\nHELPEOF\n}\n```\n\nそして、/etc/mkinitcpio.conf の HOOKS 配列に edid を末尾に追加してください。以下のように:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... fsck edid)\n```\n\nそして、initramfs を再生成してください。\n\n"
    },
    {
      "title": "Raptor Lake と Alder Lake-P 上でスリープ/サスペンドから復帰するとフリーズする",
      "level": 3,
      "content": "Raptor Lake 及び Alder Lake-P の 12 世代モバイルプロセッサを搭載する、様々な製造者のノート PC は、サスペンドからの復帰後にフリーズや黒画面が発生すると報告されています。これは、多くのノート PC 製造者が、iGPU に接続されているポートが間違って記述されている、不適切な VBT (Video BIOS Table) を使用しているからです (freedesktop のイシュー 5531 6401 で説明されています)。この場合、ドキュメント化されているケースは全て、重複した eDP エントリに関連しています。\n\nほとんどの製造者が、Windows が正しく動作するノート PC に向けて BIOS アップデートをリリースしないことを考えれば、この問題はカーネル側から対処するしかありません。重複した eDP エントリがカーネルに悪影響を与えるのを防ぐ方法は2つ、カーネルにパッチを当てるか、修正した VBT をロードするかです。\n\nカーネルにパッチを当てるには、以下のコマンドの出力を解析して、重複した eDP エントリを特定する必要があります:\n\n```\n# intel_vbt_decode /sys/kernel/debug/dri/1/i915_vbt\n```\n\n```\nChild device info:\n        Device handle: 0x0008 (LFP 1 (eDP))\n        Device type: 0x1806 (unknown)\n ...\n Child device info:\n        Device handle: 0x0080 (LFP 2 (eDP))\n        Device type: 0x1806 (unknown)\n```\n\nこの出力からは、重複している eDP エントリが実際に存在しており、カーネルは2つめのエントリを無視するであろうことがわかります。とはいえ、一応チェックしておくべきでしょう。次に、重複した画面のインデックスを必要に応じて ignoreEntry = 1 に置き換える以下のカーネルパッチで、この問題を解決できます。\n\n```\n--- a/drivers/gpu/drm/i915/display/intel_bios.c\n+++ b/drivers/gpu/drm/i915/display/intel_bios.c\n@@ -3688,6 +3688,14 @@\n{\n       struct intel_bios_encoder_data *devdata;\n\n+       int ignoreEntry = 0;\n+\n       list_for_each_entry(devdata, &i915->display.vbt.display_devices, node)\n-               func(i915, devdata);\n+       {\n+               if (ignoreEntry != 1)\n+               {\n+                       func(i915, devdata);\n+                       ignoreEntry++;\n+               }\n+       }\n}\n```\n\n第2の解決方法は、VBT から重複したエントリを直接削除することです。\n\nVBT をコピーし、16進数エディタで編集して、重複しているデバイスハンドルに対応するデバイスタイプを 00 00 に変更します:\n\n```\n$ cat /sys/kernel/debug/dri/0/i915_vbt > vbt\n```\n\n```\n--- vbt\n+++ modified_vbt\n@@ -22,10 +22,10 @@\n 00000150  00 08 00 20 00 08 00 10  00 08 00 02 00 08 00 01  |... ............|\n 00000160  00 08 00 00 01 08 00 00  00 04 00 00 00 40 00 00  |.............@..|\n 00000170  00 20 00 00 00 10 00 00  00 02 00 00 00 01 00 00  |. ..............|\n-00000180  00 00 01 00 00 02 8b 01  02 04 00 00 27 08 00 06  |............'...|\n-00000190  18 00 00 00 00 00 00 00  00 00 00 00 00 0a 00 00  |................|\n+00000180  00 00 01 00 00 02 8b 01  02 04 00 00 27 08 00 00  |............'...|\n+00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 0a 00 00  |................|\n 000001a0  03 00 00 00 c0 00 40 00  20 00 00 00 00 00 00 00  |......@. .......|\n-000001b0  00 00 20 00 80 00 06 18  00 00 00 00 00 00 00 00  |.. .............|\n+000001b0  00 00 20 00 80 00 00 00  00 00 00 00 00 00 00 00  |.. .............|\n 000001c0  00 00 00 00 07 00 00 00  00 00 00 c0 00 10 00 20  |............... |\n 000001d0  00 00 00 00 00 00 00 00  00 20 00 04 00 d2 60 00  |......... ....`.|\n 000001e0  10 10 00 23 21 10 00 00  00 00 00 07 00 00 02 00  |...#!...........|\n```\n\n修正後の VBT は、/lib/firmware/modified_vbt にコピーして、i915.vbt_firmware=modified_vbt カーネルパラメータを使用し、必要であれば initramfs を再生成することで、ロードすることができます。\n\n"
    },
    {
      "title": "色が抜けた",
      "level": 3,
      "content": "デフォルトでは、一部のモニターは Intel GPU から適切に認識されず、フルレンジ RGB モードにならないため、色が抜けてしまうことがあります。\n\n"
    },
    {
      "title": "Wayland での色の問題を修正する",
      "level": 4,
      "content": "```\n/etc/udev/rules.d/80-i915.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"module\", KERNEL==\"i915\", RUN+=\"/usr/local/bin/intel-wayland-fix-full-color\"\n```\n\n```\n/usr/local/bin/intel-wayland-fix-full-color\n```\n\n```\n#!/bin/bash\n\nreadarray -t proptest_result <<<\"$(/usr/bin/proptest -M i915 -D /dev/dri/card0 | grep -E 'Broadcast|Connector')\"\n\nfor ((i = 0; i < ${#proptest_result[*]}; i += 2)); do\n    connector=$(echo ${proptest_result[i]} | awk '{print $2}')\n    connector_id=$(echo ${proptest_result[i + 1]} | awk '{print $1}')\n\n    /usr/bin/proptest -M i915 $connector connector $connector_id 1\ndone\n```\n\nGNOME を使用している場合、<rgbrange>full</rgbrange> を ~/.config/monitors.xml 設定ファイルに追加する代替案もあります。例:\n\n```\n~/.config/monitors.xml\n```\n\n```\n<monitors version=\"2\">\n  <configuration>\n    <layoutmode>logical</layoutmode>\n    <logicalmonitor>\n      <x>0</x>\n      <y>0</y>\n      <primary>yes</primary>\n      <monitor>\n        <monitorspec>\n          <connector>HDMI-1</connector>\n          <vendor>MetaProduct's Inc.</vendor>\n          <product>MetaMonitor</product>\n          <serial>0x123456</serial>\n        </monitorspec>\n        <mode>\n          <width>1920</width>\n          <height>1080</height>\n          <rate>60.000</rate>\n        </mode>\n        <rgbrange>full</rgbrange>\n      </monitor>\n    </logicalmonitor>\n  </configuration>\n</monitors>\n```\n\n- ディスプレイのレンジが変わったり、その他の方法でディスプレイの設定が変更されたりした場合、新しいレイアウトが <rgbrange>full</rgbrange> タグ無しで monitors.xml に追加されるかもしれません。異なるレイアウトでも RGB レンジを一貫して設定するために、論理モニタの全てのエントリにこのタグを追加することを検討してください。\n- GDM ログイン画面がフル RGB レンジを使用していない場合、ユーザーの monitors.xml を gdm のホームディレクトリにコピーしてください。GDM#デフォルトのモニター設定をセットアップする を参照してください。\n\n"
    },
    {
      "title": "X11/Xorg での色の問題を修正する",
      "level": 4,
      "content": "```\n# xrandr --output NAME_OF_YOUR_OUTPUT --set \"Broadcast RGB\" \"Full\"\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- https://01.org/linuxgraphics/documentation (サポートされているハードウェア一覧など)\n\n"
    }
  ]
}