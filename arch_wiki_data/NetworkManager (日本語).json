{
  "title": "NetworkManager (日本語)",
  "url": "https://wiki.archlinux.org/title/NetworkManager_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ネットワーク設定\n- ワイヤレスネットワーク設定\n\nNetworkManager は、システムがネットワークに自動的に接続できるようにするためにネットワークの検出と設定の機能を提供するプログラムです。NetworkManager の機能は無線ネットワークと有線ネットワークの両方で有用です。無線ネットワークでは、NetworkManager は既知の無線ネットワークを優先するようになっており、最も信頼性のあるネットワークに切り替える機能もあります。NetworkManager 対応のアプリケーションはオンラインモードとオフラインモードの切り替えが可能です。また、NetworkManager は無線接続よりも有線接続を優先するようになっており、モデム接続と特定の種類の VPN に対応しています。NetworkManager は元々 Red Hat によって開発されていましたが、現在では GNOME プロジェクトによってホストされています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 NetworkManager を有効化する 1.2 追加のインターフェイス 1.3 モバイルブロードバンドサポート 1.4 PPPoE / DSL サポート 1.5 VPN サポート\n- 2 使い方 2.1 nmcli 例 2.2 接続を編集する 2.3 nmtui\n- 3 フロントエンド 3.1 GNOME 3.2 KDE Plasma 3.3 nm-applet 3.3.1 Appindicator 3.4 networkmanager-dmenu 3.5 switchboard\n- 4 設定 4.1 NetworkManager-wait-online 4.2 PolicyKit のパーミッションをセットアップする 4.3 プロクシ設定 4.4 接続の確認 4.5 キャプティブポータル 4.6 DHCP クライアント 4.7 DNS の管理 4.7.1 DNS キャッシングと条件付きフォワーディング 4.7.1.1 dnsmasq 4.7.1.1.1 dnsmasq のカスタム設定 4.7.1.1.2 IPv6 4.7.1.1.3 DNSSEC 4.7.1.2 systemd-resolved 4.7.1.3 openresolv サブスクライバのある DNS リゾルバ 4.7.2 カスタム DNS サーバ 4.7.2.1 カスタムグローバル DNS サーバの設定 4.7.2.2 接続でのカスタム DNS サーバの設定 4.7.2.2.1 接続でのカスタム DNS サーバの設定 (GUI) 4.7.2.2.2 接続でのカスタム DNS サーバの設定 (nmcli / 設定ファイル) 4.7.3 /etc/resolv.conf 4.7.3.1 管理対象外の /etc/resolv.conf 4.7.3.2 openresolv を使う 4.8 ファイアウォール\n- 5 ネットワークサービスで NetworkManager dispatcher を使用する 5.1 ディスパッチャのタイムアウトを防ぐ 5.2 ディスパッチャの例 5.2.1 タイムゾーンを自動的に設定する 5.2.2 sshfs でリモートディレクトリをマウントする 5.2.3 SMB 共有をマウントする 5.2.4 NFS 共有をマウントする 5.2.5 ディスパッチャを使って、LAN ケーブルが挿入されているかに応じて Wi-Fi を自動的にオンオフする 5.2.6 ディスパッチャを使って、ネットワーク接続が確立された後に VPN に接続する 5.2.7 ディスパッチャを使って、VPN プロバイダの接続時に IPv6 を無効化する 5.2.8 OpenNTPD 5.2.9 systemd-timesyncd で DHCP 経由で受信した NTP サーバを動的に設定する\n- 6 テスト\n- 7 ヒントとテクニック 7.1 Wi-Fi パスワードの暗号化 7.1.1 GNOME Keyring を使う 7.1.2 KDE Wallet を使う 7.2 Wi-Fi でインターネット接続を共有する 7.3 イーサネットでインターネット接続を共有する 7.4 cron ジョブやスクリプトでネットワークが立ち上がっているか確認する 7.5 ブート時にシークレットを使ってネットワークに接続する 7.6 OpenConnect で KWallet 内のパスワードを使う 7.7 特定のデバイスを無視する 7.8 MAC アドレスのランダム化を設定する 7.9 IPv6 プライバシー拡張を有効にする 7.10 接続ごとに一意の DUID を設定する 7.11 有線接続の操作 7.12 Wi-Fi バックエンドとして iwd を使用する 7.13 ネットワーク名前空間内で実行する 7.14 VPN に自動的に接続する\n- 8 トラブルシューティング 8.1 セキュアな Wi-Fi ネットワークのパスワードプロンプトが表示されない 8.2 Network management disabled 8.3 内蔵 DHCP クライアントに関する問題 8.4 dhclient における DHCP の問題 8.5 3G モデムが検知されない 8.6 ノートパソコンで WLAN をオフにする 8.7 固定 IP アドレスの設定が DHCP に戻る 8.8 通常ユーザとして接続を編集できない 8.9 隠されたワイヤレスネットワークを削除する 8.10 VPN が GNOME で動作しない 8.11 検出されてはいるのにヨーロッパのワイヤレスネットワークに接続できない 8.12 ブート時の VPN への自動接続が機能しない 8.13 Systemd のボトルネック 8.14 定期的なネットワーク接続断、遅延、パケットロス (Wi-Fi) 8.15 Lenovo ラップトップ (IdeaPad、Legion など) で Wi-Fi をオンにできない 8.16 ホスト名の送信をオフにする 8.17 nm-applet が i3wm で消える 8.18 Unit dbus-org.freedesktop.resolve1.service not found 8.19 Secrets were required, but not provided 8.20 iwd での WPA Enterprise 接続 8.21 Failed to request VPN secrets 8.22 OpenVPN 接続が \"secrets: failed to request VPN secrets\" という警告で失敗する 8.23 OpenSSL の \"ca md too weak\" エラーで OpenVPN の接続に失敗する 8.24 OpenSSL の \"unsupported protocol\" エラーで WPA Enterprise の接続の認証に失敗する\n- 9 参照\n\n- 1.1 NetworkManager を有効化する\n- 1.2 追加のインターフェイス\n- 1.3 モバイルブロードバンドサポート\n- 1.4 PPPoE / DSL サポート\n- 1.5 VPN サポート\n\n- 2.1 nmcli 例\n- 2.2 接続を編集する\n- 2.3 nmtui\n\n- 3.1 GNOME\n- 3.2 KDE Plasma\n- 3.3 nm-applet 3.3.1 Appindicator\n- 3.4 networkmanager-dmenu\n- 3.5 switchboard\n\n- 3.3.1 Appindicator\n\n- 4.1 NetworkManager-wait-online\n- 4.2 PolicyKit のパーミッションをセットアップする\n- 4.3 プロクシ設定\n- 4.4 接続の確認\n- 4.5 キャプティブポータル\n- 4.6 DHCP クライアント\n- 4.7 DNS の管理 4.7.1 DNS キャッシングと条件付きフォワーディング 4.7.1.1 dnsmasq 4.7.1.1.1 dnsmasq のカスタム設定 4.7.1.1.2 IPv6 4.7.1.1.3 DNSSEC 4.7.1.2 systemd-resolved 4.7.1.3 openresolv サブスクライバのある DNS リゾルバ 4.7.2 カスタム DNS サーバ 4.7.2.1 カスタムグローバル DNS サーバの設定 4.7.2.2 接続でのカスタム DNS サーバの設定 4.7.2.2.1 接続でのカスタム DNS サーバの設定 (GUI) 4.7.2.2.2 接続でのカスタム DNS サーバの設定 (nmcli / 設定ファイル) 4.7.3 /etc/resolv.conf 4.7.3.1 管理対象外の /etc/resolv.conf 4.7.3.2 openresolv を使う\n- 4.8 ファイアウォール\n\n- 4.7.1 DNS キャッシングと条件付きフォワーディング 4.7.1.1 dnsmasq 4.7.1.1.1 dnsmasq のカスタム設定 4.7.1.1.2 IPv6 4.7.1.1.3 DNSSEC 4.7.1.2 systemd-resolved 4.7.1.3 openresolv サブスクライバのある DNS リゾルバ\n- 4.7.2 カスタム DNS サーバ 4.7.2.1 カスタムグローバル DNS サーバの設定 4.7.2.2 接続でのカスタム DNS サーバの設定 4.7.2.2.1 接続でのカスタム DNS サーバの設定 (GUI) 4.7.2.2.2 接続でのカスタム DNS サーバの設定 (nmcli / 設定ファイル)\n- 4.7.3 /etc/resolv.conf 4.7.3.1 管理対象外の /etc/resolv.conf 4.7.3.2 openresolv を使う\n\n- 4.7.1.1 dnsmasq 4.7.1.1.1 dnsmasq のカスタム設定 4.7.1.1.2 IPv6 4.7.1.1.3 DNSSEC\n- 4.7.1.2 systemd-resolved\n- 4.7.1.3 openresolv サブスクライバのある DNS リゾルバ\n\n- 4.7.1.1.1 dnsmasq のカスタム設定\n- 4.7.1.1.2 IPv6\n- 4.7.1.1.3 DNSSEC\n\n- 4.7.2.1 カスタムグローバル DNS サーバの設定\n- 4.7.2.2 接続でのカスタム DNS サーバの設定 4.7.2.2.1 接続でのカスタム DNS サーバの設定 (GUI) 4.7.2.2.2 接続でのカスタム DNS サーバの設定 (nmcli / 設定ファイル)\n\n- 4.7.2.2.1 接続でのカスタム DNS サーバの設定 (GUI)\n- 4.7.2.2.2 接続でのカスタム DNS サーバの設定 (nmcli / 設定ファイル)\n\n- 4.7.3.1 管理対象外の /etc/resolv.conf\n- 4.7.3.2 openresolv を使う\n\n- 5.1 ディスパッチャのタイムアウトを防ぐ\n- 5.2 ディスパッチャの例 5.2.1 タイムゾーンを自動的に設定する 5.2.2 sshfs でリモートディレクトリをマウントする 5.2.3 SMB 共有をマウントする 5.2.4 NFS 共有をマウントする 5.2.5 ディスパッチャを使って、LAN ケーブルが挿入されているかに応じて Wi-Fi を自動的にオンオフする 5.2.6 ディスパッチャを使って、ネットワーク接続が確立された後に VPN に接続する 5.2.7 ディスパッチャを使って、VPN プロバイダの接続時に IPv6 を無効化する 5.2.8 OpenNTPD 5.2.9 systemd-timesyncd で DHCP 経由で受信した NTP サーバを動的に設定する\n\n- 5.2.1 タイムゾーンを自動的に設定する\n- 5.2.2 sshfs でリモートディレクトリをマウントする\n- 5.2.3 SMB 共有をマウントする\n- 5.2.4 NFS 共有をマウントする\n- 5.2.5 ディスパッチャを使って、LAN ケーブルが挿入されているかに応じて Wi-Fi を自動的にオンオフする\n- 5.2.6 ディスパッチャを使って、ネットワーク接続が確立された後に VPN に接続する\n- 5.2.7 ディスパッチャを使って、VPN プロバイダの接続時に IPv6 を無効化する\n- 5.2.8 OpenNTPD\n- 5.2.9 systemd-timesyncd で DHCP 経由で受信した NTP サーバを動的に設定する\n\n- 7.1 Wi-Fi パスワードの暗号化 7.1.1 GNOME Keyring を使う 7.1.2 KDE Wallet を使う\n- 7.2 Wi-Fi でインターネット接続を共有する\n- 7.3 イーサネットでインターネット接続を共有する\n- 7.4 cron ジョブやスクリプトでネットワークが立ち上がっているか確認する\n- 7.5 ブート時にシークレットを使ってネットワークに接続する\n- 7.6 OpenConnect で KWallet 内のパスワードを使う\n- 7.7 特定のデバイスを無視する\n- 7.8 MAC アドレスのランダム化を設定する\n- 7.9 IPv6 プライバシー拡張を有効にする\n- 7.10 接続ごとに一意の DUID を設定する\n- 7.11 有線接続の操作\n- 7.12 Wi-Fi バックエンドとして iwd を使用する\n- 7.13 ネットワーク名前空間内で実行する\n- 7.14 VPN に自動的に接続する\n\n- 7.1.1 GNOME Keyring を使う\n- 7.1.2 KDE Wallet を使う\n\n- 8.1 セキュアな Wi-Fi ネットワークのパスワードプロンプトが表示されない\n- 8.2 Network management disabled\n- 8.3 内蔵 DHCP クライアントに関する問題\n- 8.4 dhclient における DHCP の問題\n- 8.5 3G モデムが検知されない\n- 8.6 ノートパソコンで WLAN をオフにする\n- 8.7 固定 IP アドレスの設定が DHCP に戻る\n- 8.8 通常ユーザとして接続を編集できない\n- 8.9 隠されたワイヤレスネットワークを削除する\n- 8.10 VPN が GNOME で動作しない\n- 8.11 検出されてはいるのにヨーロッパのワイヤレスネットワークに接続できない\n- 8.12 ブート時の VPN への自動接続が機能しない\n- 8.13 Systemd のボトルネック\n- 8.14 定期的なネットワーク接続断、遅延、パケットロス (Wi-Fi)\n- 8.15 Lenovo ラップトップ (IdeaPad、Legion など) で Wi-Fi をオンにできない\n- 8.16 ホスト名の送信をオフにする\n- 8.17 nm-applet が i3wm で消える\n- 8.18 Unit dbus-org.freedesktop.resolve1.service not found\n- 8.19 Secrets were required, but not provided\n- 8.20 iwd での WPA Enterprise 接続\n- 8.21 Failed to request VPN secrets\n- 8.22 OpenVPN 接続が \"secrets: failed to request VPN secrets\" という警告で失敗する\n- 8.23 OpenSSL の \"ca md too weak\" エラーで OpenVPN の接続に失敗する\n- 8.24 OpenSSL の \"unsupported protocol\" エラーで WPA Enterprise の接続の認証に失敗する\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "NetworkManager は networkmanager パッケージでインストールできます。このパッケージには、デーモン、コマンドラインインターフェイス (nmcli)、そして curses ベースのインターフェイス (nmtui) が含まれています。\n\n"
    },
    {
      "title": "NetworkManager を有効化する",
      "level": 3,
      "content": "インストールしたら、NetworkManager.service を起動/有効化する必要があります。NetworkManager デーモンが起動すると、既に構成されている利用可能な \"システム接続\" に自動的に接続します。\"ユーザ接続\" や未構成の接続を設定したり接続したりするには、nmcli やアプレットが必要です。\n\n- 各ネットワークインターフェイスは、ただ一つの DHCP クライアントあるいはネットワークマネージャのみで管理する必要があります。つまり、システム上には複数の DHCP クライアントあるいはネットワークマネージャを動かすべきではありません。現在実行中のサービスのリストを systemctl --type=service で確認し、競合しているサービスを停止あるいは再設定してください。\n- systemd-resolved が起動されていない場合、エラーメッセージがログに溢れ始めます。詳細は #Unit dbus-org.freedesktop.resolve1.service not found を見てください。\n\n"
    },
    {
      "title": "追加のインターフェイス",
      "level": 3,
      "content": "- nm-connection-editor: グラフィカルユーザインターフェイス。\n- network-manager-applet: システムトレイアプレット (nm-applet)。\n\n"
    },
    {
      "title": "モバイルブロードバンドサポート",
      "level": 3,
      "content": "NetworkManager はモバイルブロードバンド接続のサポートに ModemManager を使用します。\n\nmodemmanager と usb_modeswitch をインストールしてください。その後、ModemManager.service を有効化し、起動してください。\n\nModemManager を認識させるために NetworkManager.service を再起動する必要がある場合があります。サービスを再起動し、モデムを挿し直せば、認識されるはずです。\n\nフロントエンド (例えば nm-connection-editor) から接続を追加し、接続タイプにモバイルブロードバンドを選択してください。ISP と料金プランを選んだら、APN とその他の設定が mobile-broadband-provider-info にある情報で自動的に書き込まれるはずです。\n\n"
    },
    {
      "title": "PPPoE / DSL サポート",
      "level": 3,
      "content": "PPPoE / DSL サポートに関しては ppp をインストールしてください。PPPoE 接続を追加するには、nm-connection-editor を使って新しい DSL/PPPoE 接続を追加してください。\n\n"
    },
    {
      "title": "VPN サポート",
      "level": 3,
      "content": "NetworkManager 1.16 から WireGuard のネイティブなサポートが追加されました。必要なのは wireguard カーネルモジュールだけです。詳細は NetworkManager のブログ記事の WireGuard を見てください。\n\nその他の VPN タイプに対するサポートはプラグインなシステムをベースとしています。以下のパッケージで提供されています:\n\n- networkmanager-openconnect: OpenConnect 用\n- networkmanager-openvpn: OpenVPN 用\n- networkmanager-pptp: PPTP クライアント用\n- networkmanager-strongswan: strongSwan 用\n- networkmanager-vpnc\n- networkmanager-fortisslvpnAUR\n- networkmanager-iodine-gitAUR\n- networkmanager-libreswanAUR\n- networkmanager-l2tp\n- networkmanager-ssh-gitAUR\n- network-manager-sstp\n\n- VPN 使用時に DNS 解決を完全に機能させるには、条件付きフォワーディングをセットアップする必要があります。\n- これらのプラグインは、ドキュメント化されたコマンドラインインターフェイスが存在しなかったり、アプレットが実行されていないと全く動作しなかったりする場合があります。通常のデスクトップ環境を使用している場合には問題になりません。通常とは異なるものを使用している場合は、接続を設定したりアクティブ化したりする際に必要なダイアログが表示されるようにするために #nm-applet を実行するべきです。[1]\n\n"
    },
    {
      "title": "使い方",
      "level": 2,
      "content": "NetworkManager には nmcli(1) と nmtui(1) が付属しています。\n\n"
    },
    {
      "title": "nmcli 例",
      "level": 3,
      "content": "近くの Wi-Fi ネットワークを一覧表示します:\n\n```\n$ nmcli device wifi list\n```\n\nWi-Fi ネットワークに接続します:\n\n```\n$ nmcli device wifi connect SSID_または_BSSID password パスワード\n```\n\n非表示の Wi-Fi ネットワークに接続します:\n\n```\n$ nmcli device wifi connect SSID_または_BSSID password パスワード hidden yes\n```\n\nwlan1 インターフェイスで Wi-Fi に接続します:\n\n```\n$ nmcli device wifi connect SSID_または_BSSID password パスワード ifname wlan1 プロファイル名\n```\n\nインターフェイスを切断します:\n\n```\n$ nmcli device disconnect ifname eth0\n```\n\n名前、UUID、タイプ、バッキングデバイスを含む接続のリストを取得します:\n\n```\n$ nmcli connection show\n```\n\n接続を有効にします (つまり、既存のプロファイルでネットワークに接続します):\n\n```\n$ nmcli connection up 名前_または_uuid\n```\n\n接続を削除します:\n\n```\n$ nmcli connection delete 名前_または_uuid\n```\n\nネットワークデバイスとその状態のリストを表示します:\n\n```\n$ nmcli device\n```\n\nWi-Fi をオフにします:\n\n```\n$ nmcli radio wifi off\n```\n\n"
    },
    {
      "title": "接続を編集する",
      "level": 3,
      "content": "設定の包括的なリストについては、nm-settings(5) を参照してください。\n\nまず、接続のリストを取得する必要があります:\n\n```\n$ nmcli connection\n```\n\n```\nNAME                UUID                                  TYPE      DEVICE\n有線接続 2          e7054040-a421-3bef-965d-bb7d60b7cecf  ethernet  enp5s0\n有線接続 1          997f2782-f0fc-301d-bfba-15421a2735d8  ethernet  enp0s25\nMY-HOME-WIFI-5G     92a0f7b3-2eba-49ab-a899-24d83978f308  wifi       --\n```\n\nここでは、後で使用する接続 ID として最初の列を使用できます。この例では、有線接続 2 を接続 ID として選択します。\n\n作成後に接続 有線接続 2 を設定するには、次の3つの方法があります:\n\n設定を削除するには、次のように空のフィールド (\"\") を渡します:\n\n"
    },
    {
      "title": "nmtui",
      "level": 3,
      "content": "NetworkManager には、接続、システムのホスト名、無線切り替え管理のためのテキストユーザインタフェース (TUI) が付いています。nmtui と実行することで起動できます。\n\n"
    },
    {
      "title": "フロントエンド",
      "level": 2,
      "content": "デスクトップ環境と統合するために、ほとんどのユーザはアプレットをインストールしたいと考えるでしょう。アプレットはネットワークの選択や設定を容易にするだけでなく、機密情報をセキュアに保存するために必要なエージェントも提供します。様々なデスクトップ環境は独自のアプレットを持っています。デスクトップ環境に独自のアプレットが存在しない場合、#nm-applet を使用することもできます。\n\n"
    },
    {
      "title": "GNOME",
      "level": 3,
      "content": "GNOME にはツールが内蔵されており、ネットワーク設定からアクセス可能です。\n\n"
    },
    {
      "title": "KDE Plasma",
      "level": 3,
      "content": "plasma-nm パッケージをインストールしてください。その後、パネルオプション > ウィジェットを追加 > ネットワーク で KDE タスクバーにアプレットを追加してください。\n\n"
    },
    {
      "title": "nm-applet",
      "level": 3,
      "content": "network-manager-applet は、システムトレイのある Xorg 環境で機能する GTK 3 フロントエンドです。\n\n接続に関する機密情報 (Wi-Fi のパスワードなど) を保存するには、Secret Service D-Bus API を実装しているアプリケーション (GNOME/Keyring、KDE Wallet、KeePassXC など) をインストールし設定してください。\n\n接続の設定で Make available to other users チェックボックスオプションを有効化すると、NetworkManager はその接続のパスワードを平文で保存することに注意してください。とはいえ、パスワードが含まれるファイルは root (及び nm-applet を通して他のユーザ) からしかアクセスできません。#Wi-Fi パスワードの暗号化 を見てください。\n\ntrayer か stalonetray を使うことで、システムトレイ無しで nm-applet を実行することができます。例えば、以下のようなスクリプトをパスに追加することができます:\n\n```\nnmgui\n```\n\n```\n#!/bin/sh\nnm-applet    2>&1 > /dev/null &\nstalonetray  2>&1 > /dev/null\nkillall nm-applet\n```\n\nstalonetray のウィンドウを閉じると、nm-applet も閉じます。なので、ネットワークの設定を終えたら余分なメモリが消費されることはありません。\n\nこのアプレットは、Wi-Fi ネットワークの接続や切断などのイベントの通知を表示することができます。これらの通知を表示させるには、通知サーバがインストールされている必要があります (デスクトップ通知 を見てください)。アプレットを通知サーバ無しで使うと、標準出力や標準エラー出力にメッセージが表示され、最悪、アプレットがハングするかもしれません。[2] を参照してください。\n\n通知を無効化した状態で nm-applet を実行するには、アプレットを以下のコマンドで起動してください:\n\n```\n$ nm-applet --no-agent\n```\n\n```\nExec=nm-applet --no-agent\n```\n\n"
    },
    {
      "title": "Appindicator",
      "level": 4,
      "content": "バージョン 1.18.0 から、Appindicator のサポートが公式の network-manager-applet パッケージで利用可能になりました。nm-applet を Appindicator の環境で使うには、アプレットを以下のコマンドで起動してください:\n\n```\n$ nm-applet --indicator\n```\n\n"
    },
    {
      "title": "networkmanager-dmenu",
      "level": 3,
      "content": "フロントエンドのもう一つの選択肢は networkmanager-dmenu-gitAUR です。これは、NetworkManager の接続を nm-applet ではなく dmenu や rofi で管理する小さなスクリプトです。このスクリプトには必須の機能が全て揃っています。例えば: NetworkManager の既存の Wi-Fi 接続や有線接続に接続する、新しい Wi-Fi 接続に接続する、必要に応じてパスフレーズを要求する、既存の VPN 接続に接続する、ネットワークを有効化/無効化する、nm-connection-editor GUI を起動する、Bluetooth ネットワークに接続する。\n\n"
    },
    {
      "title": "switchboard",
      "level": 3,
      "content": "Pantheon の switchboard は、switchboard-plug-network と nm-connection-editor と組み合わせて使えば、NetworkManager を設定するためのデスクトップ環境に依存しない方法になります。以下のコマンドで実行できます:\n\n```\n$ io.elementary.settings\n```\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "NetworkManager を適切に実行させるには、いくつか追加の手順が必要です。ネットワーク設定#ホスト名の設定 で説明されているように、/etc/hosts が設定されていることを確認してください。\n\nNetworkManager のグローバルな設定ファイルは /etc/NetworkManager/NetworkManager.conf です。追加の設定ファイルは /etc/NetworkManager/conf.d/ に置くことができます。通常、グローバルなデフォルト値に対して設定を行う必要はありません。\n\n設定ファイルを編集したら、以下のコマンドで変更を適用することができます:\n\n```\n# nmcli general reload\n```\n\n"
    },
    {
      "title": "NetworkManager-wait-online",
      "level": 3,
      "content": "NetworkManager.service を有効化すると、NetworkManager-wait-online.service も有効化されます。NetworkManager-wait-online.service は oneshot なシステムサービスで、ネットワークが構成されるまで待機します。このサービスには WantedBy=network-online.target が含まれているため、このサービスが終了するのは、network-online.target 自体が有効化されている時か、あるいは network-online.target が他のユニットによって実行された時のみです。systemd#ネットワークが稼働した後にサービスを実行する も参照してください。\n\nデフォルトでは、NetworkManager-wait-online.service は、ネットワーク接続が確立されるのを待つ (nm-online(1) を参照) のではなく、NetworkManager の起動が完了するのを待ちます。ネットワークの準備が整う前に NetworkManager-wait-online.service が終了してしまってブート時に一部のサービスが失敗してしまう場合、NetworkManager-wait-online.service ユニットを拡張し、ExecStart 行から -s を削除してください:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/nm-online -q\n```\n\nただし、これにより他の問題が発生する可能性があることに注意してください。\n\n一部のケースで、タイムアウトの設定が短すぎるために、このサービスの起動が失敗してしまう場合があります。サービスを編集して NM_ONLINE_TIMEOUT を 60 からより大きい値に変更してください。\n\n"
    },
    {
      "title": "PolicyKit のパーミッションをセットアップする",
      "level": 3,
      "content": "デフォルトでは、アクティブなローカルセッションのユーザは全員パスワード無しでほぼ全てのネットワーク設定を変更することができます。セッションの種類を確認する方法については、一般的なトラブルシューティング#セッションのパーミッション を見てください。ほとんどの場合、特に設定しなくても全て動作するはずです。\n\n一部のアクション (システムのホスト名を変更するなど) においては、管理者のパスワードが必要です。そのような場合、自身のユーザを wheel グループに追加し、パスワードのプロンプトを表示する Polkit の認証エージェントを実行する必要があります。\n\nリモートセッションの場合 (例えば、ヘッドレス VNC)、NetworkManager を使用するために必要な特権を得る方法は複数あります:\n\n1. 自身を wheel グループに追加する。アクションの度にパスワードを入力する必要があります。注意点として、wheel グループに追加すると他の権限 (root パスワードを入力せずに sudo を実行できるなど) も付与される場合があります。\n1. 自身を network グループに追加し、以下の内容で /etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules を作成する: polkit.addRule(function(action, subject) { if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) { return polkit.Result.YES; } }); network グループ内の全ユーザがパスワード無しでネットワークの追加と削除を行えるようになります (これは、Polkit 認証エージェントを実行する必要がないことを意味します。なので、この方法は SSH セッションでも使えます。)。\n\n```\npolkit.addRule(function(action, subject) {\n  if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) {\n    return polkit.Result.YES;\n  }\n});\n```\n\n"
    },
    {
      "title": "プロクシ設定",
      "level": 3,
      "content": "NetworkManager はプロキシに関するいくつかの設定をサポートしています。それらは nmtui から直接変更することはできませんが、nm-applet と nmcli はそれらをサポートしています。\n\nプロキシの設定項目は nm-settings-nmcli(5) を参照してください。\n\nまた、ディスパッチャスクリプトを使うことでカスタムのプロキシコマンドを常時実行することができます。#ディスパッチャの例 を参照してください。\n\n参照: プロキシ設定\n\n"
    },
    {
      "title": "接続の確認",
      "level": 3,
      "content": "NetworkManager は、ネットワークに接続した後にウェブサーバへの接続を試みて、キャプティブポータルなどが存在しないか確認します。デフォルトの接続先ホスト (/usr/lib/NetworkManager/conf.d/20-connectivity.conf で設定されています) は ping.archlinux.org (redirect.archlinux.org の CNAME エイリアス) です。別のウェブサーバを使う、または接続チェックを無効化するには、/etc/NetworkManager/conf.d/20-connectivity.conf を作成してください (NetworkManager.conf(5) § CONNECTIVITY SECTION を参照)。以下は、GNOME のサーバを使用する例です (GNOME を使用する必要はありません):\n\n```\n/etc/NetworkManager/conf.d/20-connectivity.conf\n```\n\n```\n[connectivity]\nuri=http://nmcheck.gnome.org/check_network_status.txt\n```\n\nNetworkManager の接続チェックを無効化するには、以下の設定を使用してください。これは、接続チェックを無効化する VPN に接続している場合に便利です。\n\n```\n/etc/NetworkManager/conf.d/20-connectivity.conf\n```\n\n```\n[connectivity]\nenabled=false\n```\n\n"
    },
    {
      "title": "キャプティブポータル",
      "level": 3,
      "content": "キャプティブポータルが存在している場合、デスクトップマネージャが、資格情報を求めるウィンドウを自動的に開く場合があります。あなたのデスクトップ環境がこれを行わない場合、capnet-assist パッケージを使用することができます (しかし現在、このパッケージの NetworkManager ディスパッチャスクリプトは壊れています)。あるいは、NetworkManager ディスパッチャスクリプトを以下の内容で作成することもできます:\n\n```\n/etc/NetworkManager/dispatcher.d/90-open_captive_portal\n```\n\n```\n#!/bin/sh -e\n# Script to dispatch NetworkManager events\n#\n# Runs shows a login webpage on walled garden networks.\n# See NetworkManager(8) for further documentation of the dispatcher events.\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nif [ -x \"/usr/bin/logger\" ]; then\n    logger=\"/usr/bin/logger -s -t captive-portal\"\nelse\n    logger=\":\"\nfi\n\nwait_for_process() {\n    PNAME=$1\n    while [ -z \"$(/usr/bin/pgrep $PNAME)\" ]; do\n        sleep 3;\n    done\n}\n\n#launch the browser, but on boot we need to wait that nm-applet starts\nstart_browser() {\n    local user=\"$1\"\n    local display=\"$2\"\n\n    export DISPLAY=\"$display\"\n    wait_for_process nm-applet\n\n    export XAUTHORITY=\"/home/$user/.Xauthority\"\n\n    $logger \"Running browser as '$user' with display '$display' to login in captive portal\"\n    sudo -u \"$user\" --preserve-env=DISPLAY,XAUTHORITY -H xdg-open http://capnet.elementary.io 2>&1 > /dev/null\n}\n\n# Run the right scripts\ncase \"$2\" in\n    connectivity-change)\n    $logger -p user.debug \"dispatcher script triggered on connectivity change: $CONNECTIVITY_STATE\"\n    if [ \"$CONNECTIVITY_STATE\" = \"PORTAL\" ]; then\n        # Match last column of who's output with ' :[at least one digit] '\n        who | awk '$NF ~ /\\(:[0-9]+\\)/ { print $1 \" \" substr($NF, 2, length($NF)-2) };' | \\\n        while read user display; do\n            start_browser $user $display || $logger -p user.err \"Failed for user: '$user' display: '$display'\"\n        done\n    fi\n    ;;\n    *)\n    # In a down phase\n    exit 0\n    ;;\nesac\n```\n\nスクリプトには実行可能属性を付与してください。しかし、このスクリプトは X が使用されていることを仮定しており、単純に http ページを開きます。必ずしも動作するとは限らないかもしれません。\n\nこのスクリプトを実行するには、NetworkManager.service を再起動するか、システムを再起動する必要があります。そうしたら、ディスパッチャスクリプトはキャプティブポータルを検知するとログインウィンドウを開くはずです。\n\n簡潔な解決策は captive-portal-sh です。これはキャプティブポータル URL を取得し、デフォルトのブラウザで開くシェルスクリプトです (Wayland のみ)。\n\n別の解決策は Google Chrome ベースの captive-browser-gitAUR です。\n\n"
    },
    {
      "title": "DHCP クライアント",
      "level": 3,
      "content": "デフォルトでは、NetworkManager は自身の内蔵 DHCP クライアントを使用します。内蔵 DHCPv4 プラグインは nettools の n-dhcp4 ライブラリをベースにしていますが、内蔵 DHCPv6 プラグインは systemd-networkd ベースのコードから作られています。\n\n別の DHCP クライアントを使用するには、以下の代替実装のどれかをインストールしてください:\n\n- dhcpcd - dhcpcd\n- dhclient - dhclient\n\nDHCP クライアントのバックエンドを変更するには、/etc/NetworkManager/conf.d/ 内に設定ファイルを作成して、そのファイル内で main.dhcp=DHCP_クライアント名 オプションを設定してください。例えば:\n\n```\n/etc/NetworkManager/conf.d/dhcp-client.conf\n```\n\n```\n[main]\ndhcp=dhcpcd\n```\n\ndhclient パッケージと dhcpcd パッケージに同梱されている systemd ユニットは有効化しないでください。NetworkManager と競合してしまいます。詳細は #インストール セクションに書かれているノートを見てください。\n\n"
    },
    {
      "title": "DNS の管理",
      "level": 3,
      "content": "NetworkManager の DNS 管理については、GNOME プロジェクトの wiki ページ Projects/NetworkManager/DNS で説明されています。\n\n"
    },
    {
      "title": "DNS キャッシングと条件付きフォワーディング",
      "level": 4,
      "content": "NetworkManager には、dnsmasq または systemd-resolved を使用して DNS キャッシングと条件付きフォワーディングを有効化するプラグインが存在します (以前は、\"条件付きフォワーディング\" は NetworkManager のドキュメントで \"split DNS\" と呼ばれていました)。このセットアップには、DNS ルックアップがキャッシュされるので名前解決の時間が短縮され、VPN ホストの DNS ルックアップが、関連する VPN の DNS サーバに転送されるという長所があります。これは、複数の VPN に接続する場合に特に便利です。\n\ndnsmasq がインストールされていることを確認してください。そして、/etc/NetworkManager/conf.d/ 内の設定ファイル (無い場合は作成してください) で main.dns=dnsmasq を設定してください:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=dnsmasq\n```\n\n次に、nmcli general reload を root として実行してください。NetworkManager は自動的に dnsmasq を起動し、/etc/resolv.conf に 127.0.0.1 を追加します。元の DNS サーバは /run/NetworkManager/no-stub-resolv.conf を見れば分かります。dnsmasq が使用されているかどうかは、drill example.com で同じ DNS ルックアップを2度行ってサーバとクエリの時間を計測すれば確認できます。\n\n- dnsmasq.service を起動したり、/etc/dnsmasq.conf を編集したりする必要はありません。NetworkManager は、その systemd サービスを使わず、さらに dnsmasq のデフォルトの設定ファイルを読み込まずに dnsmasq を起動します。\n- NetworkManager によって起動された dnsmasq インスタンスは 127.0.0.1:53 にバインドされます。なので、これと同じアドレスとポートで他のソフトウェア (dnsmasq.service も含む) を実行することはできません。\n\n/etc/NetworkManager/dnsmasq.d/ 内に設定ファイルを作成することで、dnsmasq のカスタム設定を作成することができます。例えば、DNS キャッシュ (RAM 内に格納されます) のサイズを変更するには:\n\n```\n/etc/NetworkManager/dnsmasq.d/cache.conf\n```\n\n```\ncache-size=1000\n```\n\n設定ファイルの構文は以下のコマンドで確認できます:\n\n```\n$ dnsmasq --test --conf-file=/dev/null --conf-dir=/etc/NetworkManager/dnsmasq.d\n```\n\n利用可能な全てのオプションについては dnsmasq(8) を参照してください。\n\nTable content:\nこの記事またはセクションの正確性には問題があります。 理由: NetworkManager は ::1 を /etc/resolv.conf に追加しないため、以下の方法では問題を解決できません。@::1 を手動で drill に渡さない限り、Error: error sending query: No (valid) nameservers defined in the resolver というエラーで失敗します。 (議論: トーク:NetworkManager#)\n\nNetworkManager で dnsmasq を有効化すると、IPv6 のみの DNS ルックアップ (つまり、drill -6 [hostname]) が機能しなくなる場合があります (しかし、それ以外では機能する)。この問題を解決するには、以下のファイルを作成し、IPv6 ループバックもリッスンするように dnsmasq を設定してください:\n\n```\n/etc/NetworkManager/dnsmasq.d/ipv6-listen.conf\n```\n\n```\nlisten-address=::1\n```\n\nさらに、dnsmasq は上流の IPv6 DNS を優先しません。残念ながら、NetworkManager も IPv6 DNS を優先しません (Ubuntu Bug)。回避策は、NetworkManager の設定で IPv6 DNS を無効化することです (IPv4 DNS があると仮定します)。\n\nNetworkManager によってデフォルトで開始される dnsmasq インスタンスは、--proxy-dnssec オプションを渡して開始されるため、DNSSEC を検証しません。なので、上流の DNS サーバからの DNSSEC 情報を何でも信頼します。\n\ndnsmasq に DNSSEC を適切に検証させるには、以下の設定ファイルを作成してください (これにより、DNSSEC をサポートしない名前サーバでの DNS 解決が機能しなくなります):\n\n```\n/etc/NetworkManager/dnsmasq.d/dnssec.conf\n```\n\n```\nconf-file=/usr/share/dnsmasq/trust-anchors.conf\ndnssec\n```\n\nNetworkManager は systemd-resolved を DNS リゾルバ及び DNS キャッシュとして使用することができます。まず先に、systemd-resolved が適切に設定されていて、systemd-resolved.service が開始されていることを確認してください。\n\n/etc/resolv.conf が /run/systemd/resolve/stub-resolv.conf や /run/systemd/resolve/resolv.conf、/usr/lib/systemd/resolv.conf へのシンボリックリンクである場合、systemd-resolved は自動的に使用されます。\n\n/etc/NetworkManager/conf.d/ 内の設定ファイルで main.dns=systemd-resolved を設定することで、これを明示的に有効化することもできます:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=systemd-resolved\n```\n\nローカルの DNS リゾルバへのサブスクライバ (加入者) が openresolv に存在している場合、サブスクライバをセットアップし、openresolv を使用するように NetworkManager を設定してください。\n\nNetworkManager は単一の \"インターフェイス\" を resolvconf に広告するため、2つの NetworkManager 接続間で条件付きフォワーディングを行うのは不可能です。NetworkManager issue 153 を参照してください。\n\nこの問題は /etc/resolvconf.conf で private_interfaces=\"*\" を設定すれば、部分的に緩和できます [5]。検索ドメインリストに無いドメインのクエリは、フォワーディングされません。そのようなクエリは、他の DNS サーバにフォワーディングされるか、DNS ルートサーバから回帰的に解決されるなどして、ローカルのリゾルバの設定に従って処理されます。\n\n"
    },
    {
      "title": "カスタム DNS サーバ",
      "level": 4,
      "content": "全ての接続に対して DNS サーバを設定するには、NetworkManager.conf(5) 内で [global-dns-domain-*] というセクション内で servers=serveripaddress1,serveripaddress2,serveripaddress3 という構文を使ってDNS サーバを指定してください。例えば:\n\n```\n/etc/NetworkManager/conf.d/dns-servers.conf\n```\n\n```\n[global-dns-domain-*]\nservers=::1,127.0.0.1\n```\n\n- NetworkManager の dnsmasq か systemd-resolved プラグイン、または openresolv サブスクライバを使用する場合、servers= オプションにループバックアドレスを指定しないでください。DNS 解決が機能しなくなる可能性があります。\n- 指定されたサーバは systemd-resolved に送られず、接続の DNS サーバが代わりに使用されます。NetworkManager issue 1366 と systemd issue 33754 を参照。\n\nセットアップ方法は、使用するフロントエンドの種類に依ります。手順としては通常、アプレットを右クリックし、プロファイルを編集 (または作成) し、DHCP タイプに 自動 (アドレスのみ) (Automatic (specify addresses)) を選択するというものです。DNS アドレスを入力する必要があり、通常、127.0.0.1, DNS-server-one, ... という形です。\n\nDNS サーバーを接続毎にセットアップするには、接続設定で ipv4.dns と ipv6.dns の設定 (及び、それらに関連する dns-search と dns-options) を変更してください。\n\nmethod が auto に設定されている場合 (DHCP/RA を使用する場合)、ignore-auto-dns を yes に設定する必要があります。\n\nDNS over TLS を使用するには (systemd-resolved が必要です)、dns=ip.address#servername; のようにして DNS サーバーを指定し、さらに connection.dns-over-tls を 2 に設定してください。例えば、Quad9 を使用するには:\n\n```\n/etc/NetworkManager/system-connections/Example Wi-Fi.nmconnection\n```\n\n```\n...\n[connection]\n...\ndns-over-tls=2\n\n[ipv4]\n...\ndns=9.9.9.9#dns.quad9.net;149.112.112.112#dns.quad9.net;\nignore-auto-dns=true\n\n[ipv6]\n...\ndns=2620:fe::fe#dns.quad9.net;2620:fe::9#dns.quad9.net;\nignore-auto-dns=true\n```\n\n"
    },
    {
      "title": "/etc/resolv.conf",
      "level": 4,
      "content": "NetworkManager の /etc/resolv.conf 管理モードは、main.rc-manager で設定されます。networkmanager パッケージはこれを、上流のデフォルトである auto ではなく、symlink に設定します。設定と値は NetworkManager.conf(5) man ページでドキュメント化されています。\n\nまた、NetworkManager は、ネットワークの変更後に /etc/resolv.conf を変更するために使用できる、いわゆるディスパッチャスクリプトを介したフックも提供します。詳細は #ネットワークサービスで NetworkManager dispatcher を使用する と NetworkManager(8) を参照してください。\n\n- NetworkManager が dnsmasq または systemd-resolved のいずれかを使用するように設定されている場合、適切なループバックアドレスが /etc/resolv.conf に書き込まれます。\n- NetworkManager が書き込む resolv.conf、または /etc/resolv.conf に書き込む内容は、/run/NetworkManager/resolv.conf で見られます。\n- 取得したネームサーバーと検索ドメインを含む resolv.conf ファイルは、/run/NetworkManager/no-stub-resolv.conf にあります。\n\nNetworkManager が /etc/resolv.conf に干渉しないようにするには、/etc/NetworkManager/conf.d/ の設定ファイルで main.dns=none を設定してください:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=none\n```\n\nその後、/etc/resolv.conf が壊れたシンボリックリンクになり、削除する必要が生じるかもしれません。その場合、新しい /etc/resolv.conf ファイルを作成してください。\n\n- systemd-resolved を使用する際は main.rc-manager=resolvconf を設定しないでください。代わりに、/etc/resolv.conf シンボリックリンクを適切に作成するか、systemd-resolved を使用するように NetworkManager を明示的に設定してください。\n- systemd-resolved を使用しない場合は、systemd-resolvconf パッケージがインストールされていないことを確認してください。systemd-resolved.service が起動されていないと、このパッケージは、resolvconf を使用する全てのネットワーキングソフトウェア (NetworkManager だけではありません) の機能を破壊します。\n\nopenresolv を使用するように NetworkManager を設定するには、/etc/NetworkManager/conf.d/ 内の設定ファイルで main.rc-manager=resolvconf を設定してください:\n\n```\n/etc/NetworkManager/conf.d/rc-manager.conf\n```\n\n```\n[main]\nrc-manager=resolvconf\n```\n\n"
    },
    {
      "title": "ファイアウォール",
      "level": 3,
      "content": "現在の接続に基づいて firewalld ゾーンを割り当てることができます。たとえば、職場では制限の厳しいファイアウォールを使用し、自宅では制限の少ないファイアウォールを使用します。\n\nこれは、NetworkManager dispatcher を使用して行うこともできます。\n\n"
    },
    {
      "title": "ネットワークサービスで NetworkManager dispatcher を使用する",
      "level": 2,
      "content": "NetworkManager がインターフェイスを立ち上げるまで実行したくないようなネットワークサービスはたくさんあります。NetworkManager には、(例えば NFS や SMB、NTPd を使用する時などに) ネットワークに接続したらサービスを開始し、切断したらサービスを停止する機能があります。\n\nこの機能を有効化するには、NetworkManager-dispatcher.service を有効化し、かつ起動する必要があります。\n\nこのサービスを有効化したら、/etc/NetworkManager/dispatcher.d 内にスクリプトを追加することができます。\n\nスクリプトは root によって所有されていなければなりません。ディスパッチャは、root によって所有されていないスクリプトを実行しません。セキュリティを高めるために、スクリプトのグループ所有権も root に設定してください:\n\n```\n# chown root:root /etc/NetworkManager/dispatcher.d/10-script.sh\n```\n\nスクリプトファイルを実行可能にするのを忘れないでください。\n\nスクリプトは、ネットワークへの接続時にはアルファベット順で実行され、切断時には逆アルファベット順で実行されます。実行される順番を保証するために、スクリプトの名前の前に数字を置くのが一般的です (例: 10-portmap、30-netfs。こうすることで、NFS がマウントを試みる前に、portmapper が立ち上がります)\n\nスクリプトは以下の引数を受け取ります:\n\n- インターフェイス名: 例えば eth0\n- アクション: up、down、vpn-up、vpn-down など (完全なリストは NetworkManager-dispatcher(8) を見てください)\n\n"
    },
    {
      "title": "ディスパッチャのタイムアウトを防ぐ",
      "level": 3,
      "content": "上記がうまくいっているのであれば、このセクションは関係しません。しかし、ディスパッチャのスクリプトの実行に時間が掛かってしまうという一般的な問題があります。最初は、3 秒だけの内部タイムアウトが使用されていました。呼ばれたスクリプトが時間内に完了しないと、そのスクリプトは kill されていました。後に、タイムアウトは約 20 秒に延長されました (詳細は Bugtracker を参照)。タイムアウトのせいで依然として問題が発生する場合は、NetworkManager-dispatcher.service に対するドロップインファイルを使って、終了後もアクティブ状態を維持するように設定することで問題を回避できます:\n\n```\n/etc/systemd/system/NetworkManager-dispatcher.service.d/remain_after_exit.conf\n```\n\n```\n[Service]\nRemainAfterExit=yes\n```\n\nその後、変更した NetworkManager-dispatcher サービスを開始し、かつ有効化してください。\n\n"
    },
    {
      "title": "タイムゾーンを自動的に設定する",
      "level": 4,
      "content": "tzupdateAUR をインストールし、以下の実行可能なスクリプトを作成してください:\n\n```\n/etc/NetworkManager/dispatcher.d/update-timezone.sh\n```\n\n```\n#! /bin/bash\n# Automatically set time zone when connected to the network\niface=$1\naction=$2\n\nif [[ $iface != lo && $action == up ]]; then\n    tz=$(tzupdate -s 1 -p 2>/dev/null)\n    if [[ -n $tz && -r /usr/share/zoneinfo/$tz ]]; then\n\ttimedatectl set-timezone $tz\n    fi\nfi\n```\n\n条件式 $iface != lo は、必要に応じて特定のインターフェイスとマッチするように変更してください。\n\n"
    },
    {
      "title": "sshfs でリモートディレクトリをマウントする",
      "level": 4,
      "content": "このスクリプトは非常に制限された環境内で実行されるため、SSH エージェントに接続するためには SSH_AUTH_SOCK 変数をエクスポートする必要があります。これを行う方法はいくつかあります (詳細はこのメッセージを見てください)。以下の例は GNOME Keyring を使って動作し、キーリングがまだアンロックされていない場合はパスワードを要求します。NetworkManager がログイン時に自動的にネットワークに接続するような状況では、gnome-keyring がまだ開始されておらず、変数のエクスポートが失敗する可能性が高いです (そのために sleep コマンドがあります)。接続とマッチする UUID は、nmcli connection status か nmcli connection list を実行すれば確認できます。\n\n```\n#!/bin/sh\nUSER='username'\nREMOTE='user@host:/remote/path'\nLOCAL='/local/path'\n\ninterface=$1 status=$2\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  case $status in\n    up)\n      # sleep 10\n      SSH_AUTH_SOCK=$(find /tmp -maxdepth 1 -type s -user \"$USER\" -name 'ssh')\n      export SSH_AUTH_SOCK\n      su \"$USER\" -c \"sshfs $REMOTE $LOCAL\"\n      ;;\n    down)\n      fusermount -u \"$LOCAL\"\n      ;;\n  esac\nfi\n```\n\n"
    },
    {
      "title": "SMB 共有をマウントする",
      "level": 4,
      "content": "SMB 共有は特定のネットワークや場所 (例えば自宅) でしか利用できないことがあります。ディスパッチャを使えば、現在の場所で利用可能な SMB 共有のみをマウントすることができます。\n\n以下のスクリプトは、特定のネットワークに接続していることを確認し、それに応じて共有をマウントします:\n\n```\n/etc/NetworkManager/dispatcher.d/30-mount-smb.sh\n```\n\n```\n#!/bin/sh\n\n# 接続 UUID はターミナルで \"nmcli connection show\" を実行して確認してください。\n# 全種類の NetworkManager 接続がサポートされています: 無線、VPN、有線など。\nif [ \"$2\" = \"up\" ]; then\n  if [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n    mount /your/mount/point & \n    # add more shares as needed\n  fi\nfi\n```\n\n以下のスクリプトは、ソフトウェアが特定のネットワークからの切断を開始する前に、全ての SMB 共有をアンマウントします:\n\n```\n/etc/NetworkManager/dispatcher.d/pre-down.d/30-umount-smb.sh\n```\n\n```\n#!/bin/sh\n\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  umount -a -l -t cifs\nfi\n```\n\n以下のスクリプトは、特定のネットワークから予期せずに切断されてしまった時に、全ての SMB 共有のアンマウントを試みます:\n\n```\n/etc/NetworkManager/dispatcher.d/40-umount-smb.sh\n```\n\n```\n#!/bin/sh\n\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  if [ \"$2\" = \"down\" ]; then\n    umount -a -l -t cifs\n  fi\nfi\n```\n\n- NetworkManager 0.9.8 から、pre-down と down のイベントはシャットダウン時や再起動時に実行されなくなりました。詳細はこのバグレポートを見てください。\n- 上記 2 つの umount スクリプトでは、マウントに実際にアクセスしているアプリケーションが 'ハング' してしまう傾向が依然としてあります。\n\n代替案は、NFS#NetworkManager dispatcher を使う にあるスクリプトを使うことです:\n\n```\n/etc/NetworkManager/dispatcher.d/30-smb.sh\n```\n\n```\n#!/bin/sh\n\n# 接続 UUID はターミナルで \"nmcli connection show\" を実行して確認してください。\n# 全種類の NetworkManager 接続がサポートされています: 無線、VPN、有線など。\nWANTED_CON_UUID=\"CHANGE-ME-NOW-9c7eff15-010a-4b1c-a786-9b4efa218ba9\"\n\nif [ \"$CONNECTION_UUID\" = \"$WANTED_CON_UUID\" ]; then\n    \n    # スクリプトパラメータ $1: ネットワークインターフェイス名 (未使用)\n    # スクリプトパラメータ $2: ディスパッチされたイベント\n    \n    case \"$2\" in\n        \"up\")\n            mount -a -t cifs\n            ;;\n        \"down\"|\"pre-down\"|\"vpn-pre-down\")\n            umount -l -a -t cifs >/dev/null\n            ;;\n    esac\nfi\n```\n\npre-down イベントをキャッチできるようにするために /etc/NetworkManager/dispatcher.d/pre-down/ 内にシンボリックリンクを作成してください:\n\n```\n# ln -s ../30-smb.sh /etc/NetworkManager/dispatcher.d/pre-down.d/30-smb.sh\n```\n\n"
    },
    {
      "title": "NFS 共有をマウントする",
      "level": 4,
      "content": "NFS#NetworkManager dispatcher を使う を見てください。\n\n"
    },
    {
      "title": "ディスパッチャを使って、LAN ケーブルが挿入されているかに応じて Wi-Fi を自動的にオンオフする",
      "level": 4,
      "content": "アイディアとしては、LAN ケーブルが抜かれた時にのみ Wi-Fi をオンにし (例えば、ラップトップのドックから取り外された時など)、LAN ケーブルが挿入されたら Wi-Fi を自動的に無効化します。\n\n以下のディスパッチャスクリプトを作成してください[6]。Your_Ethernet_Interface の部分は実際のイーサネットインターフェイスのデバイス名に変更してください。\n\nこのスクリプトを実行可能にすることを忘れないでください。NetworkManager.service を再起動し、ip a を実行して wlp3s0 (実際の Wi-Fi インターフェイス名) が state DOWN であればうまく行っています。予想外の動作が起こった場合は、NetworkManager-dispatcher.service の journal を確認してください。\n\n```\n/etc/NetworkManager/dispatcher.d/99-wifi-auto-toggle\n```\n\n```\n#!/bin/sh\n\nLOG_PREFIX=\"WiFi Auto-Toggle\"\nETHERNET_INTERFACE=\"Your_Ethernet_Interface\"\n\nif [ \"$1\" = \"$ETHERNET_INTERFACE\" ]; then\n    case \"$2\" in\n        up)\n            echo \"$LOG_PREFIX ethernet up\"\n            nmcli radio wifi off\n            ;;\n        down)\n            echo \"$LOG_PREFIX ethernet down\"\n            nmcli radio wifi on\n            ;;\n    esac\nelif [ \"$(nmcli -g GENERAL.STATE device show $ETHERNET_INTERFACE)\" = \"20 (unavailable)\" ]; then\n    echo \"$LOG_PREFIX failsafe\"\n    nmcli radio wifi on\nfi\n```\n\n"
    },
    {
      "title": "ディスパッチャを使って、ネットワーク接続が確立された後に VPN に接続する",
      "level": 4,
      "content": "この例では、特定の Wi-Fi ネットワークに接続した後に、以前定義された VPN 接続に自動的に接続したいと思います。最初にすべきことは、そのネットワークに接続した後にすることを定義するディスパッチャスクリプトを作成することです。\n\nTable content:\nこの記事またはセクションの正確性には問題があります。 理由: A scripting without iwgetid does work too and may be more reliable? (議論: en:Talk:NetworkManager#Fixes for automatic VPN dispatcher script) (議論: トーク:NetworkManager#)\n\n```\n/etc/NetworkManager/dispatcher.d/vpn-up\n```\n\n```\n#!/bin/sh\nVPN_NAME=\"NetworkManager に定義されている VPN 接続の名前\"\nESSID=\"Wi-Fi ネットワークの ESSID (接続名ではない)\"\n\ninterface=$1 status=$2\ncase $status in\n  up|vpn-down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      nmcli connection up id \"$VPN_NAME\"\n    fi\n    ;;\n  down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      if nmcli connection show --active | grep \"$VPN_NAME\"; then\n        nmcli connection down id \"$VPN_NAME\"\n      fi\n    fi\n    ;;\nesac\n```\n\n全ての Wi-Fi ネットワークで VPN への接続を試みたい場合は、次の ESSID 定義を使用できます: ESSID=$(iwgetid -r)。スクリプトのパーミッションを適宜設定することを忘れないでください。\n\nVPN の機密情報が保管される方法により、上記のスクリプトで VPN への接続しようとしても、NetworkManager-dispatcher.service が 'no valid VPN secrets' というエラーで失敗する場合があります。幸運なことに、スクリプトから VPN のパスワードにアクセスする方法は他にもあります。\n\n1: それらの方法の1つでは、VPN 接続の設定ファイルを編集して、root からはアクセスできないキーリングではなく自身で機密情報を保存させるように NetworkManager を設定する必要があります: /etc/NetworkManager/system-connections/VPN接続の名前 を開き、password-flags と secret-flags を 1 から 0 に変更してください。\n\nそれだけではうまく行かない場合は、以下の内容で passwd-file を安全な場所にディスパッチャスクリプトと同じパーミッションと所有権で作成する必要があるかもしれません:\n\n```\n/path/to/passwd-file\n```\n\n```\nvpn.secrets.password:パスワード\n```\n\nファイルからパスワードを得られるようにするために、スクリプトは適宜変更する必要があります:\n\n```\n/etc/NetworkManager/dispatcher.d/vpn-up\n```\n\n```\n#!/bin/sh\nVPN_NAME=\"NetworkManager に定義されている VPN 接続の名前\"\nESSID=\"Wi-Fi ネットワークの ESSID (接続名ではない)\"\n\ninterface=$1 status=$2\ncase $status in\n  up|vpn-down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      nmcli connection up id \"$VPN_NAME\" passwd-file /path/to/passwd-file\n    fi\n    ;;\n  down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      if nmcli connection show --active | grep \"$VPN_NAME\"; then\n        nmcli connection down id \"$VPN_NAME\"\n      fi\n    fi\n    ;;\nesac\n```\n\n2: あるいは、password-flags を変更して、設定ファイル内に vpn-secrets セクションを追加してパスワードを直接書き込むという方法もあります:\n\n```\n[vpn]\n ....\n password-flags=0\n \n [vpn-secrets]\n password=パスワード\n```\n\n"
    },
    {
      "title": "ディスパッチャを使って、VPN プロバイダの接続時に IPv6 を無効化する",
      "level": 4,
      "content": "多くの商用 VPN プロバイダーは IPv4 のみをサポートしています。つまり、IPv6 のトラフィックは全て VPN をバイパスし、事実上、使い物にならなくなります。ディスパッチャを使って、VPN に接続されている時は全ての IPv6 トラフィックを無効化することで、この問題を回避できます。\n\n```\n/etc/NetworkManager/dispatcher.d/10-vpn-ipv6\n```\n\n```\n#!/bin/sh\n\ncase \"$2\" in\n\tvpn-up)\n\t\techo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6\n\t\t;;\n\tvpn-down)\n\t\techo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6\n\t\t;;\nesac\n```\n\n代替案としては、ディスパッチャを使って、VPN 接続に使用しているデバイスの IPv6 モードを一時的に link-local に設定することもできます。これにより、NetworkManager が、IPv6 が無効化されていることについて警告をログに大量出力することを防ぐことができます。このスクリプトは、複数のデバイスや接続が IPv6 接続を提供している場合、動作しません。しかし、複数のデバイスを反復させることで応用することができます。注意点として、接続に対して何らかの変更が加えられた場合 (nmcli(1) やデスクトップ環境の機能を使った場合)、そのデバイスに対する接続全体が再適用され、IPv6 が再有効化されます (その接続で有効化されている場合)。\n\n```\n/etc/NetworkManager/dispatcher.d/10-vpn-ipv6\n```\n\n```\n#!/bin/sh\n\ncase \"$2\" in\n\tvpn-up)\n\t\tnmcli device modify \"${DEVICE_IFACE}\" ipv6.method link-local\n\t\t;;\n\tvpn-down)\n\t\tnmcli device reapply \"${DEVICE_IFACE}\"\n\t\t;;\nesac\n```\n\n"
    },
    {
      "title": "OpenNTPD",
      "level": 4,
      "content": "OpenNTPD#NetworkManager dispatcher を使う を参照してください。\n\n"
    },
    {
      "title": "systemd-timesyncd で DHCP 経由で受信した NTP サーバを動的に設定する",
      "level": 4,
      "content": "異なるネットワーク間 (例: 会社の LAN、自宅の Wi-Fi、その他の様々な Wi-Fi) でローミングする場合、timesyncd によって使用されている NTP サーバを DHCP によって提供されているものに設定したい場合があります。ただし、NetworkManager 自体は systemd-timesyncd と通信して NTP サーバを設定することはできません。\n\nディスパッチャを使うことで、この問題を回避できます。\n\nsystemd-timesyncd の設定ようのオーバーレイディレクトリ /etc/systemd/timesyncd.conf.d を作成してください (まだ存在していない場合)。/etc/NetworkManager/dispatcher.d 内に以下を追加してください:\n\n```\n/etc/NetworkManager/dispatcher.d/10-update-timesyncd\n```\n\n```\n#!/bin/sh\n\n[ -z \"$CONNECTION_UUID\" ] && exit 0\nINTERFACE=\"$1\"\nACTION=\"$2\"\n\ncase $ACTION in\nup | dhcp4-change | dhcp6-change)\n\t[ -n \"$DHCP4_NTP_SERVERS\" ] || exit 0\n\tmkdir -p /etc/systemd/timesyncd.conf.d\n\tcat <<-THE_END >\"/etc/systemd/timesyncd.conf.d/${CONNECTION_UUID}.conf\"\n\t\t[Time]\n\t\tNTP=$DHCP4_NTP_SERVERS\n\tTHE_END\n\tsystemctl restart systemd-timesyncd.service\n\t;;\ndown)\n\trm -f \"/etc/systemd/timesyncd.conf.d/${CONNECTION_UUID}.conf\"\n\tsystemctl restart systemd-timesyncd.service\n\t;;\nesac\n```\n\nNetworkManager が新しいネットワーク接続を設定する (ACTION=up) か、既存の接続の更新を取得する (ACTION=dhcp4-change または ACTION=dhcp6-change) 度に、接続データに NTP サーバ (DHCP4_NTP_SERVERS) に関する情報が含まれていると、接続固有のオーバーレイ設定ファイルが /etc/systemd/timesyncd.conf.d に書き込まれ、このファイルには、提供された NTP サーバ (1台または複数) の情報が記述されます。提供された NTP サーバが含まれます。接続が停止される (ACTION=down) と、接続固有のオーバーレイファイルは削除されます。systemd-timesyncd の設定が変更されるたびに、サービスは再起動され、更新された設定を取得します。NetworkManager で 2つ以上の接続を並行して管理する場合、up、dhcp4-change、dhcp6-change、そして down アクションが任意の順序で来るかもしれないので、設定内の異なる NTP サーバ名が上書きされないように接続固有の設定ファイルを意図的に使用しています。\n\n"
    },
    {
      "title": "テスト",
      "level": 2,
      "content": "NetworkManager アプレットはログイン時にロードされるようになっているので、ほとんどのユーザにとって追加の設定は必要ないはずです。以前のネットワーク設定を無効化し、ネットワークから切断されているならば、NetworkManager が動作するかどうかをテストできます。まず始めに、NetworkManager.service を起動してください。\n\n一部のアプレットは、NetworkManager アプレットをアプリケーションメニューからロードできるようにするために、.desktop ファイルを提供しています。デスクトップファイルが提供されていない場合は、アプレットを使用するためのコマンドを見つけるか、アプレットをロードするために一度ログアウトして再度ログインする必要があります。アプレットが開始されれば、DHCP サーバを使って自動設定によるネットワーク接続のポーリングが開始されるでしょう。\n\nawesome などの XDG 非互換のウィンドウマネージャで GNOME のアプレットを開始するには:\n\n```\nnm-applet --sm-disable &\n```\n\n固定 IP アドレスの場合は、NetworkManager にそのことを伝えなければなりません。手順としては通常、アプレットを右クリックし、'接続を編集する' ('Edit Connections') などのような項目を選択します。\n\n"
    },
    {
      "title": "Wi-Fi パスワードの暗号化",
      "level": 3,
      "content": "デフォルトでは、NetworkManager はパスワードを平文で /etc/NetworkManager/system-connections/ 内の設定ファイルに保存します。保存されているパスワードを表示するには、以下のコマンドを使ってください:\n\n```\n# grep -r '^psk=' /etc/NetworkManager/system-connections/\n```\n\nパスワードは root ユーザからファイルシステムでアクセス可能であり、さらに GUI (例: nm-applet) を通して設定にアクセスできるユーザからもアクセス可能です。\n\nパスワードは、平文ではなく、キーリングの中で暗号化された形で保存するのが望ましいです。しかし、これの欠点は、それぞれのユーザで接続をセットアップしなけれならないことです。\n\nキーリングを読み書きするために、利用可能なシークレットエージェントが存在していなければなりません。いかのどれかを使用できます:\n\n- nmcli で --ask オプションを使う。\n- #フロントエンド に挙げられているグラフィカルインターフェイス\n\nシークレットエージェントが利用できないと、no secrets: No agents were available for this request. というエラーで認証が失敗します。\n\n"
    },
    {
      "title": "GNOME Keyring を使う",
      "level": 4,
      "content": "以下の方法を使うには、GNOME Keyring のキーリングデーモンが開始されていて、キーリングがアンロックされている必要があります。\n\nさらに、全ユーザのパスワードを保存しないように NetworkManager を設定する必要があります。GNOME の network-manager-applet を使って、ターミナルから nm-connection-editor を実行し、ネットワーク接続を選択し、編集 (Edit) をクリックし、Wi-Fi セキュリティー (Wi-Fi Security) タブを選択し、パスワード入力欄の右のアイコンをクリックして、このユーザーのパスワードのみ保存する (Store the password only for this user) にチェックを入れてください。\n\n"
    },
    {
      "title": "KDE Wallet を使う",
      "level": 4,
      "content": "KDE の plasma-nm を使う場合、アプレットをクリックし、右上の 設定 アイコンをクリックし、ネットワーク接続を選択し、一般設定 (General configuration) タブを選択し、すべてのユーザはこのネットワークに接続可能 (All users may connect to this network) のチェックを外してください。このオプションにチェックが入っていると、たとえキーリングデーモンが実行されていたとしても、パスワードが平文で保存されてしまいます。\n\n以前このオプションにチェックが入っていて、後にチェックを外した場合、ファイルからパスワードを消すために reset オプションを使用する必要がある場合があります。あるいは、接続を削除し、再度セットアップしてください。\n\n"
    },
    {
      "title": "Wi-Fi でインターネット接続を共有する",
      "level": 3,
      "content": "数クリックでインターネット接続 (例: 3G、有線) を共有することができます。ただし、ファイアウォールはインターネット共有を妨害する場合があることに注意してください。\n\nAP モードをサポートする Wi-Fi カードが必要になります。詳細は ソフトウェアアクセスポイント#Wi-Fi デバイスが AP モードをサポートしていること を見てください。\n\n接続を共有できるようにするために dnsmasq パッケージをインストールしてください。NetworkManager は (dnsmasq.service とは独立に) 独自の dnsmasq インスタンスを DHCP サーバとして開始することに注意してください。これに関する注意事項は #dnsmasq を見てください。\n\n共有された接続を作成してください:\n\n- アプレットをクリックし、新規 Wi-Fi ネットワークを作成 (Create new wireless network) を選んでください。\n- ウィザードに従ってください (WPA2 以上を選んでください。パスワードは 8 文字以上にしてください。さもないと失敗します)。\n- Wi-Fi モードとしてホットスポットかアドホックを選択してください。\n\nこれで、次回必要になるときのために接続は保存されます。\n\n"
    },
    {
      "title": "イーサネットでインターネット接続を共有する",
      "level": 3,
      "content": "シナリオ: デバイスが Wi-Fi 経由でインターネットに接続されていて、イーサネットで他のデバイスとインターネット接続を共有したいと考えている場合。\n\n要件:\n\n- 接続を共有できるようにするために dnsmasq パッケージと nm-connection-editor パッケージをインストールしてください。NetworkManager は (dnsmasq.service とは独立に) 独自の dnsmasq インスタンスを DHCP サーバとして開始することに注意してください。これに関する注意事項は #dnsmasq を見てください。\n- インターネットに接続されたデバイスとその他のデバイスが適切なイーサネットケーブルで接続されていること (これは通常、間をクロスオーバーケーブルやスイッチで繋ぐことを意味します)。\n- インターネット共有がファイアウォールによってブロックされていないこと。\n\n手順:\n\n- ターミナルから nm-connection-editor を実行してください。\n- 新しいイーサネット接続を追加してください。\n- 何かわかりやすい名前を付けてください。例えば \"Shared Internet\"。\n- \"IPv4 設定\" (\"IPv4 Settings\") を開いてください。\n- \"メソッド:\" (\"Method:\") で \"他のコンピューターへ共有\" (\"Shared to other computers\") を選択してください。\n- 保存\n\nこれで、NetworkManager の有線接続に \"Shared Internet\" という新しいオプションができたはずです。\n\n"
    },
    {
      "title": "cron ジョブやスクリプトでネットワークが立ち上がっているか確認する",
      "level": 3,
      "content": "Table content:\nこの記事またはセクションは情報が古くなっています。 理由: nm-tool は NetworkManager から削除されました [7]。代わりに nmcli を使用するべきです。 (Discuss)\n\n一部の cron ジョブではネットワークが立ち上がっている必要があり、ネットワークが落ちている状態でそのようなジョブを実行したくない場合があります。そうするには、NetworkManager の nm-tool にクエリして、ネットワークの状態をチェックする if テストを追加してください。このテストは、何らかのインターフェイスが立ち上がっていれば成功し、インターフェイスが全て落ちている場合は失敗します。これは、ある時は有線接続されていて、ある時は無線で、またある時はネットワークから切断されているようなノート PC で便利です。\n\n```\nif [ $(nm-tool|grep State|cut -f2 -d' ') == \"connected\" ]; then\n    # ネットワークがオンラインの時に実行したいコード\nelse\n    # ネットワークがオフラインの時に実行したいコード (注記: この部分と上の else は任意です)\nfi\n```\n\nこれは、例えば F-Prot ウイルススキャナのシグネチャを更新するために fpupdate を実行する cron.hourly で便利です。また、nm-tool の出力の様々な部分を使えば、ネットワークを識別することもできます。例えば、アクティブなワイヤレスネットワークにはアスタリスクが付くので、ネットワーク名を grep して、その後でアスタリスクを grep しますs。\n\n"
    },
    {
      "title": "ブート時にシークレットを使ってネットワークに接続する",
      "level": 3,
      "content": "デフォルトでは、NetworkManager はシークレットを要求するネットワークにはブート時に自動的に接続しません。NetworkManager では、そのようなネットワークは、そのネットワークをデフォルトで使用するユーザがログインした後にのみ、接続されるからです。この動作を変更するには、以下を行ってください:\n\n1. パネルの nm-applet のアイコンを右クリックし、\"接続を編集する\" を選択し、Wi-Fi タブを開いてください。\n1. 使いたい接続を選択し、編集ボタンをクリックしてください。\n1. “Connect Automatically” と “Available to all users” のボックスにチェックを入れてください。\n1. 加えて、\"Wi-Fi Security\" タブで \"Store password for all users (not encrypted)\" が選択されていることを確認してください。\n\nログアウトし、ログインし直せば完了です。\n\n"
    },
    {
      "title": "OpenConnect で KWallet 内のパスワードを使う",
      "level": 3,
      "content": "接続時にユーザ名とパスワードを入力することはできますが、plasma-nm 0.9.3.2-1 から、KWallet から直接 OpenConnect のユーザ名とパスワードを取得することが可能になりました。\n\n\"KDE Wallet Manager\" を開き、\"Network Management|Maps\" で対象の OpenConnect VPN 接続を見つけてください。\"Show values\" をクリックし、認証情報を以下の形式で \"VpnSecrets\" に入力してください (ユーザ名 と パスワード の部分は適宜置き換えてください):\n\n```\nform:main:username%SEP%ユーザ名%SEP%form:main:password%SEP%パスワード\n```\n\n次回の接続時に、ユーザ名とパスワードが \"VPN secrets\" ダイアログボックスに入力されるはずです。\n\n"
    },
    {
      "title": "特定のデバイスを無視する",
      "level": 3,
      "content": "NetworkManager で特定のデバイスを無視し、そのデバイスに対してはアドレスとルート (route) の設定を試みないようにすることが望ましい場合があります。/etc/NetworkManager/conf.d/unmanaged.conf で以下のオプションを使うことで、MAC またはインターフェイス名によって特定のデバイスを無視することができます:\n\n```\n[keyfile]\nunmanaged-devices=mac:00:22:68:1c:59:b1;mac:00:1E:65:30:D1:C4;interface-name:eth0\n```\n\nファイルを編集したら、nmcli general reload を root として実行してください。その後、NetworkManager があなたの設定を変更することなく、インターフェイスを構成できるようになっているはずです。\n\n"
    },
    {
      "title": "MAC アドレスのランダム化を設定する",
      "level": 3,
      "content": "MAC アドレスのランダム化は、本物の MAC アドレスをネットワークに開示しないことで、プライバシーを向上させることができます。\n\nNetworkManager は2種類の MAC アドレスランダム化をサポートしています: スキャン中のランダム化とネットワーク接続におけるランダム化です。どちらのモードも、/etc/NetworkManager/NetworkManager.conf を変更するか、/etc/NetworkManager/conf.d/ 内に別の設定ファイルを作成することで設定できます (前者は NetworkManager によって上書きされる場合があるので、後者が推奨されます)。\n\nWi-Fi スキャン中のランダム化はデフォルトで有効化されていますが、以下の行を /etc/NetworkManager/NetworkManager.conf か /etc/NetworkManager/conf.d 内の別の設定ファイルに追加することで無効化することができます:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device]\nwifi.scan-rand-mac-address=no\n```\n\nネットワーク接続における MAC アドレスランダム化は、無線インターフェイスとイーサネットインターフェイスで別々のモードを設定することができます。モードに関する詳細は GNOME のブログ記事を参照してください。\n\nMAC アドレスランダム化に関して、最も重要なモードは stable と random です。stable は、新しいネットワークに接続した時にランダムな MAC アドレスを生成し、そのネットワークと MAC アドレスを永続的に関連付けます。これはつまり、そのネットワークに接続すると毎回同じ MAC アドレスが使用されることを意味します。それとは対照的に、random は、ネットワークに接続する度に、そのネットワークが新しかろうが既知であろうが、新しい MAC アドレスを生成します。/etc/NetworkManager/conf.d 内に設定ファイルを追加してこの MAC アドレスランダム化を設定することができます:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device-mac-randomization]\n# \"yes\" は既にスキャンにおけるデフォルトです。\nwifi.scan-rand-mac-address=yes\n \n[connection-mac-randomization]\n# 全てのイーサネット接続に対して MAC をランダム化する\nethernet.cloned-mac-address=random\n# 各 Wi-Fi に対してランダムな MAC を生成し、それらを関連付ける。\nwifi.cloned-mac-address=stable\n```\n\n特定の接続に対して MAC ランダム化を設定するには (例えば、そのネットワークでランダムな MAC アドレスを使えない場合)、接続を編集して 802-11-wireless.cloned-mac-address に所望のモード (例: stable、random) を設定してください。\n\n詳細は GNOME ブログ記事を参照してください。\n\n"
    },
    {
      "title": "IPv6 プライバシー拡張を有効にする",
      "level": 3,
      "content": "IPv6#NetworkManager を参照してください。\n\n"
    },
    {
      "title": "接続ごとに一意の DUID を設定する",
      "level": 3,
      "content": "DHCPv6 Unique Identifier (DUID) は、DHCPv6 クライアントが DHCPv6 サーバに対して自身を識別するために使用する値です。NetworkManager は3種類の DUID をサポートしています:\n\n- DUID-UUID (RFC 6355): Universally Unique IDentifier (UUID) から生成されます。\n- DUID-LL (RFC 3315): リンク層アドレス (別名 MAC アドレス) から生成されます。\n- DUID-LLT (RFC 3315): リンク層アドレスとタイムスタンプから生成されます。\n\nNetworkManager の内部 DHCP クライアントが使用されている場合 (デフォルト)、machine-id (/etc/machine-id) から生成されたグローバルで永続的な DUID-UUID で自身を識別します。これは、すべての接続が同じ UUID を共有することを意味し、プライバシーの侵害となる可能性があります。\n\n幸いなことに、NetworkManager は、接続の stable-id とホストごとの一意のキーから派生した、接続ごとの一意の DUID を提供できます。/etc/NetworkManager/conf.d 内に次の設定を追加することで、これを有効にすることができます:\n\n```\n/etc/NetworkManager/conf.d/duid.conf\n```\n\n```\n[connection]\nipv6.dhcp-duid=stable-uuid\n```\n\nstable-ll および stable-llt の値もサポートされています。詳細については、nm-settings(5) § ipv6 setting の dhcp-duid の説明を参照してください。\n\n"
    },
    {
      "title": "有線接続の操作",
      "level": 3,
      "content": "NetworkManager は、デフォルトで、有線イーサネット接続を検出するたびにそれぞれに対して接続プロファイルを生成します。接続を生成する時点では、利用可能なイーサネットアダプターがさらにあるかどうかはわかりません。そのため、最初の有線接続は \"有線接続 1\" となります。no-auto-default (NetworkManager.conf(5) を参照) を設定するか、単に削除することで、この接続を生成しないようにできます。そうすれば、NetworkManager はこのインターフェイスの接続を二度と生成しないように記憶します。\n\nまた、接続を編集 (およびディスクに永続化) したり、削除したりすることもできます。NetworkManager は新しい接続を再生成することはありません。それから、名前を好きなものに変更することができます。この作業には nm-connection-editor などを使うことができます。\n\n"
    },
    {
      "title": "Wi-Fi バックエンドとして iwd を使用する",
      "level": 3,
      "content": "- iwd.service を有効化したり、iwd を手動で構成したりしないでください。NetworkManager は自身で iwd を開始し、管理します。\n- iwd に切り替える前に、既知の問題を考慮してください。\n\n実験的な iwd バックエンドを有効化するには、iwd をインストールしてから、以下の設定ファイルを作成してください:\n\n```\n/etc/NetworkManager/conf.d/wifi_backend.conf\n```\n\n```\n[device]\nwifi.backend=iwd\n```\n\nまたは、networkmanager-iwdAUR をインストールすることもできます。これは、iwd のみで動作する NetworkManager をビルドするように設定された修正パッケージです。主な違いは、iwd が必要であり、wpa_supplicant はビルド後にアンインストールできることです。\n\n"
    },
    {
      "title": "ネットワーク名前空間内で実行する",
      "level": 3,
      "content": "ネットワーク名前空間内で NetworkManager を実行する場合 (たとえば、選択したアプリケーションで使用する必要がある特定のデバイスを管理する場合)、その名前空間に移動させる前にデバイスを落としてください:\n\n```\n$ ip link set dev MY_DEVICE down\n$ ip link set dev MY_DEVICE netns MY_NAMESPACE\n$ ip netns exec MY_NAMESPACE NetworkManager\n...\n$ ip netns exec MY_NAMESPACE killall NetworkManager\n```\n\nそうしないと、NetworkManager は後で device is strictly unmanaged エラーにより接続の確立に失敗します。\n\n"
    },
    {
      "title": "VPN に自動的に接続する",
      "level": 3,
      "content": "NetworkManager は、インターネットへの接続時に VPN に自動的に接続するように (ネットワーク毎に) 設定できます。VPN 接続自体は、GNOME の NetworkManager フロントエンドで追加できますが、VPN を自動的に使用するようにするには、nmcli を使用しなければなりません。他のフロントエンドにはこの制限はない場合があります。\n\nまず、対象の VPN が全ユーザで利用可能であることを確認してください。GNOME では、details タブ内のあるボックスにチェックを入れれば良いです。Identity タブのパスワード入力欄内の右側にあるアイコンをクリックし、Store the password for all users を選択してください。\n\nそして、VPN 接続の UUID を見つけ、インターネット接続の connection.secondaries にその UUID を追加してください:\n\n```\n# UUID=$(nmcli --get-values connection.uuid connection show VPN接続の名前)\n# nmcli connection modify インターネット接続の名前 connection.secondaries \"$UUID\"\n```\n\nNetworkManager を再起動して、設定したインターネット接続に接続したら、自動的に VPN に接続されるようになっているはずです。\n\n"
    },
    {
      "title": "セキュアな Wi-Fi ネットワークのパスワードプロンプトが表示されない",
      "level": 3,
      "content": "セキュアな Wi-Fi ネットワークに接続しようとすると、パスワードのプロンプトが表示されず、接続が確立されません。これは、キーリングのパッケージがインストールされていない時に起こります。簡単な解決法は、gnome-keyring をインストールすることです。パスワードを暗号化して保存したい場合は、GNOME Keyring に書かれてある指示に従い、gnome-keyring-daemon をセットアップしてください。\n\n"
    },
    {
      "title": "Network management disabled",
      "level": 3,
      "content": "時々、NetworkManager を終了したときに pid (state) ファイルが削除されずに Network management disabled というメッセージが表示されることがあります。これが発生した場合は、そのファイルを手動で削除してください:\n\n```\n# rm /var/lib/NetworkManager/NetworkManager.state\n```\n\n"
    },
    {
      "title": "内蔵 DHCP クライアントに関する問題",
      "level": 3,
      "content": "内臓の DHCP クライアントを使用すると IP アドレスの取得に問題が発生する場合、他の DHCP クライアントを使用することを検討してください (手順は #DHCP クライアント を見てください)。この回避策は、eduroam などの巨大なワイヤレスネットワークにおける問題を解決するかもしれません。\n\n"
    },
    {
      "title": "dhclient における DHCP の問題",
      "level": 3,
      "content": "DHCP での IP アドレス取得に問題が発生する場合、以下を /etc/dhclient.conf に追加してみてください:\n\n```\ninterface \"eth0\" {\n   send dhcp-client-identifier 01:aa:bb:cc:dd:ee:ff;\n }\n```\n\naa:bb:cc:dd:ee:ff は NIC の MAC アドレスです。この MAC アドレスは iproute2 パッケージの ip link show インターフェイス コマンドを使って確認できます。\n\n"
    },
    {
      "title": "3G モデムが検知されない",
      "level": 3,
      "content": "USB 3G モデム#NetworkManager を参照してください。\n\n"
    },
    {
      "title": "ノートパソコンで WLAN をオフにする",
      "level": 3,
      "content": "時々、ノートパソコンに付いているスイッチを使って Wi-Fi アダプタを無効化し、再び有効化しようとすると NetworkManager が機能しなくなることがあります。これは、しばしば rfkill の問題であることがあります。ドライバが rfkill にワイヤレスアダプタの状態について通知しているかどうか確認するには、以下のコマンドを使ってください:\n\n```\n$ watch -n1 rfkill list all\n```\n\nアダプタを切り替えた後にどれかの識別子がブロックされたままになる場合、手動でアンロックしてみることができます (X の部分は、上記のコマンドで得られた識別子の番号です):\n\n```\n# rfkill event unblock X\n```\n\n"
    },
    {
      "title": "固定 IP アドレスの設定が DHCP に戻る",
      "level": 3,
      "content": "とある未解決のバグにより、デフォルトの接続を固定 IP アドレスに変更すると、nm-applet が設定の変更を適切に保存せずに、自動 DHCP に戻ってしまいます。\n\nこの問題を回避するには、nm-applet でデフォルトの設定 (例: \"Auto eth0\") を編集し、接続名を変更 (例: \"my eth0\") し、\"Available to all users\" チェックボックスのチェックを外し、固定 IP アドレスの設定を好きに変更し、Apply をクリックしてください。これで、指定した名前で新しい接続が保存されます。\n\nそうしたら、デフォルトの接続に自動的に接続しないようにしたいと思うでしょう。そうするには、まず nm-connection-editor を実行してください (root としてではありません)。接続エディタで、デフォルトの接続 (例: \"Auto eth0\") を編集し、\"Connect automatically\" のチェックを外してください。Apply をクリックし、接続エディタを閉じてください。\n\n"
    },
    {
      "title": "通常ユーザとして接続を編集できない",
      "level": 3,
      "content": "#PolicyKit のパーミッションをセットアップする を参照してください。\n\n"
    },
    {
      "title": "隠されたワイヤレスネットワークを削除する",
      "level": 3,
      "content": "隠されたネットワークはワイヤレスの選択リストに表示されないので、GUI から削除することができません。以下のコマンドでそのようなネットワークを削除できます:\n\n```\n# rm /etc/NetworkManager/system-connections/SSID\n```\n\nこれは、他の接続でも使えます。\n\n"
    },
    {
      "title": "VPN が GNOME で動作しない",
      "level": 3,
      "content": "GNOME を使用している時に NetworkManager で OpenConnect や vpnc の接続をセットアップすると、ダイアログボックスが表示されず、以下のエラーが /var/log/errors.log に現れることがあります:\n\n```\nlocalhost NetworkManager[399]: <error> [1361719690.10506] [nm-vpn-connection.c:1405] get_secrets_cb(): Failed to request VPN secrets #3: (6) No agents were available for this request.\n```\n\nこれは、GNOME NetworkManager Applet が、ダイアログスクリプトが /usr/lib/gnome-shell にあると想定していることが原因です (NetworkManager のパッケージはダイアログスクリプトを /usr/lib/networkmanager 内に置きます)。\"一時的な\" 修正として (このバグはしばらく前から存在しています)、以下のシンボリックリンクを作成してください:\n\n- OpenConnect の場合: ln -s /usr/lib/networkmanager/nm-openconnect-auth-dialog /usr/lib/gnome-shell/\n- VPNC (つまり Cisco VPN) の場合: ln -s /usr/lib/networkmanager/nm-vpnc-auth-dialog /usr/lib/gnome-shell/\n\nこれは、他の NetworkManager VPN プラグインでも行う必要がある場合がありますが、上記が最も一般的です。\n\n"
    },
    {
      "title": "検出されてはいるのにヨーロッパのワイヤレスネットワークに接続できない",
      "level": 3,
      "content": "WLAN チップにはデフォルトの規制範囲が設定されています。アクセスポイントがその規制内で動作しない場合、そのネットワークに接続することはできません。これは簡単に解決できます:\n\n1. wireless-regdb をインストールしてください。\n1. /etc/conf.d/wireless-regdom で適切な国名コードをアンコメントしてください。\n1. システムを再起動してください。この設定はブート時にしか読み込まれないからです。\n\n"
    },
    {
      "title": "ブート時の VPN への自動接続が機能しない",
      "level": 3,
      "content": "この問題は、システム (つまり、root ユーザとして動作している NetworkManager) が VPN 接続を確立しようと試みたが、パスワードが特定のユーザの GNOME Keyring 内に保存されているためにアクセスできなかった場合に発生します。\n\n解決策は、#ディスパッチャを使って、ネットワーク接続が確立された後に VPN に接続する の手順 2 で説明されている通りに、VPN のパスワードを平文で保存することです。\n\nnm-applet GUI で新しい \"auto-connect VPN\" オプションを使用している場合は、自動接続するために 手順 1 で説明されているディスパッチャを使用する必要はありません。\n\n"
    },
    {
      "title": "Systemd のボトルネック",
      "level": 3,
      "content": "時が立つにつれてログファイル (/var/log/journal) が膨大になってしまうことがあります。そうすると NetworkManager を使う場合にブートパフォーマンスに大きな影響を与えます。参照: systemd#少しづつ起動時間が長くなっている。\n\n"
    },
    {
      "title": "定期的なネットワーク接続断、遅延、パケットロス (Wi-Fi)",
      "level": 3,
      "content": "NetworkManager は2分ごとにスキャンを行います。\n\n一部の Wi-Fi ドライバは、接続/アソシエーション中にベースステーションのスキャンを行うと問題が発生します。症状としては、VPN 接続断/再接続、パケットロス、ウェブページのロードに失敗してリフレッシュすると良くなるなどがあります。\n\njournalctl -f を root として実行すると、スキャンが行われていることがわかります。以下のようなメッセージが定期的にログに現れます:\n\n```\nNetworkManager[410]: <info>  (wlp3s0): roamed from BSSID 00:14:48:11:20:CF (my-wifi-name) to (none) ((none))\n```\n\nローミングが重要でないならば、Wi-Fi 接続プロファイルでアクセスポイントの BSSID をロックすることにより、定期的なスキャンの挙動を無効化することができます。\n\n"
    },
    {
      "title": "Lenovo ラップトップ (IdeaPad、Legion など) で Wi-Fi をオンにできない",
      "level": 3,
      "content": "これは、Wi-Fi ドライバがソフトブロックを誤って報告することによる、一部の Lenovo モデルにおける ideapad_laptop モジュールの問題です。カードは依然として netctl で操作できますが、NetworkManager などのマネージャーは機能しません。この問題が発生しているかどうかを確認するには、ハードウェアのスイッチをオンオフしたあとで rfkill list の出力を確認し、ソフトブロックされ続けるかどうか確認してください。\n\nTable content:\nこの記事またはセクションの正確性には問題があります。 理由: rfkill の問題を解決するには、rfkill.default_state と rfkill.master_switch_mode を使用してみてください (kernel-parameters.html を参照))。 (議論: トーク:NetworkManager#)\n\nideapad_laptop モジュールをアンロードすれば、この問題は解決するはずです。(警告: これにより、ラップトップのキーボードとタッチパッドも無効になる可能性があります!)\n\n"
    },
    {
      "title": "ホスト名の送信をオフにする",
      "level": 3,
      "content": "NetworkManager はデフォルトでホスト名を DHCP サーバに送信します。ホスト名の送信は、グローバルには無効化できず、接続毎にしか無効化できません (Issue #584)。\n\n特定の接続で DHCP サーバへのホスト名の送信を無効化するには、以下をネットワークの設定ファイルに追加してください:\n\n```\n/etc/NetworkManager/system-connections/your_connection_file\n```\n\n```\n...\n[ipv4]\ndhcp-send-hostname=false\n...\n[ipv6]\ndhcp-send-hostname=false\n...\n```\n\n"
    },
    {
      "title": "nm-applet が i3wm で消える",
      "level": 3,
      "content": "通知に xfce4-notifyd.service を使用する場合は、そのユニットを編集して、以下を追加する必要があります:\n\n```\n/etc/systemd/user/xfce4-notifyd.service.d/display_env.conf\n```\n\n```\n[Service]\nEnvironment=\"DISPLAY=:0.0\"\n```\n\nデーモンをロードし直したら、xfce4-notifyd.service を再起動してください。i3 を終了し、再び起動すると、アプレットがトレイに表示されているはずです。\n\n"
    },
    {
      "title": "Unit dbus-org.freedesktop.resolve1.service not found",
      "level": 3,
      "content": "systemd-resolved.service が開始されていない場合、NetworkManager は D-Bus を使用して開始しようとし、失敗します:\n\n```\ndbus-daemon[991]: [system] Activating via systemd: service name='org.freedesktop.resolve1' unit='dbus-org.freedesktop.resolve1.service' requested by ':1.23' (uid=0 pid=1012 comm=\"/usr/bin/NetworkManager --no-daemon \")\ndbus-daemon[991]: [system] Activation via systemd failed for unit 'dbus-org.freedesktop.resolve1.service': Unit dbus-org.freedesktop.resolve1.service not found.\ndbus-daemon[991]: [system] Activating via systemd: service name='org.freedesktop.resolve1' unit='dbus-org.freedesktop.resolve1.service' requested by ':1.23' (uid=0 pid=1012 comm=\"/usr/bin/NetworkManager --no-daemon \")\n```\n\nこれは、NetworkManager が NetworkManager.conf(5) の main.dns= 設定に関係なく、DNS 情報を systemd-resolved に送信しようとするためです。[9]\n\nこれは、/etc/NetworkManager/conf.d/ 内の設定ファイルで無効にできます:\n\n```\n/etc/NetworkManager/conf.d/no-systemd-resolved.conf\n```\n\n```\n[main]\nsystemd-resolved=false\n```\n\nFS#62138 を参照してください。\n\n"
    },
    {
      "title": "Secrets were required, but not provided",
      "level": 3,
      "content": "ネットワークに接続しようとして以下のエラーが発生する場合:\n\n```\n$ nmcli device wifi connect SSID password パスワード\n```\n\n```\nError: Connection activation failed: (7) Secrets were required, but not provided\n```\n\nこのエラーの原因となりうるものはたくさんあり、journal を読む必要があります (-u NetworkManager で出力をフィルタしてください)。例えば、接続の確立に時間がかかりすぎると、NetworkManager はパスワードが正しくなかったと結論づけます:\n\n```\nNetworkManager[1372]: <warn>  [1643991888.3808] device (wlan0): Activation: (wifi) association took too long\nNetworkManager[1372]: <info>  [1643991888.3809] device (wlan0): state change: config -> need-auth (reason 'none', sys-iface-state: 'managed')\nNetworkManager[1372]: <warn>  [1643991888.3838] device (wlan0): Activation: (wifi) asking for new secrets\n```\n\n接続プロファイルを削除し、新しいプロファイルを作成してみてください:\n\n```\n$ nmcli connection delete SSID\n$ nmcli device wifi connect SSID password パスワード\n```\n\nまた、MAC アドレスランダム化を無効化してみるのも良いでしょう:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device]\nwifi.scan-rand-mac-address=no\n```\n\n"
    },
    {
      "title": "iwd での WPA Enterprise 接続",
      "level": 3,
      "content": "iwd バックエンドと NetworkManager で 'eduroam' などの WPA Enterprise ネットワークに接続しようとした際に、NetworkManager sで以下のエラーが発生します:\n\n```\nConnection 'eduroam' is not avialable on device wlan0 because profile is not compatible with device (802.1x connections must have IWD provisioning files)\n```\n\nNetworkManager は WPA Enterprise ネットワークを設定できないことが原因です。なので、iwd#WPA Enterprise で説明されているように iwd の設定ファイル /var/lib/iwd/essid.8021x を使って設定する必要があります。\n\n"
    },
    {
      "title": "Failed to request VPN secrets",
      "level": 3,
      "content": "以下のエラーが発生する場合:\n\n```\nFailed to request VPN secrets #1: No agents were available for this request.\n```\n\nパスワードが空であるか、PolicyKit のパーミッションをセットアップする必要があるかのどちらかです。\n\n"
    },
    {
      "title": "OpenVPN 接続が \"secrets: failed to request VPN secrets\" という警告で失敗する",
      "level": 3,
      "content": "GNOME-Shell と統合させる場合、networkmanager-openvpn パッケージは libnma-gtk4 と任意で libnma (Gtk3) も必要とします。libnma が必要であるが、インストールされていない場合、以下のようなメッセージがログに出力されます:\n\n```\nNetworkManager[642]: <warn>  [...] vpn[...\"name_of_vpn_profile VPN\"]: secrets: failed to request VPN secrets #3: No agents were available for this request.\n```\n\n"
    },
    {
      "title": "OpenSSL の \"ca md too weak\" エラーで OpenVPN の接続に失敗する",
      "level": 3,
      "content": "openssl がバージョン3に更新されたため、レガシーな暗号化アルゴリズムで生成された証明書はデフォルトで拒否されます。このような設定で networkmanager-openvpn を使用しようとすると、ログに次のエラーが記録される可能性があります:\n\n```\nnm-openvpn[14359]: OpenSSL: error:0A00018E:SSL routines::ca md too weak\nnm-openvpn[14359]: Cannot load certificate file /home/archie/.local/share/networkmanagement/certificates/my_issued_cert.crt\nnm-openvpn[14359]: Exiting due to fatal error\n```\n\n正しいアプローチは、OpenVPN サーバの管理者に、より安全な証明書を生成して再発行してもらうことです。ただし、当面の回避策として、OpenVPN には tls-cipher \"DEFAULT:@SECLEVEL=0\" が必要です。この設定は、プラグイン GUI からでは無理かもしれませんが、nmcli からなら可能です。これとは別に、OpenSSL でレガシーなプロバイダを有効化する必要もあります。\n\nまず、以下のコマンドの出力から、問題のある VPN 接続の名前を取得してください:\n\n```\n$ nmcli connection show\n```\n\n接続の名前は vpn.example.com であると仮定します。以下のように nmcli を使ってください:\n\n```\n$ nmcli connection modify vpn.example.com +vpn.data tls-cipher=DEFAULT:@SECLEVEL=0\n```\n\n変更は即座に /etc/NetworkManager/system-connections/vpn.example.com.nmconnection に反映されるはずです。\n\nOpenSSL に関しては、OpenSSL wiki で説明されている通りに /etc/ssl/openssl.cnf を編集してください。\n\n具体的には、[provider_sect] セクションの最後に legacy = legacy_sect を追加してください。[default_sect] で activate = 1 のコメントを外してください。最後に、activate = 1 という行も含む新しいセクション [legacy_sect] を追加してください。他のほとんどの既存の構成セクションを除外すると、最終結果は次のようになります:\n\n```\n/etc/ssl/openssl.cnf\n```\n\n```\nopenssl_conf = openssl_init\n\n[openssl_init]\nproviders = provider_sect\n\n[provider_sect]\ndefault = default_sect\nlegacy = legacy_sect\n\n[default_sect]\nactivate = 1\n\n[legacy_sect]\nactivate = 1\n```\n\n最後に、NetworkManager.service を再起動して、新しい OpenSSL 設定を有効化してください。\n\n"
    },
    {
      "title": "OpenSSL の \"unsupported protocol\" エラーで WPA Enterprise の接続の認証に失敗する",
      "level": 3,
      "content": "openssl がバージョン 3 に更新されたため、デフォルトで SSL 3、TLS 1.0、TLS 1.1、そして DTLS 1.0 はセキュリティレベル 0 でのみ動作するようになりました。それよりも古い標準しかサポートしていない Wi-Fi ネットワークでの認証は、ログに以下のエラーを吐いて失敗します:\n\n```\nwpa_supplicant[3320]: SSL: SSL3 alert: write (local SSL3 detected an error):fatal:protocol version\nwpa_supplicant[3320]: OpenSSL: openssl_handshake - SSL_connect error:0A000102:SSL routines::unsupported protocol\nwpa_supplicant[3320]: wlp3s0: CTRL-EVENT-EAP-FAILURE EAP authentication failed\n```\n\n正しい方法は、設備の管理者を説得して、暗号化されたネットワークトンネルのプロトコルを TLS 1.3 にアップグレードし、任意で TLS 1.0/1.1、DTLS 1.0、SSL 1-3 を含む非推奨となっているセキュリティ標準のサポートを落としてもらうことです。しかし、当面の回避策として、TLS 1.0 や 1.1 をデフォルトで許可する方法は複数あります。一つは、手動で OpenSSL にパッチを当てるか、破壊的な変更をもとに戻すことです ([10])。これは、OpenSSL レベル 1 を使用する他の全てのプログラムのセキュリティも低下してしまうため、推奨されません。代わりに、(BBS#286417 で説明されているように) wpa_supplicant によって使用されるレベルを直接設定することができます。問題のある接続設定ファイルの [802-1x] セクションで phase1-auth-flags=32 または phase1-auth-flags=64 を設定することで、その接続のみを変更できます。これは GUI からは無理かもしれませんが、nmcli でなら可能です。\n\nまず、以下のコマンドの出力から、問題のある Wi-Fi 接続の名前を手に入れてください:\n\n```\n$ nmcli connection show\n```\n\nこの接続では TLS 1.0 が使用され、接続名は Example Wi-Fi であるとします。以下のように nmcli を使用してください:\n\n```\n$ nmcli connection modify 'Example Wi-Fi' 802-1x.phase1-auth-flags 32\n```\n\nTLS 1.1 接続に対しては、代わりに \"64\" を使用してください:\n\n```\n$ nmcli connection modify 'Example Wi-Fi' 802-1x.phase1-auth-flags 64\n```\n\n変更は即座に /etc/NetworkManager/system-connections/Example Wi-Fi.nmconnection に反映されるはずです。\n\n最後に、NetworkManager.service を再起動して、新しい OpenSSL の設定を有効化してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- NetworkManager for Administrators Part 1\n- Wikipedia:ja:NetworkManager\n- NetworkManager 公式ウェブサイト\n\n"
    }
  ]
}