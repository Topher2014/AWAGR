{
  "title": "Debug - Getting Traces (Русский)",
  "url": "https://wiki.archlinux.org/title/Debug_-_Getting_Traces_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Устранение часто встречающихся неполадок\n- Указания по созданию отчета об ошибке\n- Debuginfod (Русский)\n- Дамп памяти\n\nЭта статья описывает отладку программы и получение трассировки и отладочной информации, которую можно будет отправить разработчикам в сообщении об ошибке.\n\n"
    },
    {
      "title": "Введение",
      "level": 2,
      "content": "Обычно исполняемые файлы очищаются (strip) от человекочитаемого контекста, чтобы уменьшить их размер. Кроме того, расширенная отладочная информация обычно не добавляется в исполняемый файл, что сильно снижает полезность трассировки. Поэтому перед получением трассировки нужно пересобрать пакет без выполнения strip и с включением отладочных символов.\n\nИспользуйте полную трассировку стека, чтобы сообщить разработчикам о найденной вами ошибке — это сильно поможет в решении проблемы.\n\nВо время отладки, например, при просмотре дампа памяти в gdb, вы увидите что-то подобное (смотрите раздел #Получение трассировки):\n\n```\n[...]\nBacktrace was generated from '/usr/bin/epiphany'\n\n(no debugging symbols found)\nUsing host libthread_db library \"/lib/libthread_db.so.1\".\n(no debugging symbols found)\n[Thread debugging using libthread_db enabled]\n[New Thread -1241265952 (LWP 12630)]\n(no debugging symbols found)\n0xb7f25410 in __kernel_vsyscall ()\n#0  0xb7f25410 in __kernel_vsyscall ()\n#1  0xb741b45b in ?? () from /lib/libpthread.so.0\n[...]\n```\n\nстроки вида ?? и (no debugging symbols found) показывают, что необходимая отладочная информация, такая, как названия функций, файлов, библиотек, отсутствует в отлаживаемом файле.\n\nЕсть несколько способов получения отладочной информации, каждый из которых описан в соответствующем разделе: #Debuginfod, #Установка отладочных пакетов, #Пересборка пакетов.\n\n"
    },
    {
      "title": "Debuginfod",
      "level": 2,
      "content": "Для пакетов из официальных репозиториев, которые это поддерживают (смотрите https://debuginfod.archlinux.org/packages), можно скачать отладочную информацию с помощью debuginfod.\n\ngdb автоматически скачивает её, если задана переменная окружения DEBUGINFOD_URLS. Она задаётся автоматически с помощью файла в /etc/profile.d/.\n\n```\n$ gdb приложение\n```\n\n```\nThis GDB supports auto-downloading debuginfo from the following URLs:\n  <https://debuginfod.archlinux.org>\nEnable debuginfod for this session? (y or [n]) y\nDebuginfod has been enabled.\nTo make this setting permanent, add 'set debuginfod enabled on' to .gdbinit.\nDownloading separate debug info for /usr/bin/приложение\nReading symbols from /home/user/.cache/debuginfod_client/fbaee841e2ed2c11ecbbda26f39eeec1da23d6c3/debuginfo...\n```\n\nПосле включения поддержки debuginfo можно сразу переходить к разделу #Получение трассировки.\n\n"
    },
    {
      "title": "Скачивание вручную",
      "level": 3,
      "content": "Например, чтобы скачать отладочные символы для пакета zstd вместе с исходным кодом, можно использовать debuginfo-find:\n\n```\n$ debuginfod-find debuginfo /usr/bin/zstd\n```\n\n```\n/home/user/.cache/debuginfod_client/70e1b456c5813658df6436a3deb71812e75a0267/debuginfo\n```\n\n```\n$ debuginfod-find source /usr/bin/zstd /usr/src/debug/zstd-1.5.2/programs/fileio.c\n```\n\n```\n/home/user/.cache/debuginfod_client/70e1b456c5813658df6436a3deb71812e75a0267/source##usr##src##debug##zstd-1.5.2##programs##fileio.c\n```\n\n"
    },
    {
      "title": "Получение отладочной информации вручную",
      "level": 2,
      "content": "Сначала нужно узнать имена пакетов, которые нужно пересобрать или для которых нужно установить отладочные пакеты.\n\n```\n[...]\nBacktrace was generated from '/usr/bin/epiphany'\n\n(no debugging symbols found)\nUsing host libthread_db library \"/lib/libthread_db.so.1\".\n(no debugging symbols found)\n[...]\n```\n\nПроверить, какому пакету принадлежат упомянутые в тексте исполняемые файлы или библиотеки, можно, например, с помощью pacman:\n\n```\n$ pacman -Qo /lib/libthread_db.so.1\n```\n\n```\n/lib/libthread_db.so.1 принадлежит glibc 2.5-8\n```\n\nПакет glibc версии 2.5-8. Повторите это для каждого упомянутого файла, чтобы собрать список пакетов, которым нужна отладочная информация.\n\n"
    },
    {
      "title": "Установка отладочных пакетов",
      "level": 3,
      "content": "В настоящее время несколько зеркал распространяют отладочные пакеты в доступных репозиториях. Это спонсируемые зеркала, контролируемые Arch Linux, которым предоставляется доступ к отладочным репозиториям.\n\n- https://geo.mirror.pkgbuild.com (зеркало GeoDNS)\n\nМожно установить пакет напрямую из репозитория. Например:\n\n```\n# pacman -U https://geo.mirror.pkgbuild.com/core-debug/os/x86_64/zstd-debug-1.5.2-2-x86_64.pkg.tar.zst\n```\n\nДругой вариант — добавить репозитории в конфигурацию pacman.\n\n```\n/etc/pacman.conf\n```\n\n```\n# Testing Repositories\n\n[core-testing-debug]\nInclude = /etc/pacman.d/mirrorlist\n\n[extra-testing-debug]\nInclude = /etc/pacman.d/mirrorlist\n\n[multilib-testing-debug]\nInclude = /etc/pacman.d/mirrorlist\n\n# Stable repositories\n\n[core-debug]\nInclude = /etc/pacman.d/mirrorlist\n\n[extra-debug]\nInclude = /etc/pacman.d/mirrorlist\n\n[multilib-debug]\nInclude = /etc/pacman.d/mirrorlist\n```\n\nПоместите зеркало с отладочными пакетами в качестве первого в файле mirrorlist:\n\n```\n/etc/pacman.d/mirrorlist\n```\n\n```\nServer = https://geo.mirror.pkgbuild.com/$repo/os/$arch\n...\n```\n\n"
    },
    {
      "title": "Пересборка пакетов",
      "level": 3,
      "content": "Если отладочная информация недоступна через debuginfod (например, если пакет собран из AUR), то его можно пересобрать из исходников с включением отладки. Получение файлов PKGBUILD от пакетов из официальных репозиториев описано в статье Arch build system (Русский); работа с пакетами из AUR описана в статье Arch User Repository (Русский)#Получение файлов.\n\nЧтобы установить необходимые #Параметры компиляции, можно изменить настройки makepkg, если вы планируете использовать makepkg только для отладки. В других случаях меняйте файлы PKGBUILD только тех пакетов, которые вы хотите пересобрать.\n\n"
    },
    {
      "title": "Параметры компиляции",
      "level": 4,
      "content": "С версии pacman 4.1 makepkg.conf(5) имеет отладочные флаги компиляции в DEBUG_CFLAGS и DEBUG_CXXFLAGS. Для их использования включите опцию debug и отключите опцию strip.\n\nЭти настройки включат компиляцию с отладочными символами и отключат их удаление из исполняемых файлов.\n\n```\n/etc/makepkg.conf\n```\n\n```\nOPTIONS+=(debug !strip)\n```\n\nДля изменения параметров отдельного пакета измените его PKGBUILD:\n\n```\nPKGBUILD\n```\n\n```\noptions=(debug !strip)\n```\n\nВ качестве альтернативы можно поместить информацию об отладке в отдельный пакет, включив обе опции debug и strip. Тогда отладочные символы будут удалены из основного пакета и помещены вместе с исходным кодом в отдельный пакет pkgbase-debug. Это может пригодиться, если пакет содержит очень большие бинарные файлы (например, больше гигабайта с включенными отладочными символами), так как они могут привести к зависаниям и другому странному поведению.\n\nНекоторые пакеты, к примеру glibc, всё равно удаляют отладочные символы. Проверьте PKGBUILD на наличие подобных команд:\n\n```\nstrip $STRIP_BINARIES usr/bin/{gencat,getconf,getent,iconv,iconvconfig} \\\n                      usr/bin/{ldconfig,locale,localedef,nscd,makedb} \\\n                      usr/bin/{pcprofiledump,pldd,rpcgen,sln,sprof} \\\n                      usr/lib/getconf/*\n\nstrip $STRIP_STATIC usr/lib/*.a\n\nstrip $STRIP_SHARED usr/lib/{libanl,libBrokenLocale,libcidn,libcrypt}-*.so \\\n                    usr/lib/libnss_{compat,db,dns,files,hesiod,nis,nisplus}-*.so \\\n                    usr/lib/{libdl,libm,libnsl,libresolv,librt,libutil}-*.so \\\n                    usr/lib/{libmemusage,libpcprofile,libSegFault}.so \\\n                    usr/lib/{audit,gconv}/*.so\n```\n\nИ удалите их по необходимости.\n\nПакеты, использующие Clang в качестве компилятора, не будут собираться с опцией debug из-за того, что флаг -fvar-tracking-assignments' не обрабатывается (например, js78[ссылка недействительна: package not found]).\n\nДобавьте следующее в начало функции build() нужного пакета:\n\n```\nbuild() {\n  CFLAGS=${CFLAGS/-fvar-tracking-assignments}\n  CXXFLAGS=${CXXFLAGS/-fvar-tracking-assignments}\n[...]\n```\n\nПри использовании link-time optimization (LTO) как во время компиляции, так и в отладчике будет использоваться больше памяти[1][2]. Если приложение большое, такое как Firefox или Qt, памяти может не хватить. В этом случае собирайте приложение без LTO.\n\nВсе пакеты в официальных репозиториях обычно собираются с LTO.\n\n"
    },
    {
      "title": "Сборка и установка пакета",
      "level": 4,
      "content": "Соберите пакет командой makepkg, находясь в одном каталоге с файлом PKGBUILD. Это может занять некоторое время:\n\n```\n$ makepkg\n```\n\nУстановка собранного пакета:\n\n```\n# pacman -U glibc-2.26-1-x86_64.pkg.tar.gz\n```\n\n"
    },
    {
      "title": "Получение трассировки",
      "level": 2,
      "content": "Теперь можно получить backtrace (трассировку стека), например, с помощью gdb (GNU Debugger). Запуск осуществляется так:\n\n```\n# gdb /путь/к/файлу\n```\n\nЗатем в gdb введите run и аргументы для передачи запускаемому файлу:\n\n```\n(gdb) run аргументы\n```\n\nПосле запуска выполните действия, приводящие к возникновению бага. Когда приложение упадёт, gdb автоматически прекратит его выполнение и отобразит приглашение для ввода команд. Если программа зависает, можно нажать Ctrl+c для перехода к вводу команд.\n\nМожно включить логирование происходящего командой:\n\n```\n(gdb) set logging enabled on\n```\n\n```\n(gdb) set logging file trace.log\n```\n\nи, наконец, записать трассировку в файл trace.log в текущем рабочем каталоге:\n\n```\n(gdb) thread apply all backtrace full\n```\n\n```\n# gdb /usr/bin/python\n(gdb) run python-приложение\n```\n\nТакже отладчик может подключиться к уже запущенному приложению:\n\n```\n# gdb --pid=$(pidof firefox)\n(gdb) continue\n```\n\nДля отладки уже упавшего приложения запустите gdb на соответствующем дампе памяти.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Debian:HowToGetABacktrace\n- Gentoo:Project:Quality Assurance/Backtraces\n- Fedora:StackTraces\n- GNOME - Getting Stack Traces\n- gdb mini intro\n\n"
    }
  ]
}