{
  "title": "Core dump (Русский)",
  "url": "https://wiki.archlinux.org/title/Core_dump_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Дамп памяти (core dump) — это файл, в который записывается адресное пространство (память) процесса при его нештатном завершении. Дампы ядра могут создаваться по требованию (например, отладчиком) или автоматически при завершении процесса. Дампы памяти создаются ядром при сбое программы и могут быть переданы вспомогательной программе (например, systemd-coredump(8)) для дальнейшей обработки. Дамп памяти обычно не используется обычным пользователем, но может быть передан разработчикам по их запросу, которым будет очень полезно иметь снимок состояния программы на момент сбоя, особенно если сбой трудно воспроизвести.\n\n"
    },
    {
      "title": "Отключение автоматических дампов памяти",
      "level": 2,
      "content": "Пользователи могут захотеть отключить автоматические дампы памяти по нескольким причинам:\n\n- Производительность: создание дампа для процессов, занимающих много памяти, может привести к трате системных ресурсов и задержке очистки памяти.\n- Дисковое пространство: дампы процессов, занимающих много памяти, могут занимать место на диске, равное, а то и большее, чем объём памяти процесса, если их не сжимать.\n- Безопасность: хотя дампы обычно может читать только root, они могут содержать конфиденциальные данные (например, пароли или криптографические ключи), которые записываются на диск после сбоя.\n\n"
    },
    {
      "title": "Используя sysctl",
      "level": 3,
      "content": "Можно использовать sysctl, чтобы изменить kernel.core_pattern для отключения дампов. Создайте файл:\n\n```\n/etc/sysctl.d/50-coredump.conf\n```\n\n```\nkernel.core_pattern=/dev/null\n```\n\nДля немедленного применения изменений используйте команду sysctl:\n\n```\n# sysctl -p /etc/sysctl.d/50-coredump.conf\n```\n\n"
    },
    {
      "title": "Используя systemd",
      "level": 3,
      "content": "Поведение systemd по умолчанию определено в файле /usr/lib/sysctl.d/50-coredump.conf, который прописывает kernel.core_pattern для вызова systemd-coredump. Он сохраняет дампы ядра для всех процессов в /var/lib/systemd/coredump. Поведение systemd-coredump можно переопределить, создав в /etc/systemd/coredump.conf.d/ файл (coredump.conf(5) § DESCRIPTION,, [1]):\n\n```\n/etc/systemd/coredump.conf.d/custom.conf\n```\n\n```\n[Coredump]\nStorage=none\n```\n\nЗатем перезагрузите настройки systemd.\n\nОдного этого метода обычно достаточно для отключения записи дампов, если в системе нет других программ, включающих автоматические дампы, но дамп памяти всё равно генерируется в памяти и systemd-coredump всё равно запускается.\n\n"
    },
    {
      "title": "Используя PAM limits",
      "level": 3,
      "content": "Максимальный размер дампа памяти для пользователей, вошедших в систему через PAM, задаётся в файле limits.conf. Установка нулевого значения полностью отключает дампы памяти. [2]\n\n```\n/etc/security/limits.conf\n```\n\n```\n* hard core 0\n```\n\n"
    },
    {
      "title": "Используя ulimit",
      "level": 3,
      "content": "Командные оболочки вроде bash и zsh имеют встроенную команду ulimit, которую можно использовать для просмотра или изменения ограничений на ресурсы оболочки и запускаемых ею процессов. Подробнее смотрите bash(1) § SHELL BUILTIN COMMANDS или zshbuiltins(1).\n\nОтключение дампов памяти в текущей командной оболочке:\n\n```\n$ ulimit -c 0\n```\n\n"
    },
    {
      "title": "Создание дампа памяти",
      "level": 2,
      "content": "Чтобы сгенерировать дамп памяти произвольного процесса, сначала установите пакет gdb. Затем найдите PID запущенного процесса, например, с помощью pgrep:\n\n```\n$ pgrep -f firefox\n```\n\n```\n2071 firefox\n```\n\nПодключитесь отладчиком к этому процессу:\n\n```\n$ gdb -p 2071\n```\n\nИ затем в отладчике выполните:\n\n```\n(gdb) generate-core-file\nSaved corefile core.2071\n(gdb) quit\n```\n\nТеперь у вас есть дамп памяти в файле core.2071.\n\n"
    },
    {
      "title": "Куда они попадают?",
      "level": 3,
      "content": "sysctl kernel.core_pattern определяет, куда отправляются автоматические дампы памяти. По умолчанию их принимает systemd-coredump, который настраивается через файл /etc/systemd/coredump.conf. По умолчанию он записывает дампы в /var/lib/systemd/coredump (опция Storage=external), сжимая их с помощью zstd (опция Compress=yes). Кроме того, можно настроить различные ограничения на размер хранилища.\n\nЧтобы получить дамп памяти из журнала, смотрите coredumpctl(1).\n\n"
    },
    {
      "title": "Изучение дампа памяти",
      "level": 2,
      "content": "Команда coredumpctl покажет список сохранённых дампов, среди которых можно найти нужный:\n\n```\n# coredumpctl list\n```\n\nДля поиска нужного дампа можно использовать PID, имя исполняемого файла, путь к исполняемому файлу или предикат journalctl (подробнее: coredumpctl(1) и journalctl(1)). Просмотр подробностей о дампах ядра:\n\n```\n# coredumpctl info соответствие\n```\n\nОбратите внимание на строку \"Signal\", она поможет определить причину сбоя. Для более глубокого анализа вы можете изучить backtrace с помощью gdb:\n\n```\n# coredumpctl gdb соответствие\n```\n\nПосле запуска gdb можно использовать команду bt для получения backtrace:\n\n```\n(gdb) bt\n```\n\nЕсли отладочные символы нужны, но не найдены, можно попробовать получить их, как описано в статье Отладка/Трассировка.\n\n"
    },
    {
      "title": "Удаление дампов памяти",
      "level": 2,
      "content": "Файлы дампов памяти, хранящиеся в /var/lib/systemd/coredump/, будут автоматически очищаться командой systemd-tmpfiles --clean, которая запускается ежедневно с помощью systemd-tmpfiles-clean.timer. Дампы памяти настроены на хранение не менее 3 дней, смотрите systemd-tmpfiles --cat-config.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- american fuzzy lop - Инструмент для автоматизированного тестирования ядра и программ\n- Filesystem fuzzing - Статья LWN о тестировании файловых систем на наличие ошибок\n\n"
    }
  ]
}