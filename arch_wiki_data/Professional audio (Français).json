{
  "title": "Professional audio (Français)",
  "url": "https://wiki.archlinux.org/title/Professional_audio_(Fran%C3%A7ais)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Sound system\n- JACK\n- Realtime kernel\n- envy24control\n\nLes systèmes Linux actuels sont plus que capables de répondre à vos besoins audio (semi-)professionnels. Des latences de 5 ms à 1 ms peuvent être atteintes avec un bon matériel et une configuration adapté.\n\n"
    },
    {
      "title": "Pour commencer",
      "level": 2,
      "content": "Arch Linux fournit le groupe de paquets pro-audio (proposant toutes les applications (semi-)professionnelles pertinentes), lv2-plugins, ladspa-plugins, dssi-plugins et vst-plugins (ces derniers étant des sous-groupes du premier).\n\nL'audio à faible latence sur Linux est possible grâce à JACK (toutes les applications dans le groupe pro-audio sont des clients de JACK).\n\n"
    },
    {
      "title": "Configuration du système",
      "level": 3,
      "content": "Vous pouvez envisager les optimisations courantes ci-après :\n\n- Régler la politique de gestion de la fréquence du processeur sur performance.\n- Configurer pam_limits (par exemple en installant realtime-privileges et en ajoutant votre utilisateur au groupe realtime).\n- Utiliser le paramètre du noyau threadirqs (consulter [1] si besoin) - appliqué par défaut par le noyau linux patché pour le temps réel.\n- Utiliser le noyau linux patché pour le temps réel.\n- Ajouter noatime au fstab (voir Improving performance (Français)#Options de montage).\n- Augmenter la demande de la plus haute fréquence d'interruption RTC (64 Hz par défaut) en exécutant la commande suivante au démarrage:\n\n```\n# echo 2048 > /sys/class/rtc/rtc0/max_user_freq\n# echo 2048 > /proc/sys/dev/hpet/max-user-freq\n```\n\n- Réduire la swappiness (alias fréquence de swap, réglée à 60 par défaut) à par exemple 10. Le système attendra beaucoup plus longtemps avant d'essayer d'échanger des données sur le disque (consultez wikipedia:Paging#Swappiness). Cela peut être fait à la volée avec la commande sysctl vm.swappiness=10 (voir sysctl(8)) ou réglé définitivement, en utilisant un fichier de configuration (voir sysctl.d(5)) comme :\n\n```\n/etc/sysctl.d/90-swappiness.conf\n```\n\n```\nvm.swappiness = 10\n```\n\n- Augmenter le nombre maximum de vérifications sur les fichiers (par défaut à 524288) à par exemple 600000, que inotify surveille pour votre utilisateur, peut aider avec les applications, qui nécessitent de nombreuses accès simultanés aux fichiers (telles que les DAWs). Cela peut une fois encore être fait à la volée avec la commande sysctl fs.inotify.max_user_watches=600000 ou dans un fichier de configuration dédié :\n\n```\n/etc/sysctl.d/90-max_user_watches.conf\n```\n\n```\nfs.inotify.max_user_watches = 600000\n```\n\nVous pouvez aussi maximiser le minuteur (timer) de la latence de la carte son PCI et augmenter le minuteur de la latence de tous les autres périphériques PCI (64 par défaut).\n\n```\n$ setpci -v -d *:* latency_timer=b0\n# setpci -v -s $SOUND_CARD_PCI_ID latency_timer=ff\n```\n\nPar exemple SOUND_CARD_PCI_ID=03:00.0.\n\nLe SOUND_CARD_PCI_ID peut être obtenu ainsi :\n\n```\n$ lspci | grep -i audio\n```\n\n```\n03:00.0 Multimedia audio controller: Creative Labs SB Audigy (rev 03)\n03:01.0 Multimedia audio controller: VIA Technologies Inc. VT1720/24 [Envy24PT/HT] PCI Multi-Channel Audio Controller (rev 01)\n```\n\n"
    },
    {
      "title": "Liste de vérifications",
      "level": 4,
      "content": "Les étapes ci-dessous servent principalement à vérifier que votre système multimédia fonctionne :\n\n- Avez-vous réglé le son correctement ? Consultez ALSA ou OSS.\n\n```\n$ speaker-test\n```\n\n- Est-ce que PulseAudio, OSS ou autre chose s'accapare mon matériel ?\n\n```\n$ lsof +c 0 /dev/snd/pcm* /dev/dsp*\n```\n\n-OU-\n\n```\n$ fuser -fv /dev/snd/pcm* /dev/dsp*\n```\n\n- Est-ce que PAM-security et realtime fonctionnent correctement ?\n\nVoir : Realtime for Users#PAM-enabled login (Soyez particulièrement attentif, surtout si vous n'exécutez pas SDDM, GDM ou Slim.)\n\n- Ai-je redémarré après avoir fait tout cela ?\n\n"
    },
    {
      "title": "JACK",
      "level": 3,
      "content": "L'objectif est de trouver la meilleure combinaison possible de taille de tampon et de nombre de périodes, compte tenu du matériel dont vous disposez. Frames/Period = 256 est un bon point de départ. Pour les périphériques embarqués et USB, essayez Periods/Buffer = 3. Les valeurs communément utilisées sont : 256/3, 256/2, 128/3.\n\nDe plus, la fréquence d'échantillonnage doit correspondre à la fréquence d'échantillonnage du matériel. Pour vérifier les taux d'échantillonnage et les débits binaires pris en charge par votre appareil :\n\n```\n$ cat /proc/asound/card0/codec#0\n```\n\nRemplacer card0 et codec#0 en fonction de votre matériel. Cherchez rates ou VRA dans Extended ID. La fréquence d'échantillonnage commune à de nombreux appareils d'aujourd'hui est la suivante 48000 Hz. D'autres fréquences courantes sont 44100 Hz et 96000 Hz.\n\nPresque toujours, lorsqu'il s'agit d'enregistrer ou de séquencer avec du matériel externe, realtime est indispensable. De plus, vous voudrez peut-être définir une priorité maximale (au moins 10 de moins que les limites du système définies dans /etc/security/limits.d/99-realtime-privileges.conf ; la plus élevée est pour le périphérique lui-même).\n\nCommencez par jack avec les options que vous venez de découvrir :\n\n```\n$ /usr/bin/jackd -R -P89 -dalsa -dhw:0 -r48000 -p256 -n3\n```\n\nqjackctl, cadenceAUR, patchageAUR et studio-controls-gitAUR peuvent tous être utilisés comme interfaces graphiques pour contrôler l'état de JACK et simplifier sa configuration.\n\nLecture supplémentaire : Article de Linux Magazine\n\n"
    },
    {
      "title": "FireWire",
      "level": 4,
      "content": "JACK(2) est compilé avec FFADO, il suffit de l'installer avec le paquet libffado.\n\nPour vérifier si vous avez des chances de faire fonctionner les périphériques FireWire :\n\n- Assurez-vous que les modules appropriés du noyau sont chargés :\n\n```\n# modprobe firewire-core firewire-ohci\n```\n\n- Mon chipset est-il assez stable pour initialiser une interface ?\n\nhttps://www.ffado.org/?q=node/622\n\n- Mon chipset est-il assez stable pour faire fonctionner une interface pleinement ?\n\nNous ne pouvons pas en être sûrs, en particulier pour ceux qui sont basés sur Ricoh (problème de multiplateforme). La plupart du temps, votre appareil fonctionnera bien, mais vous serez parfois confronté à de drôles de bizarreries. Pour les malchanceux, ce sera l'enfer.\n\n```\nWarning (dice_eap.cpp)[1811] read: No routes found. Base 0x7, offset 0x4000\n```\n\n"
    },
    {
      "title": "Jack Flash",
      "level": 4,
      "content": "Si après avoir configuré Jack, vous constatez que Flash n'a pas d'audio.\n\nAfin de faire fonctionner Flash avec Jack, vous devrez installer le paquet libflashsupport-jackAUR[broken link: package not found].\n\nVous pouvez également utiliser une méthode plus souple pour permettre aux programmes Alsa (y compris Flash) de jouer du son pendant que jack est en cours d'exécution :\n\nD'abord vous devez installer le plugin jack pour Alsa en installant le paquet alsa-plugins. Activez-le en éditant (ou créant) /etc/asound.conf (paramètres généraux du système) pour avoir ces lignes :\n\n```\n# convert alsa API over jack API\n# use it with\n# % aplay foo.wav\n\n# use this as default\npcm.!default {\n    type plug\n    slave { pcm \"jack\" }\n}\n\nctl.mixer0 {\n    type hw\n    card 1\n}\n\n# pcm type jack\npcm.jack {\n    type jack\n    playback_ports {\n        0 system:playback_1\n        1 system:playback_2\n    }\n    capture_ports {\n        0 system:capture_1\n        1 system:capture_2\n    }\n}\n```\n\nVous n'avez pas besoin de redémarrer votre ordinateur ou quoi que ce soit. Il suffit de modifier les fichiers de configuration d'ALSA, de démarrer Jack.\n\n"
    },
    {
      "title": "Script Quickscan pour JACK",
      "level": 4,
      "content": "La plupart des gens voudront probablement faire fonctionner JACK en mode temps réel, il y a cependant beaucoup de boutons à presser pour y parvenir.\n\nUn excellent moyen de diagnostiquer rapidement votre système et de découvrir ce qui lui manque pour que JACK fonctionne correctement en mode temps réel est d'exécuter le script Quickscan.\n\n```\ngit clone git://github.com/raboof/realtimeconfigquickscan.git\ncd realtimeconfigquickscan\nperl ./realTimeConfigQuickScan.pl\n```\n\nLe résultat devrait vous indiquer les lacunes de votre système et vous indiquer les endroits où trouver plus d'informations.\n\n"
    },
    {
      "title": "Effets de bureau et JACK",
      "level": 4,
      "content": "Outre les facteurs énumérés dans la section Configuration du système ci-dessus, ainsi que les paramètres vérifiés par realTimeConfigQuickScan.pl, il convient également de noter que les environnements de bureau peuvent provoquer des xruns et donc des problèmes audio avec JACK, en particulier les environnements gourmands en mémoire/processus et les bureaux qui utilisent des effets de bureau composés. Il est recommandé de désactiver les effets de bureau lorsque vous utilisez JACK. Vous obtiendrez probablement le moins de xruns et les meilleures performances en utilisant un bureau léger ou un simple gestionnaire de fenêtres.\n\n"
    },
    {
      "title": "Example configuration générale",
      "level": 4,
      "content": "Un exemple de configuration générale est JACK Audio Connection Kit#A shell-based example setup.\n\n"
    },
    {
      "title": "Noyau temps réel",
      "level": 2,
      "content": "Depuis un certain temps, le noyau Linux de base s'est révélé adéquat pour les utilisations en temps réel. Le noyau de base (avec CONFIG_PREEMPT=y, défaut dans Arch) peut fonctionner avec une latence de 10 ms dans le pire des cas (temps entre le moment où une interruption se produit dans le matériel et le moment où le fil d'interruption correspondant s'exécute), bien que certains pilotes de périphériques puissent introduire une latence bien pire que celle-là. Ainsi, en fonction de votre matériel et de votre pilote (et de vos besoins), vous pouvez vouloir un noyau avec des capacités temps réel dures.\n\nLe correctif RT_PREEMPT d'Ingo Molnar et Thomas Gleixner est une option intéressante pour les applications en temps réel difficiles et fermes, allant de l'audio professionnel au contrôle industriel. La plupart des distributions Linux spécifiques à l'audio sont livrées avec ce correctif appliqué. Un noyau préemptible en temps réel permettra également d'ajuster les priorités des processus de gestion des IRQ et de garantir un son fluide, quelle que soit la charge.\n\nSi vous compilez votre propre noyau, n'oubliez pas que la suppression des modules/options n'équivaut pas à un noyau \"plus léger et plus méchant\". Il est vrai que la taille de l'image du noyau est réduite, mais dans les systèmes actuels, ce n'est pas un problème aussi important qu'en 1995.\n\nDe toute façon, vous devez également vous assurer que :\n\n- Timer Frequency et réglé sur 1000Hz (CONFIG_HZ_1000=y; si vous ne faites pas de MIDI vous pouvez ignorer ça)\n- APM est DISABLED (CONFIG_APM=n; Problème avec certains matériels - par défaut pour x86-64)\n\nSi vous voulez vraiment un système allégé, nous vous suggérons de suivre votre propre voie et d'en déployer un avec static /devs. Vous devriez cependant définir l'architecture de votre processeur. La sélection de \"Core 2 Duo\" pour le matériel approprié permettra une bonne optimisation, mais pas autant que si vous optimisiez vous même.\n\nProblème(s) général(aux) avec les noyaux (en temps réel) :\n\n- Hyperthreading (si vous suspectez, désactivez dans le BIOS)\n\nDes noyaux corrigés prêts à être exécutés/compilés sont disponibles dans ABS et AUR.\n\n"
    },
    {
      "title": "AUR",
      "level": 3,
      "content": "À partir d'AUR, vous avez les options suivantes :\n\n- linux-rt\n- linux-rt-lts (Support à long terme, version stable)\n\nLes deux premiers sont des noyaux standards avec le correctif CONFIG_PREEMPT_RT, tandis que -ice inclut des correctifs que certains peuvent considérer comme désagréables, alors que pour d'autres c'est une bénédiction.\n\n"
    },
    {
      "title": "MIDI",
      "level": 2,
      "content": "Pour diminuer la gigue MIDI lors de l'utilisation d'un équipement MIDI externe, l'option -Xalsarawmidi de jack2 doit être utilisée. Pour ce faire, vous devez également utiliser a2jmidid.\n\nAvec alsa-midi-latency-test vous pouvez tester la gigue que vous obtenez. Les cartes PCI et PCIe sont généralement bien meilleures que les dispositifs MIDI USB.\n\nPour travailler avec MIDI, il est fortement recommandé d'installer a2j (a2jmidid), un pont entre alsa midi et jack midi. Il vous permet de connecter des applications qui ne communiquent qu'avec alsa midi à des applications qui n'utilisent que jack midi. Laditray peut également démarrer/arrêter a2j.\n\n"
    },
    {
      "title": "Variables d’environnement",
      "level": 2,
      "content": "Si vous installez des éléments dans des répertoires non standard, il est souvent nécessaire de définir des variables de chemin d'accès à l'environnement afin que les applications sachent où chercher (pour les plug-ins et autres bibliothèques). Cela ne concerne généralement que VST (Virtual Studio Technology), car les utilisateurs peuvent avoir un emplacement Wine ou Windows externe.\n\nEn général, nous n'avons pas de plug-ins Linux (LADSPA, LV2, DSSI, LXVST) au-delà des chemins standard, il n'est donc pas nécessaire de les exporter. Mais si vous le faites, assurez-vous d'inclure également ces chemins standard car Arch ne fait rien pour dssi ou ladspa, et certaines applications comme dssi-vst ne regarderont pas ailleurs si elles trouvent des chemins prédéfinis.\n\n```\n~/.bashrc\n```\n\n```\n...\nexport VST_PATH=/usr/lib/vst:/usr/local/lib/vst:~/.vst:/someother/custom/dir\nexport LXVST_PATH=/usr/lib/lxvst:/usr/local/lib/lxvst:~/.lxvst:/someother/custom/dir\nexport LADSPA_PATH=/usr/lib/ladspa:/usr/local/lib/ladspa:~/.ladspa:/someother/custom/dir\nexport LV2_PATH=/usr/lib/lv2:/usr/local/lib/lv2:~/.lv2:/someother/custom/dir\nexport DSSI_PATH=/usr/lib/dssi:/usr/local/lib/dssi:~/.dssi:/someother/custom/dir\n```\n\n"
    },
    {
      "title": "Trucs et astuces",
      "level": 2,
      "content": "- Désactivez le WiFi et fermez tous les programmes qui n'ont pas besoin d'être ouverts lors de l'enregistrement, comme les navigateurs. De nombreuses personnes ont signalé que la désactivation du WiFi a permis d'obtenir des performances JACK plus fiables.\n\n- Certains matériels audio USB sont connus pour ne pas fonctionner correctement lorsqu'ils sont branchés sur des ports USB 3. Essayez plutôt les ports USB 2/1.\n\n- Des problèmes d'IRQ peuvent survenir et causer des problèmes. Un exemple est le matériel vidéo qui réserve le bus, provoquant des interruptions inutiles dans le chemin d'E/S du système. Voir la discussion à FFADO IRQ Priorities How-To[dead link 2024-07-30 ⓘ]. Si vous avez un noyau en temps réel ou un noyau récent, vous pouvez utiliser rtirq pour ajuster les priorités des threads de gestion des IRQ.\n\n- N'utilisez pas le daemon irqbalance, ou faites le avec précaution [2].\n\n- Si vous avez besoin d'utiliser plusieurs périphériques audio avec JACK2, les utilitaires alsa_in et alsa_out peuvent être utilisés pour envelopper des périphériques supplémentaires et les faire apparaître comme sorties dans la baie de brassage JACK.\n\n- Certains daemon/processus peuvent provoquer de façon inattendue des xruns. Si vous n'en avez pas besoin, tuez-les, sans vous poser de question.\n\n```\n$ ls /var/run/daemons\n$ top # ou htop, ps aux, ce qui vous convient le mieux\n$ killall -9 $processname\n# systemctl stop $daemonname\n```\n\n- Si vous rencontrez beaucoup de xruns, surtout avec nvidia, désactivez l'accélération de votre GPU. Cela peut être fait via la fenêtre de contrôle de la carte et pour nvidia, c'est \"prefer maximum performance\" (grâce à un post dans LAU par Frank Kober [3]).\n\n- Vous pouvez en lire plus sur ALSA : https://www.volkerschatz.com/noise/alsa.html\n\n"
    },
    {
      "title": "Matériel",
      "level": 2,
      "content": "La majorité des cartes son et des périphériques audio fonctionneront sans configuration ni paquet supplémentaire, seulement paramétrer la carte son utilisée par JACK et de redémarrer.\n\nCe n'est pas vrai pour tous les périphériques, et donc les cas particuliers sont également listés.\n\n"
    },
    {
      "title": "M-Audio Delta 1010",
      "level": 3,
      "content": "Les cartes de la série Delta de M-Audio sont basées sur la puce audio VIA Ice1712. Cette puce nécessite l'installation du paquet alsa-tools car il contient le programme envy24control. Ce programme est un mélangeur/contrôleur de niveau matériel qui remplacera alsa-mixer et vous épargnera quelques soucis. Notez que cette section n'a aucune information sur la configuration ou l'utilisation de MIDI.\n\nOuvrez l'application mélangeur/contrôleur :\n\n```\n$ envy24control\n```\n\nCette application peut être plus que déroutante ; voir envy24control pour des conseils sur son utilisation. Ceci dit, voici une configuration de travail très simple pour le multipiste avec Ardour.\n\n1. Dans les onglets \"Monitor Inputs\" et \"Monitor PCMs\", réglez toutes les entrées de monitoring et les PCMs de monitoring à environ 20.\n1. Dans l'onglet \"Patchbay / Router\", réglez tout sur la sortie PCM.\n1. Dans l'onglet \"Hardware Settings\", vérifiez que le paramètre Master Clock correspond à celui défini dans Qjackctl. S'ils ne correspondent pas, vous aurez des décrochages hors de contrôle !\n\n"
    },
    {
      "title": "M-Audio Fast Track Pro",
      "level": 3,
      "content": "La Fast Track Pro de M-Audio est une interface audio USB 4x4, travaillant à 24bit/96kHz. En raison de la limitation de l'USB 1, cet appareil nécessite une configuration supplémentaire pour avoir accès à toutes ses fonctionnalités. L'appareil fonctionne dans l'une des deux configurations suivantes :\n\n- Configuration 1, ou mode \"Class compliant\" - avec une fonctionnalité réduite, seulement 16bit, 48kHz, entrée analogique (2 canaux) et sortie numérique/analogique (4 canaux).\n- Configuration 2 - avec accès à toutes les fonctionnalités de l'interface.\n\nActuellement, avec le noyau de base, il fonctionne dans la configuration 2, mais si vous voulez vous assurer dans quel mode vous êtes, vous pouvez vérifier le journal du noyau pour les entrées :\n\n```\nusb-audio : La Fast Track Pro passe en configuration 2\nusb-audio : Fast Track Pro config OK\n```\n\nL'interface nécessite également une étape supplémentaire de configuration pour changer de mode. Elle est effectuée à l'aide de l'option device_setup pendant le chargement du module. La méthode recommandée pour configurer l'interface est d'utiliser le fichier modprobe.d :\n\n```\n/etc/modprobe.d/ftp.conf\n```\n\n```\noptions snd_usb_audio vid=0x763 pid=0x2012 device_setup=XXX index=YYY enable=1\n```\n\nOù vid et pid sont les id vendeur et produit pour la M-Audio Fast Track Pro, index est le numéro du dispositif souhaité et device_setup est la configuration du dispositif souhaité. les valeurs possibles pour device_setup sont :\n\nTable content:\ndevice_setup value | bit depth | frequency | analog output | digital output | analog input | digital input | IO mode\n0x0 | 16 bit | 48kHz | + | + | + | + | 4x4\n0x9 | 24 bit | 48kHz | + | + | + | - | 2x4\n0x13 | 24 bit | 48kHz | + | + | - | + | 2x4\n0x5 | 24 bit | 96kHz | * | * | * | * | 2x0 or 0x2\n\nLe mode 24 bit/96kHz est spécial : il fournit toutes les entrées/sorties, mais vous ne pouvez ouvrir qu'une des 4 interfaces à la fois. Si vous ouvrez par exemple une interface de sortie et essayez ensuite d'ouvrir une deuxième interface de sortie ou d'entrée, vous verrez une erreur dans le journal du noyau :\n\n```\ncannot submit datapipe for urb 0, error -28: not enough bandwidth\n```\n\nce qui est parfaitement normal, car il s'agit d'un périphérique USB 1 et il ne peut pas fournir une largeur de bande suffisante pour prendre en charge plus d'une seule destination/source (2 canaux) de cette qualité à la fois.\n\nEn fonction de la valeur de index, deux périphériques seront configurés : hwYYY:0 et hwYYY:1, qui contiendront les entrées et sorties disponibles. Le premier dispositif est le plus susceptible de contenir une sortie analogique et une entrée numérique, tandis que le second contiendra une entrée analogique et une sortie numérique. Pour savoir quels périphériques sont liés et où et s'ils sont correctement configurés, vous pouvez vérifier /proc/asound/cardYYY/stream{0,1} . Vous trouverez ci-dessous une liste de points de terminaison importants qui vous aideront à identifier correctement les connexions de la carte (il est facile de confondre les connexions d'entrée et de sortie analogiques et numériques avant de s'habituer au dispositif) :\n\n```\nEP 3 (analgoue output = TRS on back, mirrored on RCA outputs 1 and 2 on back)\nEP 4 (digital output = S/PDIF output on back, mirrored on RCA outputs 3 and 4 on back)\nEP 5 (analogue input = balanced TRS or XLR microphone, unbalanced TS line on front)\nEP 6 (digital input = S/PDIF input on back)\n```\n\nCe fichier .asoundrc permet d'utiliser des entrées/sorties 24 bits sur le fast-track pro (et je suis sûr qu'il pourrait être modifié pour fonctionner avec d'autres périphériques usb 3-byte) dans le contexte de l'interface 32 bits de jack tout en routant le trafic alsa par défaut vers les sorties jack de l'interface audio. Alsa sera en mode S24_3BE mais jack peut brancher des données S32_LE dans et hors de l'interface et d'autres programmes alsa pourront brancher presque n'importe quoi dans jack.\n\n```\n### ~/.asoundrc\n### default alsa config file, for a fast-track pro configured in 24-bit mode as so:\n### options snd_usb_audio device_setup=0x9\n### invoke jack with: (if you use -r48000, change the rate in the plugs as well)\n### $jackd -dalsa -P\"hw:Pro\" -C\"hw:Pro,1\" -r44100\n\n## setup input and output plugs so jack can write S24_3BE data to the audio interface\n\npcm.maud0 {\n\ttype hw\n\tcard Pro\n}\n\n#jack_out plug makes sure that S32_LE data can be written to hw:Pro\npcm.jack_out{\n\ttype plug\n\tformat S32_LE\n\tchannels 2\n\trate 44100\n\tslave pcm.maud0\n}\n\npcm.maud1 {\n\ttype hw\n\tcard Pro\n\tdevice 1\n}\n## jack_in plug makes sure that hw:Pro,1 can read S32_LE data\npcm.jack_in {\n\ttype plug\n\tformat S32_LE\n\tchannels 2\n\trate 44100\n\tslave pcm.maud1\n}\n#####\n# route default alsa traffic through jack system io\n\npcm.jack {\n    type jack\n    playback_ports {\n        0 system:playback_1\n        1 system:playback_2\n    }\n    capture_ports {\n        0 system:capture_1\n        1 system:capture_2\n    }\n}\npcm.amix {\n\ttype asym\n\tplayback.pcm \"jack\"\n\tcapture.pcm \"jack\"\n\t}\npcm.!default {\n\ttype plug\n\tslave.pcm amix\n}\n```\n\n"
    },
    {
      "title": "PreSonus Firepod",
      "level": 3,
      "content": "1. Startup : Soit à partir de la ligne de commande ou de QjackCtl, le pilote s'appelle firewire.\n1. Specs : La carte contient 8/8 XLR préamplifiés plus une paire stéréo, au total 10 canaux.\n1. Liaison : Les cartes peuvent être reliées entre elles sans aucun problème.\n1. Réglages du matériel : Rien de particulier, modifiez les réglages dans QjackCtl selon vos goûts.\n\nLes niveaux de volume sont matériels et le routage peut être fait par QjackCtl, même avec plus de cartes reliées ensemble, ce n'est pas un problème. Le ffadomixer ne fonctionne pas encore avec cette carte, espérons que dans le futur nous pourrons contrôler plus d'aspects de la carte à travers une interface logicielle comme celle-ci.\n\n"
    },
    {
      "title": "PreSonus AudioBox USB",
      "level": 3,
      "content": "1. Startup : Elle est appelée \"USB\" par ALSA.\n1. Caractéristiques : Deux entrées mono TRS+XLR, deux sorties mono TRS, entrée et sortie MIDI, plus une prise casque stéréo séparée. Boutons de contrôle pour les deux entrées, pour la sortie principale et pour le casque, quatre en tout.\n1. Matériel : Fonctionne très bien, aussi bien en audio qu'en MIDI. Aucun contrôle de mixage logiciel.\n\n"
    },
    {
      "title": "Tascam US-122",
      "level": 3,
      "content": "Cela ne s'applique pas au modèle US-122L\n\n1. Paquets requis : alsa-tools alsa-firmware fxloadAUR\n1. Règles udev : créer le fichier de règles suivant, puis recharger les règles udev, udev (Français)#Charger de nouvelles règles\n\n```\n/etc/udev/rules.d/51-tascam-us-122.rules\n```\n\n```\nSUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idProduct}==\"8006\", ATTRS{idVendor}==\"1604\", RUN+=\"/bin/sh -c '/sbin/fxload -D %N -s /usr/share/alsa/firmware/usx2yloader/tascam_loader.ihx -I /usr/share/alsa/firmware/usx2yloader/us122fw.ihx'\"\nSUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idProduct}==\"8007\", ATTRS{idVendor}==\"1604\", RUN+=\"/bin/sh -c '/usr/bin/usx2yloader'\"\n```\n\nBrancher le matériel. L'appareil devrait maintenant fonctionner, il n'y a pas de contrôle de mixage de logiciel.\n\n"
    },
    {
      "title": "RME Babyface",
      "level": 3,
      "content": "Fonctionne très bien à faible latence (~5ms) avec alsa-utils, jack2 et linux-rt. L'exécution avec ALSA uniquement et le noyau standard peut provoquer des craquements à des latences plus faibles.\n\nPour être reconnu et fonctionner, la version du firmware de la Babyface doit être >= 200, ce qui introduit le mode Class Compliant. Pour entrer dans le mode Class Compliant, maintenez les boutons \"Select\" et \"Recall\" tout en connectant la Babyface à l'ordinateur via USB. Elle devrait maintenant être reconnue.\n\nPour vérifier si elle est reconnue :\n\n```\n$ grep -i baby /proc/asound/cards\n```\n\nPour plus d'informations sur le mode Class Compliant, visitez le site web de RME, ils ont un PDF qui couvre toutes les fonctionnalités.\n\nLa Babyface n'a pas besoin d'un réglage spécial de JACK. Mais si vous voulez utiliser l'entrée/sortie MIDI intégrée, vous devez régler le \"MIDI Driver\" sur \"seq\" et éventuellement désactiver \"Enable Alsa Sequencer Support\" pour l'utiliser en combinaison avec d'autres dispositifs MIDI (un clavier MIDI USB par exemple).\n\n"
    },
    {
      "title": "Les SDK de Steinberg",
      "level": 3,
      "content": "C'est très clair - nous ne pouvons distribuer ni les en-têtes VST ni les en-têtes ASIO sous forme de paquet binaire. Cependant, lorsque vous compilez un programme qui hébergerait des plug-ins VST Windows .dll, vérifiez les indications suivantes (qui ne nécessitent pas l'utilisation d'un SDK) :\n\n- dssi-vst\n- fst\n- vestige\n\nCeci dit, si vous compilez un programme qui hébergerait des plug-ins VST natifs .so, alors il n'y a pas d'échappatoire. Pour de tels cas, Arch nous permet encore une fois de maintenir une base de données logicielle locale uniforme. Nous pouvons \"installer\" le SDK \"dans tout le système\" - vous devez simplement le télécharger vous-même et le placer dans le répertoire d'empaquetage.\n\nObtenez-les depuis AUR\n\nNote : Steinberg n'interdit pas la redistribution des produits résultants, ni ne dicte la licence sous laquelle ils peuvent être utilisés. Il existe de nombreux plug-ins VST sous licence GPL. En tant que tel, la distribution de paquets binaires de logiciels compilés avec ces en-têtes restreints n'est pas un problème, car les en-têtes sont simplement des dépendances de compilation.\n\n"
    },
    {
      "title": "Nouvelles de Linux et Arch Linux Pro Audio",
      "level": 2,
      "content": "- Créez une station de production multimédia sérieuse avec Arch - Article Linux.com, Juillet 2012\n- Une histoire d'arche - Article d'un collègue musicien et écrivain, Dave Phillips, octobre 2011\n- De Windows à Linux : une décision judicieuse[dead link 2023-05-06 ⓘ] - Entretien avec Geoff \"songshop\" Beasley, février 2010\n\n"
    },
    {
      "title": "Listes de diffusion",
      "level": 2,
      "content": "- Arch Linux Pro-audio Discussions à propos de multimédia en temps réel, incluant l'audio et la vidéo (semi-)professionnelle.\n- Linux Audio Developer La liste de diffusion Linux relative à l'audio (semi-)professionnelle avec beaucoup de fréquentation et une énorme communauté d'abonnés composée principalement de développeurs.\n- Linux Audio User La liste de diffusion Linux relative à l'audio (semi-)professionnelle avec beaucoup de fréquentation et une énorme communauté d'abonnés composée d'utilisateurs et de développeurs.\n\n"
    },
    {
      "title": "IRC",
      "level": 2,
      "content": "- #archlinux-proaudio - Canal Arch Linux pro-audio\n- #lau - Canal général Linux Audio pour les utilisateurs\n- #lad - Canal général Linux Audio pour les développeurs\n- #jack - Développement et assistance relatifs au système audio JACK\n- #lv2 - Développement et assistance relatifs au format de plugin LV2\n- #ardour - Discussion et assistance relatifs au séquenceur Ardour\n- #opensourcemusicians - Grand canal de discussion général pour les musiciens OSS\n\n"
    },
    {
      "title": "Voir aussi",
      "level": 2,
      "content": "- Audio Une liste complète d'applications audio sur Arch Linux\n- Realtime kernel\n- Meta paquets AUR : proaudio-metaAUR, soundfonts-aur-metaAUR, lv2-plugins-aur-metaAUR\n- Dépôt utilisateur proaudio\n- awesome-linuxaudio Une liste de logiciels et de ressources pour la production professionnelle audio/vidéo/événements en direct sur la plate-forme Linux\n- Realtime Le wiki de la Fondation Linux sur les correctifs PREEMPT_RT\n- Multimedia et jeux / Forums Arch Linux\n- ArchAudio - le désormais historique - dépôt de paquets liés à la pro-audio (un peu d'histoire)\n- Configuration audio[dead link 2024-10-12 ⓘ] Guide complet pour une installation pro-audio basée sur Arch Linux\n\n"
    }
  ]
}