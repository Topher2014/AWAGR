{
  "title": "Android (Suomi)",
  "url": "https://wiki.archlinux.org/title/Android_(Suomi)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **Tämä artikkeli tai osa vaatii Suomennosta.** Tämä artikkeli tai osa vaatii Suomennosta.\n\nTämä artikkeli tai osa vaatii Suomennosta.\n\nAiheeseen liittyen\n\n- Android tethering\n- Android Debug Bridge\n\n"
    },
    {
      "title": "Tiedostojen siirtäminen",
      "level": 2,
      "content": "On olemassa useita tapoja siirtää tiedostoja tietokoneen ja Android laitteen välillä:\n\n- USB kaapeli Media Transfer Protocol moderneille Android laitteille USB massamuisti vanhoille laitteille Android Debug Bridge\n- erityiset USB tikut / tavallinen USB tikku adapterilla\n- Bluetooth\n- Arch Linux ohjelmat Android vastakappaleella asiakasohjelma tai palvelin protokollille joita voidaan käyttää tiedostojen siirtoon (kuten SSH, FTP, Samba tai HTTP) KDE Connect (kdeconnect) – integroi Android laitteen KDEn tai Gnomen työpöytäympäristön kanssa (sisältää synkatut ilmoitukset & leikepöydän, multimedia hallinnan, ja tiedosto/URL jakaminen). pilvipalvelusta synkronoivat asiakasohjelmat Syncthing sendanywhereAUR – järjestelmästäriippumaton tiedoston jakaminen qrcpAUR – siirrä tiedostoja wifissä tietokoneesta mobiililaitteeseen QR-koodin skannauksella\n\n- Media Transfer Protocol moderneille Android laitteille\n- USB massamuisti vanhoille laitteille\n- Android Debug Bridge\n\n- asiakasohjelma tai palvelin protokollille joita voidaan käyttää tiedostojen siirtoon (kuten SSH, FTP, Samba tai HTTP)\n- KDE Connect (kdeconnect) – integroi Android laitteen KDEn tai Gnomen työpöytäympäristön kanssa (sisältää synkatut ilmoitukset & leikepöydän, multimedia hallinnan, ja tiedosto/URL jakaminen).\n- pilvipalvelusta synkronoivat asiakasohjelmat\n- Syncthing\n- sendanywhereAUR – järjestelmästäriippumaton tiedoston jakaminen\n- qrcpAUR – siirrä tiedostoja wifissä tietokoneesta mobiililaitteeseen QR-koodin skannauksella\n\n"
    },
    {
      "title": "Sovelluksen kehittäminen",
      "level": 2,
      "content": "Virallisesti tuettu tapa koota Android sovelluksia on käyttää Android Studiota.[1]\n\n"
    },
    {
      "title": "Android Studio",
      "level": 3,
      "content": "Android Studio on virallinen Android kehittämis ympäristö perustuen IntelliJ IDEA:an. Se antaa Android kehittäjän työkalut kehittelyä ja testailua varten.\n\nAsenna kyseinen ohjelma android-studioAUR paketilla.\n\nAndroid Studio luo .android polun kotihakemistoon. Android Studio resetointia varten tämän polun voi poistaa.\n\n- Varmista että Java ympäristö on asetettu kunnolla muuten android-studio ei pysty käynnistymään.\n- Jos Android Studio näkyy tyhjänä ikkunana, yritä siirtää _JAVA_AWT_WM_NONREPARENTING=1, katso pulma #57675.\n\nAndroid Studion Setup Wizard asentaa tarvittavat #SDK paketit ja laittaa SDK oletukselta polkuun ~/Android/Sdk.\n\nKomentoriviltä sovellusten kokoamista varten (käyttäen esimerkiksi ./gradlew assembleDebug) aseta ANDROID_SDK_ROOT mpäristömuuttuja SDKn sijaintiin.\n\n"
    },
    {
      "title": "SDK paketit",
      "level": 3,
      "content": "Android SDK paketit voidaan asentaa suoraan ylävirrasta käyttäen #Android Studion SDK hallintaohjelmaa tai sdkmanager komentorivi työkalua (osana Android SDK Tools). Jotkin Android SDK paketit ovat myös saatavissa AUR paketteina, yleensä ne asentuvat /opt/android-sdk/ polkuun.\n\nTarvittavat SDK paketit ovat:\n\nTable content:\nAndroid SDK Paketti | SDK-tyyli polku | AUR paketti | AUR malli | CLI työkalut\nKomentorivi Työkalut | työkalut | android-sdk-cmdline-tools-latestAUR | android-sdk-cmdline-tools-latest-dummyAUR | apkanalyzer, avdmanager, lint, retrace, screenshot2, sdkmanager\nSDK Build-Tools | koontityökalut;versio | android-sdk-build-toolsAUR | android-sdk-build-tools-dummyAUR | aapt, aapt2, aidl, apksigner, bcc_compat, d8, dexdump, dx, lld, llvm-rs-cc, mainDexClases, split-select, zipalign\nSDK Platform-Tools | alustatyökalut | android-sdk-platform-toolsAUR | android-sdk-platform-tools-dummyAUR | adb, dmtracedump, e2fsdroid, etc1tool, #fastboot, hprof-conv, make_f2fs, make_f2fs_casefold, mke2fs, sload_f2fs, sqlite3, systrace\nSDK Platform | alustat;android-taso | android-platformAUR, vanhemmat versiot | android-platform-dummyAUR (tarpeeton)\n\nandroid-tools paketti antaa adb, #fastboot, e2fsdroid ja mke2fs.android SDK Platform-Tools:eista mukaanlukien mkbootimg ja ext2simg.\n\n- Koska Android SDK sisältää 32-bittisiä binäärejä, kannattaa aktivoida multilib paketinjakelu. Muuten saat error: target not found: lib32-* virheviestin.\n- Jos päätät suoraan asentaa SDK paketit ylävirrasta, asenna AUR paketit AUR mallit sarakkeesta saadaksesi tarvittavat riippuvuudet.\n- Jos java.lang.NoClassDefFoundError poikkeus ilmestyy yritettäessä suorittaasdkmanager, käytä OpenJDK 8 JRE:tä väliaikaisesti asentamalla paketti jre8-openjdk ja vaihtamalla Java ympäristö. Katso skdmanager --list ei toimi Java 9 kanssa\n\n"
    },
    {
      "title": "Android Emulaattori",
      "level": 4,
      "content": "Android Emulaattori on saatavissa emulator SDK pakettina, android-emulatorAUR pakettina, ja on olemassa myös malli paketti sille: android-emulator-dummyAUR.\n\nAndroid Emulaattorin suorittamiseen tarvitaan Intel tai ARM järjestelmä kuvake. Ne voidaan asentaa AUR paketinjakelusta[2], sdkmanagerilla tai käyttämällä Android Studion AVD Manageria.\n\n"
    },
    {
      "title": "Muut SDK paketit AUR paketinjakelussa",
      "level": 4,
      "content": "Android tuki kirjasto on nyt saatavilla netistä Googlen Maven paketinjakelusta. Sen voi myös asentaa offline tilassa jakelusta extras;android;m2repository SDK pakettina (myös saatavilla android-support-repositoryAUR).\n\n"
    },
    {
      "title": "/opt/android-sdk tekeminen ryhmä-kirjoitettavaksi",
      "level": 4,
      "content": "AUR paketit asentavat SDKn polkuun /opt/android-sdk/. Tällä polulla on root oikeudet, joten muista suorittaa sdk manageria root käyttäjänä. Jos aiot käyttää sitä tavallisena käyttäjänä, luo android-sdk käyttäjien ryhmä, lisää käyttäjäsi sinne.\n\n```\n# groupadd android-sdk\n# gpasswd -a <user> android-sdk\n```\n\nLaita pystyyn pääsyn hallinta lista antaaksesi uudelle ryhmälle oikeudet kirjoittaa android-sdk kansioon. sdkmanageri voi myös luoda uusia tiedostoja, joten aseta ACL oletus ACL:äksi. X merkintä oletusryhmässä tarkoittaa suorituksen sallimista omistajalta tai keltä vain muulta.\n\n```\n# setfacl -R -m g:android-sdk:rwx /opt/android-sdk\n# setfacl -d -m g:android-sdk:rwX /opt/android-sdk\n```\n\nKirjaudu sisään uudelleen tai käyttäjällä <user> kirjaudu terminaalissa uuteen ryhmään:\n\n```\n$ newgrp android-sdk\n```\n\n"
    },
    {
      "title": "Muut IDE sovellukset",
      "level": 3,
      "content": "Android Studio on virallinen Android kehitysympäristö perustuen IntelliJ IDEAan. Vaihtoehtoisesti voidaan käyttää Netbeans sovellusta NBAndroid-V2 kanssa. Kaikki on kuvattu alapuolella.\n\n"
    },
    {
      "title": "Netbeans",
      "level": 4,
      "content": "Jos Netbeans on mieluisampi IDE ja Android sovelluksia halutaan kehittää, käytä NBAndroid-V2 .\n\nAsenna android-sdkAUR paketti ja seuraa ohjeita täältä.\n\n"
    },
    {
      "title": "Vim / Neovim",
      "level": 4,
      "content": "On mahdollista kirjoittaa flutter ohjelmia Androidille ja iOS:lle käyttämällä tekstinkäsittely ohjelmaa (Neo)vim kuten IDE:tä. Asenna coc käyttäen jotain Vim lisäosiehallitsiaa. Asenna myös coc-flutter lisäosa automaattista täydennystä varten (kuten Android Studiossa) ja lataa koodi Android emulaattoriin.\n\n"
    },
    {
      "title": "Emacs",
      "level": 4,
      "content": "Jos haluaa käyttää Emacsia flutter ohjelmien kehittämiseen, kannattaa asentaa lsp-dart, niin kuin täällä on sanottu.\n\n"
    },
    {
      "title": "Marvin",
      "level": 4,
      "content": "Marvin on työkalu, joka auttaa aloittelijita asettamaan Android kehitysympäristön. marvin_dscAUR asentaminen auttaa asettamaan seuraavat asiat: JDK, Android SDK, IDE(t), ja AVD.\n\n"
    },
    {
      "title": "Koonti",
      "level": 2,
      "content": "Huomaa että nämä ohjeet perustuvat virallisiin AOSP koonti ohjeisiin. Muut Android-peräiset järjestelmät kuten LineageOS usein vaaivat ylimääräisiä askeleita.\n\n"
    },
    {
      "title": "Tarvittavat paketit",
      "level": 3,
      "content": "2020 Huhtikuusta lähtien kootaksesi AOSP 10 tai LineageOS 17.1 tarvitaan (mahdollisesti vain osajoukko):\n\n- base-devel, multilib-devel, gcc, repo, git, gnupg, gperf, sdlAUR, wxgtk2[broken link: package not found], squashfs-tools, curl, ncurses, zlib, schedtool, perl-switch, zip, unzip, libxslt, bc, rsync, ccache, lib32-zlib, lib32-ncurses, lib32-readline, ncurses5-compat-libsAUR, lib32-ncurses5-compat-libsAUR, ja TTF fontti asennettuna, kuten ttf-dejavu. Erityisesti Python2 tai Javaa ei tarvita, sillä ne tulevat AOSPsta/Lineagesta.\n\nSeuraavat paketit koskevat vain vanhoja Android versioita: {,{Pkg|lib32-gcc-libs}} git, gnupg, flex, bison, gperf, sdlAUR, wxgtk2[broken link: package not found], squashfs-tools, curl, ncurses, zlib, schedtool, perl-switch, zip, unzip, libxslt, bc, rsync, ncurses5-compat-libsAUR, lib32-zlib,lib32-ncurses, lib32-readline, lib32-ncurses5-compat-libsAUR.\n\naosp-develAUR metapaketti kaiken yksinkertaista asennusta varten.\n\nLisäksi LineageOS tarvitsee seuraavat paketit: xml2AUR, lzop, pngcrush, imagemagick. Ne voidaan asentaa lineageos-develAUR metapaketilla.\n\n"
    },
    {
      "title": "Java kehityssarja - JDK",
      "level": 3,
      "content": "Tarvittava JDK versio riippuu Android versiosta, jota kootaan:\n\n- Android 9 (Pie) ja uudemmat, Java sisältyy Androidin lähdekoodiin ja erillistä asennusta ei siksi tarvita.\n- Android 7 ja 8 (Nougat ja Oreo), OpenJDK 8 tarvitaan, joka on saatavissa jdk8-openjdk paketilla.\n\nNote: Aseta JAVA_HOME muuttuja välttääksesi ongelmia, joka myös vastaa paremmin Arch Linux asennuksen polkua. Esimerkki:\n\nAseta JAVA_HOME muuttuja välttääksesi ongelmia, joka myös vastaa paremmin Arch Linux asennuksen polkua. Esimerkki:\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-versio-openjdk\n```\n\n"
    },
    {
      "title": "Koontiympäristön valmistelu",
      "level": 3,
      "content": "Asenna repo paketti.\n\nLuo polku koonnille.\n\n```\n$ mkdir ~/android\n$ cd ~/android\n```\n\nAndroid koonti prosessi olettaa python olevan python2. Lisää se muuttujaan PATH:\n\n```\n$ mkdir bin\n$ ln -s /bin/python2 bin/python\n$ export PATH=$PWD/bin:$PATH\n```\n\nVaihtoehtoisesti luo python2 virtuaaliympäristö ja aktivoi se:\n\n```\n$ virtualenv2 --system-site-packages venv\n$ source venv/bin/activate\n```\n\nNote: Esimerkki:\n\n- Tämä aktivointi koskee vain sen hetkistä terminaali istuntoa. Virtuaaliympäristö env pidetään venv kansiossa.\n- \"--system-site-packages\" antaminen virtualenv2 osoittaa virtuaaliympäristön asennetuille python2.7 moduuleille. Tämän pitäisi antaa käyttöön kaikki python moduulit mitä tarvitaan koontiin, olettaen kaikkien tarvittavien olevan asennettuna, kuten esimerkiksi python2-mako.\n- Jos koonnin aikana edelleen saadaan virheilmoituksia littyen puuttuviin python moduuleihin nopea ja hieman rikkinäinen tapa korjata se on symlinkata /usr/lib/python2.7/* polkuun ~/android/venv/lib/python2.7/ (Vaihda ~/android vastaamaan omaa polkurakennettasi).\n\nEsimerkki:\n\n```\n$ ln -s /usr/lib/python2.7/* ~/android/venv/lib/python2.7/\n```\n\ntai (olettaen koontipoluksi Data/Android_Build):\n\n```\n$ ln -s /usr/lib/python2.7/* /Data/Android_Build/venv/lib/python2.7/\n```\n\n"
    },
    {
      "title": "Lähdekoodin lataaminen",
      "level": 3,
      "content": "Tämä kloonaa riippuvuudet. Tämän tarvitsee tehdä vain ensimmäisen kerran kun kootaan Androidia, tai jos halutaan vaihtaa haaraa.\n\n- repo sisältää -j argumentin joka operoi samalla tavalla kuin make komennossa. Koska se kontrolloi monia samanaikaisia latauksia, sitä arvoa kannattaa muuttaa sopimaan alavirran verkon kaistaan.\n\n- haara pitää määritellä (lista haaroista) kuittaamaan -b argumentin kanssa. Jos tämän argumentin jättää pois, tästä saadaan ns. master haara.\n\n```\n$ repo init -u https://android.googlesource.com/platform/manifest -b master\n$ repo sync -j4\n```\n\nNote: -c vipu synkronoi vain sen haaran, joka on määritelty manifestissa. Vastaavasti tämän päättää haara määriteltynä -b vivulla tai sitten paketinjakelun ylläpitäjän oletushaara.\n\n```\n$ repo sync -j8 -c\n```\n\n-c vipu synkronoi vain sen haaran, joka on määritelty manifestissa. Vastaavasti tämän päättää haara määriteltynä -b vivulla tai sitten paketinjakelun ylläpitäjän oletushaara.\n\nOdota pitkään. Kääntämätön lähdekoodi, .repo ja .git polkujen kanssa, joilla seurataan tämän kehitystä, yhdessä muodostavat valtavan määrän koodia. Android 10 julkaisemisen jälkeen, vähintään 250 GT vapaata levytilaa tarvitaan.\n\n```\n$ repo sync\n```\n\n"
    },
    {
      "title": "Koodin koonti",
      "level": 3,
      "content": "Tämän pitäisi tehdä mitä tarvitaan AOSP:tä varten:\n\n```\n$ source build/envsetup.sh\n$ lunch full-eng\n$ make -j4\n```\n\nJos suoritat lunch komentoa ilman argumentteja, se kysyy minkä koonnin haluat luoda. Käytä -j argumenttia numeron kanssa joka vastaa, tai on kaksinkertainen verraten ydin/säie määrään.\n\nKoonti vie hyvin paljon aikaa.\n\nNote: \"GNU make pystyy hoitamaan rinnakkaisia tehtäviä -jN vivulla ja on siis yleistä käyttää N tilalla numeroa välillä 1 tai 2 kerrottuna säikeiden määrällä, mitä tietokoneessa on jolla koontia suoritetaan. Esimerkiksi dual-E5520 koneessa (2 CPUta, 4 ydintä per CPU, 2 säiettä per ydin), nopeimmat koonnit tehdään komennoilla make -j16 ja make -j32.\"\n\n- Huolehdi, että RAM-muisti ei lopu kesken. Android käyttää /tmp polkua raskaasti. Oletukselta partition tai levyn osan koko missä /tmp kansio on, on noin puolet RAM-muistin määrästä. Jos se täyttyy, koonti epäonnistuu. 4GT RAM-muistia ja enemmän on suositus. Jos /tmp ei ole tarpeeksi iso, sitä voi laajentaa. Vaihtoehtoisesti voidaan poistaa koko tmpfs fstab:ista.\n- Android koonti ja suorittamis oppaasta suomennettuna:\n\n\"GNU make pystyy hoitamaan rinnakkaisia tehtäviä -jN vivulla ja on siis yleistä käyttää N tilalla numeroa välillä 1 tai 2 kerrottuna säikeiden määrällä, mitä tietokoneessa on jolla koontia suoritetaan. Esimerkiksi dual-E5520 koneessa (2 CPUta, 4 ydintä per CPU, 2 säiettä per ydin), nopeimmat koonnit tehdään komennoilla make -j16 ja make -j32.\"\n\n"
    },
    {
      "title": "Koonnin testaus",
      "level": 3,
      "content": "Kun valmis, suorita/testaa viimeinen levykuva (tai useampi).\n\n```\n$ emulator\n```\n\n"
    },
    {
      "title": "Live levykuvan luonti",
      "level": 3,
      "content": "Asennettavan levykuvan luontia varten on tarpeellista suorittaa:\n\n```\nmake -j8 updatepackage\n```\n\nTämä luo zip kuvakkeen out/target/product/hammerhead alle (hammerhead laitteen nimenä) joka on mahdollista asentaa.\n\n"
    },
    {
      "title": "Asentaminen",
      "level": 2,
      "content": "Joissain tapauksissa halutaan palata vakioverioon Androidista, Android mobiili laitteen räätälöidyn ROMmin asennuksen jälkeen. Laitekohtaisille asennusohjeille, käytä XDA foorumeita.\n\n"
    },
    {
      "title": "Fastboot",
      "level": 3,
      "content": "Fastboot (kuin myös ADB) sisältyy android-tools pakettiin.\n\n- Firmwaren palauttaminen käyttämällä fastboot ohjelmaa voi osoittautua hankalaksi, mutta haluat ehkä selata XDA kehittäjien foorumeita vakio firmwarelle, joka löytyy usein *.zip tiedostona, sen sisällä tuleekin firmware tiedostot sekä flash-all.sh skripti. Esimerkiksi Google Nexus firmwaret sisältäväy flash-all.sh skriptin tai toisena esimerkkina voisi olla OnePlus One - XDA kommenttiketju, mistä löytyy firmware sisälletyllä flash-all.sh skriptillä.\n\n- Jos saat no permissions virheilmoituksen tai suorittaminen jää roikkumaan < waiting for any device > ilmoituksella, joudut suorittamaan fastboot:in root käyttäjänä. Vaihtoehtoisesti voidaan asentaa android-udev paketti tai AUR pakettiandroid-udev-gitAUR ja yhdistämällä laite uudestaan.\n\n"
    },
    {
      "title": "Samsungin laitteet",
      "level": 3,
      "content": "Samsungin laitteisiin ei pystytä asentamaan Fastboot työkalun avulla. Vaihtoehtoina on vain Heimdall ja Odin (käyttämällä Windowsia ja VirtualBoxia).\n\n"
    },
    {
      "title": "samloader",
      "level": 4,
      "content": "Ladataksesi alkuperäisen Samsungin laiteohjelmiston voidaan käyttää alustasta riippumatonta samloader skriptiä.\n\n"
    },
    {
      "title": "Heimdall",
      "level": 4,
      "content": "Heimdall on järjestelmäriippumaton avoimeen lähdekoodiin perustuva työkalusarja, jota käytetään asentamaan firmwarea (tiedetään myös ROMmina) Samsungin mobiililaitteisiin ja joka myös tiedetään vaihtoehtona Odinille. Se voidaan asentaa heimdall paketilla.\n\nAsennusohjeet löytyy Heimdallin Githubista tai XDA foorumeilta.\n\n"
    },
    {
      "title": "Odin (Virtualbox)",
      "level": 4,
      "content": "Note: **ei** \n\nOn mahdollista myös palauttaa laiteohjelmisto (Android) Samsungin laitteille käyttäen Odinia, mutta vain VirtualBox:issa.\n\nArch Linux (isäntä) valmistelu:\n\n1. Asenna VirtualBox sen lisäosan kanssa ja vieras lisä.\n1. Asenna oma suosima, mutta Odinin kanssa yhteensopiva, Windows käyttöjärjestelmä (VirtualBoxin vieraslisien kanssa) virtuaalikiintolevylle VirtualBoxilla.\n1. Avaa VirtualBoxin asetukset Windows käyttöjärjestelmästä, navigoi kohtaan USB, sen jälkeen rasti (tai varmista että se on rastittuna) Enable USB 2.0 (EHCI) Controller.\n1. VirtualBox joka suorittaa Windows käyttöjärjestelmää, klikkaa menu napista Devices > USB Devices, jonka jälkeen klikkaa Samsung mobiililaitteesta, joka on yhdistetty koneeseesi USB liitännällä.\n\nWindows (vieras) valmistelu:\n\n1. Asenna Samsungin ajurit.\n1. Asenna Odin.\n1. Lataa tarvittava Samsung firmware (Android) siihen älypuhelin malliin joka on käytössä\n\nVarmista että konfiguraatio toimii:\n\n1. Laita laite Download tilaan ja yhdistä Linux laitteeseen.\n1. Virtuaalikoneen työkaluriviltä, valitse Devices > USB > ...Samsung... laite.\n1. Avaa Odin. Valkoiseen laatikkoon (suurehko alhaalta vasemmalta) nimellä Message, pitäisi tulla teksti samantapainen kuin tämä:\n\n```\n<ID:0/003> Added!!\n```\n\njoka tarkoittaa vain sitä että laite näkyy Odinille ja Windows käyttöjärjestelmälle ja on valmis asentelua varten.\n\n"
    },
    {
      "title": "Käytä Androidia Arch Linux pohjalla",
      "level": 2,
      "content": "On olemassa monia projekteja ja methodeja, jotka tukeat Androidin suorittamista Arch Linux pohjalla:\n\n- Container -pohjautuvat ratkaisut ovat kaikkein suosituimpia. Se on läheisin tapa suorittaa Android ohjelmia ei-Android Linux kernelin kanssa. Ne integroituvat hyvin järjestelmiin ja ne toimivat tehokkaasti. Huomattavampia ovat: Waydroid on haarukoitu Anboxista ja se on saanut paljon suosiota osakseen. Se on tehokkaampi, koska se toimii laitteisto-läheisemmin. Se perustuu uudempaan LineageOs 17.1 (Android 10) ja siinä pystyy myös asentamaan Google Play Storen ja muita Open Gappseja. Yksittäisten ikkunoiden lisäksi sillä voi myös käyttää täyttä Androir käyttöliittymää.\n\n- Waydroid on haarukoitu Anboxista ja se on saanut paljon suosiota osakseen. Se on tehokkaampi, koska se toimii laitteisto-läheisemmin. Se perustuu uudempaan LineageOs 17.1 (Android 10) ja siinä pystyy myös asentamaan Google Play Storen ja muita Open Gappseja. Yksittäisten ikkunoiden lisäksi sillä voi myös käyttää täyttä Androir käyttöliittymää.\n\n- On olemassa myös useita Chromium lisäosia, joilla voidaan suorittaa android ohjelmia: Arc Welder oli googlen lisäosa ohjelmien suorittamiseen ja testailuun Chrome OS pohjaa varten, mutta se on nykyään jo vanhentunut. ARChon on avoimen lähdekoodin lisäosa Chromiumia varten, jolla voidaan suorittaa android ohjelmia.\n\n- Arc Welder oli googlen lisäosa ohjelmien suorittamiseen ja testailuun Chrome OS pohjaa varten, mutta se on nykyään jo vanhentunut.\n- ARChon on avoimen lähdekoodin lisäosa Chromiumia varten, jolla voidaan suorittaa android ohjelmia.\n\n- On myös mahdollista käyttää android emulaattoreita. Etuna tässä on se, että arm ohjelmia pystytään suorittamaan x86:ssa. Tämä kumminkin maksaa tehokkuudessa. Esimerkkeinä: Android Studion sisään rakennettu emulaattori, kuten aiemmin mainittu tässä artikkelissa. Genymotion on Android emulaatio/testaus ympäristö.\n\n- Android Studion sisään rakennettu emulaattori, kuten aiemmin mainittu tässä artikkelissa.\n- Genymotion on Android emulaatio/testaus ympäristö.\n\n"
    }
  ]
}