{
  "title": "Arch Compared to Other Distributions (日本語)",
  "url": "https://wiki.archlinux.org/title/Arch_Compared_to_Other_Distributions_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Arch Linux\n- Arch ベースのディストリビューション\n- Pacman 比較表\n- Arch は最高\n\nこのページでは Arch Linux と他の GNU/Linux ディストリビューション、また UNIX ライクな OS との比較をしています。Arch Linux を利用するのが適しているかどうか迷っている人のために簡単な説明を加えていきます。ある程度は役に立つとは思いますが、実際にディストリビューションを試してみることが比較する最善の方法だということを忘れないで下さい。\n\nもっと詳しい比較は Wikipedia:Comparison of operating systems や Wikipedia:ja:Linuxディストリビューションの比較を見てください。\n\n以下では全て、Arch Linux だけが他のディストリビューションと比較されています。コミュニティによる x86_64 以外のアーキテクチャへの移植は Arch ベースのディストリビューション を参照してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ソースベース 1.1 CRUX 1.2 LFS 1.3 Gentoo/Funtoo Linux 1.4 GNU Guix System\n- 2 一般向け 2.1 Debian 2.2 Fedora 2.3 Slackware\n- 3 初心者向け 3.1 Ubuntu 3.2 Linux Mint 3.3 openSUSE 3.4 Mandriva/Mageia\n- 4 *BSD\n- 5 参照\n\n- 1.1 CRUX\n- 1.2 LFS\n- 1.3 Gentoo/Funtoo Linux\n- 1.4 GNU Guix System\n\n- 2.1 Debian\n- 2.2 Fedora\n- 2.3 Slackware\n\n- 3.1 Ubuntu\n- 3.2 Linux Mint\n- 3.3 openSUSE\n- 3.4 Mandriva/Mageia\n\n"
    },
    {
      "title": "ソースベース",
      "level": 2,
      "content": "ソースベースのディストリビューションは移植性が高く、OS とアプリケーションをコントロールしコンパイルするのに優位な点（特定の CPU アーキテクチャに最適化できる）がありますが、そのかわりソースをコンパイルするのに時間を費やさなくてはならないという欠点があります。Arch Linux ではすべてのパッケージは x86_64 アーキテクチャのみにコンパイルされています。\n\n"
    },
    {
      "title": "CRUX",
      "level": 3,
      "content": "- CRUX はミニマリストディストリビューションで、KISS 原則に沿っています。Judd Vinet は CRUX に感銘を受け、Arch を作りました。\n- CRUX は BSD スタイルの init スクリプトを使います。Arch は systemd を使います。\n- Arch はローリングリリースシステムを採用していますが、CRUX はおよそ1年ごとにリリースされます。\n- どちらも Ports ライクなシステムを持ち、*BSD のようにビルドを楽にする基盤を持っていることも同じです。\n- Arch Linux では pacman を使って、バイナリのパッケージ管理したり、Arch Build System をシームレスに動作させます。CRUX はコミュニティによって開発されている prt-get と呼ばれるシステムを使い、Ports システムと連携して依存解決を行いますが、すべてのパッケージはソースからビルドされます (ただし CRUX のインストールにはバイナリを使います)。\n- Arch Linux と CRUX はどちらも公式に x86_64 のみをサポートしています。\n- Arch Linux はローリングリリースにのっとった大量のバイナリパッケージのレポジトリ、さらに Arch User Repository を用意しています。CRUX は更に軽量な公式サポートの Ports システムを提供しており、控えめなコミュニティリポジトリがあります。\n\n"
    },
    {
      "title": "LFS",
      "level": 3,
      "content": "- LFS (Linux From Scratch) は単純にドキュメントとして存在しています。GNU/Linux システムを動かすための最小パッケージのソースコードの入手、マニュアルコンパイル、パッチ、コンフィグレーションをスクラッチで行うようユーザーに命じています。LFS は限りなくミニマルで、ベースシステムをビルド・カスタマイズする素敵な経験を得ることができます。\n- LFS にはオンラインリポジトリがありません。ソースを自分で手にいれ、コンパイルしインストールすることになります (手動のパッケージ管理の方法が LFS ヒントの中にあります)。\n- Arch Linux には systemd や強力な pacman パッケージマネージャが付いており、x86_64 に最適化してコンパイルされたパッケージを提供します。Arch Linux のベースシステムでは、Arch のコミュニティや開発者による何千ものバイナリパッケージを pacman を使ってインストールでき、Arch Build System 用の PKGBUILD ビルドスクリプトもあります。また Arch にはパッケージを便宜にビルド・カスタマイズするための makepkg ツールがあり、できたパッケージはそのまま pacman でインストールできます。\n- Judd Vinet はスクラッチから Arch Linux を作り、pacman を C 言語で記述しました。歴史的に、Arch Linux は時々ユーモアとして「便利なパッケージマネージャ付き Linux」 (Linux, with a nice package manager) と表現されることがあります。\n\n"
    },
    {
      "title": "Gentoo/Funtoo Linux",
      "level": 3,
      "content": "- Gentoo Linux は Arch Linux と同じローリングリリースを採用しています。これによってパッケージは比較的最新に保たれています。\n- ユーザーが設定する「USE フラグ」によってソースコードから直接コンパイルすることで Gentoo のシステムは成り立っています。Arch Linux はコンパイル済みの x86_64 バイナリを入れるシステムですが、Ports ライクなシステムを使ってソースコードからパッケージをインストールすることも可能です。一般に Arch Linux はビルドとアップデートが速く、Gentoo はより細かくシステムをカスタマイズ可能です。\n- Arch Linux は x86_64 アーキテクチャのみをサポートしていますが Gentoo は公式に x86 (i486/i686), x86_64, PPC/PPC64, SPARC, Alpha, ARM, MIPS, HPPA, S/390, Itanium アーキテクチャをサポートしています。\n- Gentoo の公式パッケージ・システム管理ツールは Arch のものよりも複雑で「パワフル」にできています。Gentoo の中核となる機能 (USE フラグ, SLOT など) には同等の機能が Arch Linux に存在しないものがあります。理由の一つとして Arch が主としてバイナリを使うディストリであるというのもありますが、作りをシンプルにして\"オーバースペック\"にならないようにするという Arch の設計思想の違いも大きいでしょう。\n- OS のインストール時はどちらも最小のベースシステムのみをインストールするので、手動でシステムカスタマイズを行う必要があります。systemd を使いやすいと思うのであれば、Gentoo ユーザーは Arch Linux の様々なところを快適だと感じることができるでしょう。\n\n"
    },
    {
      "title": "GNU Guix System",
      "level": 3,
      "content": "- GNU Guix System は、Arch が CRUX から着想を得て作られたのと同じように、NixOS から着想を得て作られました。\n- Arch Linux と Guix System は両方ローリングリリースディストリビューションで、パッケージはアップストリームでリリースされてからすぐにディストリビューションで利用可能になります。Guix System は主にソースベースのディストリビューションで(しかし事前にビルドされたバイナリが存在して \"substitutes\" と呼ばれます)、Arch は主にバイナリディストリビューションです。\n- Arch は pacman をパッケージマネージャーとして使い、Guix System は他のディストリビューションではサポートされない experimental packaging features をサポートする guix を使います。\n- Arch は x86_64 だけをサポートしますが、Guix System は公式に 複数のアーキテクチャ をサポートします。\n- Arch は systemd を init システムとして使いますが、Guix System は GNU Shepherd を使います。\n- Guix System は、ファイルシステム階層標準 を含む、たくさんの伝統的な Unix のコンセプトに従っていません。具体的には、伝統的なディストリビューションではたくさんのファイルが複数のディレクトリに分散していますが、Guix System では /gnu/store/ 以下のどこかに配置されます。\n- Arch は時々 (ドライバなどの) フリーではないソフトウェアを配布することがありますが、Guix System はフリーソフトウェアだけを配布し、Free Software Foundation を追求します。ただし、Guix 向けにフリーではないソフトウェアを配布する代替リポジトリは 存在します。\n- Arch はユーザーが直接インストールしたソフトウェアパッケージを設定することを期待しますが、Guix System は Scheme での全体のシステム設定を推奨し、それらは instantiates 設定ファイルになります。\n\n"
    },
    {
      "title": "一般向け",
      "level": 2,
      "content": "これらのディストリビューションは広い範囲での使用をみこんでいて、利用方法を選ばない汎用性があります。\n\n"
    },
    {
      "title": "Debian",
      "level": 3,
      "content": "- Debian は Linux ディストリビューションで一番巨大なプロジェクトであり、コミュニティであり、stable・testing・unstable のそれぞれのブランチをあわせると14万8千以上にもなるバイナリ パッケージ を提供しています。Arch で利用できるバイナリパッケージの数はそれに及びませんが、AUR も含めれば、その数は拮抗します。\n\n- Debian はフリーソフトウェアの思想にとても熱情を持っています。Arch はそれに比べると甘く、GNU によって「フリーでない」と判断されたパッケージも含みます。\n\n- Debian のデザイン・アプローチは安定性と厳重なテストに焦点をおいています。Debian の Stable は「凍った」パッケージです。最大で 5年間 のサポートが約束されています。Arch のパッケージは Debian の Stable や Testing よりも新しく、Unstable ブランチに相当します。\n\n- Debian は多くのアーキテクチャに対応しています: alpha・arm・hppa・i386・x86_64・ia64・m68k・mips・mipsel・powerpc・s390・sparc。Arch は公式対応は x86_64 のみです。\n\n- Arch はカスタマイズビルド・外部ソース由来のパッケージのインストールを Ports ライクなシステムを有することでサポートしています。Debian にはそれがなく、おおむねその巨大なバイナリリポジトリに頼っています。\n\n- Arch のインストールによって作られるのは最小限のベース環境だけで、システムコンフィグレーションが透明化されています。Debian にもいくつかインストールの方法がありますが、自動的な設定の方に重きを置いています。\n\n- Arch は基本的にソフトウェアライブラリにヘッダーファイルも入っていますが、Debian はヘッダーファイルは個別にダウンロードする必要があります。\n\n- Arch はパッチを最小限に抑えており、そうすることで上流のレビューが困難になる問題を避けています。一方、Debian は多くの人に向けてパッケージを自由にパッチを適用しています。\n\n"
    },
    {
      "title": "Fedora",
      "level": 3,
      "content": "- Fedora はコミュニティによって開発されていますが、Red Hat による法的なサポートを受けています。しばしばブリーディングエッジテストベッドリリースシステムと称されます。Fedora のパッケージとプロジェクトは RHEL に (たまに他のディストリビューションにも) 取り込まれます。Arch もブリーディングエッジですが、その意味するところはローリングリリースであり、他のディストリビューションのようなテストブランチはありません。\n\n- Fedora のパッケージは RPM です。管理には DNF パッケージマネージャを使います。Arch はパッケージを管理するために pacman を使います。\n\n- Fedora は公式リポジトリに MP3 メディアサポートや他のノンフリーなソフトウェアを用意していません。フリーソフトウェアの思想のためですが、サードパーティのレポジトリにはそれらのパッケージが存在します。Arch はそうしたことに厳格ではないので、ユーザーに選択を委ねています。\n\n- Fedora は最小構成だけでなくグラフィカルインストーラーを含めた多くのインストールオプションがあります。Fedora にはユーザーが選ぶことができるデスクトップ環境を選りすぐっています。一方 Arch は最小構成のインストールをするためのスクリプトだけを提供しています。\n\n- Fedora は定期的なリリースサイクルを持っています。個別のバージョンで FedUp ツールを使ってアップデートすることをサポートしています。Arch はローリングリリースを採用しています。\n\n- Arch には Ports システムがあります、Fedora にはありません。\n\n- Arch と Fedora は中級・上級ユーザーや開発者をターゲットにしています。どちらもユーザーがプロジェクトに貢献することを求めています。\n\n- Fedora は SELinux、GCJ コンパイルパッケージ (Sun の JRE 代替) の統合やアップストリームへの多くの貢献についてコミュニティーの承認を得ています。他のプロジェクトと比べてレッドハットや Fedora の外部開発者は Linux のカーネルコードに一番貢献しています。\n\n- Arch Linux はユーザーのための様々な記事がある wiki を持っています。Fedora の wiki は「wiki」の言葉通りに、開発者・テスター・ユーザーたちのすばやい情報の交換のために使われています。エンドユーザーのための wiki を意味しません。Fedora の wiki はトラッカーやコーポレート wiki に似ています。\n\n"
    },
    {
      "title": "Slackware",
      "level": 3,
      "content": "- Slackware は BSD スタイルの init スクリプトが標準です。Arch は systemd を採用しています。\n\n- Arch は pacman パッケージマネージャを供給しているので、Slackware の標準ツールとは異なり、オートマティックな依存解決とシステムアップデートを行います。Slackware のユーザーは基本的に手動で依存解決を行なっています。Slackware のプレインストールされているライブラリや依存の素晴しい提供と同じように、提供しているシステム制御のレベルが例示されるでしょう。\n\n- Arch はローリングリリースを採用しています。Slackware のリリースサイクルはより保守的で、安定したパッケージを好みます。Arch はこの点「最前線」です。\n\n- Arch Linux では公式リポジトリに沢山のバイナリパッケージがありますが、Slackware の公式リポジトリはそれよりも質素です。\n\n- Arch には Ports ライクな Arch Build System と、ユーザーの PKGBUILD の巨大な集合である AUR があります。大きさは Arch には及びませんが、Slackware には Arch の PKGBUILD に似た Slackbuilds slackbuilds.org という半公式のリポジトリがあります。Slackware ユーザーは Arch Linux の様々なところを快適だと感じることができるでしょう。\n\n"
    },
    {
      "title": "初心者向け",
      "level": 2,
      "content": "「初心者用（newbie）ディストリ」と呼ばれる、似た思想で構築されている初心者向けのディストリビューションは数多くありますが、Arch はそれらとは全く異なります。できるだけミニマルなところから構成することで GNU/Linux を勉強しようと思っている人には Arch はベターかもしれません。Arch のインストールでインストールされるパッケージは比較的少ないからです。ディストリビューションの特徴の差異を以下に記述します。\n\n"
    },
    {
      "title": "Ubuntu",
      "level": 3,
      "content": "- Ubuntu は広く人気を集めている Debian ベースのディストリビューションで、Canonical Ltd. によって商業的にサポートされています。Arch は独立系の、スクラッチから作られたシステムです。\n\n- Arch と Ubuntu にはそれぞれ全く違うゴール、そしてターゲットユーザーがあります。Arch は do-it-yourself アプローチを好むユーザーのために作られているのに対し、Ubuntu はユーザーフレンドリーな全自動のシステムを提供します。Arch はベース状態からインストールするミニマリストデザインをとっており、ユーザーはそれぞれの目的のためにカスタマイズすることが求められています。Ubuntu からキャリアを開始して、Arch に移行したユーザーもたくさんいます。\n- Arch は、コミュニティの提供するサポートを越えて、特定のユーザーインターフェースに偏って開発されることはありません。しかし、Canonical の商業的な性質から論争を招くような決定が行われることもあります。例えば Unity の Dash メニューに広告を含めたりユーザーデータを収集したりすることが挙げられます。Arch は独立した、コミュニティによるプロジェクトであり、商業的な議題があがるようなことはありません。\n\n- Ubuntu は6ヶ月ごとにリリースします。Arch はローリングリリースです。\n\n- Arch には Ports ライクなシステムがあります。ユーザーが pacman パッケージマネージャで使うことができるソースパッケージを共有できる Arch User Repository もあります。Ubuntu はより複雑な apt を使い、また Personal Package Archives によってバイナリパッケージが再配布できるようになっています。\n\n- コミュニティにも違いが見受けられます。Arch のコミュニティは Ubuntu のコミュニティと比べるとその規模は小さく、Arch への貢献が求められます。反対に、Ubuntu のコミュニティは巨大で、開発・パッケージング・リポジトリのメンテナンスにかかわらないユーザーにも寛容です。\n\n"
    },
    {
      "title": "Linux Mint",
      "level": 3,
      "content": "- Linux Mint は Ubuntu の派生として誕生し、後に Debian をベースとする LMDE (Linux Mint Debian Edition) が追加されています。他方、Arch は独立したディストリビューションであり独自のビルドシステムとリポジトリを使っています。\n- Mint には MintTools という簡易なメンテナンス用のグラフィカルツールが含まれています。Arch が提供するのは pacman などのシンプルなコマンドラインツールだけであり、システムの管理はユーザーに一任されます。\n- Mint の新しいバージョンは、Ubuntu の約1ヶ月後、6ヶ月ごとにリリースされます。LTS 版は5年間のサポートがあります。Linux Mint Debian Edition (LMDE) は Debian Stable ベースで、Mint パッケージのアップデートとセキュリティアップデートしか受け取りません。一方、Arch はフルローリングリリースのディストリビューションです。\n\n"
    },
    {
      "title": "openSUSE",
      "level": 3,
      "content": "openSUSE は RPM パッケージフォーマットを利用しており、YaST2 という GUI 設定ツールを持っています。Arch ではそのようなものは用意していません。つまり、openSUSE は、GUI 環境が必要で、自動で設定してくれることを求める初心者に向いています。\n\n"
    },
    {
      "title": "Mandriva/Mageia",
      "level": 3,
      "content": "Mandriva Linux (旧名: Mandrake Linux) は、すべての人にとって使いやすい GNU/Linux を作ることを目標に、1998年に作られました。RPM ベースの urpmi パッケージマネージャを装備しています。Mageia は元 Mandriva 従業員によって作られた Mandriva のフォークで、Mandriva の商業的立ち位置に反対して、非営利でコミュニティ主導です。Arch はもっとシンプルなアプローチを取っており、テキストベースかつ手動の設定が必要で、中級・上級ユーザーを対象にしています。\n\n"
    },
    {
      "title": "*BSD",
      "level": 2,
      "content": "- *BSD は同じ起源を持ち、カリフォルニア大学バークレー校の成果から直接作られ、フリーの再配布可能な、コストのかからない、UNIX システムを形成しています。*BSD は GNU/Linux ディストリビューションではありませんが、UNIX ライクな OS ではあります。*BSD は AT&T の UNIX コードに由来しています。\n- Arch と *BSD は緊密に調和した基盤と Ports システムのコンセプトを共有していますが、Arch のような GNU/Linux システムに比べ、OpenBSD のカーネルとユーザーランドのプログラム、シェルやコモンツール (ls, cp, cat, ps) は同じリポジトリで一緒に開発されています。\n- BSD ライセンス は一般に coder を保護します。逆に GPL では、code が保護されます。Arch は GPL ライセンスでリリースされています。\n- *BSD の派生についてより詳しく知るには、Wikipedia:ja:BSDの子孫 を参照してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- DistroWatch - Linux ディストリビューションのニュースとレビュー\n\n"
    }
  ]
}