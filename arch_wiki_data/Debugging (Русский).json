{
  "title": "Debugging (Русский)",
  "url": "https://wiki.archlinux.org/title/Debugging_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Устранение часто встречающихся неполадок\n- Указания по созданию отчета об ошибке\n- Отладка/Трассировка\n- Отладка загрузки\n\nЭта страница в основном посвящена тому, как собрать побольше информации для сообщений об ошибках. Несмотря на то, что используется слово «отладка», она не предназначена в качестве руководства по отладке программ в процессе их разработки.\n\n"
    },
    {
      "title": "Запустите его через командную строку",
      "level": 3,
      "content": "Если приложение внезапно падает, попробуйте запустить его через терминал. Введите в нём имя приложения (обычно строчными буквами). Если вы не знаете имя исполняемого файла, а знаете только имя пакета, следующая команда может найти имя исполняемого файла:\n\n```\n$ pacman -Ql имяпакета | grep ' /usr/bin/.'\n```\n\n"
    },
    {
      "title": "Проверьте наличие дампа памяти",
      "level": 3,
      "content": "Дамп памяти (core dump) — это файл, в который записывается адресное пространство (память) процесса при его нештатном завершении. Если приложение скомпилировано с поддержкой отладки, этот дамп можно использовать для выяснения того, что и где пошло не так.\n\nРасположение дампов памяти может отличаться в зависимости от настроек операционной системы. Как узнать, включена ли генерация дампов и куда они попадают, описано в статье Дамп памяти.\n\n"
    },
    {
      "title": "Ошибки сегментирования",
      "level": 2,
      "content": "Есть несколько методов, с помощью которых можно выяснить, что пошло не так. Наденьте шляпу детектива.\n\n"
    },
    {
      "title": "Gdb",
      "level": 3,
      "content": "gdb — проверенный временем инструмент отладки приложений. Подробные инструкции по использованию и получению трассировки описаны в статье Отладка/Трассировка#Получение трассировки. После запуска приложения через gdb вам, вероятно, придётся подождать какое-то время, пока не случится ошибка сегментирования. После этого опубликуйте трассировку на pastebin-сервисе и добавьте полученный URL в сообщение об ошибке.\n\nЕсли у вас есть дамп памяти, его можно использовать вместе с gdb для получения backtrace:\n\n```\n$ gdb имяприложения core\nbt full\n```\n\n"
    },
    {
      "title": "Valgrind",
      "level": 3,
      "content": "Если у вас есть бинарный файл с отладочными символами и без inline-функций, то обычно хорошей идеей является запуск программы через valgrind. Это инструмент, который эмулирует процессор и обычно показывает, где что-то идёт не так, или предоставляет дополнительную информацию в дополнение к gdb.\n\n```\n$ valgrind имяприложения\n```\n\nЭто позволит получить много полезной отладочной информации в случае сбоя. Попробуйте опции -v и --leak-check=full, чтобы собрать ещё больше информации.\n\nТакже можно использовать команду:\n\n```\n$ valgrind --tool=callgrind имяприложения\n```\n\nи запустить вывод через kcachegrind, чтобы графически исследовать функции, используемые программой. Если программа зависает, это облегчает определение места ошибки.\n\n"
    },
    {
      "title": "Strace",
      "level": 3,
      "content": "strace подробно показывает, что на самом деле делает приложение. Если приложение пытается открыть файл, которого нет, strace это покажет.\n\nСледующая команда покажет файлы, которые приложение пытается открыть:\n\n```\n$ strace -eopen имяприложения\n```\n\nПолученный вывод можно опубликовать на pastebin-сервисе.\n\n"
    },
    {
      "title": "LD_DEBUG",
      "level": 3,
      "content": "Установка LD_DEBUG=files дает ещё один обзор того, какие файлы ищет приложение:\n\n```\n$ LD_DEBUG=files имяприложения > файл.log 2>&1\n```\n\nВывод будет записан в файл.log.\n\nПодробнее: ld-linux(8).\n\n"
    },
    {
      "title": "Readelf",
      "level": 3,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\nIf you get no such file or directory when running an application, try the following command:\n\n```\n$ readelf -a /usr/bin/appname | grep interp\n```\n\n(replace /usr/bin/appname with the location of your executable)\n\nMake sure the interpreter in question (like /lib/ld-linux-x86-64.so.2) actually exists. Install ld-lsb if need be.\n\n"
    },
    {
      "title": "Если программа написана не на C или C++, а является скриптом",
      "level": 2,
      "content": "Используйте команду file, чтобы узнать информацию об исполняемом файле:\n\n```\n$ file /usr/bin/имяприложения\n```\n\nЕсли она выведет ELF, то это бинарный исполняемый файл, который обычно компилируется из кода C или C++. Если она выведет Python script, значит вы имеете дело с приложением, написанным на Python.\n\nЕсли это шелл-скрипт, откройте его в текстовом редакторе и посмотрите (обычно в конце файла), есть ли в нём имя реальной программы (ELF-файла). Можно временно прописать \"gdb\" прямо в скрипт перед именем исполняемого файла в целях отладки. Используйте префикс gdb --args, если программе нужно передать аргументы.\n\nДля чистых шелл-скриптов можно использовать bash -x имя_скрипта или bash -xv имя_скрипта, что выведет подробную информацию о процессе выполнения скрипта.\n\nТексты ошибок в Python-приложениях часто содержат информацию о том, в каком файле и на какой строке произошел сбой. Если вы знаете Python, вы можете попытаться исправить это и вложить своё исправление в сообщение об ошибке.\n\n"
    },
    {
      "title": "Отправка собщения об ошибке",
      "level": 2,
      "content": "Сообщите об ошибке на https://bugs.archlinux.org или, возможно, отправьте сообщение непосредственно разработчикам приложения, а затем укажите ссылку на него в сообщении для Arch Linux. Это поможет всем нам.\n\nОднако если вы считаете, что что-то не так с самим приложением, а не с тем, как оно собрано в Arch Linux, то сообщите об ошибке непосредственно разработчикам приложения (в upstream).\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Gentoo:Project:Quality Assurance/Backtraces\n\n"
    }
  ]
}