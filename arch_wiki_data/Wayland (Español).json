{
  "title": "Wayland (Español)",
  "url": "https://wiki.archlinux.org/title/Wayland_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2024-06-04** \n\nArtículos relacionados\n\n- KMS\n- Xorg\n- Screen capture#Wayland\n\nWayland es un protocolo de servidor gráfico. Tiene como objetivo volverse el sucesor del X Window System. Puede consultar una comparación entre Wayland y Xorg en Wikipedia (en Ingl.\n\nLos servidores gráficos que usan el protocolo de Wayland son denominados compositores debido a que también actúan como un gestor de composición de ventanas. Debajo puede encontrar una lista de compositores de Wayland.\n\nPara obtener una ejecución fluida y compatibilidad con aplicaciones nativas de X11 puede usar Xwayland, que proveé un servidor X en Wayland.\n\n"
    },
    {
      "title": "Requisitos",
      "level": 2,
      "content": "La mayoría de los compositores de Wayland sólo funcionan en sistemas que utilicen Kernel mode setting. Wayland por sí mismo no proporciona un entorno gráfico; para ello necesita un compositor (vea la siguiente sección), o un entorno de escritorio que incluya un compositor (por ejemplo GNOME (Español) o KDE (Español)#Plasma).\n\nPara que el controlador de la GPU y el compositor Wayland sean compatibles, ambos deben soportar la misma API de búfer. Hay dos APIs principales: GBM y EGLStreams.\n\nTable content:\nAPI de búfer | Soporte de controlador para GPU | Soporte de compositor Wayland\nGBM | Todos excepto NVIDIA < 495* | Todos\nEGLStreams | NVIDIA | GNOME (Español)\n\nDesde que NVIDIA introdujo el soporte de GBM, muchos compositores (incluyendo Mutter y KWin) empezaron a usarlo por defecto para NVIDIA ≥ 495. GBM se considera generalmente mejor con un soporte más amplio, y EGLStreams sólo tenía soporte porque NVIDIA no proporcionaba ninguna forma alternativa de utilizar sus GPUs bajo Wayland con sus controladores propietarios. Además, KWin abandonó el soporte para EGLStreams después de que GBM fuera introducido en NVIDIA.\n\nSi utiliza un entorno de escritorio o compositor popular y una GPU aún soportada por NVIDIA, lo más probable es que ya utilice el backend GBM. Para comprobarlo, ejecute journalctl -b 0 --grep \"renderer for\". Para forzar GBM como backend, asigne las siguientes variables de entorno:\n\n```\nGBM_BACKEND=nvidia-drm\n__GLX_VENDOR_LIBRARY_NAME=nvidia\n```\n\n"
    },
    {
      "title": "Compositores",
      "level": 2,
      "content": "Consulte Window manager (Español)#Tipos para las diferencias entre Mosaico (tiling) y Apilamiento (stacking).\n\n"
    },
    {
      "title": "Mosaico",
      "level": 3,
      "content": "- Cagebreak — Basado en cage, inspirado por ratpoison.\n\n- dwl — Compositor de Wayland similar a dwm basado en wlroots.\n\n- Hyprland — Un compositor de mosaico dinámico de Wayland que no hace sacrificios en su apariencia.\n\n- japokwm — Compositor de mosaico dinámico de Wayland con la idea de crear disposiciones (layouts), basado en wlroots.\n\n- niri — Un compositor de mosaico scrollable de Wayland.\n\n- Polonium — Un sucesor espiritual de Bismuth que coloca ventanas en mosaico en KDE 6.\n\n- Qtile — Un gestor de ventanas en mosaico completo y hackeable, y un compositor Wayland escrito y configurado en Python.\n\n- river — Compositor de mosaico dinámico inspirado por dwm y bspwm (Español).\n\n- Sway — Compositor de Wayland compatible con i3 y basado en wlroots.\n\n- SwayFx — Sway, ¡con efectos visuales!\n\n- Velox — Gestor de ventanas sencillo basado en swc, inspirado por dwm y xmonad.\n\n- Vivarium — Compositor de mosaico dinámico de Wayland que usa wlroots, con la semántica del entorno de escritorio inspirada por xmonad.\n\n"
    },
    {
      "title": "Apilamiento",
      "level": 3,
      "content": "- Enlightenment — Véase Enlightenment#Manually. Más información: [2] [3]\n\n- hikari — Compositor inspirado por cwm que es desarrollado en FreeBSD aunque también soporta Linux.\n\n- KDE KWin — Vea KDE (Español)#Iniciar Plasma.\n\n- Liri Shell — Parte de Liri,escrito usando QtQuick y QtCompositor como compositor para Wayland.\n\n- labwc — Compositor basado en wlroots inspirado en Openbox.\n\n- Mutter — Véase GNOME (Español)#Inicio.\n\n- wayfire — Compositor 3D inspirado por Compiz y basado en wlroots.\n\n- Weston — Compositor de Wayland diseñado para ser correcto, fiable, predecible y eficaz.\n\n- wio — Compositor basado en wlroots que busca replicar la apariencia del escritorio Rio de Plan 9.\n\n"
    },
    {
      "title": "Otros",
      "level": 3,
      "content": "- Cage — Muestra en modo pantalla completa una única aplicación, como un kiosko.\n\n- nwg-shell — Una shell basada en GTK para los compositores sway y Hyprland de Wayland.\n\n- kiwmi — Un compositor de Wayland completamente programable.\n\n- phoc — Un diminuto compositor basado en wlroots para dispositivos móviles.\n\nAlgunos de los mencionados soportan gestores de pantalla. Verifique /usr/share/wayland-sessions/compositor.desktop para saber cómo son iniciados.\n\n"
    },
    {
      "title": "Gestores de inicio de sesión",
      "level": 2,
      "content": "Los gestores de pantalla, o gestores de inicio de sesión, listados debajo soportan el inicio de compositores de Wayland.\n\nTable content:\nNombre | ¿Se ejecuta en Wayland? | Descripción\nemptty | No | Un simple gestor de inicio de sesión para la TTY.\nGDM | Sí | Gestor de inicio de sesión de GNOME (Español).\ngreetd | Al usar un greeter compatible con Wayland | Demonio de inicio de sesión mínimo y flexible.\nlemurs | No | Gestor de inicio de sesión con una interfáz de usuario en terminal (TUI) escrita en Rust.\nLightDM | No | Gestor de inicio de sesión multiescritorio.\nLy | No | Gestor de inicio de sesión con una TUI escrita en C.\nSDDM | Sí | Gestor de inicio de sesión basado en QML.\ntbsm | No | Un lanzador de sesiones simple con una interfaz de usuario por consola (CLI) escrito en bash.\nuwsm | No | Administrador de sesión y de inicio automático de XDG para compositores independientes que aprovecha los mecanismos de Systemd.\n\n"
    },
    {
      "title": "Xwayland",
      "level": 2,
      "content": "Xwayland[enlace roto 2024-10-12] es un servidor X que se ejecuta dentro de Wayland y proveé compatibilidad para aplicaciones nativas de X11 que aún no tienen soporte en Wayland. Para usarlo instale el paquete xorg-xwayland.\n\nXwayland se inicia a través de un compositor, por lo que debe consultar la documentación del compositor elegido para comprobar la compatibilidad con Xwayland y las instrucciones sobre cómo iniciar Xwayland.\n\n- Seguridad: Xwayland es un servidor X, por lo que no proveé las características de seguridad de Wayland\n- Rendimiento: Xwayland tiene un rendimiento similar a X11. En algunos casos puede observar un rendimiento deteriorado, especialmente con tarjetas gráficas NVIDIA.\n- Compatibilidad: Xwayland no es totalmente compatible con X11. Algunas aplicaciones pueden no funcionar correctamente en Xwayland.\n\n"
    },
    {
      "title": "Controlador de NVIDIA",
      "level": 3,
      "content": "Se requiere habilitar DRM KMS. Puede encontrar información adicional en la documentación oficial independientemente de su gestor de pantalla (por ejemplo GDM).\n\n"
    },
    {
      "title": "Consola de depuración de Kwin en Wayland",
      "level": 3,
      "content": "Si usa kwin, ejecute el siguiente comando para saber qué ventanas utilizan Xwayland o Wayland nativo, superficies, entradas de eventos, contenidos del portapapeles y más.\n\n```\n$ qdbus6 org.kde.KWin /KWin org.kde.KWin.showDebugConsole\n```\n\n"
    },
    {
      "title": "Detectar visualmente aplicaciones de Xwayland",
      "level": 3,
      "content": "Para determinar si una aplicación se ejecuta usando Xwayland puede iniciar extramausAUR. Mueva el cursor del ratón sobre la ventana de la aplicación, si el ratón rojo se mueve la aplicación funciona vía Xwayland.\n\nAlternativamente puede usar xorg-xeyes y ver si los ojos se mueven cuando pasa el cursor del ratón sobre la ventana de la aplicación.\n\nOtra opción es ejecutar xwininfo (de xorg-xwininfo) en una terminal: al pasar el cursor del ratón sobre una ventana de Xwayland el puntero debería convertirse en un símbolo +. Si da click en la ventana se mostrará información y finalizará su ejecución. Puede usar Ctrl+C para terminar el comando.\n\nTambién es posible utilizar xlsclients (de xorg-xlsclients). Para listar todas las aplicaciones ejecutándose mediante Xwayland ejecute la orden xlsclients -l.\n\n"
    },
    {
      "title": "Bibliotecas GUI",
      "level": 2,
      "content": "Consulte los detalles en la página oficial[enlace roto 2024-10-12].\n\n"
    },
    {
      "title": "GTK",
      "level": 3,
      "content": "Los paquetes gtk3 y gtk4 tienen el backend de Wayland habilitado. GTK usará por defecto el backend de Wayland, aunque es posible forzar el uso de Xwayland modificando la variable de entorno: GDK_BACKEND=x11.\n\nPara problemas relacionado con el tema de las aplicaciones consulte GTK (Español)#Backend de Wayland.\n\n"
    },
    {
      "title": "Qt",
      "level": 3,
      "content": "Para habilitar el soporte de Wayland en Qt (Español) 5 o 6, instale respectivamente qt5-wayland o qt6-wayland. Las aplicaciones Qt de su sistema utilizarán Wayland en una sesión de Wayland.\n\nAunque es debería de ser necesario, para ejecutar una aplicación de Qt explcon el complemento de Wayland [4], utilice la variable de entorno -platform wayland o QT_QPA_PLATFORM=wayland.\n\nPara forzar el uso de X11 en una sesión de Wayland use QT_QPA_PLATFORM=xcb. Esto puede ser necesario para aplicaciones propietarias que no usan la implementación de Qt del sistema, como zoomAUR. QT_QPA_PLATFORM=\"wayland;xcb\" permite a Qt usar el complemento xcb (X11) si Wayland no está disponible [5].\n\nEn algunos compositores, por ejemplo sway (Español), las aplicaciones Qt que se ejecutan de forma nativa pueden tener funciones faltantes. Por ejemplo, KeepassXC no podrá minimizarse a la bandeja de estado. Esto puede resolverse instalando qt5ct y asignando QT_QPA_PLATFORMTHEME=qt5ct antes de ejecutar la aplicación.\n\n"
    },
    {
      "title": "Clutter",
      "level": 3,
      "content": "El conjunto de herramientas de Clutter tiene un backend Wayland que permite que se ejecute como cliente de Wayland. El backend está activado en el paquete clutter.\n\nPara ejecutar una aplicación de Clutter en Wayland, establezca CLUTTER_BACKEND=wayland.\n\n"
    },
    {
      "title": "SDL2",
      "level": 3,
      "content": "Para ejecutar una aplicación de SDL2 en Wayland, establezca SDL_VIDEODRIVER=wayland. SDL_VIDEODRIVER=\"wayland,x11\" permite a SDL2 usar el controlador de video de X11 en caso de que Wayland no esté disponible [6]. También puede que le sea útil instalar libdecor para habilitar decoraciones de las ventanas (como en GNOME por ejemplo).\n\n"
    },
    {
      "title": "GLFW",
      "level": 3,
      "content": "El paquete glfw tiene soporte para Wayland, utiliza el backend de Wayland si la variable de entorno XDG_SESSION_TYPE está asignada a wayland y la persona desarrolladora de la aplicación no ha configurado un backend específico.\n\nConsulte el código fuente para más información.\n\n"
    },
    {
      "title": "GLEW",
      "level": 3,
      "content": "El paquete glew-waylandAUR[enlace roto: package not found] aún no funciona con la mayoría de aplicaciones basadas en GLEW, por lo que la única opción es usar Xwayland. Véase FS#62713.\n\n"
    },
    {
      "title": "EFL",
      "level": 3,
      "content": "EFL tiene soporte completo para Wayland. Para ejecutar una aplicación de EFL en Wayland, vea la página del proyecto[enlace roto 2024-10-12] de Wayland.\n\n"
    },
    {
      "title": "winit",
      "level": 3,
      "content": "Winit es una biblioteca de manejo de ventanas escrita en Rust. Por defecto usará el backend de Wayland, aunque es posible forzar el uso de Xwayland modificando las variables de entorno:\n\n- Para versiones anteriores a 0.29.2 asigne WINIT_UNIX_BACKEND=x11.\n- Para la versión 0.29.2 y posteriores desactive WAYLAND_DISPLAY, lo cual obliga el uso de X utilizando la variable DISPLAY. [7]\n\n"
    },
    {
      "title": "Electron",
      "level": 3,
      "content": "La compatibilidad con Wayland puede activarse mediante opciones de línea de comandos por aplicación o de forma más global mediante un archivo de configuración.\n\nPara determinar qué versión de electron usa, consulte [8].\n\n"
    },
    {
      "title": "Variables de entorno",
      "level": 4,
      "content": "Las aplicaciones que usan la versión 28 de Electron y posteriores, pueden usar la variable de entorno ELECTRON_OZONE_PLATFORM_HINT al asignarla a auto o wayland.\n\n"
    },
    {
      "title": "Banderas de línea de comandos",
      "level": 4,
      "content": "A diferencia de Chromium, en el navegador que está basado Electron, las aplicaciones de Electron no permiten la captura de pantalla con WebRTC a través de PipeWire de forma predeterminada. Por lo tanto, se recomienda utilizar --enable-features=WebRTCPipeWireCapturer para evitar problemas de captura de pantalla en Wayland. La captura se basa en xdg-desktop-portal.\n\nPara utilizar aplicaciones basadas en electron de forma nativa en Wayland cuando el uso de la variable de entorno no es deseable o factible, es posible añadir --ozone-platform-hint=auto en Electron 20+.\n\nLos casos de falta de barras superiores se pueden resolver mediante el uso de: --enable-features=WaylandWindowDecorations. Esto suele ser necesario en GNOME (Español) (soportado desde electron17).\n\nPuede asignar de forma más persistente estas banderas al modificar el archivo .desktop de una aplicación al añadirlas al final de la línea Exec=, o utilizando los archivos de configuración mencionados a continuación.\n\n"
    },
    {
      "title": "Archivo de configuración",
      "level": 4,
      "content": "Los paquetes Electron leen los archivos ~/.config/electronXX-flags.conf, donde XX es la versión de Electron, o recurren al archivo compartido ~/.config/electron-flags.conf, si el archivo versionado no se encuentra presente.\n\nDe las banderas coloque una por linea:\n\n```\n~/.config/electron-flags.conf\n```\n\n```\n--enable-features=WaylandWindowDecorations\n--ozone-platform-hint=auto\n```\n\n"
    },
    {
      "title": "Versiones anteriores de Electron",
      "level": 4,
      "content": "electron25-flags.conf solamente funciona para la versión 25 de Electron. Versiones anteriores pueden configurarse usando su propio archivo electron<version>-flags.conf.\n\nVersiones más anteriores pueden requerir banderas diferentes, dependiendo en la versión correspondiente de Chromium. Por ejemplo, las siguientes banderas funcionan en Electron 13:\n\n```\n~/.config/electron13-flags.conf\n```\n\n```\n--enable-features=UseOzonePlatform\n--ozone-platform=wayland\n```\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "La implementación de código abierto de la plataforma OpenJDK de Java, no cuenta con soporte nativo para Wayland. Será hasta Wakefield, que el proyecto busque implementar OpenJDK en Wayland, mientras tanto puede usar Xwayland.\n\nVéase Debian:Wayland#Java Programs (supported since OpenJDK 16?):\n\n"
    },
    {
      "title": "Automatización",
      "level": 3,
      "content": "- ydotool (ydotool) - Herramienta de línea de comandos de automatización (no limitada a wayland). Habilite/inicie la unidad de usuario ydotool.service. Véase ydotool(1), ydotoold(1).\n- wtype (wtype) - Herramienta similar a xdotool para Wayland. Consulte wtype(1).\n- keyboard - Biblioteca de Python que funciona en Windows y Linux con soporte experimental para OS X. También véase la biblioteca mouse.\n- wlrctl (wlrctlAUR) - Una utilidad de linea de comandos para extensiones de wlroots (soporta foreign-toplevel-management, virtual-keyboard, virtual-pointer).\n\n"
    },
    {
      "title": "Reasignación de teclas de teclado o ratón",
      "level": 3,
      "content": "Véase Input remap utilities.\n\n"
    },
    {
      "title": "Grabar ventanas de Wayland con aplicaciones X11",
      "level": 3,
      "content": "Consulte Screen capture#Screencast Wayland windows with X11 applications (en Inglés).\n\n"
    },
    {
      "title": "Corrección de color",
      "level": 3,
      "content": "Véase Backlight#Color correction.\n\n"
    },
    {
      "title": "Movimiento lento, fallos gráficos y bloqueos",
      "level": 3,
      "content": "Usuario de Gnome-shell pueden experimentar errores de pantalla cuando cambian a Wayland desde X. Una causa puede ser que la variable CLUTTER_PAINT=disable-clipped-redraws:disable-culling haya sido asignada para la sesión Xorg de Gnome-shell. Para mitigar este error simplemente intente eliminarla de /etc/environment u otros archivos rc.\n\n"
    },
    {
      "title": "Pantalla remota",
      "level": 3,
      "content": "- wlroots (usado por sway) ofrece un backend VNC mediante wayvnc, desde la versión 0.10. el backend RDP ha sido eliminado [9].\n- mutter habilita escritorio remoto cuando se compila, consulte [10] y gnome-remote-desktop para más detalles.\n- krfb ofrece un servidor VNC para kwin. krfb-virtualmonitor puede ser usado para configurar un dispositivo adicional como una pantalla adicional.\n- Hubo una fusión FreeRDP en Weston en 2013, que lo habilita usando una bandera de compilación. El paquete weston usa esta bandera desde la versión 6.0.0.\n- waypipe (o waypipe-gitAUR) es un proxy transparente para aplicaciones de Wayland, con un wrapper para ejecutarlo en SSH (Español). Por ejemplo, para lanzar una instancia remota de KDE kcalc en Plasma:\n\n- Por ejemplo, para lanzar una instancia remota de KDE kcalc en Plasma:\n\n```\n$ waypipe ssh example.local env QT_QPA_PLATFORM=wayland-egl QT_QPA_PLATFORMTHEME=KDE dbus-launch kcalc\n```\n\n"
    },
    {
      "title": "Detección de entrada en juegos, escritorio remoto y ventanas de máquinas virtuales",
      "level": 3,
      "content": "A diferencia de Xorg, Wayland no permite la captura exclusiva de dispositivos de entrada, también conocida como captura activa o explícita (por ejemplo teclado, ratón), en su lugar, depende del compositor de Wayland enviar los atajos de teclado y confinar el apuntador del ratón a la ventana de la aplicación.\n\nEste cambio en la captura de entrada irrumple el comportamiento de las aplicaciones actuales, lo que significa:\n\n- Las combinaciones de teclas de acceso rápido y los modificadores serán capturados por el compositor y no se enviarán al escritorio remoto ni a las ventanas de la máquina virtual.\n- El puntero del mouse no estará restingido a la ventana de la aplicación, lo cual puede causar un efecto de paralaje donde la ubicación del puntero dentro de la ventana de la máquina virtual o escritorio remoto es desplazada con respecto al puntero de la máquina anfitriona.\n\nWayland soluciona esto al agregar extensiones de protocolo para Wayland y Xwayland. El soporte para dichas extensiones debe de ser incluido a los compositores de Wayland. En el caso de los clientes nativos, los toolkits (por ejemplo, GTK, Qt) deben soportar estas extensiones, o las aplicaciones mismas si no se usa toolkit alguno. Para las aplicaciones de Xorg o toolkits no es necesario cambio alguno, pues el soporte de Xwayland es suficiente.\n\nEstas extensiones son incluidas en wayland-protocols, y soportadas por xorg-xwayland.\n\nLas extensiones relacionadas son:\n\n- Protocolo de captura de teclado de Xwayland\n- Protocolo inhibidor de atajos de teclado del compositor\n- Protocolo del apuntador relativo\n- Protocolo de limitación de punteros\n\nCompositores que soportan Wayland:\n\n- El compositor de GNOME (Español), Mutter desde la versión 3.28\n- wlroots soporta protocolo del apuntador relativo y limitación de punteros\n- Kwin KDE#X11 shortcuts conflict on Wayland Bloqueo de los atajos de teclado\n\n- KDE#X11 shortcuts conflict on Wayland\n- Bloqueo de los atajos de teclado\n\nToolkits soportados:\n\n- GTK desde la versión 3.22.18.\n\n"
    },
    {
      "title": "Temas GTK no funcionan",
      "level": 3,
      "content": "Véase https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland.\n\n"
    },
    {
      "title": "Evitar usar los módulos de NVIDIA",
      "level": 3,
      "content": "Asigne __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json como variable de entorno antes de ejecutar un compositor de Wayland como sway (Español).\n\n"
    },
    {
      "title": "Ampliación/escalamiento de superficies",
      "level": 3,
      "content": "La ampliación de pantalla aún no está resuelta, se ha fusionado un pull request a mediados de 2022 proporcionando al protocolo wp-surface-scale.\n\n"
    },
    {
      "title": "Véase también",
      "level": 2,
      "content": "- Documentación de Wayland online\n- Repositorio oficial\n- Fedora:How to debug Wayland problems\n- Are we Wayland yet?\n- Awesome Wayland projects\n- Cursor themes (Español)\n- Foro de discusión de Arch Linux\n- Guía de migración de i3 - Aplicaciones comunes de X11 con alternativas en Wayland\n- Wayland Explorer - Una mejor forma de leer documentación de Wayland\n- ¿Cómo saber si una aplicación usa Xwayland?\n\n"
    }
  ]
}