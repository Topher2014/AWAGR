{
  "title": "Building a Live CD (日本語)",
  "url": "https://wiki.archlinux.org/title/Building_a_Live_CD_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Preboot Execution Environment\n- オフラインインストール\n- USB インストールメディア\n\nArchiso は Arch Linux のライブ CD/USB ISO イメージを構築するための 高度にカスタマイズ可能なツールです。公式のイメージは archiso でビルドされています。レスキューシステム、Linux インストーラー、そして他のシステム用のベースとして使用できます。この Wiki 記事では、archiso のインストールの仕方と、成果物の ISO イメージに含まれるパッケージやファイルなどを設定する方法について説明します。技術的な要求とビルドの手順は プロジェクトの公式ドキュメントを参照してください。Archiso はいくつもの Bash スクリプトで実装されており、mkarchiso コマンドがその中心です。このコマンドのオプションは mkarchiso -h で文書化されているので、ここでは説明しません。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 カスタムプロファイルを準備する 2.1 プロファイルの構造 2.2 パッケージを選択する 2.2.1 カスタムのローカルリポジトリ 2.2.2 multilib のパッケージ 2.3 イメージにファイルを追加する 2.4 イメージにリポジトリを追加する 2.4.1 archzfs 例 2.5 カーネル 2.6 ブートローダー 2.6.1 UEFI セキュアブート 2.7 systemd ユニット 2.7.1 ログインマネージャ 2.7.2 自動ログインを変更する 2.8 ユーザとパスワード 2.9 ISO で使用されるディストリビューション名を変更する\n- 3 ISO をビルドする 3.1 作業ディレクトリの削除\n- 4 ISO を使う\n- 5 ISO を QEMU でテストする\n- 6 ヒントとテクニック 6.1 SSH 経由でインストールするための ISO を準備する 6.2 iwd を使って Wi-Fi ネットワークに自動的に接続する 6.3 ルートファイルシステムのサイズを調整する\n- 7 トラブルシューティング 7.1 ウィンドウマネージャがフリーズする\n- 8 参照\n\n- 2.1 プロファイルの構造\n- 2.2 パッケージを選択する 2.2.1 カスタムのローカルリポジトリ 2.2.2 multilib のパッケージ\n- 2.3 イメージにファイルを追加する\n- 2.4 イメージにリポジトリを追加する 2.4.1 archzfs 例\n- 2.5 カーネル\n- 2.6 ブートローダー 2.6.1 UEFI セキュアブート\n- 2.7 systemd ユニット 2.7.1 ログインマネージャ 2.7.2 自動ログインを変更する\n- 2.8 ユーザとパスワード\n- 2.9 ISO で使用されるディストリビューション名を変更する\n\n- 2.2.1 カスタムのローカルリポジトリ\n- 2.2.2 multilib のパッケージ\n\n- 2.4.1 archzfs 例\n\n- 2.6.1 UEFI セキュアブート\n\n- 2.7.1 ログインマネージャ\n- 2.7.2 自動ログインを変更する\n\n- 3.1 作業ディレクトリの削除\n\n- 6.1 SSH 経由でインストールするための ISO を準備する\n- 6.2 iwd を使って Wi-Fi ネットワークに自動的に接続する\n- 6.3 ルートファイルシステムのサイズを調整する\n\n- 7.1 ウィンドウマネージャがフリーズする\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "archiso パッケージか archiso-gitAUR パッケージをインストールしてください。\n\n"
    },
    {
      "title": "カスタムプロファイルを準備する",
      "level": 2,
      "content": "Archiso には2つのプロファイルが付属しています。releng と baseline です。\n\n- releng は毎月リリースされる公式インストール ISO を作成するために使われます。カスタマイズ ISO イメージを作成するためのベースとしても使用できます。\n- baseline は最小限の構成であり、メディアからライブ環境を起動するために必要な最小限のパッケージのみが含まれています。\n\n未変更のプロファイルをビルドする場合は、#ISO をビルドする までスキップしてください。archiso に同梱されているプロファイルのうちどれかをカスタマイズしたい場合は、ディレクトリ /usr/share/archiso/configs/profile-name/ を、自由な名前の書き込み可能なディレクトリへコピーしてください。例えば:\n\n```\n$ cp -r /usr/share/archiso/configs/releng/ archlive\n```\n\nカスタムプロファイルをカスタマイズ、ビルドするには以下のセクションに進んでください。\n\n"
    },
    {
      "title": "プロファイルの構造",
      "level": 3,
      "content": "Archiso プロファイルは、生成される ISO イメージの内容を定義する設定ファイルが含まれています。プロファイルの構造は /usr/share/doc/archiso/README.profile.rst[1] で文書化されています。\n\n"
    },
    {
      "title": "パッケージを選択する",
      "level": 3,
      "content": "packages.x86_64 を編集して、ライブシステムイメージにどのパッケージをインストールするかを選択してください。1行で1つのパッケージが定義されます。\n\n"
    },
    {
      "title": "カスタムのローカルリポジトリ",
      "level": 4,
      "content": "標準の Arch リポジトリに存在しないパッケージ (AUR のパッケージや、ABS でカスタマイズされたパッケージなど) を追加するには, カスタムローカルリポジトリを設定し、そこにパッケージを追加してください。その後、pacman.conf にリポジトリを以下のように追加してください:\n\n```\narchlive/pacman.conf\n```\n\n```\n...\n[customrepo]\nSigLevel = Optional TrustAll\nServer = file:///path/to/customrepo\n...\n```\n\n- pacman.conf 内での順番は重要です。カスタムリポジトリを最優先させるには、他のリポジトリエントリよりも上にそのリポジトリを配置してください。\n- この pacman.conf はイメージのビルドのためだけに使用されます。Live 環境内で使用されるものではありません。Live 環境内で使用されるようにするには、#イメージにリポジトリを追加する を見てください。\n\n"
    },
    {
      "title": "multilib のパッケージ",
      "level": 4,
      "content": "multilib リポジトリからパッケージをインストールする場合は、pacman.conf 内にある multilib リポジトリをアンコメントしてください。\n\n"
    },
    {
      "title": "イメージにファイルを追加する",
      "level": 3,
      "content": "airootfs ディレクトリはライブシステムの root ディレクトリ (/) の起点として使用されます。このディレクトリの全てのファイルがパッケージがインストールされる前に作業ディレクトリにコピーされます。\n\nカスタムのファイルやディレクトリを airootfs/ 下の好きな場所に配置してください。例えば、現在のシステム上の iptables スクリプトのセットをライブイメージで使用したい場合、それらを以下のようにコピーします:\n\n```\n$ cp -r /etc/iptables archlive/airootfs/etc\n```\n\n同様に、この階層の下のどこかに存在する特別な設定ファイルにも注意が必要です。ディレクトリ構造のかけている部分は mkdir(1) で作成できます。\n\nに設置してください。\n\nデフォルトでは、ファイルのパーミッションは 644、ディレクトリのパーミッションは 755 に設定されており、全て root ユーザーによって所有されています。特定のファイルやフォルダーに別のパーミッションや所有者を設定するには、 file_permissions 連想配列を profiledef.sh で設定してください. 詳細は README.profile.rst を確認してください。\n\n"
    },
    {
      "title": "イメージにリポジトリを追加する",
      "level": 3,
      "content": "Live 環境内で使用できるリポジトリを追加するには、適切に変更された pacman.conf を作成し、archlive/airootfs/etc/ に配置してください。\n\n(追加した) リポジトリがキーを使用する場合、archlive/airootfs/usr/share/pacman/keyrings/ にそのキーを配置してください。キーファイル名は .gpg で終わらなければなりません。さらに、キーは信頼されていなければなりません。これは、GnuPG でエクスポートされた信頼ファイルを同じディレクトリ内に作成することにより可能です。信頼ファイル名は -trusted で終わらなければなりません。最初のフィールドはキーのフィンガープリント、2つめのフィールドは信頼です。/usr/share/pacman/keyrings/archlinux-trusted を例にすることができます。\n\n"
    },
    {
      "title": "archzfs 例",
      "level": 4,
      "content": "この例でのファイルは以下の通りです:\n\n```\nairootfs\n├── etc\n│   ├── pacman.conf\n│   └── pacman.d\n│       └── archzfs_mirrorlist\n└── usr\n    └── share\n        └── pacman\n            └── keyrings\n                ├── archzfs.gpg\n                └── archzfs-trusted\n```\n\n```\nairootfs/etc/pacman.conf\n```\n\n```\n...\n[archzfs]\nInclude = /etc/pacman.d/archzfs_mirrorlist\n...\n```\n\n```\nairootfs/etc/pacman.d/archzfs_mirrorlist\n```\n\n```\nServer = https://archzfs.com/$repo/$arch\nServer = https://mirror.sum7.eu/archlinux/archzfs/$repo/$arch\nServer = https://mirror.biocrafting.net/archlinux/archzfs/$repo/$arch\nServer = https://mirror.in.themindsmaze.com/archzfs/$repo/$arch\nServer = https://zxcvfdsa.com/archzfs/$repo/$arch\n```\n\n```\nairootfs/usr/share/pacman/keyrings/archzfs-trusted\n```\n\n```\nDDF7DB817396A49B2A2723F7403BD972F75D9D76:4:\n```\n\narchzfs.gpg 自体は https://archzfs.com/archzfs.gpg のリポジトリサイトから直接入手できます。\n\n"
    },
    {
      "title": "カーネル",
      "level": 3,
      "content": "archiso に含まれている両プロファイルには linux しかありませんが、ISO には他のカーネル、さらに言えば複数のカーネルをも含ませることができます。\n\nまず、packages.x86_64 を編集して、お好みのカーネルパッケージ名を記入します。mkarchiso を実行すると、すべての work_dir/airootfs/boot/vmlinuz-* と work_dir/boot/initramfs-*.img (加えて、UEFI 起動に使われる FAT イメージ) が ISO に入ります。\n\nデフォルトでは、mkinitcpio プリセットはフォールバックの initramfs イメージもビルドします。ISO の場合、メインの initramfs イメージには autodetect フックが含まれないので、追加のフォールバックイメージは不要になります。(スペースの節約やビルドプロセスの高速化のために) フォールバック initramfs イメージを作成しないようにするには、archlive/airootfs/etc/mkinitcpio.d/pkgbase.preset 内にカスタムのプリセットを配置してください。例えば、linux-lts の場合:\n\n```\narchlive/airootfs/etc/mkinitcpio.d/linux-lts.preset\n```\n\n```\nPRESETS=('archiso')\n\nALL_kver='/boot/vmlinuz-linux-lts'\nALL_config='/etc/mkinitcpio.conf'\n\narchiso_image=\"/boot/initramfs-linux-lts.img\"\n```\n\n最後に、ブートローダーの設定ファイルを生成して、カーネルを起動可能にしてください。\n\n"
    },
    {
      "title": "ブートローダー",
      "level": 3,
      "content": "Archiso では、BIOS ブート用に syslinux、UEFI ブート用に GRUB と systemd-boot をサポートしています。設定ファイルの構文に関する情報はそれぞれのブートローダーの記事を参照してください。\n\n- releng プロファイルは、El Torito を使って光学ディスクに焼いた場合や、Isohybrid を使ってハードディスクに書き込んだ場合は、BIOS と UEFI ブートの両方をサポートする ISO をデフォルトでビルドします。\n- isolinux のモジュール性により、.c32 ファイルがすべてコピーされ利用可能なので、多くのアドオンを利用できます。公式の syslinux サイト と archiso git リポジトリ を参照してください。アドオンを使えば、魅力的で複雑なメニューを作ることができます。[2] を見てください。\n\nmkarchiso は、systemd-boot の設定が efiboot ディレクトリ内に、GRUB の設定ファイルが grub ディレクトリ内に、syslinux の設定がディレクトリ syslinux 内に存在することを期待します。\n\n"
    },
    {
      "title": "UEFI セキュアブート",
      "level": 4,
      "content": "UEFI セキュアブートが有効な環境で archiso を起動できるようにしたい場合、署名済みのブートローダーを使わねばなりません。セキュアブート#インストールメディアを起動する の指示に従うことで可能です。\n\n"
    },
    {
      "title": "systemd ユニット",
      "level": 3,
      "content": "ライブ環境で systemd のサービス/ソケット/タイマーを有効化するには、systemctl enable が行うように、シンボリックリンクを手動で作成する必要があります。\n\n例えば、gpm.service (WantedBy=multi-user.target を含んでいます) を有効化するには、以下を実行してください:\n\n```\n$ mkdir -p archlive/airootfs/etc/systemd/system/multi-user.target.wants\n$ ln -s /usr/lib/systemd/system/gpm.service archlive/airootfs/etc/systemd/system/multi-user.target.wants/\n```\n\n必要なシンボリックリンクは systemd ユニットを読めば分かります。サービスがインストール済みならば、それを有効化して systemctl の出力を観察することで、必要なシンボリックリンクを知ることができます。\n\n"
    },
    {
      "title": "ログインマネージャ",
      "level": 4,
      "content": "ログインマネージャの systemd サービスを有効化することで、X を起動時に起動します。どの .service を有効化すべきかわからない場合、ISO のシステム上にあるものと同じプログラムを使っていればすぐに確認することができます:\n\n```\n$ ls -l /etc/systemd/system/display-manager.service\n```\n\nそして archlive/airootfs/etc/systemd/system/ に同じソフトリンクを作成してください。LXDM の場合:\n\n```\n$ ln -s /usr/lib/systemd/system/lxdm.service archlive/airootfs/etc/systemd/system/display-manager.service\n```\n\nこれでライブ環境でシステムを起動した時に LXDM が有効になります。\n\n"
    },
    {
      "title": "自動ログインを変更する",
      "level": 4,
      "content": "getty の自動ログインの設定は airootfs/etc/systemd/system/getty@tty1.service.d/autologin.conf にあります。\n\nこのファイルを編集することで自動ログインするユーザーを変更することができます:\n\n```\n[Service]\nExecStart=\nExecStart=-/sbin/agetty --autologin username --noclear %I 38400 linux\n```\n\nもしくは autologin.conf も一緒に削除することで自動ログインを無効化することも可能です。\n\nシリアルコンソールを使用している場合、代わりに以下の内容で airootfs/etc/systemd/system/serial-getty@ttyS0.service.d/autologin.conf を作成してください:\n\n```\n[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -- \\\\u' --noclear --autologin root --keep-baud 115200,57600,38400,9600 - $TERM\n```\n\n"
    },
    {
      "title": "ユーザとパスワード",
      "level": 3,
      "content": "ライブ環境で利用可能なユーザを作成するには、archlive/airootfs/etc/passwd、archlive/airootfs/etc/shadow、archlive/airootfs/etc/group そして archlive/airootfs/etc/gshadow を手動で編集しなければなりません。\n\n例えば、archie ユーザを追加するとします。passwd(5) の文法に従ってそのユーザを archlive/airootfs/etc/passwd に追加してください:\n\n```\narchlive/airootfs/etc/passwd\n```\n\n```\nroot:x:0:0:root:/root:/usr/bin/zsh\narchie:x:1000:1000::/home/archie:/usr/bin/zsh\n```\n\nshadow(5) の構文に従って archlive/airootfs/etc/shadow にユーザーを追加してください。そのユーザーにパスワードを設定したい場合は、openssl passwd -6 でパスワードのハッシュ値を計算し、その値をファイルに追加してください。例えば:\n\n```\narchlive/airootfs/etc/shadow\n```\n\n```\nroot::14871::::::\narchie:$6$randomsalt$cij4/pJREFQV/NgAgh9YyBIoCRRNq2jp5l8lbnE5aLggJnzIRmNVlogAg8N6hEEecLwXHtMQIl2NX2HlDqhCU1:14871::::::\n```\n\nパスワードの列を空欄にした場合、ユーザーはパスワード無しでログインできます。\n\ngroup(5) に従って、ユーザのグループと、そのユーザが所属するグループを archlive/airootfs/etc/group に追加してください。例えば:\n\n```\narchlive/airootfs/etc/group\n```\n\n```\nroot:x:0:root\nadm:x:4:archie\nwheel:x:10:archie\nuucp:x:14:archie\narchie:x:1000:\n```\n\ngshadow(5) に従って、適切な archlive/airootfs/etc/gshadow を作成してください:\n\n```\narchlive/airootfs/etc/gshadow\n```\n\n```\nroot:!*::root\narchie:!*::\n```\n\n/etc/shadow と /etc/gshadow のパーミッションが正しいことを確認してください:\n\n```\narchlive/profiledef.sh\n```\n\n```\n...\nfile_permissions=(\n  ...\n  [\"/etc/shadow\"]=\"0:0:0400\"\n  [\"/etc/gshadow\"]=\"0:0:0400\"\n)\n```\n\nパッケージのインストール後、mkarchiso は archlive/airootfs/etc/passwd 内にあるユーザの指定されたホームディレクトリをすべて作成し、work_directory/x86_64/airootfs/etc/skel/* をそれらへコピーします。コピーされたファイルには適切なユーザとグループの所有権が付与されます。\n\n"
    },
    {
      "title": "ISO で使用されるディストリビューション名を変更する",
      "level": 3,
      "content": "まず、/etc/os-release ファイルを rootfs 内の etc/ フォルダにコピーしてください。そして、そのファイルを適宜編集してください。GRUB と syslinux 内部での名前も変更できます。\n\n"
    },
    {
      "title": "ISO をビルドする",
      "level": 2,
      "content": "CD や USB に焼くことのできる ISO を以下のコマンドでビルドしてください:\n\n```\n# mkarchiso -v -w /path/to/work_dir -o /path/to/out_dir /path/to/profile/\n```\n\n- -w は作業ディレクトリを指定します。このオプションが指定されない場合、カレントディレクトリ内の work をデフォルトとして使用します。\n- -o は、ビルド済み ISO イメージが置かれるディレクトリを指定します。このオプションが指定されない場合、カレントディレクトリ内の out をデフォルトとして使用します。\n- mkarchiso の実行時にはプロファイルファイル profiledef.sh は指定できず、そのファイルまでのパスのみを指定できることに注意してください (訳注: つまり、そのファイルが存在するディレクトリを指定する)。\n\n/path/to/profile/ はカスタムプロファイルへのパスに置き換えてください。未変更のプロファイルをビルドする場合は /usr/share/archiso/configs/releng/ に置き換えてください。\n\n```\n# mkarchiso -v -w /tmp/archiso-tmp /path/to/profile/\n```\n\nスクリプトは、指定されたパッケージを work_directory/x86_64/airootfs へダウンロード・インストールし、カーネルと init イメージを作成し、カスタマイズを適用し、最後に ISO をビルドして出力ディレクトリへ保存します。\n\n"
    },
    {
      "title": "作業ディレクトリの削除",
      "level": 3,
      "content": "一時ファイルが作業ディレクトリにコピーされています。ISO を正常にビルドした後であれば、作業ディレクトリとその内容を削除できます。例えば:\n\n```\n# rm -rf /path/to/work_dir\n```\n\n"
    },
    {
      "title": "ISO を使う",
      "level": 2,
      "content": "選択肢については インストールガイド#インストールメディアの準備 を見てください。\n\n"
    },
    {
      "title": "ISO を QEMU でテストする",
      "level": 2,
      "content": "任意の依存パッケージである qemu-desktop と edk2-ovmf をインストールしてください。\n\nQEMU を使ってビルド済みイメージを実行するには、run_archiso という便利なスクリプトを使ってください:\n\n```\n$ run_archiso -i /path/to/archlinux-yyyy.mm.dd-x86_64.iso\n```\n\n仮想マシンは UEFI エミュレートを使って実行することもできます:\n\n```\n$ run_archiso -u -i /path/to/archlinux-yyyy.mm.dd-x86_64.iso\n```\n\n"
    },
    {
      "title": "SSH 経由でインストールするための ISO を準備する",
      "level": 3,
      "content": "システムと対話せずに SSH から Arch Linux をインストールするには、SSH 公開鍵を authorized_keys 内に記入する必要があります。\n\nSSH 鍵は、手動 (ここで説明します) か、cloud-init によって追加することができます。\n\n鍵を手動で追加するには、まず、書き込み可能なディレクトリに archiso の releng プロファイルをコピーしてください。次の例では archlive を使っています。\n\n```\n$ cp -r /usr/share/archiso/configs/profile/ archlive\n```\n\nログインに使用されるユーザーのホームディレクトリ内に .ssh ディレクトリを作成してください。以下の例では root ユーザを使用しています。\n\n```\n$ mkdir archlive/airootfs/root/.ssh\n```\n\n(ログインに使用される) SSH 公開鍵を authorized_keys に追加してください:\n\n```\n$ cat ~/.ssh/key1.pub >> archlive/airootfs/root/.ssh/authorized_keys\n$ cat ~/.ssh/key2.pub >> archlive/airootfs/root/.ssh/authorized_keys\n```\n\n.ssh ディレクトリと authorized_keys ファイルに正しいパーミッションと所有者を設定してください:\n\n```\narchlive/profiledef.sh\n```\n\n```\n...\nfile_permissions=(\n  ...\n  [\"/root\"]=\"0:0:0750\"\n  [\"/root/.ssh\"]=\"0:0:0700\"\n  [\"/root/.ssh/authorized_keys\"]=\"0:0:0600\"\n)\n```\n\n最後に、ISO をビルドしてください。ISO のブート時に OpenSSH が起動し、対応する SSH 秘密鍵を使ってログインできるようになります。\n\n"
    },
    {
      "title": "iwd を使って Wi-Fi ネットワークに自動的に接続する",
      "level": 3,
      "content": "プロファイルの airootfs ディレクトリ内に /var/lib/iwd/ を作成し、正しいパーミッションを設定してください:\n\n```\n$ mkdir -p archlive/airootfs/var/lib/iwd\n```\n\n```\narchlive/profiledef.sh\n```\n\n```\n...\nfile_permissions=(\n  ...\n  [\"/var/lib/iwd\"]=\"0:0:0700\"\n)\n```\n\niwd#ネットワーク設定 と iwd.network(5) の指示に従って、Wi-Fi ネットワークのためのネットワーク設定ファイルを作成してください。\n\n設定ファイルは archlive/airootfs/var/lib/iwd/ 内に保存してください。\n\n"
    },
    {
      "title": "ルートファイルシステムのサイズを調整する",
      "level": 3,
      "content": "Live 環境内でパッケージをインストールする際 (例えば DKMS モジュールが必要なハードウェア)、ルートファイルシステムのデフォルトサイズでは小さすぎてパッケージのダウンロードとインストールができないかもしれません。\n\nISO 環境でファイルをダウンロードしたりパッケージをインストールした際に以下のエラーメッセージが発生することで分かります:\n\n```\nerror: partition / too full: 63256 blocks needed, 61450 blocks free\nerror: not enough free disk space\nerror: failed to commit transaction (not enough free disk space)\nErrors occurred: no packages were upgraded.\n```\n\nサイズを実行中に変更するには:\n\n```\n# mount -o remount,size=SIZE /run/archiso/cowspace\n```\n\nSIZE で利用できるパラメータは tmpfs(5) § size を参照してください。\n\n(e キーや Tab キーを押して) ブートローダーの段階でサイズを設定するには、以下のブートオプションを使用してください:\n\n```\ncow_spacesize=SIZE\n```\n\nイメージのビルド段階でサイズを設定するには、先のブートオプションを以下のファイルに追加してください:\n\n- efiboot/loader/entries/*.cfg\n- grub/*.cfg\n- syslinux/*.cfg\n\n結果は以下のコマンドで確認できます:\n\n```\n$ df -h\n```\n\nmkinitcpio-archiso のブートパラメータ参照してください。\n\n"
    },
    {
      "title": "ウィンドウマネージャがフリーズする",
      "level": 3,
      "content": "Live CD でウィンドウマネージャを使いたい場合、必要な正しいビデオドライバーを追加しなければなりません。さもないと、ロード中にウィンドウマネージャがフリーズする場合があります。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Archiso プロジェクトページ\n- 公式ドキュメント\n- Arch Linux Release Engineering メーリングリスト\n- #archlinux-releng — Arch Linux Release Engineering IRC channel\n- archiso-manager — 公式の月次 ISO をビルドする際に用いられるツール\n\n"
    }
  ]
}