{
  "title": "TOMOYO Linux (日本語)",
  "url": "https://wiki.archlinux.org/title/TOMOYO_Linux_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- セキュリティ\n- AppArmor\n- SELinux\n\nTOMOYO Linux は Linux 用の強制アクセス制御 (MAC) の実装です。2003年3月にローンチされ、NTT データ によって開発されています。TOMOYO Linux はシステムの振る舞いに着目し、目的を達成するのに必要な振る舞いやリソースについて報告させることができます。アクセス制限ツールとしてだけでなくシステム解析ツールとしても利用価値があります。\n\nTOMOYO Linux におけるセキュリティのゴールは\"多くのユーザーにとって現実的な要件を満たし、管理者が使いやすさを維持できる強制アクセス制御\"を提供することです。TOMOYO Linux はセキュリティ専門家のためだけでなく、標準的なユーザーや管理者のために開発されています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 イントロダクション\n- 2 開発ブランチ\n- 3 TOMOYO Linux 1.x 3.1 初期設定\n- 4 AKARI 4.1 AKARI の制限 4.2 インストール 4.3 初期設定\n- 5 TOMOYO Linux 2.x 5.1 TOMOYO Linux 2.x の制限 5.2 インストール 5.3 アクティベーション 5.4 初期設定 5.5 ログデーモン\n- 6 使用方法\n- 7 参照\n\n- 3.1 初期設定\n\n- 4.1 AKARI の制限\n- 4.2 インストール\n- 4.3 初期設定\n\n- 5.1 TOMOYO Linux 2.x の制限\n- 5.2 インストール\n- 5.3 アクティベーション\n- 5.4 初期設定\n- 5.5 ログデーモン\n\n"
    },
    {
      "title": "イントロダクション",
      "level": 2,
      "content": "TOMOYO Linux は簡単な方法でシステムを制御します:\n\n- カーネルのライフタイムに発生したアクセスリクエストの全てを記録します\n- 管理者は予想される・望ましいアクセスリクエストだけを許可するポリシーを作ります\n\nAppArmor とは違って、TOMOYO Linux は、アプリケーションの exploit をつこうとする攻撃者からシステム全体を守るように設計されています。脅威に対処するために、TOMOYO Linux はテスト環境で全てのアプリケーションの挙動を記録し、記録された挙動内でアプリケーションの行動を本番環境で制限します。\n\nTOMOYO Linux は他人に書かれた既製のポリシーファイルをユーザーが使うことを意図していません。自動的にポリシーファイルを生成する \"学習モード\" を必要に応じて使いながら、スクラッチからポリシーを作る必要があります。TOMOYO Linux はシステム内で起こっていることを逐一観測するのでシステムの解析ツールとしても有用です。strace と同じようにプログラムによって実行されている命令やアクセス中のファイル/ネットワークを報告します。\n\nこの表 では TOMOYO Linux と AppArmor、SELinux、SMACK を比較しています。\n\n"
    },
    {
      "title": "開発ブランチ",
      "level": 2,
      "content": "TOMOYO Linux 1.x はオリジナルの実装です。TOMOYO Linux は2005年11月11日に初めてリリースされました。当時 Linux カーネルへのパッチとして作られ、現在も活発に開発されています。SELinux や SMACK、AppArmor など他のセキュリティモジュールと共存できます。\n\nTOMOYO Linux 2.x は標準の Linux カーネルに統合されている実装です。2009年の6月に、Linux Security Module (LSM) インターフェースを利用する形で TOMOYO は Linux カーネル 2.6.30 にマージされました。しかしながら、LSM は TOMOYO Linux の完全な強制アクセス制御を Linux カーネルで機能させるには不十分です。そのため 1.x ブランチよりも少ない機能しか提供されていません。この表 にそれぞれのブランチの違いが比較されています。\n\nAKARI は TOMOYO Linux 1.x をベースにローダブル・カーネル・モジュール (LKM) として機能します。そのためユーザーはカーネルにパッチをあてリコンパイルする必要がないという利点があります。このテーブル で AKARI と TOMOYO Linux 1.x・2.x ブランチの比較を一覧することができます。\n\n"
    },
    {
      "title": "TOMOYO Linux 1.x",
      "level": 2,
      "content": "TOMOYO Linux 1.x を使うことで TOMOYO Linux プロジェクトで開発された全ての機能を利用することができます。しかしながら、このブランチを使うには多くのハードルがあります。カーネルに ccs-patch をパッチしてその後リコンパイルしなくてはなりません。\n\nlinux-ccs とユーザースペースツールをインストールする必要があります。AUR にそれぞれ linux-ccsAUR[リンク切れ: アーカイブ: aur-mirror] と ccs-toolsAUR のパッケージが存在します。\n\n"
    },
    {
      "title": "初期設定",
      "level": 3,
      "content": "ポリシーを初期化してください:\n\n```\n# /usr/lib/ccs/init_policy\n```\n\nポリシーファイルは /etc/css/ ディレクトリに保存されています。編集するには:\n\n```\n# ccs-editpolicy\n```\n\n"
    },
    {
      "title": "AKARI の制限",
      "level": 3,
      "content": "AKARI にはカーネルリコンパイルが必要ないという利点があります。TOMOYO Linux を単純にシステム解析に使うつもりなら、AKARI は一番簡単な方法になります。TOMOYO Linux をシステム制限に使うのなら、TOMOYO Linux 1.x ブランチの機能を得るために最低限の労力が必要です。ただ、少しの機能制限を考慮しなくてはなりません:\n\n- どの機能が制限されるかはカーネルのバージョンと、ディストリビューションによる設定によります:\n\n```\nCONFIG_SECURITY=y [required]\nCONFIG_KALLSYMS=y [required]\nCONFIG_PROC_FS=y [required]\nCONFIG_MODULES=y [required]\nCONFIG_SECURITY_PATH=y [optional: for using absolute pathnames]\nCONFIG_SECURITY_NETWORK=y [optional: for providing network restriction]\n```\n\n- LSM フックを使えないため、高度なネットワークオペレーションのいくつかの制限が使えません\n- ケイパビリティを使った制限は行えません\n- KABI を変えないため \"struct task_struct\" の外側で管理されるタスク別の変数は操作が遅くなります。ただし、普通に使う場合は性能への影響はあまりありません。\n\nこのテーブル で AKARI と TOMOYO Linux 1.x、2.x ブランチとの比較を一覧できます。\n\n"
    },
    {
      "title": "インストール",
      "level": 3,
      "content": "ユーザースペースツールとあわせて AKARI をインストールする必要があります。akariAUR と ccs-toolsAUR のパッケージは AUR で手に入ります。\n\nakariAUR をインストールするには、事前に http://akari.osdn.jp/1.0/chapter-3.html.ja の手順に沿って gpg 鍵をインポートする必要があります。\n\nAKARI を有効にするためにブートローダの設定を変える必要があります:\n\n```\ntitle  Arch Linux\nroot   (hd0,0)\nkernel /boot/vmlinuz-linux root=/dev/sda1 ro init=/sbin/ccs-init\ninitrd /boot/initramfs-linux.img\n```\n\n"
    },
    {
      "title": "初期設定",
      "level": 3,
      "content": "ポリシーを初期化してください:\n\n```\n# /usr/lib/ccs/init_policy --module_name=akari\n```\n\nポリシーファイルは /etc/css/ ディレクトリに保存されています。編集するには:\n\n```\n# ccs-editpolicy\n```\n\n"
    },
    {
      "title": "TOMOYO Linux 2.x の制限",
      "level": 3,
      "content": "Linux カーネルのメインラインに取り込まれている TOMOYO Linux 2.x の機能は完全ではありませんが、2.5.x からほとんど遜色がなくなっています。1.x ブランチと比べると実装されていない機能が少数あります。この表 でそれぞれの開発ブランチの差を比較できます。\n\n"
    },
    {
      "title": "インストール",
      "level": 3,
      "content": "TOMOYO Linux 2.x は Linux のメインラインのカーネルの一部です。以下のカーネルコンフィグレーションが必要です:\n\n```\nCONFIG_SECURITY=y\nCONFIG_SECURITYFS=y\nCONFIG_SECURITY_NETWORK=y [Arch Linux カーネルでは無効になっています]\nCONFIG_SECURITY_PATH=y\nCONFIG_SECURITY_TOMOYO=y [Arch Linux カーネルでは無効になっています]\n```\n\nカーネルが TOMOYO Linux 2.x をサポートしているならば、後はユーザースペースツールを (AUR の tomoyo-toolsAUR から) インストールするだけです。\n\n"
    },
    {
      "title": "アクティベーション",
      "level": 3,
      "content": "/etc/default/grub の GRUB_CMDLINE_LINUX_DEFAULT パラメータに security=tomoyo TOMOYO_trigger=/usr/lib/systemd/systemd を追加:\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet security=tomoyo TOMOYO_trigger=/usr/lib/systemd/systemd\"\n```\n\nその後、grub.cfg をリコンパイル:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n/usr/lib/systemd/systemd が実行された時に TOMOYO は /etc/tomoyo/policy/current の全てのポリシーをロードします。\n\n次に、アクティベーションが上手くいったかどうか確認してください。dmesg の出力に以下のような行が表示されてなければなりません:\n\n```\n$ dmesg |grep -A 1 -B 1 TOMOYO\n [    0.003375] Security Framework initialized\n [    0.003387] TOMOYO Linux initialized\n [    0.003396] AppArmor: AppArmor disabled by boot time parameter\n --\n [    6.829798] Calling /usr/bin/tomoyo-init to load policy. Please wait.\n [    6.833709] TOMOYO: 2.5.0\n [    6.833712] Mandatory Access Control activated.\n```\n\n最初のうちは、コンピュータがシャットダウン・再起動に入った時にメモリー内のポリシーをファイルシステムに自動保存させたほうが良いかもしれません。そうしたい場合は、/usr/lib/systemd/system/tomoyo-savepolicy.service スクリプトを書いて下さい:\n\n```\n/usr/lib/systemd/system/tomoyo-savepolicy.service\n```\n\n```\n[Unit]                                                                                        \nDescription=Tomoyo savepolicy\n\n[Service]\nType=oneshot\nExecStart=/bin/true\nExecStop=/usr/bin/tomoyo-savepolicy\nStandardInput=tty\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n```\n\nsystemctl でサービスを有効化・無効化できます:\n\n```\n# systemctl enable tomoyo-savepolicy.service\n```\n\n"
    },
    {
      "title": "初期設定",
      "level": 3,
      "content": "ポリシーを初期化してください:\n\n```\n# /usr/lib/tomoyo/init_policy\n```\n\nポリシーファイルは /etc/tomoyo/ ディレクトリに保存されています。編集するには:\n\n```\n# tomoyo-editpolicy\n```\n\nデフォルトでは、tomoyo は \"Disabled\" プロファイルで起動します (下のプロファイル表を見て下さい)。いますぐに学習モードを有効にすると良いでしょう。/etc/tomoyo/policy/current/domain_policy.conf の <kernel> ネームスペースのプロファイルを切り替えるだけです:\n\n```\n<kernel>\nuse_profile 1\nuse_group 0\n```\n\n学習が必要なのかどうかよくわからない場合は、ここは無視してください。後で tomoyo-editpolicy を使って \"Domain transition editor\" でドメインを選択して S を押せばプロファイルを切り替えられます。\n\n初期設定が終わったら、コンピュータを再起動してください。\n\n"
    },
    {
      "title": "ログデーモン",
      "level": 3,
      "content": "Tomoyo にはログデーモン /usr/sbin/tomoyo-auditd が存在します。Skype などのアプリケーションなどで挙動を監視したいときに便利です (Skype を参照)。/etc/tomoyo/tools/auditd.conf に最初から入っている設定ファイルに詳しい説明があり、ログファイルは /var/log/tomoyo に保存されます。\n\nsystemd で使用するには公式の ドキュメント の 4.6 に書かれている /lib/systemd/system/tomoyo-auditd.service ファイルを作成してください。\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "TOMOYO Linux や AKARI を効果的に使うためにもドキュメントをよく読みましょう:\n\n- TOMOYO Linux ドキュメント\n- AKARI ドキュメント\n\n編集をはじめるためにポリシーエディタを起動します。TOMOYO Linux 1.x もしくは AKARI を使っている場合は ccs-tools を使います:\n\n```\n# /usr/sbin/ccs-editpolicy\n```\n\nTOMOYO Linux 2.x を使っている場合は tomoyo-tools を使います:\n\n```\n# /usr/sbin/tomoyo-editpolicy\n```\n\nシステムが動いている間、TOMOYO Linux はドメインを作りツリーに加えます。TOMOYO Linux のアクセス解析・制限はドメインを通して適用されます。全てのプロセスはシングルドメインに属し、プロセスはプログラムを起動するたびに新しいドメインに遷移します。ドメインの名前は実行した順番に連結されて表現されます。例えば、カーネルが属しているドメインの名前は \"<kernel>\" で、カーネルによって起動した /sbin/init のドメインの名前は \"<kernel> /sbin/init\"。もし /sbin/init が /etc/rc.d/rc を起動すると、そのドメインは \"<kernel> /sbin/init /etc/rc.d/rc\" になります。必要に応じてドメイン遷移を抑制したり初期化することができます。\n\nそれぞれのドメインにはプロファイルが割り当てられます。デフォルトでは異なる4つのプロファイルが定義されています：\n\nTable content:\nDisabled | 通常のカーネルのように動作します。\nLearning | アクセス要求がポリシーで許可されていなくても拒否しません。また、同じアクセス要求を次回以降は許可するためにポリシーに追加します。\nPermissive | アクセス要求がポリシーで許可されていなくても拒否しません。ただし、ポリシーへの追加も行いません。\nEnforcing | アクセス要求がポリシーで許可されていない場合には拒否します。また、ポリシーへの追加も行いません。\n\n学習用プロファイルはシステムや特定のアプリケーションを解析するために使うことができます。ドメインのアクセス要求を全て確認して、ドメインのポリシーを必要に応じて編集してから Enforcing プロファイルを選択してください。システムの起動から全てのドメインに対して設定できます。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- TOMOYO Linux ホームページ\n- TOMOYO Linux Wiki\n- AKARI ホームページ\n- AKARI ドキュメント\n- AKARI/TOMOYO 機能比較表\n- TOMOYO Linux 1.8.x : 公式ガイド\n- TOMOYO Linux 2.5.x : 公式ガイド\n- TOMOYO Linux Security Goal\n- ポリシーのサンプル\n- TOMOYO Linux on the Embedded Linux Wiki\n- PacSec 2007 のプレゼンテーションスライド\n\n"
    }
  ]
}