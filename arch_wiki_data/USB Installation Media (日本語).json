{
  "title": "USB Installation Media (日本語)",
  "url": "https://wiki.archlinux.org/title/USB_Installation_Media_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- 光学ディスクドライブ\n- Archiso\n- マルチブート USB ドライブ\n\nこのページでは Arch Linux のインストーラーを USB ドライブ (別名: \"フラッシュドライブ\", \"USB スティック\", \"USB キー\" など) に書き込む様々な方法を記述します。Live USB システムは Arch Linux のインストールやシステムメンテナンス、システムの回復に使用できます。/ に Overlayfs を使うので、コンピュータを一度シャットダウンすると、すべての変更は破棄されます。\n\nUSB ドライブからの Arch Linux のフルインストールをしたい場合 (すなわち永続的な設定もする場合) は、リムーバブルメディアに Arch Linux をインストール を参照してください。ブータブル Arch Linux USB スティックをレスキュー USB として使いたい場合は、chroot を参照してください。\n\n以下の手順に進む前に、https://archlinux.org/download/ から ISO をダウンロードし、ファイルの整合性を検証してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ISO をそのまま使う (BIOS と UEFI) 1.1 GNU/Linux で 1.1.1 基本的なコマンドラインユーティリティを使う 1.1.2 KDE ISO Image Writer を使う 1.1.3 GNOME Disk Utility を使う 1.1.4 MultiWriter を使う 1.1.5 Kindd を使う 1.1.6 Popsicle を使う 1.1.7 SUSE Studio ImageWriter を使う 1.1.8 xorriso-dd-target を使う 1.1.9 USBImager を使う 1.2 Windows で 1.2.1 KDE ISO Image Writer を使う 1.2.2 win32diskimager を使う 1.2.3 USBwriter を使う 1.2.4 USBImager を使う 1.2.5 Rufus を使う 1.2.6 Cygwin を使う 1.2.7 dd for Windows を使う 1.2.8 flashnul を使う 1.3 macOS で 1.3.1 macOS dd を使う 1.3.2 USBImager を使う 1.4 Android で 1.4.1 EtchDroid を使う\n- 2 手動フォーマットを使う 2.1 BIOS と UEFI 2.1.1 GNU/Linux で 2.1.2 Windows で 2.2 BIOS のみ 2.2.1 GNU/Linux で 2.2.1.1 USB-ZIP ドライブの作成 2.3 UEFI のみ 2.3.1 GNU/Linux で 2.3.2 Windows で 2.3.3 macOS で\n- 3 マルチブート USB ドライブを使う 3.1 ventoy を使う 3.2 Windows で 3.2.1 RAM からインストールメディアをロードする 3.2.1.1 USB フラッシュドライブの準備 3.2.1.2 必要なファイルを USB フラッシュドライブにコピー 3.2.1.3 設定ファイルの作成 3.2.1.4 最後の手順\n- 4 推奨されない方法 4.1 etcher を使う 4.2 Universal USB Installer を使う 4.3 UNetbootin を使う\n- 5 トラブルシューティング 5.1 デバイスが表示されない 5.2 ループバックデバイスのセットアップに失敗する: No such file or directory 5.3 他のエラー\n- 6 参照\n\n- 1.1 GNU/Linux で 1.1.1 基本的なコマンドラインユーティリティを使う 1.1.2 KDE ISO Image Writer を使う 1.1.3 GNOME Disk Utility を使う 1.1.4 MultiWriter を使う 1.1.5 Kindd を使う 1.1.6 Popsicle を使う 1.1.7 SUSE Studio ImageWriter を使う 1.1.8 xorriso-dd-target を使う 1.1.9 USBImager を使う\n- 1.2 Windows で 1.2.1 KDE ISO Image Writer を使う 1.2.2 win32diskimager を使う 1.2.3 USBwriter を使う 1.2.4 USBImager を使う 1.2.5 Rufus を使う 1.2.6 Cygwin を使う 1.2.7 dd for Windows を使う 1.2.8 flashnul を使う\n- 1.3 macOS で 1.3.1 macOS dd を使う 1.3.2 USBImager を使う\n- 1.4 Android で 1.4.1 EtchDroid を使う\n\n- 1.1.1 基本的なコマンドラインユーティリティを使う\n- 1.1.2 KDE ISO Image Writer を使う\n- 1.1.3 GNOME Disk Utility を使う\n- 1.1.4 MultiWriter を使う\n- 1.1.5 Kindd を使う\n- 1.1.6 Popsicle を使う\n- 1.1.7 SUSE Studio ImageWriter を使う\n- 1.1.8 xorriso-dd-target を使う\n- 1.1.9 USBImager を使う\n\n- 1.2.1 KDE ISO Image Writer を使う\n- 1.2.2 win32diskimager を使う\n- 1.2.3 USBwriter を使う\n- 1.2.4 USBImager を使う\n- 1.2.5 Rufus を使う\n- 1.2.6 Cygwin を使う\n- 1.2.7 dd for Windows を使う\n- 1.2.8 flashnul を使う\n\n- 1.3.1 macOS dd を使う\n- 1.3.2 USBImager を使う\n\n- 1.4.1 EtchDroid を使う\n\n- 2.1 BIOS と UEFI 2.1.1 GNU/Linux で 2.1.2 Windows で\n- 2.2 BIOS のみ 2.2.1 GNU/Linux で 2.2.1.1 USB-ZIP ドライブの作成\n- 2.3 UEFI のみ 2.3.1 GNU/Linux で 2.3.2 Windows で 2.3.3 macOS で\n\n- 2.1.1 GNU/Linux で\n- 2.1.2 Windows で\n\n- 2.2.1 GNU/Linux で 2.2.1.1 USB-ZIP ドライブの作成\n\n- 2.2.1.1 USB-ZIP ドライブの作成\n\n- 2.3.1 GNU/Linux で\n- 2.3.2 Windows で\n- 2.3.3 macOS で\n\n- 3.1 ventoy を使う\n- 3.2 Windows で 3.2.1 RAM からインストールメディアをロードする 3.2.1.1 USB フラッシュドライブの準備 3.2.1.2 必要なファイルを USB フラッシュドライブにコピー 3.2.1.3 設定ファイルの作成 3.2.1.4 最後の手順\n\n- 3.2.1 RAM からインストールメディアをロードする 3.2.1.1 USB フラッシュドライブの準備 3.2.1.2 必要なファイルを USB フラッシュドライブにコピー 3.2.1.3 設定ファイルの作成 3.2.1.4 最後の手順\n\n- 3.2.1.1 USB フラッシュドライブの準備\n- 3.2.1.2 必要なファイルを USB フラッシュドライブにコピー\n- 3.2.1.3 設定ファイルの作成\n- 3.2.1.4 最後の手順\n\n- 4.1 etcher を使う\n- 4.2 Universal USB Installer を使う\n- 4.3 UNetbootin を使う\n\n- 5.1 デバイスが表示されない\n- 5.2 ループバックデバイスのセットアップに失敗する: No such file or directory\n- 5.3 他のエラー\n\n"
    },
    {
      "title": "基本的なコマンドラインユーティリティを使う",
      "level": 4,
      "content": "以下のツールは coreutils (base メタパッケージによってインストールされます) であるため、この方法はシンプルで汎用性があり、おすすめできます。\n\nls -l /dev/disk/by-id/usb-* を実行して USB ドライブの名前を調べ、lsblk を実行してそのドライブがマウントされていないことを確認してください。\n\n以下のコマンドを実行する際、/dev/disk/by-id/usb-My_flash_drive の部分はあなたのドライブに合わせて変更してください (例: /dev/disk/by-id/usb-Kingston_DataTraveler_2.0_408D5C1654FDB471E98BED5C-0:0)。(パーティション番号を付けないでください。つまり、/dev/disk/by-id/usb-Kingston_DataTraveler_2.0_408D5C1654FDB471E98BED5C-0:0-part1 や /dev/sdb1 のようにしてはいけません):\n\n- cat(1) を使う: # cat path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n- cp(1) を使う: # cp path/to/archlinux-version-x86_64.iso /dev/disk/by-id/usb-My_flash_drive\n- dd を使う: # dd bs=4M if=path/to/archlinux-version-x86_64.iso of=/dev/disk/by-id/usb-My_flash_drive conv=fsync oflag=direct status=progress\n- tee を使う: # tee < path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n- pv を使う: # pv path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n\n```\n# cat path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# cp path/to/archlinux-version-x86_64.iso /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# dd bs=4M if=path/to/archlinux-version-x86_64.iso of=/dev/disk/by-id/usb-My_flash_drive conv=fsync oflag=direct status=progress\n```\n\n```\n# tee < path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# pv path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n```\n\nこれらのツールの比較と観点、そしてなぜ dd があまり使われないのかについては、[1] と [2] を見てください。\n\n- コマンドを実行した後に sync を root 権限で実行することで、ドライブを抜く前にバッファが完全に書き込まれることを保証できます。\n- USB の Arch ISO の UEFI バージョンがハングする場合やロードできない場合、メディアの作成手順を同じ USB ドライブで複数回繰り返してみてください。これでうまく行かない場合、マザーボードのファームウェアをアップデートしてみると良いかもしれません。\n\n"
    },
    {
      "title": "KDE ISO Image Writer を使う",
      "level": 4,
      "content": "KDE ISO Image Writer は isoimagewriter でインストールできます。このツールは USB ドライブを自動で検出します。ISO ファイルは手動で選択する必要があります。.sig ファイルで署名することが推奨されますが、\"create\" をクリックすればスキップすることもできます。\n\n"
    },
    {
      "title": "GNOME Disk Utility を使う",
      "level": 4,
      "content": "GNOME を使っている Linux ディストリビューションなら nautilus と gnome-disk-utility を使うことで簡単にライブ CD が作成できます。.iso ファイルを右クリックして、 \"Open With Disk Image Writer\" を選択してください。GNOME Disk Utility が開いたら、\"Destination\" ドロップダウンメニューからフラッシュドライブを選択して \"Start Restoring\" をクリックしてください。\n\n"
    },
    {
      "title": "MultiWriter を使う",
      "level": 4,
      "content": "gnome-multi-writer は、ISO ファイルを複数の USB デバイスに一度に書き込める、シンプルな GTK3 ベースのグラフィカルツールです。\n\n"
    },
    {
      "title": "Kindd を使う",
      "level": 4,
      "content": "Kindd は、dd の Qt ベースグラフィカルフロントエンドです。kinddAUR で利用できます。\n\n"
    },
    {
      "title": "Popsicle を使う",
      "level": 4,
      "content": "Popsicle は、ISO ファイルを複数の USB デバイスに並列で書き込むためのツールで、PopOS 開発チームにより作成されました。Rust で記述されており、GTK を使用します。popsicleAUR で利用可能です。\n\n"
    },
    {
      "title": "SUSE Studio ImageWriter を使う",
      "level": 4,
      "content": "SUSE Studio ImageWriter は、OpenSUSE 開発チームにより作成された、Qt ベースのツールです。imagewriterAUR で利用可能です。\n\n"
    },
    {
      "title": "xorriso-dd-target を使う",
      "level": 4,
      "content": "(libisoburn の) xorriso-dd-target は、間違ったストレージデバイスへの上書きリスクの軽減を試みるシェルスクリプトです。最も安全なモードは -plug_test という名前です。例えば、sudo を使って root に昇格できる通常ユーザとしてこのツールを使うには:\n\n```\n$ xorriso-dd-target -with_sudo -plug_test -DO_WRITE -image_file archlinux-version-x86_64.iso\n```\n\n詳細は xorriso-dd-target(1) を見てください。\n\n"
    },
    {
      "title": "USBImager を使う",
      "level": 4,
      "content": "USBImager は、圧縮ディスクイメージを USB ドライブに書き込んだり、検証したり、バックアップを作成したりする、マルチプラットフォームのグラフィカルアプリケーションです。usbimagerAUR で利用できます。\n\n"
    },
    {
      "title": "KDE ISO Image Writer を使う",
      "level": 4,
      "content": "KDE ISO Image Writer は isoimagewriter で .exe ファイルとしてダウンロードできます。このツールは USB ドライブを自動で検出します。ISO ファイルは手動で選択する必要があります。.sig ファイルで署名することが推奨されますが、\"create\" をクリックすればスキップすることもできます。\n\n"
    },
    {
      "title": "win32diskimager を使う",
      "level": 4,
      "content": "win32diskimager は、Windows からイメージを USB スティックや SD/CF カードに書き込むためのグラフィカルツールです。ISO イメージを選択して、書き込み先の USB ドライブ文字を選択し (先にフォーマットする必要があります)、Write をクリックしてください。\n\n"
    },
    {
      "title": "USBwriter を使う",
      "level": 4,
      "content": "Linux の dd と同じように簡単に使うことができます。Arch Linux の ISO をダウンロードして、管理者権限で USBwriter ユーティリティを使って USB フラッシュメモリに書き込むだけです。\n\n"
    },
    {
      "title": "USBImager を使う",
      "level": 4,
      "content": "USBImager は、圧縮ディスクイメージを USB ドライブに書き込んだり、検証したり、バックアップを作成したりする、マルチプラットフォームのグラフィカルアプリケーションです。\n\n"
    },
    {
      "title": "Rufus を使う",
      "level": 4,
      "content": "Rufus は多目的の USB ISO 書き込みツールです。このツールはグラフィカルな UI を提供し、ドライブが正しくフォーマットされていなくても書き込むことができます。\n\n単に Arch Linux の ISO と、ブータブルな Arch Linux を作成したい USB ドライブを選択し、START をクリックするだけです。\n\n"
    },
    {
      "title": "Cygwin を使う",
      "level": 4,
      "content": "Cygwin をインストールするときに dd パッケージを選択してください。\n\nイメージファイルをホームディレクトリに置いてください:\n\n```\nC:\\cygwin\\home\\User\\\n```\n\n管理者として cygwin を実行します (cygwin からのハードウェアへのアクセスが必要です)。次のコマンドで USB ドライブに書き込みます:\n\n```\ndd if=archlinux-version-x86_64.iso of=\\\\.\\x: bs=4M\n```\n\narchlinux-version-x86_64.iso の部分は cygwin ディレクトリ内にある iso イメージファイルへのパスです。\\\\.\\x: の部分は USB フラッシュドライブで、x は windows が決めた文字になります、例: \\\\.\\d:。\n\ncygwin 6.0 では正しいパーティションを見つけてください:\n\n```\ncat /proc/partitions\n```\n\nそして出力を見て ISO イメージを焼きこみます。例:\n\n```\ndd if=archlinux-version-x86_64.iso of=/dev/sdb bs=4M\n```\n\n"
    },
    {
      "title": "dd for Windows を使う",
      "level": 4,
      "content": "Windows に対応した GPL ライセンスの dd が http://www.chrysocome.net/dd から利用できます。Cygwin と比べてダウンロード容量は少なくてすみます。使用方法は、上の Cygwin の方法に従って下さい。\n\n初めに dd for Windows の最新バージョンをダウンロードしてください。ダウンロードが完了したら、圧縮ファイルを Downloads ディレクトリかどこかに展開してください。\n\nそして、管理者として Command Prompt を立ち上げてください。次に、Downloads ディレクトリにディレクトリを変更 (cd) してください。\n\nArch Linux の ISO は dd の実行可能ファイルがある場所と同じフォルダに置いた方が便利です、どこか他のところに ISO を置いた場合はフルパスを記述する必要があります。\n\n使用するコマンドは以下のようになります:\n\n```\n# dd if=archlinux-version-x86_64.iso od=\\\\.\\x: bs=4M\n```\n\n"
    },
    {
      "title": "flashnul を使う",
      "level": 4,
      "content": "flashnul はフラッシュメモリ(USB-Flash, IDE-Flash, SecureDigital, MMC, MemoryStick, SmartMedia, XD, CompactFlash など)の機能を検証したりメンテナンスしたりするユーティリティです。\n\nコマンドプロンプトから flashnul を -p 付きで実行してください。そして、どのデバイスインデックスが、対象の USB ドライブであるかを判断してください。例:\n\n```\nC:\\>flashnul -p\n```\n\n```\nAvaible physical drives:\nAvaible logical disks:\nC:\\\nD:\\\nE:\\\n```\n\n正しいデバイスを見つけたら、デバイスにイメージを書き込むことができます。-L とデバイスインデックス、イメージへのパスを付けて flashnul を実行してください。例:\n\n```\nC:\\>flashnul E: -L path\\to\\archlinux-version-x86_64.iso\n```\n\nデータを書き込んでいいと確信しているのであれば yes と入力してください。そして、書き込みが終わるまで少し待ってください。アクセス拒否のエラーが発生した場合、開いているエクスプローラーのウインドウをすべて閉じてください。\n\n"
    },
    {
      "title": "macOS dd を使う",
      "level": 4,
      "content": "まず USB ドライブを確認する必要があります。/Applications/Utilities/Terminal を開いて以下のコマンドでストレージデバイスを全て確認できます:\n\n```\n$ diskutil list\n```\n\nUSB デバイスは /dev/disk2 (external, physical) のように表示されます。名前や容量から消去したいデバイスであることを確認できたら、識別子を使って下のコマンドを実行してください (/dev/diskX を確認できた識別子に置き換えてください)。\n\n通常 masOS では USB デバイスは自動的にマウントされるため、dd を使ってブロック単位で書き込む前にアンマウントする必要があります (エジェクトではありません)。ターミナルで、以下を実行:\n\n```\n$ diskutil unmountDisk /dev/diskX\n```\n\nそれから ISO イメージファイルをデバイスにコピーしてください:\n\n- BSD から継承した dd (macOS のデフォルトの dd も含む) は、小文字の m サフィックスを使います。これは、この記事の他の部分で使用されている GNU dd とは異なります。\n- disk の前に r を付けると raw モードになり、転送をより速くすることができます。\n- 新しいバージョンの macOS では、dd コマンドは status=progress をサポートしており、進捗状況を表示させることができます。以下のように手動で進捗状況を表示させることも可能です。\n\n```\n# dd if=path/to/archlinux-version-x86_64.iso of=/dev/rdiskX bs=1m\n```\n\nこのコマンドは何も出力せずに動きます。進捗を表示させるには、Ctrl+t を押して SIGINFO を送信してください。diskX には s1 サフィックスを含めるべきではないことに注意してください。さもないと、その USB デバイスは UEFI モードでしか起動できず、レガシーモードでは起動できません。完了すると macOS が セットしたディスクは、このコンピュータで読み取れないディスクでした。 とエラーを吐くことがあります。無視 を選択してください。これで USB デバイスはブータブルになります。\n\n"
    },
    {
      "title": "USBImager を使う",
      "level": 4,
      "content": "USBImager は、圧縮ディスクイメージを USB ドライブに書き込んだり、検証したり、バックアップを作成したりする、マルチプラットフォームのグラフィカルアプリケーションです。\n\n"
    },
    {
      "title": "EtchDroid を使う",
      "level": 4,
      "content": "EtchDroid は、Android のための OS イメージ書き込みツールです。Android 5 以降、root 権限が無くとも動作します。問題が生じた場合は、上流の GitHub を確認してください。\n\nArch Linux インストーラーを作成するには、ISO イメージを Android デバイス上にダウンロードしてください。(必要であれば USB-OTG アダプタを使って) USB ドライブを Android デバイスに挿入してください。EtchDroid を開き、Flash raw image を選択し、Arch ISO を選択し、USB ドライブを選択してください。USB API の使用許可を付与し、確認してください。\n\nイメージの書き込み中は携帯を机の上に置いておいてください: 多くの USB-OTG アダプタは少しぐらつくので、間違えて抜けてしまうかもしれません。\n\n"
    },
    {
      "title": "GNU/Linux で",
      "level": 4,
      "content": "この方法は dd でイメージを直接書き込むより少し複雑ですが、ドライブをデータストレージとして使える状態のままにすることができます (既存のパーティション分割されたデバイスの中のパーティションに ISO をインストールします)。\n\n- /dev/disk/by-id/usb-My_flash_drive 上にパーティションテーブルを作成してください (まだ作成していないのであれば)。\n- デバイス上にパーティションを作成してください(まだ作成していないのであれば)。パーティション /dev/disk/by-id/usb-My_flash_drive-partn は FAT32 にフォーマットされていなければなりません。\n- USB フラッシュデバイスにあるその FAT32 ファイルシステムをマウントしてください。そして、ISO イメージの内容をそこへ展開してください。例えば:\n\n```\n# mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n# bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n```\n\nBIOS ブートを行うには、ファイルが存在しているボリュームを指定する必要があります。デフォルトでは、UUID YYYY-mm-dd-HH-MM-SS-00 (適切な UTC のリリース日と時間) が使用されます。/mnt/boot/syslinux/archiso_sys-linux.cfg 内の archisodevice= パラメータはデバイスの永続的なデバイス識別子に置き換えてください。例えば: archisodevice=UUID=YOUR-UUID。\n\nBIOS システム用の Syslinux のファイルはすでに /mnt/boot/syslinux へコピーされています。 FAT ファイルシステムをアンマウントし、syslinux と mtools をインストールして、パーティションを起動可能にするために以下のコマンドを実行してください:\n\n```\n# umount /mnt\n# syslinux --directory boot/syslinux --install /dev/disk/by-id/usb-My_flash_drive-partn\n# dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/mbr.bin of=/dev/disk/by-id/usb-My_flash_drive\n```\n\n- /dev/disk/by-id/usb-My_flash_drive に GUID パーティションテーブルが存在する場合、mbr.bin は gptmbr.bin に置き換えてください。詳細は Syslinux#手動 を見てください。\n- MBR パーティションテーブルの場合は、\"boot\" フラグを設定する必要があります。詳細は Syslinux#MBR パーティションテーブル を見てください。\n\n"
    },
    {
      "title": "Windows で",
      "level": 4,
      "content": "- UEFI ブータブル USB を作成するのに Bootable USB Creator ユーティリティを使ってはいけません。手動フォーマットの場合、USB ドライブに ISO を dd するのに dd for Windows を使わないで下さい。\n- 下のコマンド内の X: は Windows での USB フラッシュドライブを意味しています。\n- Windows はパスを分けるのにバックスラッシュ \\ を使っているので、下のコマンドでもバックスラッシュを使っています。\n- 全てのコマンドは Windows のコマンドプロンプトで管理者として実行する必要があります。\n- > は Windows のコマンドプロンプトを示しています。\n\n- Rufus USB partitioner を使って USB ドライブをパーティショニングし、フォーマットしてください。パーティション構成オプションは MBR for BIOS and UEFI を、ファイルシステムは FAT32 を選んで下さい。\"Create a bootable disk using ISO image\" と \"Create extended label and icon files\" オプションのチェックを外して下さい。\n- Volume Label は好きに設定してください。このステップは公式 ISO (Archiso) に必要です。このステップは、前の \"パーティショニングとフォーマット\" のステップで Rufus を使用することでも可能です。\n- ISO を (ZIP アーカイブの解凍と同じように) USB フラッシュドライブに 7-Zip を使って展開してください。\n- X:\\boot\\syslinux\\archiso_sys-linux.cfg を編集して、archisodevice=UUID=YYYY-mm-dd-HH-MM-SS-00 の部分を全て archisodevice=LABEl=YOUR_LABEL に置き換えてください。YOUR_LABEL の部分は、先ほど設定したボリュームラベルです。\n- https://www.kernel.org/pub/linux/utils/boot/syslinux/ から最新の公式 syslinux 6.xx バイナリ (zip ファイル) をダウンロードして展開してください。Syslinux のバージョンは ISO イメージで使われているバージョンと合わせてください。\n- 以下のコマンドを実行してください (管理者として実行した Windows のコマンドプロンプトで実行):\n\n```\n> cd bios\\\n> for /r %Y in (*.c32) do copy \"%Y\" \"X:\\boot\\syslinux\\\" /y\n> copy mbr\\*.bin X:\\boot\\syslinux\\ /y\n```\n\n- 以下を実行して Syslinux を USB にインストールしてください (64ビット版 Windows では win64\\syslinux64.exe を使ってください):\n\n```\n> cd bios\\\n> win32\\syslinux.exe -d /boot/syslinux -i -a -m X:\n```\n\n- ただファイルをコピーしただけでは起動可能なデバイスにはなりません。最後のコマンドは、Syslinux のファイルを USB のパーティションの VBR にインストールし、そのパーティションを MBR パーティションテーブル上で \"active/boot\" に設定し、MBR ブートコードを USB デバイスに書き込みます。\n- -d スイッチには Unix 環境と同じようにスラッシュで区切るパスを使います。\n\n"
    },
    {
      "title": "GNU/Linux で",
      "level": 4,
      "content": "一部の古い BIOS 環境では、USB-ZIP ドライブからの起動しかサポートされていないことがあります。この方法では USB ハードドライブからの起動を可能とします。\n\n- syslinux と mtools をインストールしてください。\n- ls /dev/disk/by-id/usb-* で USB ドライブを確認します。\n- mkdiskimage -4 /dev/disk/by-id/usb-My_flash_drive 0 64 32 を実行してください。しばらく時間がかかります。\n\nここからは手動フォーマットの手順に従ってください。ZIP ドライブのためパーティションは /dev/disk/by-id/usb-My_flash_drive-part4 になります。\n\n"
    },
    {
      "title": "UEFI のみ",
      "level": 3,
      "content": "UEFI のみでブートさせる場合、FAT でフォーマットされた USB フラッシュドライブへ ISO のコンテンツを展開するだけで十分です。\n\nドライブ上に EFI システムパーティションを作成する必要はありません。すべての UEFI (実装) は、USB フラッシュドライブ上の任意の FAT ボリュームから起動できるからです。最も互換性の高いセットアップは、0c \"W95 FAT32 (LBA)\" タイプの単一のアクティブ (ブータブル) プライマリパーティションを持つ MBR パーティションテーブルを使用することです。[3]\n\n"
    },
    {
      "title": "GNU/Linux で",
      "level": 4,
      "content": "この方法では、ファイルを ISO イメージから USB フラッシュドライブへ展開します。\n\n- もしまだなら、パーティションテーブルを /dev/disk/by-id/usb-My_flash_drive に作成し、パーティション をデバイス上の (/dev/disk/by-id/usb-My_flash_drive-partn) に作成してください。\n- もしまだなら、そのパーティションを FAT32 にフォーマットしてください: # mkfs.fat -F 32 /dev/disk/by-id/usb-My_flash_drive-partn\n- そのファイルシステムをマウントしてください: # mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n- そのマウントしたファイルシステムに ISO イメージを展開してください: # bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n\n```\n# mkfs.fat -F 32 /dev/disk/by-id/usb-My_flash_drive-partn\n```\n\n```\n# mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n```\n\n```\n# bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n```\n\n1. ファイルシステムをアンマウントしてください。\n\n"
    },
    {
      "title": "Windows で",
      "level": 4,
      "content": "この方法では、ファイルを ISO イメージから USB フラッシュドライブへコピーします。\n\n1. USB フラッシュドライブをパーティショニングし、FAT32 にフォーマットしてください。\n1. archlinux-version-x86_64.iso を右クリックし、マウントを選択してください。\n1. 新しく作成した DVD ドライブに移動し、すべてのファイルとフォルダを USB フラッシュドライブにコピーしてください。\n1. コピーが終わったら、DVD ドライブを右クリックして、取り出しを選択してください。\n1. USB フラッシュドライブを取り出してください。\n\n"
    },
    {
      "title": "macOS で",
      "level": 4,
      "content": "DiskImageMounter と Disk Utility のどちらも isohybrid ISO をマウントすることはできません。しかし、macOS には libarchive が同梱されているため、bsdtar を使って ISO をフラッシュドライブに展開することができます。\n\n1. まだ行っていないならば、Disk Utility を使って USB フラッシュドライブをパーティショニングし、そのパーティションを FAT32 でフォーマットしてください。\n1. そのボリュームをマウントしてください。\n1. Terminal アプリケーションを開き、bsdtar を使って ISO イメージを先のマウント済みのファイルシステムに展開してください: $ bsdtar -x -f archlinux-version-x86_64.iso -C /Volumes/your-flash-drive\n1. 終わったら、USB フラッシュドライブをアンマウントし、取り出してください。\n\n```\n$ bsdtar -x -f archlinux-version-x86_64.iso -C /Volumes/your-flash-drive\n```\n\n"
    },
    {
      "title": "マルチブート USB ドライブを使う",
      "level": 2,
      "content": "この方法では archiso を含む複数の ISO をひとつの USB デバイスから起動できるようにします。他の方法よりも既存の USB ドライブを新しい ISO にアップデートするのが簡単です。マルチブート USB ドライブを参照してください。\n\n"
    },
    {
      "title": "ventoy を使う",
      "level": 3,
      "content": "Ventoy は、ISO/WIM/IMG/VHD(x)/EFI ファイルの起動可能な USB ドライブを作成するためのオープンソースなツールです。ventoy では、ディスクを何回もフォーマットする必要はありません。ただ ISO/WIM/IMG/VHD(x)EFI ファイルを USB ドライブにコピーするだけで、それらを直接起動できます。一度に多くのファイルをコピーでき、ventoy は起動するファイルを選択するブートメニューを提供します。ventoy-binAUR で利用可能です。\n\n"
    },
    {
      "title": "RAM からインストールメディアをロードする",
      "level": 4,
      "content": "Syslinux と RAM ディスク (MEMDISK) を使って RAM から ISO イメージをロードする方法です。システムメモリ上で全てを実行するので、それに見合った RAM が積まれていなければなりません。MEMDISK を使って Arch Linux をインストールするために必要な RAM の最低量は 500 MB から 1 GB です。\n\nArch Linux と MEMDISK のシステム要件についてはインストールガイドと こちら に詳しく載っています。フォーラムスレッド も参照してください。\n\nUSB スティックを FAT32 でフォーマットし、新しくフォーマットしたドライブに以下のフォルダを作ります:\n\n- Boot Boot/ISOs Boot/Settings\n\n- Boot/ISOs\n- Boot/Settings\n\nブートしたい ISO を Boot/ISOs フォルダにコピーしてください。その後、ここ から syslinux の最新版を取ってきて以下のファイルをコピーしてください。\n\n- ./win32/syslinux.exe をデスクトップかダウンロードフォルダに置いて下さい。\n- ./memdisk/memdisk を USB フラッシュドライブ上の Settings フォルダに置きます。\n\n必要なファイルをコピーしたら、/boot/Settings フォルダの中に syslinux.cfg ファイルを作ります:\n\n```\n/Boot/Settings/syslinux.cfg\n```\n\n```\nDEFAULT arch_iso\n\nLABEL arch_iso\n        MENU LABEL Arch Setup\n        LINUX memdisk\n        INITRD /Boot/ISOs/archlinux-2017.04.01-x86_64.iso\n        APPEND iso\n```\n\nSyslinux について詳しくは Syslinux を参照してください。\n\n最後に syslinux.exe と同じところに *.bat を作り、実行します (Vista や Windows 7 を使っているときは\"管理者として実行\"します):\n\n```\nC:\\Documents and Settings\\username\\Desktop\\install.bat\n```\n\n```\n@echo off\nsyslinux.exe -m -a -d /Boot/Settings X:\n```\n\n"
    },
    {
      "title": "etcher を使う",
      "level": 3,
      "content": "etcher にはアナリティクスとファーストパーティの広告があります。[4]、[5]、[6] を見てください。\n\n"
    },
    {
      "title": "Universal USB Installer を使う",
      "level": 3,
      "content": "- ダウンロードページには偽の Download ボタンがあり、マルウェアが含まれているかもしれません。\n- Universal USB Installer は ISO をそのまま書き込みません。そのため、syslinux バージョンの不一致により BIOS ブートが壊れます。[7] を見てください。\n- Arch Linux のインストールイメージのブートローダは ARCH_YYYYXX というラベルのボリュームに ISO の内容が存在することを期待します。Universal USB Installer はファイルシステムのラベルをアップデートせず、ブートローダの設定も修正しません。\n\n"
    },
    {
      "title": "UNetbootin を使う",
      "level": 3,
      "content": "- UNetbootin は ISO をそのまま書き込みません。そのため、syslinux バージョンの不一致により BIOS ブートが壊れます。\n- Arch Linux のインストールイメージのブートローダは ARCH_YYYYXX というラベルのボリュームに ISO の内容が存在することを期待します。UNetbootin はファイルシステムのラベルをアップデートせず、ブートローダの設定も修正しません。\n\n"
    },
    {
      "title": "デバイスが表示されない",
      "level": 3,
      "content": "/dev/disk/by-label/ARCH_XXXXXX がマウントされず \"device did not show up after 30 seconds\" エラーが表示される場合は、USB メディアの名前を ARCH_XXXXXX に変えてみて下さい (例: archlinux-2021.02.01-x86_64.iso の場合は ARCH_202102)。\n\n"
    },
    {
      "title": "ループバックデバイスのセットアップに失敗する: No such file or directory",
      "level": 3,
      "content": "losetup: /run/archiso/bootmnt/arch/x86_64/airootfs.sfs: failed to set up loop devices: No such file or directory というエラーが発生する場合、USB 2.0 のポートを使ってみてください。例えば、一部の USB 3.0 ポートは USB ハブを介して動作しません。\n\n"
    },
    {
      "title": "他のエラー",
      "level": 3,
      "content": "その他のエラーが発生する場合、他の USB デバイスを使用してみてください。そうすることですべての問題が解決したという事例が複数あります。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Gentoo:LiveUSB/Guide\n- Fedora:How to create and use Live USB\n- openSUSE wiki - SDB:ライブ USB メモリ\n\n"
    }
  ]
}