{
  "title": "PipeWire (Русский)",
  "url": "https://wiki.archlinux.org/title/PipeWire_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- PipeWire/Примеры\n- WirePlumber (Русский)\n\nPipeWire — это новый низкоуровневый мультимедийный фреймворк. Он предназначен для захвата и воспроизведения аудио и видео с минимальной задержкой и поддерживает PulseAudio, JACK, ALSA и приложения, использующие GStreamer.\n\nДемон, основанный на этом фреймровке, может быть использован как звуковой сервер (с поддержкой возможностей PulseAudio и JACK) и как сервер для захвата видео.\n\nPipeWire также поддерживает контейнеры по типу Flatpak и не зависит от пользовательских групп audio и video. Вместо них он использует модель безопасности, основанную на Polkit, для запроса у Flatpak или Wayland разрешений для записи экрана или звука.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет pipewire. Также есть пакет lib32-pipewire для поддержки multilib.\n\nPipeWire использует пользовательский экземпляр systemd для управления сервером и автоматической активации через сокет.\n\nДокументация есть в пакете pipewire-docs.\n\nPipewire может работать как прозрачная замена других звуковых серверов; подробнее в разделе #Аудио.\n\n"
    },
    {
      "title": "Менеджер сеансов",
      "level": 3,
      "content": "Как и JACK, PipeWire не реализует никакой внутренней логики подключения. Бремя отслеживания новых потоков и подключения их к соответствующему устройству вывода или приложению возлагается на внешний компонент, известный как менеджер сеансов.\n\nНа данный момент доступны два менеджера сеансов:\n\n- WirePlumber — Менеджер, основанный на модульной конструкции, с плагинами Lua, которые реализуют фактическую функциональность управления. Он более мощный чем PipeWire Media Session и рекомендуется к использованию по умолчанию.\n\n- PipeWire Media Session — Очень простой менеджер, подходящий для простых случаев. Он был реализован в основном для тестирования и в качестве примера для создания новых менеджеров сеансов.\n\nПереключиться на другой менеджер можно простой установкой соответствующего пакета, который будет конфликтовать с пакетом прошлого менеджера и заменит его.\n\n"
    },
    {
      "title": "GUI",
      "level": 3,
      "content": "- Helvum — GTK обёртка для pipewire, вдохновленная подобным инструментом для JACK catia.\n\n- qpwgraph — Graph/Patchbay для PipeWire на базе Qt, вдохновлённый JACK-инструментом QjackCtl.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Пакет PipeWire предоставляет начальный набор конфигурационных файлов в /usr/share/pipewire. Не редактируйте эти файлы напрямую, так как обновления пакета перезапишут ваши изменения. Для настройки PipeWire можно скопировать файлы из /usr/share/pipewire в другой общесистемный каталог /etc/pipewire или в пользовательский каталог ~/.config/pipewire. Файл из каталога с более высоким приоритетом заменяет собой файлы с таким же именем из других каталогов. [1]\n\n"
    },
    {
      "title": "Профили",
      "level": 3,
      "content": "Pipewire добавляет пользовательский профиль \"Pro Audio\" в дополнение к профилям PulseAudio, выбираемым через pavucontrol. Эффект от этого описан здесь: https://gitlab.freedesktop.org/pipewire/pipewire/-/wikis/FAQ#what-is-the-pro-audio-profile\n\n"
    },
    {
      "title": "Аудио",
      "level": 3,
      "content": "PipeWire может быть использован как звуковой сервер наподобие PulseAudio и JACK. Он нацелен их на полную замену путем предоставления реализации PulseAudio-совместимого сервера и ABI-совместимых библиотек для клиентов JACK. Подробнее смотреть здесь.\n\n"
    },
    {
      "title": "Клиенты ALSA",
      "level": 4,
      "content": "Установите pipewire-alsa (и удалите pulseaudio-alsa, если он установлен) для перенаправления приложений, использующих ALSA API, через PipeWire.\n\n"
    },
    {
      "title": "Клиенты PulseAudio",
      "level": 4,
      "content": "Установите pipewire-pulse. Этот пакет заменит установленные pulseaudio и pulseaudio-bluetooth. Необходимо перезагрузиться или запустить пользовательский юнит pipewire-pulse.service для работы.\n\nКак правило, этого достаточно для дальнейшей работы, так как сервис pipewire-pulse.socket должен быть автоматически включен. Для проверки работоспособности, выполните следующую команду и изучите вывод:\n\n```\n$ pactl info\n```\n\n```\n...\nИмя сервера: PulseAudio (on PipeWire 0.3.16)\n...\n```\n\nИнформация о дальнейшей настройке (например, касательно модулей) есть в официальной Wiki проекта: Migration from PulseAudio, Configuration of Pipewire-Pulse.\n\n"
    },
    {
      "title": "Клиенты JACK",
      "level": 4,
      "content": "Установите пакет pipewire-jack. Также есть пакет lib32-pipewire-jack для поддержки multilib.\n\nМожно использовать pw-jack(1) для запуска клиентов JACK, но технически это не обязательно, так как он служит лишь обёрткой для переменных окружения PIPEWIRE_REMOTE, PIPEWIRE_DEBUG и PIPEWIRE_LATENCY.\n\nТакже вы можете использовать другой размер буфера путем установления нужного соотношения размера буфера и частоты дискретизации (что равно задержке в секнудах):\n\n```\nPIPEWIRE_LATENCY=\"128/48000\" приложение\n```\n\n"
    },
    {
      "title": "Устройства Bluetooth",
      "level": 4,
      "content": "Для управления Bluetooth audio устройствами PipeWire использует pipewire-pulse. Говоря более конкретно, сервис PipeWire проверяет наличие /etc/pipewire/media-session.d/with-pulseaudio и подключает модуль bluez5 автоматически, если он установлен в системе.\n\nИ pipewire-media-session, и WirePlumber могут автоматически переключаться между профилями HSP/HFP и A2DP при обнаружении входного потока.\n\nВ pipewire-media-session это по умолчанию отключено. Для включения установите параметр bluez5.autoswitch-profile в значение true:\n\n```\n/etc/pipewire/media-session.d/bluez-monitor.conf (или ~/.config/pipewire/media-session.d/bluez-monitor.conf)\n```\n\n```\n...\nrules = [\n    {\n        ...\n        actions = {\n            update-props = {\n                ...\n                bluez5.autoswitch-profile = true\n...\n```\n\nВ WirePlumber это по умолчанию включено. Отключить можно так:\n\n```\n/etc/wireplumber/policy.lua.d/11-bluetooth-policy.lua (или ~/.config/wireplumber/policy.lua.d/11-bluetooth-policy.lua)\n```\n\n```\nbluetooth_policy.policy[\"media-role.use-headset-profile\"] = false\n```\n\n"
    },
    {
      "title": "PipeWire native patch sets",
      "level": 4,
      "content": "У нас есть Helvum для графической визуализации и создания соединений, но всего остального пока нет. Ниже приведены bash-скрипты, которые сохраняют наборы связей, загружают их и разрывают все соединения. Для сохранения и загрузки укажите имя файла в качестве аргумента.\n\n```\npw-savewires\n```\n\n```\n#!/bin/bash\n\nif [[ \"$#\" -ne 1 ]]; then\n\techo\n\techo 'usage: pw-savewires filename'\n\techo\n\texit 0\nfi\n\nrm $1 &> /dev/null\nwhile IFS= read -r line; do\n\tlink_on=`echo $line | cut -f 4 -d '\"'`\n\tlink_op=`echo $line | cut -f 6 -d '\"'`\n\tlink_in=`echo $line | cut -f 8 -d '\"'`\n\tlink_ip=`echo $line | cut -f 10 -d '\"'`\n\techo \"Saving: \" \"'\"$link_on:$link_op\"','\"$link_in:$link_ip\"'\"\n\techo \"'\"$link_on:$link_op\"','\"$link_in:$link_ip\"'\" >> $1\ndone < <(pw-cli dump short link)\n```\n\n```\npw-loadwires\n```\n\n```\n#!/bin/python\n\nimport sys\nimport csv\nimport os\n\nif len(sys.argv) < 2:\n\tprint('\\n usage: pw-loadwires filename\\n')\n\tquit()\n\nwith open(sys.argv[1], newline='') as csvfile:\n\tpwwreader = csv.reader(csvfile, delimiter=',', quotechar='\"')\n\tfor row in pwwreader:\n\t\tprint('Loading:  ' + row[0] + ' --> ' + row[1])\n\t\tprocess = os.popen('pw-link ' + row[0] + ' ' + row[1])\n```\n\n```\npw-dewire\n```\n\n```\n#!/bin/bash\nwhile read -r line; do\n\techo 'Dewiring: ' $line '...'\n\tpw-link -d $line\ndone < <(pw-cli dump short link {{!}} grep -Eo '^[0-9]+')\n```\n\n"
    },
    {
      "title": "Совместное использование аудиоустройств по сети",
      "level": 4,
      "content": "Хотя в само́м PipeWire нет сетевой прозрачности, его реализация PulseAudio поддерживает передачу звука по сети. Простым способом обмена аудио между компьютерами в сети является использование демона Avahi для обнаружения устройств. Убедитесь, что служба avahi-daemon.service запущена на всех компьютерах, которые будут совместно использовать аудио.\n\nЧтобы сделать аудиоустройства доступными через сеть, загрузите соответствующие модули на хосте (убедитесь, что используется локальный IP-адрес):\n\n```\n$ pactl load-module module-native-protocol-tcp listen=192.168.1.10\n$ pactl load-module module-zeroconf-publish\n```\n\nА на клиентах загрузите модуль обнаружения:\n\n```\n$ pactl load-module module-zeroconf-discover\n```\n\n"
    },
    {
      "title": "Работа PipeWire поверх JACK",
      "level": 4,
      "content": "PipeWire также может работать как клиент JACK, если это необходимо. Подробнее смотреть здесь\n\n"
    },
    {
      "title": "Использование ALSA dmix в качестве вывода PipeWire",
      "level": 4,
      "content": "Можно использовать сервер PipeWire (или несколько, отдельно для каждого пользователя) для вывода звука на ALSA через ALSA dmix[ссылка недействительна: раздел не найден]. Это позволяет использовать ALSA в качестве основной системы вывода звука, но при этом использовать устройства, не относящиеся к ALSA, например Bluetooth-наушники.\n\nДопустим, у вас есть две звуковые карты, PCH и HDMI:\n\n```\n/proc/asound/cards\n```\n\n```\n0 [PCH            ]: HDA-Intel - HDA Intel PCH\n                      HDA Intel PCH at 0xdff40000 irq 146\n 1 [HDMI           ]: HDA-Intel - HDA ATI HDMI\n                      HDA ATI HDMI at 0xdfe60000 irq 147\n```\n\nи PCM выглядит примерно так:\n\n```\n/proc/asound/pcm\n```\n\n```\n00-00: ALC1220 Analog : ALC1220 Analog : playback 1 : capture 1\n00-02: ALC1220 Alt Analog : ALC1220 Alt Analog : capture 1\n01-03: HDMI 0 : HDMI 0 : playback 1\n01-07: HDMI 1 : HDMI 1 : playback 1\n01-08: HDMI 2 : HDMI 2 : playback 1\n01-09: HDMI 3 : HDMI 3 : playback 1\n01-10: HDMI 4 : HDMI 4 : playback 1\n01-11: HDMI 5 : HDMI 5 : playback 1\n```\n\nи настройки ALSA примерно такие:\n\n```\n/etc/asound.conf\n```\n\n```\nctl.!default {\n  type hw\n  card PCH\n}\n\npcm.!default {\n  type plug\n  slave.pcm \"dmix:PCH,0\"\n}\n\npcm.dhdmi {\n  type plug\n  slave.pcm \"dmix:HDMI,9\"\n}\n```\n\nВ примерах ниже будут использоваться dmix-устройства dmix:PCH,0 и dmix:HDMI,9.\n\nСперва нужно отключить автоматический мониторинг устройств ALSA в WirePlumber. Закомментируйте строку alsa_monitor.enable():\n\n```\n/etc/wireplumber/main.lua.d/90-enable-all.lua (или ~/.config/wireplumber/main.lua.d/90-enable-all.lua)\n```\n\n```\n...\n-- Load devices\n-- alsa_monitor.enable()\nv4l2_monitor.enable()\nlibcamera_monitor.enable()\n...\n```\n\nТеперь нужно настроить PipeWire на использование dmix. В стандартном файле настроек (/usr/share/pipewire/pipewire.conf) есть закомментированный пример, который можно использовать в качестве основы.\n\nДобавьте свой элемент в массив context.objects:\n\n```\n/etc/pipewire/pipewire.conf.d/alsa-dmix.conf (или ~/.config/pipewire/pipewire.conf.d/alsa-dmix.conf)\n```\n\n```\ncontext.objects = [\n    # Начинаем не с dmix, а с устройства ввода. Не забудьте его добавить.\n    # Без настроенного устройства ввода наблюдались проблемы в Zoom.\n    { factory = adapter\n        args = {\n            factory.name           = api.alsa.pcm.source\n            node.name              = \"alsa-mic-internal\" # название устройства pulse (mpv)\n            node.description       = \"Mic Internal\" # название устройства pulse (pavucontrol)\n            media.class            = \"Audio/Source\"\n            api.alsa.path          = \"hw:PCH,0\"\n        }\n    }\n    # Теперь можно добавить dmix PCM\n    { factory = adapter\n        args = {\n            factory.name           = api.alsa.pcm.sink # Вывод в dmix\n            node.name              = \"alsa-dmix-internal\" # название устройства pulse (mpv)\n            node.description       = \"PCM Internal\" # название устройства pulse (pavucontrol)\n            media.class            = \"Audio/Sink\" # Вывод в dmix\n            api.alsa.path          = \"dmix:PCH,0\"\n        }\n    }\n\n    { factory = adapter\n        args = {\n            factory.name           = api.alsa.pcm.sink # Вывод в dmix\n            node.name              = \"alsa-dmix-hdmi\" # название устройства pulse (mpv)\n            node.description       = \"PCM HDMI\" # название устройства pulse (pavucontrol)\n            media.class            = \"Audio/Sink\" # Вывод в dmix\n            # это dmix из файла /etc/asound.conf\n            api.alsa.path          = \"dmix:HDMI,9\"\n        }\n    }\n]\n```\n\nКак обычный пользователь (не root) проверьте вывод wpctl status и настройте источник (source) и вывод (sink) устройства по умолчанию по своему вкусу с помощью wpctl set-default ID, где ID - это число перед именем источника/вывода.\n\nТеперь можно полноценно протестировать изменения.\n\n"
    },
    {
      "title": "Демонстрация экрана WebRTC",
      "level": 3,
      "content": "Большинство браузеров для работы WebRTC и захвата рабочего стола или отдельных приложений используют X11. На Wayland используется подход, основанный на механизме разрешений.\n\nДля этого требуются пакет xdg-desktop-portal и один из следующих бэкендов:\n\n- xdg-desktop-portal-gnome для GNOME, который зависит от\n- xdg-desktop-portal-gtk для приложений GTK.\n- xdg-desktop-portal-kde для KDE.\n- xdg-desktop-portal-lxqt for LXQt.\n- xdg-desktop-portal-wlr для оболочек, использующих композитор wlroots (напр. Sway, dwlAUR)\n\nПосле установки бэкенда перезапустите пользовательский юнит xdg-desktop-portal.service.\n\nFirefox (84+) поддерживает данный механизм по умолчанию. Для Chromium (73+) нужно активировать поддержку вручную включением экспериментального флага:\n\n```\nchrome://flags/#enable-webrtc-pipewire-capturer\n```\n\nВ obs-studio (27+) этот метод реализован в виде источника «Захват экрана (PipeWire)».\n\nОбратите внимание, что поддерживается только захват экрана целиком, а не отдельного окна/приложения [3][4].\n\n"
    },
    {
      "title": "xdg-desktop-portal-wlr",
      "level": 4,
      "content": "Для работы xdg-desktop-portal-wlr необходимо, чтобы в пользовательском сеансе systemd присутствовали переменные окружения XDG_CURRENT_DESKTOP и WAYLAND_DISPLAY. Переменная XDG_CURRENT_DESKTOP должна содержать название используемого вами композитора, например XDG_CURRENT_DESKTOP=sway. Переменную WAYLAND_DISPLAY композитор прописывает автоматически. Рекомендуемый способ перенести эти переменные окружения в пользовательский сеанс systemd — выполнить команду systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP после запуска композитора, например, в файле настроек композитора. Смотрите [5] и [6] для более подробной информации.\n\nNote: Когда запрашивается доступ к экрану, slurp покажет вам курсор с перекрестием, и вам нужно будет щёлкнуть на экран, к которому вы хотите предоставить доступ. После выбора xdg-desktop-portal-wlr предоставит доступ к этому экрану.\n\n```\n~/.config/xdg-desktop-portal-wlr/config\n```\n\n```\nchooser_type = simple\nchooser_cmd = slurp -f %o -ro\n```\n\nКогда запрашивается доступ к экрану, slurp покажет вам курсор с перекрестием, и вам нужно будет щёлкнуть на экран, к которому вы хотите предоставить доступ. После выбора xdg-desktop-portal-wlr предоставит доступ к этому экрану.\n\n"
    },
    {
      "title": "Видео",
      "level": 3,
      "content": "Большинство приложений, которые полагаются на GStreamer для обработки, например, видеопотоков, должны работать «из коробки», используя плагин PipeWire GStreamer; смотрите GStreamer#PipeWire. Поэтому такие приложения, как, например, cheese, уже могут использовать его для захвата видео.\n\nСкрипт pw-v4l2 из пакета pipewire-v4l2 выполняет предзагрузку библиотеки (/lib/pipewire-0.3/v4l2/libpw-v4l2.so), которая перехватывает вызовы v4l2 и направляет видео через pipewire.\n\n"
    },
    {
      "title": "EasyEffects",
      "level": 3,
      "content": "EasyEffects (ранее PulseEffects) это GTK утилита предоставляющая большой набор аудио эффектов и фильтров для использования в потоках отдельных приложений и микрофона. Присутствуют большинство основных эффектов, таких как эквалайзер, выравнивание громкости, усиления низких частот, дэ-эссер и подавления шумов. Полный список эффектов и фильтров можно посмотреть на GitHub.\n\nДля использования установите easyeffects. Так же можете посмотреть коллекцию пользовательских пресетов для настройки. Смотрите также AutoEq — коллекция предустановок эквалайзера для наушников, созданная искусственным интеллектом.\n\n"
    },
    {
      "title": "NoiseTorch",
      "level": 3,
      "content": "NoiseTorch это альтернативный способ для шумоподавления. Для использования установите noisetorchAUR, либо одну из этих версий пакета noisetorch-binAUR noisetorch-gitAUR\n\nПосле запуска модуля требуется выбрать нужный микрофон. Имеется возможность выбора нужного порога активации. Для того, что бы не фильтровать голос, установите максимальный уровень.\n\nМожно сделать автозапуск с помощью systemd; смотрите [7]. Обратите внимание, что путь к исполняемому файлу noisetorch другой при установке из AUR.\n\n"
    },
    {
      "title": "Шумоподавление для голоса",
      "level": 3,
      "content": "Установите noise-suppression-for-voice и смотрите https://github.com/werman/noise-suppression-for-voice#pipewire для настройки. После, установите источник подавления шумов по умолчанию в настройках аудио. Возможно потребуется перезапустить приложение.\n\n"
    },
    {
      "title": "JamesDSP",
      "level": 3,
      "content": "JamesDSP for Linux (пакет jamesdspAUR) предоставляет звуковые эффекты с открытым исходным кодом для PipeWire и PulseAudio. Он использует свой собственный движок эффектов и не зависит от LADSPA, Calf и т.д. Изначально JamesDSP был опубликован как обработчик звуковых эффектов для устройств Android.\n\n"
    },
    {
      "title": "Плагины LADSPA, LV2 и VST",
      "level": 3,
      "content": "Если вы хотите использовать плагины LADSPA, LV2 и VST, вы можете применить их используя виртуальный аудиовход Pulseaudio и хост Jack Carla. Установите pipewire-pulse, pipewire-jack и carla. Для начала создайте новый аудиовход в Pulseaudio под названием default_null_sink.\n\n```\npactl load-module module-null-sink object.linger=1 media.class=Audio/Sink sink_name=default_null_sink channel_map=FL,FR\n```\n\nЗапустите Carla через PipeWire pw-jack carla-rack. Во вкладке Rack добавьте плагины по желанию. Удостоверьтесь, что они имеют тип stereo. Вы можете поменять их очередность, в которой они будут работать, начиная с верха списка. После этого переместитесь во вкладку Patchbay и подключите default_null_sink к вводу Carla, а вывод Carla к нужному устройству воспроизведения (наушники, колонки, HDMI и т.п.). Сохраните конфигурацию в домашнюю директорию, напр. в ~/Documents/carla_sink_effects.carxp.\n\nВы можете протестировать эффекты в любом медиа приложение, производящем звук, например просмотром видео в браузере. Есть два способа сделать это. Открыть в Carla вкладку Patchbay, и перенаправить соединения нужного приложения к default_null_sink. Второй способ через pavucontrol, так же перенаправить аудио поток нужного приложения к аудиовходу default_null_sink (Этот способ запомнит перенаправление, поэтому последующие экземпляры приложения автоматически перенаправится на default_null_sink).\n\nДля применения вышеописанных настроек, необходимо создать два пользовательских systemd юнита:\n\n```\n~/.config/systemd/user/jack-carla-rack.service\n```\n\n```\n[Unit]\nDescription=Load Carla Rack JACK host\n\n[Service]\nPassEnvironment=\"PIPEWIRE_LINK_PASSIVE=true\"\nType=exec\nExecStart=/usr/bin/pw-jack carla-rack -n\n\n[Install]\nWantedBy=default.target\n```\n\n```\n~/.config/systemd/user/pulseaudio-null-sink@.service\n```\n\n```\n[Unit]\nDescription=Load %i Pulseaudio null sink\nBefore=jack-carla-rack.service\nAfter=pipewire-pulse.service\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/pactl load-module module-null-sink object.linger=1 media.class=Audio/Sink sink_name=%i channel_map=FL,FR\nExecStop=/usr/bin/pactl unload-module module-null-sink\nRemainAfterExit=yes\n\n[Install]\nWantedBy=default.target\n```\n\nЗатем измените сервис jack-carla-rack, указав полный путь к вашему сохраненному файлу конфигурации в строке Environment:\n\n```\n~/.config/systemd/user/jack-carla-rack.service.d/override.conf\n```\n\n```\n[Service]\nEnvironment=\"CARLA_CONFIG_FILE=/home/username/Documents/carla_sink_effects.carxp\"\nExecStart=\nExecStart=/usr/bin/pw-jack carla-rack -n $CARLA_CONFIG_FILE\n```\n\nИ наконец, включите пользовательские юниты pulseaudio-null-sink@default_null_sink.service и jack-carla-rack.service.\n\nОбратите внимание, если вы установите default_null_sink как устройство по умолчанию, все приложения будут автоматически перенаправляться к этому аудиовходу и клавиши громкости будут менять его уровень, а не громкость устройств воспроизведения. Для того, чтобы изменять клавишами уровень громкости устройства, необходимо оставить его по умолчанию и перенаправлять аудиопоток приложения к default_null_sink через pavucontrol. (PipeWire запомнит перенаправление и использует его для последующих экземпляров приложений).\n\n"
    },
    {
      "title": "PipeWire не видит микрофон",
      "level": 4,
      "content": "Модуль alsa-monitor по умолчанию использует alsa-card-profiles для обнаружения устройств. Если этот метод не работает, попробуйте выключить api.alsa.use-acp и/или включить api.alsa.use-ucm.\n\nЕсли используется pipewire-media-session:\n\n```\n/etc/pipewire/media-session.d/alsa-monitor.conf (или ~/.config/pipewire/media-session.d/alsa-monitor.conf)\n```\n\n```\n...\nrules = [\n    {\n        ...\n        actions = {\n        update-props = {\n            ...\n            api.alsa.use-acp = false\n...\n```\n\nЕсли используется wireplumber:\n\n```\n/etc/wireplumber/main.lua.d/50-alsa-config.lua (или ~/.config/wireplumber/main.lua.d/50-alsa-config.lua)\n```\n\n```\n...\nalsa_monitor.rules = {\n    {\n        ...\n        apply_properties = {\n            -- Использование устройств ALSA-Card-Profile. Они используют UCM или\n            -- конфигурацию профиля для настройки параметров устройства и микшера.\n            -- [\"api.alsa.use-acp\"] = true,\n \n            -- Использование UCM вместо profile по возможности. Можно отключить,\n            -- чтобы не пытаться использовать профиль UCM.\n            [\"api.alsa.use-ucm\"] = true,\n...\n```\n\nЗатем перезапустите PipeWire и проверьте список доступных устройств:\n\n```\n$ pw-record --list-targets\n```\n\n```\nAvailable targets (\"*\" denotes default): 62\n\t58: description=\"Built-in Audio\" prio=1872\n\t60: description=\"Built-in Audio\" prio=2000\n*\t62: description=\"Built-in Audio (Loopback PCM)\" prio=1984\n```\n\nДругой вариант решения, предложенный в баг-трекере — добавить микрофон вручную. Сперва убедитесь, что ALSA видит микрофон.\n\n```\n$ arecord -l\n```\n\n```\n**** List of CAPTURE Hardware Devices ****\ncard номер_карты: имя_карты, device номер_устройства: имя_устройства\n  ...\n```\n\nВыберите свой микрофон из списка, а для дальнейшего тестирования микрофона выполните следующие команды.\n\n```\n$ arecord --duration=5 --format=dat --device=hw:номер_карты,номер_устройства test-mic.wav # запись с микрофона\n$ aplay test-mic.wav # воспроизведение записи\n```\n\nЕсли arecord успешно записывает микрофон, но PipeWire его не видит, попробуйте добавить файл настроек для ручного добавления микрофона.\n\n```\n/etc/pipewire/pipewire.conf.d/microphone.conf (или ~/.config/pipewire/pipewire.conf.d/microphone.conf)\n```\n\n```\ncontext.objects = [\n    { factory = adapter\n        args = {\n            factory.name           = api.alsa.pcm.source\n            node.name              = \"microphone\"\n            node.description       = \"Undetected Microphone\"\n            media.class            = \"Audio/Source\"\n            api.alsa.path          = \"hw:номер_карты,номер_устройства\"\n        }\n    }\n]\n```\n\nПерезапустите PipeWire для применения изменений.\n\n"
    },
    {
      "title": "Звук не переключается автоматически при подключении нового устройства",
      "level": 4,
      "content": "Чтобы автоматически переключаться на вновь подключенные устройства, раскомментируйте следующую строку (выделена жирным):\n\n```\n/usr/share/pipewire/pipewire-pulse.conf (или добавьте в ~/.config/pipewire/pipewire.conf)\n```\n\n```\n...\ncontext.exec = [\n    { path = \"pactl\"        args = \"load-module module-always-sink\" }\n    { path = \"pactl\"        args = \"load-module module-switch-on-connect\" }\n    #{ path = \"/usr/bin/sh\"  args = \"~/.config/pipewire/default.pw\" }\n]\n...\n```\n\nПерезапустите пользовательские юниты pipewire.service и pipewire-pulse.service для применения изменений.\n\n"
    },
    {
      "title": "Звук не переключается автоматически на наушники Bluetooth",
      "level": 4,
      "content": "Выполните pactl load-module module-switch-on-connect и настройте среду рабочего стола на автоматический запуск этой команды при входе в систему. Возможно, вам потребуется выполнить wpctl set-default <id>. Найти <id> можно в выводе команды wpctl status. Смотрите wireplumber issue #89 для более подробной информации.\n\n"
    },
    {
      "title": "Нет звука после подключения устройства Bluetooth",
      "level": 4,
      "content": "По состоянию на 2020-12-07, если у вас нет звука после подключения Bluetooth устройства, вам скорее всего потребуется переключить стандартный аудиопоток или перенаправить его к требуемому. Воспользуйтесь pactl list sinks для просмотра доступных потоков и pactl set-default-sink для смены стандартного потока на bluetooth устройство. Можно автоматизировать через udev, используя данный скрипт как пример.\n\nОбсуждение данной проблемы можно посмотреть здесь. По словам автора скрипта, профиль гарнитуры (HSP) все еще может иметь проблемы.\n\n"
    },
    {
      "title": "Маленькая громкость",
      "level": 4,
      "content": "После замены PulseAudio на Pipewire громкость была как задумано, но после перезагрузки звук невыносимо тихий.\n\nОткройте alsamixer, нажимайте F6 для выбора нужной звуковой карты и удостоверьтесь, что уровень громкости стоит на 100%. alsactl должен сохранить настройки после перезагрузки.\n\n"
    },
    {
      "title": "Увеличение RLIMIT_MEMLOCK",
      "level": 4,
      "content": "```\nDec 13 11:11:11 HOST pipewire-pulse[99999]: Failed to mlock memory 0x7f4f659d8000 32832: This is not a problem but for best performance, consider increasing RLIMIT_MEMLOCK\n```\n\nУстановите realtime-privileges и добавьте пользователя в группу realtime.\n\nТакже, увеличение memlock с 64кБ до 128кБ должно хватить для решение проблемы. Если вы запускаете pipewire-pulse через systemd/User (Русский), допишите:\n\n```\nимя_пользователя\tsoft\tmemlock\t64\nимя_пользователя\thard\tmemlock\t128\n```\n\nв /etc/security/limits.d/username.conf\n\n"
    },
    {
      "title": "Изменение частоты дискретизации",
      "level": 4,
      "content": "По умолчанию PipeWire глобально устанавливает частоту дискретизации равную 48КГц. Если вы хотите изменить ее (например если ваш ЦАП поддерживает более высокое значение), можно прописать своё значение по умолчанию:\n\n```\n/etc/pipewire/pipewire.conf (или ~/.config/pipewire/pipewire.conf)\n```\n\n```\n...\ncontext.properties = {\n    ...\n    default.clock.rate          = частота_дискретизации'\n    ...\n```\n\n"
    },
    {
      "title": "Изменение разрешённых частот дискретизации",
      "level": 4,
      "content": "PipeWire также может динамически изменять выходную частоту дискретизации, поддерживаемую вашим ЦАП. Частота дискретизации соответствует частоте дискретизации воспроизводимого аудиопотока.\n\n```\n/etc/pipewire/pipewire.conf (или ~/.config/pipewire/pipewire.conf)\n```\n\n```\n...\ncontext.properties = {\n    ...\n    default.clock.allowed-rates = [ частота_1 частота_2 частота_3 ... ]\n    ...\n```\n\nнапример, [ 44100 48000 88200 96000 ]. Поддерживаемые значения должны быть описаны в инструкции к вашему ЦАП.\n\nПо словам разработчика，PipeWire допускает до 16 различных частот дискретизации и переключается по возможности. Это означает, что с приведёнными выше настройками передискретизация не производится, если используемая в аудиопотоке частота поддерживается устройством.\n\nЧтобы проверить, с какой выходной частотой дискретизации и форматом дискретизации данные отправляются на ЦАП (возможно, вам понадобится изменить цифры):\n\n```\n$ cat /proc/asound/card0/pcm0p/sub0/hw_params\n```\n\nЧтобы проверить, какая частота дискретизации используется на входе, измените pcm0p на pcm0c. (c означает «capture» — захват, p означает «playback» — воспроизведение).\n\n"
    },
    {
      "title": "Качество звука (качество передискретизации)",
      "level": 4,
      "content": "Если вы использовали PulseAudio с resample-method = speex-float-10 или soxr-vhq, то вам стоит раскомментировать и изменить строку resample.quality = 4 на 10 или максимальное 15 в блоке stream.properties в файлах /etc/pipewire/client.conf и /etc/pipewire/pipewire-pulse.conf. (скопируйте их из /usr/share/pipewire/, если они не существуют). Не забудьте перезапустить пользовательские юниты pipewire.service и pipewire-pulse.socket (никогда не забывайте про перезапуск pipewire-pulse.socket, если хотите применить изменения настроек).\n\nРазница в качестве между 10 и 15 незначительна, но разница в загрузке процессора составляет 2-3 раза. А разница в задержке между 4, 10, 15 ещё никем не исследована. Использование resample.quality = 15 на 44100→48000 Гц на Ryzen 2600 приводит к тому, что процессы pipewire или pipewire-pulse нагружают одно ядро CPU на 4.0%.\n\nВы можете сравнить ресемплеры здесь: https://src.infinitewave.ca/ (не обращайте внимания на всё, что выше 18 КГц и более 120 дБ). speex указан как \"Xiph.org Speex\".\n\nPipeWire использует свой собственный алгоритм передискретизации под названием Spa. Как и в случае sox и Speex speexenc, алгоритм PipeWire доступен в виде автономной версии: spa-resample. Использование:\n\n```\n$ spa-resample -q 15 -f s24 -r 48000 input16bit44100orAnythingElse.wav output24bit48000hz.wav\n```\n\nВероятно, можно как-то использовать другие ресемплеры, создав свой собственный выход. Или просто использовать плагин в проигрывателе (например, в Qmmp есть плагин SoX).\n\n"
    },
    {
      "title": "Внешняя звуковая карта не включается после переподключения",
      "level": 4,
      "content": "Проверьте ~/.config/pipewire-media-session/default-profile. Если присутствуют значения с стандартным профилем \"off\", удалите их. Если же это не поможет, удалите все файлы из ~/.config/pipewire/media-session.d/ и перезапустите пользовательскую службу pipewire.service.\n\n"
    },
    {
      "title": "Нет звука или pactl info показывает Failure: Connection refused",
      "level": 4,
      "content": "Эта ошибка говорит о том, что приложение не может присоединиться к службе PipeWire-Pulse. Убедитесь, что /etc/pipewire/pipewire-pulse.conf существует и файл не пустой, и перезапустите пользовательскую службу pipewire-pulse.service.\n\nЕсли этот способ не исправит ошибку, запустите strace -f -o /tmp/pipe.txt pactl info для дебага и используйте /tmp/pipe.txt для помощи в IRC чате #pipewire или списках рассылки.\n\n"
    },
    {
      "title": "Низкое качество звука через Bluetooth",
      "level": 4,
      "content": "В случае, если звук через Bluetooth заикается, проверьте статус пользовательского юнита pipewire.service. Если у вас есть ошибки по типу:\n\n```\nFeb 17 18:23:01 HOST pipewire[249297]: (bluez_input.18:54:CF:04:00:56.a2dp-sink-60) client too slow! rate:512/48000 pos:370688 status:triggered\n```\n\nпроверьте используемый кодек командой pactl list sinks и попробуйте поменять его изменением bluez5.codecs на один из следующих: sbc aac ldac aptx aptx_hd. Также можно попробовать включить поддержку mSBC (исправляет микрофон на Sony 1000XM3, то есть Headphones WH-1000XM3 и Earbuds WF-1000XM3), и кодек SBC-XQ.\n\nЕсли используется pipewire-media-session:\n\n```\n/etc/pipewire/media-session.d/bluez-monitor.conf (или ~/.config/pipewire/media-session.d/bluez-monitor.conf)\n```\n\n```\n...\nproperties = {\n  ...\n  bluez5.enable-msbc = true\n  bluez5.enable-sbc-xq = true\n  bluez5.codecs = [sbc sbc_xq]\n...\n```\n\nЕсли используется wireplumber:\n\n```\n/etc/wireplumber/bluetooth.lua.d/51-bluez-config.lua (или ~/.config/wireplumber/bluetooth.lua.d/51-bluez-config.lua)\n```\n\n```\nbluez_monitor.properties = {\n  [\"bluez5.enable-sbc-xq\"] = true,\n  [\"bluez5.enable-msbc\"] = true,\n  [\"bluez5.codecs\"] = \"[sbc sbc_xq]\",\n}\n```\n\nПерезапустите пользовательскую службу pipewire.service для применения изменений.\n\n"
    },
    {
      "title": "Заметная задержка звука при воспроизведении",
      "level": 4,
      "content": "Обычно это происходит после отключения узла в период неактивности.\n\nЕсли вы используете pipewire-media-session, отключить это можно путём редактирования одного из файлов /etc/pipewire/media-session.d/*-monitor.conf в зависимости от того, где происходит задержка, заменив значение session.suspend-timeout-seconds на 0 для отключения или поэкспериментировав с другими значениями.\n\nЛибо же закомментируйте строку suspend-node в файле /etc/pipewire/media-session.d/media-session.conf.\n\nПерезапустите службы pipewire и pipewire-pulse для применения изменений, или перезагрузитесь.\n\nЕсли вы используете wireplumber, создайте новый файл для переопределения настроек по умолчанию:\n\n```\n~/.config/wireplumber/main.lua.d/51-disable-suspension.lua\n(или /etc/wireplumber/main.lua.d/51-disable-suspension.lua)\n```\n\n```\ntable.insert (alsa_monitor.rules, {\n  matches = {\n    {\n      -- Соответствует всем источникам.\n      { \"node.name\", \"matches\", \"alsa_input.*\" },\n    },\n    {\n      -- Соответствует всем выводам.\n      { \"node.name\", \"matches\", \"alsa_output.*\" },\n    },\n  },\n  apply_properties = {\n    [\"session.suspend-timeout-seconds\"] = 0,  -- 0 выключает приостановку\n  },\n})\n```\n\nВместо полного отключения приостановки можно задать желаемое количество секунд задержки перед приостановкой.\n\n"
    },
    {
      "title": "Пропадание звука при проигрывании других потоков",
      "level": 4,
      "content": "Обычно проблему можно диагностировать в журнале пользовательской службы pipewire-pulse.service, в котором могут обнаружиться такие строки:\n\n```\npipewire-pulse[21740]: pulse-server 0x56009b9d5de0: [Nightly] UNDERFLOW channel:0 offset:370676 underrun:940\n```\n\nСогласно официальному гайду PipeWire по решению проблем, для решения проблемы при использовании pipewire-media-session измените следующие настройки:\n\n```\n/etc/pipewire/media-session.d/alsa-monitor.conf (или ~/.config/pipewire/media-session.d/alsa-monitor.conf\n```\n\n```\napi.alsa.headroom = 1024\n```\n\nПри использовании wireplumber:\n\n```\n/etc/wireplumber/main.lua.d/50-alsa-config.lua (или ~/.config/wireplumber/main.lua.d/50-alsa-config.lua)\n```\n\n```\napply_properties = {\n    [\"api.alsa.headroom\"] = 1024,\n},\n```\n\nЕсли звук заикается из-за блокировки страниц в ядре или создаваемых планировщиком задержек, смотрите Gaming#Tweaking kernel parameters for response time consistency.\n\n"
    },
    {
      "title": "Искажённый звук",
      "level": 4,
      "content": "- Для микрофонов, найдите проблемную звуковую карту в alsamixer и уменьшите уровень \"Mic Boost\" или \"Internal Mic Boost\".\n- Попробуйте уменьшить частоту дискретизации до 44100 (44.1 кГц), как описано в разделе #Изменение частоты дискретизации.\n\n"
    },
    {
      "title": "Различные проблемы после простоя",
      "level": 4,
      "content": "Если звук пропал или исказился после пробуждения системы после сна, возможно потребуется реинициализировать ALSA:\n\n```\n# alsactl init\n```\n\n"
    },
    {
      "title": "Большая задержка при использовании USB ЦАП (например, ЦАП Schiit)",
      "level": 4,
      "content": "Изменение частоты дискретизации или формата может помочь уменьшить задержку с некоторыми ЦАП, такими как Schiit Hel 2.[8] Используя правила соответствия в pipewire-media-session, мы можем установить свойства для устройств.[9][устаревшая ссылка 2024-07-30 ⓘ]\n\nСкопируйте стандартный файл настроек /usr/share/pipewire/media-session.d/alsa-monitor.conf в /etc/pipewire/media-session.d/ или ~/.config/pipewire/media-session.d/. Затем добавьте примерно такой блок правил:\n\n```\n/etc/pipewire/media-session.d/alsa-monitor.conf (или ~/.config/pipewire/media-session.d/alsa-monitor.conf)\n```\n\n```\n...\nrules = {\n    ...\n    {\n        matches = [\n            {\n                node.name = \"alsa_output.имя-узла\"\n            }\n        ]\n        actions = {\n            update-props = {\n                audio.format = \"S24_3LE\"\n                audio.rate = 96000\n                # Удваивайте это значение, пока не возникнут проблемы\n                api.alsa.period-size = 128\n...\n```\n\nУзнать alsa_output.имя-узла можно с помощью pw-top.\n\nВаш ЦАП может поддерживать другой формат или частоту дискретизации. Можно проверить, что поддерживает ЦАП, через ALSA:\n\nСначала узнайте номер карты вашего ЦАП:\n\n```\n$ aplay -l\n```\n\n```\n...\ncard 3: S2 [Schiit Hel 2], device 0: USB Audio [USB Audio]\n  Subdevices: 0/1\n  Subdevice #0: subdevice #0\n...\n```\n\nВ данном примере это карта 3. Получите все поддерживаемые частоты дискретизации и форматы:\n\n```\n$ cat /proc/asound/cardX/streamX\n```\n\n```\n...\nPlayback:\n  ...\n  Interface 1\n    Altset 1\n    Format: S16_LE\n    Channels: 2\n    Endpoint: 0x05 (5 OUT) (ASYNC)\n    Rates: 44100, 48000, 88200, 96000, 176400, 192000, 352800, 384000\n    Data packet interval: 125 us\n    Bits: 16\n    ...\n  Interface 1\n    Altset 2\n    Format: S24_3LE\n    Channels: 2\n    Endpoint: 0x05 (5 OUT) (ASYNC)\n    Rates: 44100, 48000, 88200, 96000, 176400, 192000, 352800, 384000\n    Data packet interval: 125 us\n    Bits: 24\n    ...\n  Interface 1\n    Altset 3\n    Format: S32_LE\n    Channels: 2\n    Endpoint: 0x05 (5 OUT) (ASYNC)\n    Rates: 44100, 48000, 88200, 96000, 176400, 192000, 352800, 384000\n    Data packet interval: 125 us\n    Bits: 32\n    ...\n...\n```\n\nВ данном случае случае S16_LE, S24_3LE, S32_LE — это поддерживаемые форматы, а 44100, 48000, 88200, 96000, 176400, 192000, 352800, 384000 — поддерживаемые частоты дискретизации для всех форматов.\n\n"
    },
    {
      "title": "Нет звука от USB ЦАП до 30% громкости",
      "level": 4,
      "content": "Некоторые USB ЦАП не выдают звук, если громкость ниже определённой [10]. Обычно это около 25-30%, что приводит к некомфортному начальному уровню громкости и невозможности поддерживать низкий уровень громкости. Решением является игнорирование аппаратного управления громкостью путём установки [\"api.alsa.soft-mixer\"] в true.\n\nЕсли используется wireplumber, можно обновить конфигурацию /usr/share/wireplumber/main.lua.d/50-alsa-config.lua, добавив туда фрагмент с помощью table.insert:\n\n```\n~/.config/wireplumber/main.lua.d/51-volume-fix.lua\n```\n\n```\ntable.insert (alsa_monitor.rules, {\n    matches = {\n      {\n        -- Это правило охватывает все карты.\n        { \"device.name\", \"matches\", \"alsa_card.*\" },\n      },\n    },\n    -- Применение свойств в найденным объектам.\n    apply_properties = {\n      -- Не использовать аппаратный микшер для управления громкостью.\n      -- Использовать только программную громкость. Микшер по-прежнему\n      -- используется для отключения неиспользуемых путей в зависимости\n      -- от выбранного порта.\n      [\"api.alsa.soft-mixer\"] = true,\n    }\n  })\n```\n\nЗатем перезапустите pipewire. Установите мастер-громкость в alsamixer, а затем сохраните настройки с помощью # alsactl store. Теперь микшер громкости должен работать без проблем.\n\n"
    },
    {
      "title": "Аудио в режиме реального времени не работает",
      "level": 4,
      "content": "Если в статусе пользовательского юнита pipewire.service есть ошибка RTKit error: org.freedesktop.DBus.Error.AccessDenied, это означает, что демон pipewire не получил приоритет реального времени. Смотрите [11] для более подробной информации.\n\n"
    },
    {
      "title": "Одновременный вывод на несколько выходов на одной звуковой карте",
      "level": 4,
      "content": "Создайте копию файла /usr/share/alsa-card-profile/mixer/profile-sets/default.conf, чтобы изменения были постоянными. В нём мы определим профиль, объединяющий два стандартных отображения для аналогового и HDMI выводов.\n\n```\n/usr/share/alsa-card-profile/mixer/profile-sets/multiple.conf\n```\n\n```\n[General]\nauto-profiles = no\n\n[Mapping analog-stereo]\ndevice-strings = front:%f\nchannel-map = left,right\npaths-output = analog-output analog-output-lineout analog-output-speaker analog-output-headphones analog-output-headphones-2\npaths-input = analog-input-front-mic analog-input-rear-mic analog-input-internal-mic analog-input-dock-mic analog-input analog-input-mic analog-input-linein analog-input-aux analog-input-video analog-input-tvtuner analog-input-fm analog-input-mic-line analog-input-headphone-mic analog-input-headset-mic\npriority = 15\n\n[Mapping hdmi-stereo]\ndescription = Digital Stereo (HDMI)\ndevice-strings = hdmi:%f\npaths-output = hdmi-output-0\nchannel-map = left,right\npriority = 9\ndirection = output\n\n[Profile multiple]\ndescription = Analog Stereo Duplex + Digital Stereo (HDMI) Output\noutput-mappings = analog-stereo hdmi-stereo\ninput-mappings = analog-stereo\n```\n\nТеперь настроим pipewire-media-session на использование нового профиля карты для нужных устройств. Идентификаторы можно узнать с помощью $ pw-cli dump device.\n\n```\n/etc/pipewire/media-session.d/alsa-monitor.conf\n```\n\n```\nrules = [\n    {\n        matches = [ { alsa.card_name = \"HDA Intel PCH\" } ]\n        actions = {\n            update-props = {\n                api.alsa.use-acp = true\n                device.profile-set = \"multiple.conf\"\n                device.profile = \"multiple\"\n                api.acp.auto-profile = false\n                api.acp.auto-port = false\n            }\n        }\n    }\n]\n```\n\n"
    },
    {
      "title": "Нет звуков уведомлений в Discord",
      "level": 4,
      "content": "Это может быть вызвано слишком низким значением min.quantum, попробуйте установить его на более чем 700. Можно сделать переопределение специально для Discord, добавив следующее правило в раздел pulse.rules в pipewire-pulse.conf.\n\n```\n/etc/pipewire/pipewire-pulse.conf (или ~/.config/pipewire/pipewire-pulse.conf)\n```\n\n```\n...\npulse.rules = [\n  ...\n    {\n        # Discord notification sounds fix\n        matches = [ { application.process.binary = \"Discord\" } ]\n        actions = {\n            update-props = {\n                pulse.min.quantum      = 1024/48000     # 21ms\n            }\n        }\n    }\n...\n```\n\n"
    },
    {
      "title": "Уровень громкости не восстанавливается при входе через SDDM или LightDM",
      "level": 4,
      "content": "Если вы используете SDDM или LightDM и заметили, что уровень громкости звука не восстанавливается на ранее установленное вами значение после входа в систему, причиной этого может быть то, что экранный менеджер от имени своего пользователя запускает WirePlumber, который конфликтует с вашим экземпляром WirePlumber. В качестве решения можно запретить запускать PipeWire от имени пользователя, используемого экранным менеджером.\n\n```\n# systemctl --user -M пользователь@ mask pipewire.socket\n```\n\nЗамените пользователь на sddm для SDDM или lightdm для LightDM.\n\nСброс уровня громкости может происходить и при других событиях, приводящих к запуску WirePlumber от имени других пользователей (например, при выполнении задач cron).\n\nПодробности и другие способы решения есть в Debian Wiki и ALT Gnome Wiki.\n\n"
    },
    {
      "title": "OBS ничего не показывает, даже если спрашивает окно/экран",
      "level": 4,
      "content": "Если вы уверены, что у вас установлен xdg-desktop-portal, а также xdg-desktop-portal-gtk или xdg-desktop-portal-kde, проверьте статус этих демонов.\n\nВ OBS, если всё работает, в стандартном выводе должно быть что-то такое:\n\n```\n...\ninfo: [pipewire] desktop selected, setting up screencast\ninfo: [pipewire] created stream 0x5632d7456850\ninfo: [pipewire] playing stream…\n```\n\nДля многомониторных установок пакет slurp позволит захватить все экраны.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Wiki — PipeWire вики на Freedesktop GitLab\n- Pipewire Update Blog Post — Пост в блоге от января 2018 с описанием состояния разработки на тот момент\n- PipeWire Late Summer Update 2020 — Пост в блоге от сентября 2020\n\n"
    }
  ]
}