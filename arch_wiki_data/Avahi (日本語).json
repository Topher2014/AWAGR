{
  "title": "Avahi (日本語)",
  "url": "https://wiki.archlinux.org/title/Avahi_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Wikipedia:ja:Avahi より:\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 Avahi を使う 2.1 ホスト名の解決 2.1.1 カスタム TLD を使用する場合の mDNS の設定 2.1.2 ツール 2.2 ファイアウォール 2.3 リンクローカル (Bonjour/Zeroconf) チャット 2.4 IPv4LL IP アドレスの取得\n- 3 サービスの追加 3.1 SSH 3.2 ファイル共有 3.2.1 NFS 3.2.2 Samba 3.2.3 Vsftpd 3.3 携帯デバイスからの AirPrint\n- 4 トラブルシューティング 4.1 増分番号を追加するとホスト名が変わります 4.2 systemd-resolved のせいで nss-mdns が機能しない 4.3 Avahi ソケットでの ECONNREFUSED(接続拒否) 4.4 KDE Connect の内蔵 mDNS との競合\n- 5 参照\n\n- 2.1 ホスト名の解決 2.1.1 カスタム TLD を使用する場合の mDNS の設定 2.1.2 ツール\n- 2.2 ファイアウォール\n- 2.3 リンクローカル (Bonjour/Zeroconf) チャット\n- 2.4 IPv4LL IP アドレスの取得\n\n- 2.1.1 カスタム TLD を使用する場合の mDNS の設定\n- 2.1.2 ツール\n\n- 3.1 SSH\n- 3.2 ファイル共有 3.2.1 NFS 3.2.2 Samba 3.2.3 Vsftpd\n- 3.3 携帯デバイスからの AirPrint\n\n- 3.2.1 NFS\n- 3.2.2 Samba\n- 3.2.3 Vsftpd\n\n- 4.1 増分番号を追加するとホスト名が変わります\n- 4.2 systemd-resolved のせいで nss-mdns が機能しない\n- 4.3 Avahi ソケットでの ECONNREFUSED(接続拒否)\n- 4.4 KDE Connect の内蔵 mDNS との競合\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "avahi パッケージを インストール し、avahi-daemon.service を 有効化 するか、ソケットアクティベーション を使用してください。\n\n"
    },
    {
      "title": "ホスト名の解決",
      "level": 3,
      "content": "Avahi には hostname.local という名前を使ってローカルでホスト名を解決する機能があります。有効にするには nss-mdns パッケージをインストールして avahi-daemon.service を起動してください。\n\nその後、/etc/nsswitch.conf ファイルを編集して、resolve と dns の前に mdns_minimal [NOTFOUND=return] が含まれるように hosts 行を変更してください:\n\n```\nhosts: mymachines mdns_minimal [NOTFOUND=return] resolve [!UNAVAIL=return] files myhostname dns\n```\n\n- .local ホストの解決に時間がかかる場合、mdns_minimal の代わりに mdns4_minimal を使ってみてください。\n- ユニキャスト DNS サーバがトップレベルの local 名に対する SOA クエリに応答しない限り、またはリクエストが2つ以上のラベルを持つ場合、上記の行はnss-mdns を .local ドメインに対して権威付けるようにします。nss-mdns activation notes を参照してください。 systemd-resolved は、mDNS サポートが無効になっている場合でも、これらのクエリに応答します。systemd-resolved は、nss-mdns が機能しないようにします NSS 設定の詳細については、nss-mymachines(8) と avahi docs を参照して下さい。\n\n- systemd-resolved は、mDNS サポートが無効になっている場合でも、これらのクエリに応答します。systemd-resolved は、nss-mdns が機能しないようにします\n- NSS 設定の詳細については、nss-mymachines(8) と avahi docs を参照して下さい。\n\n"
    },
    {
      "title": "カスタム TLD を使用する場合の mDNS の設定",
      "level": 4,
      "content": "mdns_minimal モジュールが .local TLD の取り合わせを処理します。[NOTFOUND=return] と設定しているのは、mdns_minimal が *.local を見つけられなかったときに、dns や myhostname などで検索しないようにするためです。\n\nAvahi で他の TLD もサポートしたい場合、以下の設定を行ってください:\n\n- mdns_minimal [NOTFOUND=return] を mdns に置き換えてください。IPv4 や IPv6 しか使わないモジュール mdns[46](_minimal) も存在します。\n- /etc/avahi/avahi-daemon.conf の domain-name をカスタマイズしてください。\n- /etc/mdns.allow で Avahi のカスタム TLD をホワイトリストに入れてください。\n\n"
    },
    {
      "title": "ツール",
      "level": 4,
      "content": "Avahi にはネットワーク上で動作しているサービスを探知するのに役立つユーティリティが複数含まれています。例えば、以下のコマンドを実行するとネットワーク上のサービスが表示されます:\n\n```\n$ avahi-browse --all --ignore-local --resolve --terminate\n```\n\nこのコマンドが何も出力しない場合、原因は ファイアウォール によって mDNS トラフィックがブロックされている可能性があります。\n\n.local ホスト名を IP アドレスに解決するために単に mDNS クエリを実行したい場合(dig や nslookup に似た方法)、次のコマンドを使用してください:\n\n```\n$ avahi-resolve-host-name some-host-name.local\n```\n\ngetent hosts コマンドは、DNS と MDNS ルックアップの両方を実行できることに注意してください。\n\nAvahi Zeroconf Browser (avahi-discover) はネットワーク上の様々なサービスを表示します。使用するには Avahi の任意依存パッケージである gtk3, python-dbus, python-gobject のインストールが必要です。また、bssh と bvnc を使うことで SSH サーバーや VNC サーバーを閲覧することもできます。\n\n"
    },
    {
      "title": "ファイアウォール",
      "level": 3,
      "content": "ファイアウォールを使っている場合は UDP ポート 5353 を開いてください。\n\n"
    },
    {
      "title": "リンクローカル (Bonjour/Zeroconf) チャット",
      "level": 3,
      "content": "Avahi を使って Linux で Bonjour プロトコルを使用することもできます。Wikipedia:Comparison of instant messaging clients やアプリケーション一覧/インターネット#インスタントメッセージに Bonjour プロトコルをサポートしているクライアントが載っています。\n\n"
    },
    {
      "title": "IPv4LL IP アドレスの取得",
      "level": 3,
      "content": "デフォルトでは、DHCP を使って IP を取得するとき、dhcpcd パッケージを使用します。DHCP で IP アドレスが取得できなかったときに IPv4LL アドレスを取得するようにすることができます。デフォルトではこのオプションは無効になっています。有効にするには noipv4ll をコメントアウトしてください:\n\n```\n/etc/dhcpcd.conf\n```\n\n```\n...\n#noipv4ll\n...\n```\n\nもしくは avahi-autoipd を実行してください:\n\n```\n# avahi-autoipd -D\n```\n\n"
    },
    {
      "title": "サービスの追加",
      "level": 2,
      "content": "Avahi は /etc/avahi/services に *.service ファイルが存在するサービスを喧伝します。ファイルは avahi ユーザー・グループから読み込めるようにする必要があります。\n\n*.service ファイルが存在しないサービスを使いたい場合、簡単にサービスを作成することができます。\n\n例として、RFC 865 に基づく今日の格言 (QOTD) を表示するサービスを TCP の17番ポートで稼働させるとしましょう。\n\nまず最初に <type> を決定する必要があります。avahi.service(5) によればタイプは DNS-SD サービスタイプのどれかにする必要があります (例: _http._tcp)。DNS-SD のレジスタは2010年に IANA レジスタに統合 されたため、サービス名は IANA レジスタ や /etc/services ファイルで確認することができます。サービス名は qotd となっています。QOTD は tcp で動作するため、サービスは _qotd._tcp でありポート番号は 17 となります (IANA と RFC865 に準拠)。\n\nしたがってサービスファイルは以下のようになります:\n\n```\nqotd.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?><!--*-nxml-*-->\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n\n<service-group>\n\n  <name replace-wildcards=\"yes\">%h</name>\n\n  <service>\n    <type>_qotd._tcp</type>\n    <port>17</port>\n  </service>\n\n</service-group>\n```\n\n別のサーバーでサービスを動作させる場合や、DNS のサブタイプが異なる場合など、複雑なサービスについては avahi.service(5) を読んでください。\n\n"
    },
    {
      "title": "SSH",
      "level": 3,
      "content": "Avahi には SSH サーバーを喧伝するサンプルサービスファイルが付属しています。有効化するには:\n\n```\n# cp /usr/share/doc/avahi/ssh.service /etc/avahi/services/\n```\n\n"
    },
    {
      "title": "NFS",
      "level": 4,
      "content": "NFS 共有を設定している場合は、Avahi を使って Zeroconf が有効になっているブラウザ (KDE の Konqueror や macOS の Finder など) で共有を自動マウントすることができます。/etc/avahi/services に以下の内容で .service ファイルを作成してください:\n\n```\n/etc/avahi/services/nfs_Zephyrus_Music.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?>\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n<service-group>\n  <name replace-wildcards=\"yes\">NFS Music Share on %h</name>\n  <service>\n    <type>_nfs._tcp</type>\n    <port>2049</port>\n    <txt-record>path=/data/shared/Music</txt-record>\n  </service>\n</service-group>\n```\n\n/etc/exports にオプションとして insecure を使っている場合ポートはこのままでいいですが、そうでない場合は変更する必要があります (macOS クライアントには insecure が必要です)。パスは export しているパスか、そのサブディレクトリになります。なんらかの理由で Leopard から自動マウント機能は削除されていますが、スクリプトを使うことができます。このスクリプトはこの投稿 に基づいています。\n\n"
    },
    {
      "title": "Samba",
      "level": 4,
      "content": "サーバーとクライアントの両方で Avahi デーモンを動作させることで、クライアント側のファイルマネージャで自動的にサーバーが認識されます。\n\n"
    },
    {
      "title": "Vsftpd",
      "level": 4,
      "content": "vsftpd などの通常の FTP サーバーを自動探知することもできます。vsftpd パッケージをインストールして vsftpd の設定を自由に変更してください (ubuntuforums.org のスレッド や vsftpd.conf(5) を参照)。\n\nそして以下の内容で /etc/avahi/services に .service ファイルを作成:\n\n```\n/etc/avahi/services/ftp.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?>\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n<service-group>\n  <name>FTP file sharing</name>\n  <service>\n    <type>_ftp._tcp</type>\n    <port>21</port>\n  </service>\n</service-group>\n```\n\nこれで FTP サーバーが Avahi によって喧伝されるようになります。ネットワーク上の他のコンピュータからファイルマネージャを使って FTP サーバーに接続できるはずです。クライアント側でホスト名の解決を有効にする必要があるかもしれません。\n\n"
    },
    {
      "title": "携帯デバイスからの AirPrint",
      "level": 3,
      "content": "Avahi と CUPS を組み合わせることで airprint に対応している携帯デバイスからプリンターに印刷をすることができます。印刷機能を有効にするには、/etc/avahi/services/ にプリンターの Avahi サービスファイルを作成してください。HP-Laserjet プリンターの場合、サービスファイルは以下のようになります。name, rp, ty, adminurl, note フィールドは適切な値に置き換えてください。\n\n```\n/etc/avahi/services/airprint.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?><!--*-nxml-*-->\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n<service-group>\n  <name>yourPrnterName</name>\n  <service>\n    <type>_ipp._tcp</type>\n    <subtype>_universal._sub._ipp._tcp</subtype>\n    <port>631</port>\n    <txt-record>txtver=1</txt-record>\n    <txt-record>qtotal=1</txt-record>\n    <txt-record>rp=printers/yourPrnterName</txt-record>\n    <txt-record>ty=yourPrnterName</txt-record>\n    <txt-record>adminurl=http://198.168.7.15:631/printers/yourPrnterName</txt-record>\n    <txt-record>note=Office Laserjet 4100n</txt-record>\n    <txt-record>priority=0</txt-record>\n    <txt-record>product=(GPL Ghostscript)</txt-record>\n    <txt-record>printer-state=3</txt-record>\n    <txt-record>printer-type=0x801046</txt-record>\n    <txt-record>Transparent=T</txt-record>\n    <txt-record>Binary=T</txt-record>\n    <txt-record>Fax=F</txt-record>\n    <txt-record>Color=T</txt-record>\n    <txt-record>Duplex=T</txt-record>\n    <txt-record>Staple=F</txt-record>\n    <txt-record>Copies=T</txt-record>\n    <txt-record>Collate=F</txt-record>\n    <txt-record>Punch=F</txt-record>\n    <txt-record>Bind=F</txt-record>\n    <txt-record>Sort=F</txt-record>\n    <txt-record>Scan=F</txt-record>\n    <txt-record>pdl=application/octet-stream,application/pdf,application/postscript,image/jpeg,image/png,image/urf</txt-record>\n    <txt-record>URF=W8,SRGB24,CP1,RS600</txt-record>\n  </service>\n</service-group>\n```\n\nもしくは https://raw.github.com/tjfontaine/airprint-generate/master/airprint-generate.py を使って Avahi サービスファイルを生成することもできます。スクリプトは python2 と python2-pycupsAUR に依存しており、以下のコマンドで使用することができます:\n\n```\n# python2 airprint-generate.py -d /etc/avahi/services\n```\n\n"
    },
    {
      "title": "増分番号を追加するとホスト名が変わります",
      "level": 3,
      "content": "これは、ホスト名の競合状態が原因で発生する 既知のバグ です。考えられる回避策の1つは、競合状態を防ぐために IPv6 を無効にする ことです。複数のインターフェースが存在する場合 [1] を使用して、Avahi を単一のインターフェースに制限します。もう1つの考えられる回避策は、キャッシュを無効にする ことで、Avahi がホスト名の競合を完全にチェックしないようにしますが、これにより Avahi はルックアップを実行できなくなります。\n\n"
    },
    {
      "title": "systemd-resolved のせいで nss-mdns が機能しない",
      "level": 3,
      "content": "nss-mdns は、/etc/resolv.conf に記載された DNS サーバーが \"local\" ドメインに対する SOA クエリに NXDOMAIN を返す場合にのみ動作します。[2]\n\nまず、設定された DNS サーバーが \"local\" ドメインに対する SOA クエリに NXDOMAIN を返すか確認してください。例えば、次のコマンドを実行します:\n\n```\n$ host -t SOA local\n```\n\nDNS サーバーが NXDOMAIN を返す場合、以下の手順を実施する必要はありません。Avahi は、systemd-resolved を使用していても、通常通りネットワーク内のリソースを見つけられるはずです。\n\n古いバージョンの systemd-resolved では、resolved.conf(5) におけるグローバル設定 MulticastDNS=no が \"local\" ドメインに対して Avahi と互換性のないレスポンスコードを返していました。その結果、Avahi がリソース(プリンターなど)を正しく検出できない問題が発生しました。この問題に関しては systemd issue 21659 を参照してください。\n\n解決策は、mdns_minimal の代わりに完全な mdns NSS モジュールを使用し、/etc/mdns.allow を作成して ローカル ドメインのみを許可することです。例えば:\n\n```\n/etc/nsswitch.conf\n```\n\n```\nhosts: mymachines mdns [NOTFOUND=return] resolve [!UNAVAIL=return] files myhostname dns\n```\n\n```\n/etc/mdns.allow\n```\n\n```\n.local.\n.local\n```\n\n"
    },
    {
      "title": "Avahi ソケットでの ECONNREFUSED(接続拒否)",
      "level": 3,
      "content": "Avahi が正常に起動・動作しているにもかかわらず、nss が mdns にリクエストを転送しない場合、原因は /run/avahi-daemon/socket ソケットが詰まっている可能性があります。この問題は strace などで確認できます。この場合、avahi-daemon.service および avahi-daemon.socket の両方を 再起動 することで問題を解決できる場合があります。\n\n"
    },
    {
      "title": "KDE Connect の内蔵 mDNS との競合",
      "level": 3,
      "content": "kdeconnect を使用している場合、kdeconnect が独自の mDNS サーバーを実行するため、avahi と mDNS の競合が発生します。この競合により、ネットワーク再起動後にホスト名が myhostname-2 にリネームされるなどの問題が発生することがあります。\n\nこれを修正するには、kdeconnect を削除するか、kdeconnect-no-mdnsAUR のように、mdns サポート無しのバージョンをビルドしてください。\n\nこちらも参照 kde bug 487719\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Avahi - プロジェクトの公式ウェブサイト\n- wikipedia:ja:Avahi\n- iTunes (includes Bonjour) - Windows で Zeroconf を有効化\n- http://www.zeroconf.org/\n\n"
    }
  ]
}