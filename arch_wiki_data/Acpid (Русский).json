{
  "title": "Acpid (Русский)",
  "url": "https://wiki.archlinux.org/title/Acpid_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- ACPI modules\n- DSDT\n\nacpid2 — это гибкий и расширяемый демон для доставки событий ACPI. Когда происходит событие, демон запускает программы для его обработки. Эти события запускаются определёнными действиями, такими как:\n\n- Нажатие специальных кнопок, включая кнопки выключения и сна\n- Закрытие крышки ноутбука\n- Подключение или отключение внешнего питания ноутбука\n- Подключение или отключение наушников и т.д.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет acpid. Затем запустите/включите службу acpid.service.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "acpid поставляется с рядом предопределенных действий для событий, например для того, что должно произойти при нажатии кнопки питания. По умолчанию эти действия определены в файле /etc/acpi/handler.sh, который выполняется после возникновения любого ACPI-события (как указано в /etc/acpi/events/anything).\n\nНиже приводится краткий пример одного из таких действий. В этом случае при нажатии кнопки сна acpid запускает команду echo -n mem >/sys/power/state, которая должна увести компьютер в ждущий режим:\n\n```\nbutton/sleep)\n    case \"$2\" in\n        SLPB) echo -n mem >/sys/power/state ;;\n    *)    logger \"ACPI action undefined: $2\" ;;\n    esac\n    ;;\n```\n\nК сожалению, не все компьютеры называют ACPI-события одинаково. Например, кнопка сна на одних компьютерах обозначается как SLPB, а на других как SBTN.\n\nЧтобы узнать, как определяются ваши кнопки или Fn сочетания клавиш, запустите просмотр журнала:\n\n```\n# journalctl -f\n```\n\nи затем понажимайте интересующие вас кнопки. В журнале должны появиться подобные записи:\n\n```\nlogger: ACPI action undefined: PBTN\nlogger: ACPI action undefined: SBTN\n```\n\nЕсли это не работает, запустите:\n\n```\n# acpi_listen\n```\n\nили с помощью openbsd-netcat:\n\n```\n$ netcat -U /var/run/acpid.socket\n```\n\nЗатем нажмите кнопку питания, и вы увидите что-то такое:\n\n```\nbutton/power PBTN 00000000 00000b31\n```\n\nВывод команды acpi_listen отправляется /etc/acpi/handler.sh в виде параметров $1, $2, $3 и $4. Например:\n\n```\n$1 button/power\n$2 PBTN\n$3 00000000\n$4 00000b31\n```\n\nКак вы могли заметить, в данном примере кнопка сна определилась как SBTN, а не как SLPB, прописанный по умолчанию в файле /etc/acpi/handler.sh. Чтобы кнопка сна работала, может понадобиться исправить SLPB) на SBTN).\n\nБазируясь на этой информации, вы можете легко изменить файл /etc/acpi/handler.sh для выполнения различных команд в зависимости от запускаемых событий. Смотрите раздел #Советы и рекомендации ниже, чтобы узнать о других часто используемых командах.\n\n"
    },
    {
      "title": "Альтернативная настройка",
      "level": 3,
      "content": "По умолчанию все события ACPI проходят через скрипт /etc/acpi/handler.sh. Это прописано в правиле /etc/acpi/events/anything:\n\n```\n# Pass all events to our one handler script\nevent=.*\naction=/etc/acpi/handler.sh %e\n```\n\nХотя это нормально работает как есть, некоторые пользователи предпочитают разделить правила и действия на отдельные файлы. Следующий пример показывает, как можно как можно создать отдельный файл событий и соответствующий ему скрипт.\n\nБудучи суперпользователем, создайте следующие файлы:\n\n```\n/etc/acpi/events/sleep-button\n```\n\n```\nevent=button sleep.*\naction=/etc/acpi/actions/sleep-button.sh %e\n```\n\n```\n/etc/acpi/actions/sleep-button.sh\n```\n\n```\n#!/bin/sh\ncase \"$3\" in\n    SLPB) echo -n mem >/sys/power/state ;;\n    *)    logger \"ACPI action undefined: $3\" ;;\nesac\n```\n\nСделайте скрипт исполняемым и перезагрузите службу acpid.service, чтобы она прочла и применила изменения в этих файлах.\n\n"
    },
    {
      "title": "Примеры событий",
      "level": 3,
      "content": "Ниже приведены примеры событий, которые можно использовать в скрипте /etc/acpi/handler.sh. Их следует адаптировать под ваше конкретное окружение, например изменить названия переменных, интерпретируемых acpi_listen.\n\nДля изменения яркости экрана ноутбука при подключении или отключении внешнего питания (числа может понадобиться поправить в соответствии с /sys/class/backlight/acpi_video0/max_brightness):\n\n```\nac_adapter)\n    case \"$2\" in\n        AC*|AD*)\n            case \"$4\" in\n                00000000)\n                    echo -n 50 > /sys/class/backlight/acpi_video0/brightness\n                    ;;\n                00000001)\n                    echo -n 100 > /sys/class/backlight/acpi_video0/brightness\n                    ;;\n            esac\n```\n\n"
    },
    {
      "title": "Включение управления громкостью",
      "level": 3,
      "content": "Найдите acpi идентификаторы кнопок громкости (смотрите выше) и подставьте их в файлы ниже.\n\n```\n/etc/acpi/events/vol-d\n```\n\n```\nevent=button/volumedown\naction=amixer set Master 5-\n```\n\n```\n/etc/acpi/events/vol-m\n```\n\n```\nevent=button/mute\naction=amixer set Master toggle\n```\n\n```\n/etc/acpi/events/vol-u\n```\n\n```\nevent=button/volumeup\naction=amixer set Master 5+\n```\n\nСмотрите также [2].\n\n"
    },
    {
      "title": "Включение управления подсветкой",
      "level": 3,
      "content": "Можно настроить управление яркостью экрана аналогичным образом. Напишите примерно такой скрипт-обработчик:\n\n```\n/etc/acpi/handlers/bl\n```\n\n```\n#!/bin/sh\nbl_dev=/sys/class/backlight/acpi_video0\nstep=1\n\ncase $1 in\n  -) echo $(($(< $bl_dev/brightness) - $step)) >$bl_dev/brightness;;\n  +) echo $(($(< $bl_dev/brightness) + $step)) >$bl_dev/brightness;;\nesac\n```\n\nи подключите его к ACPI событиям:\n\n```\n/etc/acpi/events/bl_d\n```\n\n```\nevent=video/brightnessdown\naction=/etc/acpi/handlers/bl -\n```\n\n```\n/etc/acpi/events/bl_u\n```\n\n```\nevent=video/brightnessup\naction=/etc/acpi/handlers/bl +\n```\n\n"
    },
    {
      "title": "Переключение Wi-Fi",
      "level": 3,
      "content": "Вы также можете создать простой переключатель питания Wi-Fi адаптера нажатием кнопки WLAN. Пример события:\n\n```\n/etc/acpi/events/wlan\n```\n\n```\nevent=button/wlan\naction=/etc/acpi/handlers/wlan\n```\n\nи его обработчик:\n\n```\n/etc/acpi/handlers/wlan\n```\n\n```\n#!/bin/sh\nrf=/sys/class/rfkill/rfkill0\n\ncase $(< $rf/state) in\n  0) echo 1 >$rf/state;;\n  1) echo 0 >$rf/state;;\nesac\n```\n\n"
    },
    {
      "title": "Получение имени пользователя текущего дисплея",
      "level": 3,
      "content": "Чтобы запускать команды, зависимые от Xorg, требуется определить X-дисплей и файл MIT magic cookie (через XAUTHORITY). Последний — это учётные данные безопасности, предстоавляющие доступ к X-серверу, экрану и устройствам ввода.\n\nСмотрите [3] как пример функции при использовании xinitrc.\n\n- Если подсветка экрана не отключается при закрытии крышни ноутбука, можно попробовать сделать это вручную путём запуска getXuser xset dpms force off и getXuser xset dpms force on при событиях открытия и закрытия крышки соответственно. Если дисплей погаснет, но подсветка останется включенной, используйте вместо этого vbetool с командами vbetool dpms off и vbetool dpms on. Смотрите также XScreenSaver#Configuration.\n- При использовании who или w убедитесь, что /run/utmp создаётся при загрузке системы. Подробнее смотрите utmp(5).\n\n"
    },
    {
      "title": "Подключение к сокету acpid",
      "level": 4,
      "content": "В дополнение к файлам правил acpid принимает соединения по UNIX-сокету, по умолчанию /var/run/acpid.socket. Пользовательские приложения могут подключаться к нему.\n\n```\n#!/bin/bash\ncoproc acpi_listen\ntrap 'kill $COPROC_PID' EXIT\n\nwhile read -u \"${COPROC[0]}\" -a event; do\n    handler.sh \"${event[@]}\"\ndone\n```\n\nГде handler.sh может быть скриптом, подобным /etc/acpi/handler.sh.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- домашняя страница acpid\n- Gentoo:ACPI#Configuration\n\n"
    }
  ]
}