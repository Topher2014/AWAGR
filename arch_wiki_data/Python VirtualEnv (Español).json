{
  "title": "Python VirtualEnv (Español)",
  "url": "https://wiki.archlinux.org/title/Python_VirtualEnv_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **La traducción de este artículo o sección no refleja el texto original.** La traducción de este artículo o sección no refleja el texto original.\n\nLa traducción de este artículo o sección no refleja el texto original.\n\nvirtualenv es una herramienta de desarrollo en Python escrita por Ian Bicking y usada para crear entornos aislados para Python, en los que es posible instalar paquetes sin interferir con otros virtualenvs ni con los paquetes de Python del sistema.\n\nEste artículo explica la instalación del paquete virtualenv y de virtualenvwrapper, un complemento para virtualenv diseñado por Dough Hellmann que facilita enormemente el uso de virtualenv. Además, se explica a continuación el uso más básico de ambas herramientas.\n\n"
    },
    {
      "title": "Entornos virtuales",
      "level": 2,
      "content": "virtualenv es una herramienta diseñada para poder desarrollar proyectos en Python trabajando con diferentes versiones de paquetes que, de otra forma, entrarían en conflicto. Por ejemplo, si un programador quiere desarrollar dos proyectos con diferentes versiones de Django, no es posible tener las dos versiones instaladas en el directorio de bibliotecas de Python del sistema, a no ser que se utilice una herramienta como virtualenv. Con virtualenv, este programador crearía dos entornos aislados, e instalaría cada versión de Django en uno de los entornos.\n\nvirtualenvwrapper, por su parte, proporciona varios comandos para hacer más cómodo el uso de virtualenv desde la consola.\n\nAparte de estas dos herramientas, a partir de la versión 3.3 de Python, la biblioteca estándar incluye venv como un módulo integrado. venv implementa una API similar a la de virtualenv.\n\n"
    },
    {
      "title": "Virtualenv",
      "level": 2,
      "content": "virtualenv es compatible con Python 2.6+ y Python 3.x. Ver Python (Español)#Python 3[enlace roto: sección no válida] para conocer las diferencias entre las diferentes versiones de Python.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Instala python-virtualenv, o python2-virtualenv[enlace roto: package not found] para la versión compatible con Python 2.\n\n"
    },
    {
      "title": "Uso básico",
      "level": 3,
      "content": "Un caso de uso sencillo, sin usar virtualenvwrapper, podría ser el siguiente:\n\n- Crear un virtualenv:\n\n```\n$ virtualenv mi_env\n```\n\n- Activar el virtualenv:\n\n```\n$ source mi_env/bin/activate\n```\n\n- Instalar un paquete (p.ej. Django) en el virtualenv:\n\n```\n(mi_env)$ pip install django\n```\n\n- Trabajar en el proyecto.\n- Salir del virtualenv:\n\n```\n(mi_env)$ deactivate\n```\n\n"
    },
    {
      "title": "Virtualenvwrapper",
      "level": 2,
      "content": "virtualenvwrapper permite una interacción más cómoda con los virtualenvs, proporcionando varias órdenes útiles para crear, activar y eliminar virtualenvs. Este paquete es compatible tanto con python-virtualenv como con python2-virtualenv[enlace roto: package not found].\n\n"
    },
    {
      "title": "Instalación",
      "level": 3,
      "content": "Instalar el paquete python-virtualenvwrapper desde los repositorios oficiales.\n\nUna vez instalado, es necesario crear un directorio para albergar los virtualenvs:\n\n```\nmkdir $HOME/.virtualenvs\n```\n\nDespués hay que añadir las siguientes líneas a ~/.bashrc:\n\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n\nPara que estas líneas se activen, es necesario reiniciar la sesión, o ejecutar\n\n```\nsource ~/.bashrc\n```\n\nNote: **antes** \n\n```\nVIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\n```\n\n"
    },
    {
      "title": "Uso básico",
      "level": 3,
      "content": "- Ver la lista de virtualenvs instalados:\n\n```\n$ workon\n```\n\n- Crear un nuevo virtualenv:\n\n```\n$ mkvirtualenv -p /usr/bin/python2.7 mi_env\n```\n\n- Activar el virtualenv:\n\n```\n$ workon mi_env\n```\n\n- Instalar un paquete (p.ej. Django) en el virtualenv:\n\n```\n$ (mi_env)$ pip install django\n```\n\n- Trabajar en el proyecto\n- Salir del virtualenv:\n\n```\n(mi_env)$ deactivate\n```\n\n"
    },
    {
      "title": "Ver también",
      "level": 2,
      "content": "- Página de virtualenv en PyPi\n- Tutorial de virtualenv (en inglés).\n- Página de Doug Hellmman sobre virtualenvwrapper (en inglés).\n\n"
    }
  ]
}