{
  "title": "Go (Español)",
  "url": "https://wiki.archlinux.org/title/Go_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2021-02-09** \n\nArtículos relacionados\n\n- Go package guidelines\n\nGo es un lenguaje de tipado estático con una sintaxis ligeramente derivada de la de C, añadiendo gestión de memoria con recolector de basura, seguridad de tipado, algunas capacidades de tipado dinámico, tipados adicionales incorporados como arrays de longitud variable y mapas clave-valor, y una gran librería estándar.\n\n"
    },
    {
      "title": "Instalación",
      "level": 2,
      "content": "El compilador estándar de Go es go, el cual se puede instalar desde el paquete go. La orden go también incluye varias herramientas como go get, go doc, etc. Una alternativa es gcc-go, que se trata de un frontend de Go para la colección de compiladores GNU (GCC). En algunos casos gccgo puede realizar mejores optimizaciones. En caso de duda, utilice go.\n\nUn paquete adicional que la mayoría de los desarrolladores de Go querrán instalar es go-tools. Esto proporciona varias herramientas de uso común que facilitarán el trabajo con Go, como goimports, guru, gorename, etc.\n\n"
    },
    {
      "title": "Probar la instalación",
      "level": 3,
      "content": "Puede comprobar que Go se ha instalado correctamente compilando un programa relativamente sencillo, como el que se muestra a continuación:\n\n```\nhello.go\n```\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hola, Arch!\")\n}\n```\n\nPosteriormente, ejecútelo con la herramiento go:\n\n```\n$ go run hello.go\n```\n\n```\nHola, Arch!\n```\n\nCompilación con el compilador estándar gc (lo mismo que go build -compiler=gc hello.go):\n\n```\n$ go build hello.go\n```\n\nCompilación con gccgo (lo mismo que go build -compiler=gccgo hello.go):\n\n```\n$ gccgo hello.go -o hello\n```\n\n"
    },
    {
      "title": "$GOPATH",
      "level": 3,
      "content": "Go espera que el código fuente se halle dentro de $GOPATH, el cual se establece por defecto en ~/go.\n\nCree el espacio de trabajo:\n\n```\n$ mkdir -p ~/go/src\n```\n\nEl directorio ~/go/src se utiliza para almacenar las fuentes de los paquetes. Al compilar, Go también creará bin para los ejecutables y pkg para almacenar los paquetes individuales. Probablemente quiera añadir ~/go/bin a la variable de entorno $PATH para ejecutar Go:\n\n```\nexport PATH=\"$PATH:$HOME/go/bin\"\n```\n\nEjecute la orden go help gopath para obtener más información.\n\n"
    },
    {
      "title": "Compilación cruzada a otras plataformas",
      "level": 3,
      "content": "La orden go puede compilar de forma nativa a un número de plataformas.\n\nSi cgo no es necesario para la compilación, entonces simplemente especifique el sistema operativo de destino y la arquitectura como variables de entorno a go build:\n\n```\n$ GOOS=linux GOARCH=arm64 go build .\n```\n\nVéase la documentación oficial para las posibles combinaciones de $GOOS y $GOARCH.\n\nPor otro lado, si se requiere de cgo para la compilación, se tiene que proporcionar la ruta a sus compiladores cruzados C/C++, a través de las variables de entorno $CC/$CXX.\n\nSupongamos que desea compilar para $GOOS=linux y $GOARCH=arm64.\n\nPrimero necesita instalar el compilador cruzado aarch64-linux-gnu-gcc.\n\nHe aquí hay un programa de ejemplo que requiere cgo, para que podamos probar el proceso de compilación cruzada:\n\n```\n$ cat > hello.go <<EOF\npackage main\n\n// #include <stdio.h>\n// void hello() {  puts(\"Hola, Arch!\"); }\nimport \"C\"\n\nfunc main() { C.hello() }\nEOF\n```\n\nDespués, puede realizar compilación cruzada así:\n\n```\n$ GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc go build hello.go\n```\n\nPuede comprobar que la arquitectura del binario generado es realmente aarch64:\n\n```\n$ file hello\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=b1d92ae8840a019f36cc2aee4606b6ae4a581bf1, for GNU/Linux 3.7.0, not stripped\n```\n\nSi copia hello a un host adecuado, puede probar a ejecutarlo:\n\n```\n[alarm@rpi3 ~]$ uname -a\nLinux alarm 5.3.8-1-ARCH #1 SMP Tue Oct 29 19:31:23 MDT 2019 aarch64 GNU/Linux\n[alarm@arpi3 ~]$ ./hello\nHola, Arch!\n```\n\n"
    },
    {
      "title": "Plugin Go Jetbrains",
      "level": 3,
      "content": "Si está usando un IDE Jetbrains y el plugin Go no puede encontrar su ruta de Go SDK, puede que esté usando un paquete incompatible. Elimine el paquete gcc-go y reemplácelo por go. Si su $GOPATH está configurado, el IDE debería entonces ser capaz de encontrar su Go SDK en /usr/lib/go.\n\n"
    },
    {
      "title": "Véase también",
      "level": 2,
      "content": "- Página web oficial\n- Artículo de Wikipedia\n- Ejemplos con pequeñas descripciones\n- Tour interactivo de formación en Go\n- Compilación cruzada de Go\n- IDEs y Plugins para Go\n\n"
    }
  ]
}