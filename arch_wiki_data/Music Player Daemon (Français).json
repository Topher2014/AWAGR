{
  "title": "Music Player Daemon (Français)",
  "url": "https://wiki.archlinux.org/title/Music_Player_Daemon_(Fran%C3%A7ais)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- MPD/Tips and Tricks\n- MPD/Troubleshooting\n\nMPD (music player daemon) est un lecteur audio doté d'une architecture client-serveur. Il lit des fichiers audio, organise des listes de lecture et maintient une base de données musicale, tout en utilisant très peu de ressources. Afin de s'interfacer avec lui, un client séparé est nécessaire.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Installez le paquet mpd, ou mpd-gitAUR pour la version de développement.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "MPD peut fonctionner en mode #Configuration par utilisateur ou #Configuration à l'échelle du système (les paramètres s'appliquent à tous les utilisateurs). Il est également possible d'exécuter plusieurs instances de MPD dans une #Configuration de Multi-MPD. Le mode de configuration de MPD dépend de la façon dont il est destiné à être utilisé : une configuration locale par utilisateur est plus facile à mettre en place et peut s'avérer plus adaptée sur un système de bureau. La configuration à l'échelle du système peut être plus adaptée à un serveur audio toujours actif avec plusieurs utilisateurs mais une instance MPD partagée.\n\nPour que MPD soit capable de lire de l'audio, ALSA, éventuellement avec PulseAudio ou PipeWire, doit être configuré et fonctionner. La section #Configuration audio ci-après décrit les paramètres nécessaires pour ALSA, PulseAudio ou PipeWire.\n\nMPD est configuré dans le fichier mpd.conf(5) qui peut se trouver à différents endroits selon la configuration choisie (système ou par utilisateur). En résumé, les deux emplacements couramment utilisés sont :\n\n1. ~/.config/mpd/mpd.conf en mode de configuration par utilisateur, c'est le premier emplacement recherché,\n1. /etc/mpd.conf en mode de configuration système.\n\nVoici quelques-unes des options de configuration les plus couramment utilisées :\n\n- pid_file - Le fichier où MPD stocke son ID de processus\n- db_file - La base de données musicale\n- state_file - L'état actuel de MPD est noté ici\n- playlist_directory - Le répertoire dans lequel les listes de lecture sont enregistrées\n- music_directory - Le répertoire dans lequel MPD recherche la musique\n- sticker_file - La base de données des autocollants\n\n"
    },
    {
      "title": "Configuration par utilisateur",
      "level": 3,
      "content": "MPD peut être configuré par utilisateur. L'exécuter en tant qu'utilisateur normal présente les avantages suivants :\n\n- Regroupement dans un seul répertoire ~/.config/mpd/ (ou tout autre répertoire sous $HOME) tous les fichiers de configuration de MPD.\n- Éviter les erreurs imprévues de permission des répertoires et des fichiers.\n\n"
    },
    {
      "title": "Configurer l'emplacement des fichiers et des répertoires",
      "level": 4,
      "content": "En mode utilisateur, la configuration est lue depuis $XDG_CONFIG_HOME/mpd/mpd.conf. Nous supposerons ici que $XDG_CONFIG_HOME est sa valeur par défaut de ~/.config.\n\nPour construire la configuration utilisateur, l'exemple de configuration MPD inclus dans le paquet est un bon point de départ, copiez-le en utilisant les lignes suivantes :\n\n```\n$ mkdir ~/.config/mpd\n$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf\n```\n\nUne bonne pratique est d'utiliser ce répertoire nouvellement créé ~/.config/mpd/ pour stocker, avec le fichier de configuration, d'autres fichiers liés à MPD comme la base de données ou les listes de lecture. L'utilisateur doit avoir un accès en lecture et écriture à ce répertoire.\n\nEnsuite, éditez le fichier de configuration afin de spécifier les fichiers et répertoires requis et optionnels :\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\n# Recommended location for database\ndb_file            \"~/.config/mpd/database\"\n\n# If running mpd using systemd, delete this line to log directly to systemd.\nlog_file           \"syslog\"\n\n# The music directory is by default the XDG directory, uncomment to amend and choose a different directory\n#music_directory    \"~/music\"\n\n# Uncomment to refresh the database whenever files in the music_directory are changed\n#auto_update \"yes\"\n\n# Uncomment to enable the functionalities\n#playlist_directory \"~/.config/mpd/playlists\"\n#pid_file           \"~/.config/mpd/pid\"\n#state_file         \"~/.config/mpd/state\"\n#sticker_file       \"~/.config/mpd/sticker.sql\"\n```\n\nSi les listes de lecture sont activées dans la configuration, le répertoire de listes de lecture spécifié doit être créé :\n\n```\n$ mkdir ~/.config/mpd/playlists\n```\n\nMPD peut maintenant être lancé (un emplacement personnalisé facultatif pour le fichier de configuration peut être spécifié) :\n\n```\n$ mpd [fichier_de_configuration].\n```\n\nAfin de construire le fichier de base de données, MPD doit effectuer une recherche dans le music_directory défini ci-dessus. Pour demander cette tâche, l'un des clients de MPD doit être utilisé. Par exemple avec mpc la commande est :\n\n```\n$ mpc update\n```\n\nou bien on peut définir l'option auto_update à \"yes\" dans la configuration pour rafraîchir la base de données chaque fois que des fichiers sont modifiés dans music_directory.\n\n"
    },
    {
      "title": "Configuration audio",
      "level": 4,
      "content": "Si ALSA est utilisé, l'autodétection du périphérique par défaut devrait fonctionner dès le départ sans réglage particulier. Si ce n'est pas le cas, la syntaxe pour la définition de la sortie audio ALSA est fournie par la suite ; le paramètre obligatoire name spécifie un nom unique pour la sortie audio. Le périphérique exact tel qu'il est affiché à l'aide de aplay --list-pcm du paquet alsa-utils peut éventuellement être indiqué avec l'option device.\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\nsortie_audio {\n        type \"alsa\"\n        name \"Carte son ALSA\"\n        # Optional\n        #device \"iec958:CARD=Intel,DEV=0\"\n        #mixer_control \"PCM\"\n}\n```\n\nLes utilisateurs de PulseAudio devront effectuer la modification suivante :\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\nsortie_audio {\n        type \"pulse\n        name \"pulse audio\"\n}\n```\n\nLa sortie audio avec PipeWire peut être également configurée :\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\nsortie_audio {\n        type \"pipewire\n        name \"PipeWire Sound Server\"\n}\n```\n\n"
    },
    {
      "title": "Démarrage automatique avec systemd",
      "level": 4,
      "content": "Le paquet mpd fournit un fichier de service utilisateur. Le service démarre le processus en tant qu'utilisateur, il n'est pas nécessaire de modifier les permissions ni d'utiliser les variables user et group dans le fichier de configuration MPD.\n\nDémarrez et activez l'unité utilisateur mpd.service (c'est-à-dire avec le paramètre --user).\n\n"
    },
    {
      "title": "Démarrage automatique à la connexion du tty",
      "level": 4,
      "content": "Pour démarrer MPD à la connexion, ajoutez ce qui suit à ~/.profile ou à un autre fichier de démarrage automatique :\n\n```\n# Démarrage du daemon MPD (si aucune autre instance utilisateur n'existe)\n[ ! -s ~/.config/mpd/pid ] && mpd\n```\n\n"
    },
    {
      "title": "Configuration scriptée",
      "level": 4,
      "content": "L'outil mpd-configure crée une configuration MPD optimisée pour la lecture audio sans perte, sans rééchantillonnage ni conversion, en utilisant l'adresse matérielle de l'interface ALSA (hw:x,y).\n\n"
    },
    {
      "title": "Configuration à l'échelle du système",
      "level": 3,
      "content": "Par défaut, /etc/mpd.conf conserve la configuration dans /var/lib/mpd qui est assignée à l'utilisateur ainsi qu'au groupe primaire MPD.\n\n"
    },
    {
      "title": "Répertoire de musique",
      "level": 4,
      "content": "Le répertoire de musique est défini par l'option music_directory dans le fichier de configuration /etc/mpd.conf.\n\nMPD doit avoir les droits d'exécution sur tous les répertoires parents de la collection de musique et aussi les droits de lecture sur tous les répertoires contenant des fichiers de musique. Cela peut entrer en conflit avec la configuration par défaut du répertoire utilisateur, comme ~/Music, où la musique est stockée.\n\nBien qu'il existe plusieurs solutions à ce problème, l'une d'entre elles devrait être la plus pratique :\n\n- Passez plutôt en mode #Configuration par utilisateur.\n- Ajoutez l'utilisateur mpd au groupe de l'utilisateur et accordez au groupe le droit d'exécuter le répertoire de l'utilisateur. De cette façon, l'utilisateur mpd a le droit d'ouvrir le répertoire utilisateur :\n\n```\n# gpasswd -a mpd groupe_de_l'utilisateur\n$ chmod 710 /home/ user_directory (répertoire utilisateur)\n```\n\n- Stockez la collection de musique dans un chemin différent, soit : en la déplaçant entièrement, avec un mount bind, ou avec Btrfs (Français)#Subvolumes (vous devez rendre ce changement persistant avec une entrée dans /etc/fstab ).\n\n- en la déplaçant entièrement,\n- avec un mount bind,\n- ou avec Btrfs (Français)#Subvolumes (vous devez rendre ce changement persistant avec une entrée dans /etc/fstab ).\n\nLe fichier de configuration MPD doit définir un seul répertoire de musique. Si la collection de musique est contenue dans plusieurs répertoires, créez des liens symboliques sous le répertoire de musique principal dans /var/lib/mpd. N'oubliez pas de définir les permissions en conséquence sur les répertoires liés.\n\nPour exclure un ou plusieurs fichiers de la mise à jour, créez un fichier appelé .mpdignore dans son répertoire parent. Chaque ligne de ce fichier peut contenir une liste de caractères génériques du shell. Les fichiers correspondants dans le répertoire actuel et tous les sous-répertoires sont alors exclus des mises à jour suivantes.\n\n"
    },
    {
      "title": "Démarrer avec systemd",
      "level": 4,
      "content": "MPD peut être contrôlé avec mpd.service et systemd. Le premier démarrage peut prendre un certain temps car MPD va scanner votre répertoire de musique.\n\nTestez tout en démarrant une application client (ncmpc est un client léger et facile à utiliser), et jouez de la musique !\n\nmpd fournit une unité mpd.socket. Si mpd.socket est activée (et mpd.service est désactivée), systemd ne lancera pas MPD immédiatement, il écoutera simplement les sockets appropriés. Ensuite, chaque fois qu'un client MPD tentera de se connecter à l'un de ces sockets, systemd lancera mpd.service et transmettra de manière transparente le contrôle de ces ports au processus MPD.\n\nSi vous préférez écouter différents sockets UNIX ou ports réseau (même plusieurs sockets de chaque type), ou si vous préférez ne pas écouter les ports réseau du tout, éditez l'unité mpd.socket de manière appropriée et modifiez /etc/mpd.conf pour qu'elle corresponde à la configuration (consultez mpd.conf(5) pour plus de détails).\n\n"
    },
    {
      "title": "Processus de démarrage de mpd avec un id utilisateur",
      "level": 4,
      "content": "MPD ne doit jamais être exécuté en tant que root ; vous pouvez utiliser l'option user dans la configuration pour que MPD change son identifiant après l'initialisation. N'utilisez pas cette option si vous démarrez MPD en tant qu'utilisateur non privilégié. Pour décrire comment MPD abandonne ses privilèges de super-utilisateur et passe à ceux de l'utilisateur défini dans la configuration, les étapes d'un démarrage normal de MPD sont listées ci-après :\n\n1. MPD étant démarré en tant que root par systemd, il lit d'abord le fichier /etc/mpd.conf.\n1. MPD lit la variable user dans la configuration, et passe de root à cet utilisateur.\n1. MPD lit ensuite le reste du fichier de configuration et se configure en conséquence. L'utilisation de ~ dans le fichier de configuration pointe vers le répertoire de l'utilisateur principal, et non vers le répertoire de root.\n\n"
    },
    {
      "title": "Exécution d'un serveur Icecast",
      "level": 4,
      "content": "Pour un deuxième MPD (par exemple avec une sortie Icecast pour partager de la musique sur le réseau) utilisant la même musique et la même liste de lecture que celui ci-dessus, il suffit de copier le fichier de configuration ci-dessus et de créer un nouveau fichier (par ex, /home/username/.mpd/config-icecast) et ne modifiez que les paramètres log_file, error_file, pid_file et state_file (par exemple, mpd-icecast.log, mpd-icecast.error, etc.) L'utilisation des mêmes chemins de répertoire pour les répertoires de musique et de liste de lecture garantit que ce second MPD utilise la même collection de musique que le premier, c'est-à-dire que la création et la modification d'une liste de lecture sous le premier daemon affectent également le second daemon. Les utilisateurs n'ont pas besoin de créer à nouveau les mêmes listes de lecture pour le second daemon. Appelez ce second daemon de la même manière qu'avec ~/.xinitrc ci-dessus - mais assurez-vous d'avoir un numéro de port différent, pour éviter un conflit avec le premier daemon MPD.\n\n"
    },
    {
      "title": "Configuration du satellite",
      "level": 4,
      "content": "La méthode décrite dans #Exécution d'un serveur Icecast fonctionne, mais au moins en théorie, elle peut entraîner des problèmes avec la base de données, lorsque deux instances MPD essaient d'écrire simultanément dans le même fichier de base de données. MPD dispose d'un mode satellite dans lequel une instance peut recevoir la base de données d'une instance MPD déjà en cours d'exécution.\n\nDans votre config-icecast, ajoutez ceci, où l'hôte et le port reflètent votre serveur MPD principal :\n\n```\ndatabase {\n    plugin \"proxy\"\n    host \"localhost\"\n    port \"6600\"\n}\n```\n\n"
    },
    {
      "title": "Clients",
      "level": 2,
      "content": "Un client séparé est nécessaire pour contrôler MPD. Vous pouvez consulter une longue liste de clients sur le site mpd website. Les options populaires sont :\n\n"
    },
    {
      "title": "Ligne de commande",
      "level": 3,
      "content": "- mpc — Interface utilisateur en ligne de commande pour le serveur MPD écrite en C.\n\n"
    },
    {
      "title": "Console",
      "level": 3,
      "content": "- clerk — Client MPD utilisant Rofi.\n\n- FMUI — Console interface utilisateur créée avec fzf et mpc.\n\n- ncmpc — Client en ncurses pour MPD écrit en C++.\n\n- ncmpcpp — Clone presque exact de ncmpc, écrit en C++ avec quelques fonctionnalités supplémentaires (éditeur de balises, moteur de recherche).\n\n- ncmpy — Client MPD basé sur curses et écrit en Python.\n\n- nncmpp — Encore un autre client MPD. Il s'agit en fait d'une version TUI simplifiée de Sonata.\n\n- pms — Client ncurses hautement configurable et accessible écrit en Go.\n\n- vimpc — Client MPD basé sur ncurses avec des raccourcis clavier de type vi.\n\n- gomp — Client MPD inspiré de ncmpcpp avec affichage intégré de la couverture et intégration de LastFM.\n\n"
    },
    {
      "title": "Graphique",
      "level": 3,
      "content": "- Ario — Un client GUI GTK3 très riche en fonctionnalités pour MPD, inspiré de Rhythmbox.\n\n- Cantata — Client Qt5 riche en fonctionnalités pour MPD avec une interface très configurable.\n\n- CoverGrid — Client GUI GTK3 se concentrant sur les albums plutôt que sur les pistes individuelles.\n\n- GMPC — Gnome Music Player Client. Interface GTK pour MPD. Elle est conçue pour être légère et facile à utiliser, tout en offrant un accès complet à toutes les fonctionnalités de MPD. Les utilisateurs disposent de plusieurs méthodes différentes pour naviguer dans leur musique. Il peut être étendu par des plugins, dont beaucoup sont disponibles.\n\n- mpdevil — Un petit client GTK MPD écrit en python.\n\n- pymp'd — Un client avec une interface GTK pour le daemon de lecture de musique MPD.\n\n- QMPDClient — Qt5 GUI client.\n\n- Quimup — Frontend Qt5 simple pour MPD écrit en C++.\n\n- RompЯ — Client Web pour MPD.\n\n- SkyMPC — Client MPD simple, optimisé par Qt5.\n\n- Sonata — Client Python élégant en GTK.\n\n- Xfce MPD Panel Plugin — Plugin MPD pour le pannel de Xfce4\n\n- Xfmpc — Client graphique GTK MPD axé sur un faible encombrement.\n\n- ympd — Standalone MPD Web GUI écrite en C, utilisant Websockets et Bootstrap/JS.\n\n- Ymuse — Front-end (client) GTK facile, fonctionnel et accrocheur pour Music Player Daemon écrit en Go.\n\n"
    },
    {
      "title": "Voir aussi",
      "level": 2,
      "content": "- Forum MPD\n- Manuel de l'utilisateur MPD\n- MPD article Wikipedia\n- Dépôt GitHub de MPD.\n- mopidy est une alternative à MPD écrite en Python. Notez qu'il ne s'agit pas d'un remplacement complet de MPD, son avantage est qu'il dispose de plug-ins pour lire de la musique à partir de services «cloud» comme Spotify, SoundCloud et Google Play Music.\n\n"
    }
  ]
}