{
  "title": "Awesome (日本語)",
  "url": "https://wiki.archlinux.org/title/Awesome_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ウィンドウマネージャ\n- タイル型ウィンドウマネージャの比較\n- デスクトップ環境\n- ディスプレイマネージャ\n- ファイルマネージャの機能\n- Xdg-menu\n\nawesome のウェブサイト より:\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 起動 2.1 GNOME を使用する 2.2 XFCE\n- 3 設定 3.1 設定ファイルを作成 3.1.1 設定のサンプル 3.2 拡張 3.3 自動実行 3.4 キーボードレイアウトの変更 3.4.1 setxkbmap キーボードレイアウトの方法 3.4.2 rc.lua キーボードレイアウトの方法 (v.4 以降) 3.4.3 Xorg の方法 3.5 テーマ 3.5.1 壁紙\n- 4 ヒントとテクニック 4.1 wibox を表示・隠す 4.2 スクリーンショット 4.3 ウィンドウのギャップを無くす 4.4 透過 4.4.1 Conky 4.4.2 wiboxes 4.5 Widget の間隔 4.6 ImageMagick 4.7 テキストを awesome-client を使ってウィジェットに渡す 4.8 awesome のデフォルトと違うパネルを使う 4.9 メニューバーのアプリケーションディレクトリ 4.10 ポップアップメニュー 4.11 タイトルバー 4.12 バッテリー通知 4.13 メディアコントロール 4.14 Steam キーボード\n- 5 トラブルシューティング 5.1 rc.lua をデバッグする 5.1.1 自動リロード 5.1.2 awmtt 5.1.3 aawmtt 5.2 ログファイル 5.3 Mod4 キー 5.4 Java を修正 (GUI がグレーのみ表示される) 5.5 Eclipse: メインウィンドウをリサイズ・移動できない 5.6 Netbeans: コード予測が間違ったスクリーンに表示される 5.7 IntelliJ: メニューが間違った位置に表示されたりウィンドウが開かない 5.8 scrot: キーボードショートカットを使ってマウスで選択した範囲のスクリーンショットが取れない 5.9 YouTube: バックグラウンドで全画面表示される 5.10 マウスのスクロールホイールでタグが変更されないようにする 5.11 Xdg-menu によって生成されるメニューエントリが重複する 5.12 Xfce4 で一部のショートカットキーが機能しない 5.13 メモリリーク\n- 6 参照\n\n- 2.1 GNOME を使用する\n- 2.2 XFCE\n\n- 3.1 設定ファイルを作成 3.1.1 設定のサンプル\n- 3.2 拡張\n- 3.3 自動実行\n- 3.4 キーボードレイアウトの変更 3.4.1 setxkbmap キーボードレイアウトの方法 3.4.2 rc.lua キーボードレイアウトの方法 (v.4 以降) 3.4.3 Xorg の方法\n- 3.5 テーマ 3.5.1 壁紙\n\n- 3.1.1 設定のサンプル\n\n- 3.4.1 setxkbmap キーボードレイアウトの方法\n- 3.4.2 rc.lua キーボードレイアウトの方法 (v.4 以降)\n- 3.4.3 Xorg の方法\n\n- 3.5.1 壁紙\n\n- 4.1 wibox を表示・隠す\n- 4.2 スクリーンショット\n- 4.3 ウィンドウのギャップを無くす\n- 4.4 透過 4.4.1 Conky 4.4.2 wiboxes\n- 4.5 Widget の間隔\n- 4.6 ImageMagick\n- 4.7 テキストを awesome-client を使ってウィジェットに渡す\n- 4.8 awesome のデフォルトと違うパネルを使う\n- 4.9 メニューバーのアプリケーションディレクトリ\n- 4.10 ポップアップメニュー\n- 4.11 タイトルバー\n- 4.12 バッテリー通知\n- 4.13 メディアコントロール\n- 4.14 Steam キーボード\n\n- 4.4.1 Conky\n- 4.4.2 wiboxes\n\n- 5.1 rc.lua をデバッグする 5.1.1 自動リロード 5.1.2 awmtt 5.1.3 aawmtt\n- 5.2 ログファイル\n- 5.3 Mod4 キー\n- 5.4 Java を修正 (GUI がグレーのみ表示される)\n- 5.5 Eclipse: メインウィンドウをリサイズ・移動できない\n- 5.6 Netbeans: コード予測が間違ったスクリーンに表示される\n- 5.7 IntelliJ: メニューが間違った位置に表示されたりウィンドウが開かない\n- 5.8 scrot: キーボードショートカットを使ってマウスで選択した範囲のスクリーンショットが取れない\n- 5.9 YouTube: バックグラウンドで全画面表示される\n- 5.10 マウスのスクロールホイールでタグが変更されないようにする\n- 5.11 Xdg-menu によって生成されるメニューエントリが重複する\n- 5.12 Xfce4 で一部のショートカットキーが機能しない\n- 5.13 メモリリーク\n\n- 5.1.1 自動リロード\n- 5.1.2 awmtt\n- 5.1.3 aawmtt\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "awesome パッケージをインストールしてください。開発版を使うには、AUR の awesome-gitAUR をインストールしてください。開発版は不安定で、設定 API が異なっている可能性があります。\n\n"
    },
    {
      "title": "起動",
      "level": 2,
      "content": "xinit を使用して awesome を実行します。付属の xsession ファイルを使用するには、ディスプレイマネージャ を参照してください。\n\n"
    },
    {
      "title": "GNOME を使用する",
      "level": 3,
      "content": "GNOME をセットアップして、awesome をビジュアルインターフェイスとして使用し、GNOME をバックグラウンドで動作させることができます。awesome-gnomeAUR を参照してください。\n\n"
    },
    {
      "title": "XFCE",
      "level": 3,
      "content": "Xfce#別のウィンドウマネージャを使う を見てください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "Awesome にはすぐに使えるデフォルト設定がありますが、遅かれ早かれあなたは設定を変更したくなるでしょう。lua ベースの設定ファイルが ~/.config/awesome/rc.lua にあります。\n\n"
    },
    {
      "title": "設定ファイルを作成",
      "level": 3,
      "content": "まず、以下を実行して次のステップで必要なディレクトリを作成します:\n\n```\n$ mkdir -p ~/.config/awesome/\n```\n\nコンパイルした時はいつでも、awesome は ~/.config/awesome/rc.lua に含まれている全てのカスタム設定を使おうとします。デフォルトではこのファイルは作られないので、最初にテンプレートファイルからコピーしてくる必要があります:\n\n```\n$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome/\n```\n\nawesome がアップデートされると設定ファイルのシンタックスはしばしば変更されます。よって、awesome に問題が起こったり、設定を変更しようとする時は、上のコマンドを繰り返すことを覚えておいて下さい。\n\nawesome の設定について詳しくは、awesome のドキュメントの設定セクション を見て下さい。\n\n"
    },
    {
      "title": "設定のサンプル",
      "level": 4,
      "content": "rc.lua のサンプルは以下にあります:\n\n- Awesome スクリーンショットスレッド\n- Setkeh's Awesome 設定\n- ステータスバーなど、さまざまなテーマをサポートするユーザー設定\n- 2 つのモダンなテーマを備えた設定\n\n"
    },
    {
      "title": "拡張",
      "level": 3,
      "content": "awesome にはいくつか拡張が存在します:\n\nTable content:\n拡張 | 機能性 | バージョン\nRevelation | 開いているすべてのクライアントのビューを表示する | Awesome 3.5+\nShifty | 動的タグ付け | Awesome 3.5\nNaughty | ポップアップ通知 | Awesome 3.5+\nVicious Obvious Bashets | 追加 ウィジェット | Awesome 3.5\n\n- Revelation\n\n- Shifty\n\n- Naughty\n\n- Vicious\n- Obvious\n- Bashets\n\n"
    },
    {
      "title": "自動実行",
      "level": 3,
      "content": "XDG Autostart 仕様を実装するには、xorg-xrdb と dex をインストールし、次の行を ~/.config/awesome/rc.luaに追加します:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\n    'if (xrdb -query | grep -q \"^awesome\\\\.started:\\\\s*true$\"); then exit; fi;' ..\n    'xrdb -merge <<< \"awesome.started:true\";' ..\n    -- list each of your autostart commands, followed by ; inside single quotes, followed by ..\n    'dex --environment Awesome --autostart'\n    )\n```\n\nあるいは、autorun.sh を 作成 して以下を挿入し実行します:\n\n```\n~/.config/awesome/autorun.sh\n```\n\n```\n#!/bin/sh\n\nrun() {\n  if ! pgrep -f \"$1\" ;\n  then\n    \"$@\"&\n  fi\n}\n```\n\n次に、それを 実行可能 にします。\n\n自動起動するプログラムを追加するには、run \"program [some argument]\" を autorun.sh に追加するだけです。run 関数は、同じ引数を持つ program のインスタンスがすでに存在するかどうかを確認し、存在しない場合にのみ program を実行します。autorun.sh を実行して確認できます。\n\n```\n$ ~/.config/awesome/autorun.sh\n```\n\nすべて問題なければ、次の行を rc.lua に追加します:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\"~/.config/awesome/autorun.sh\")\n```\n\n"
    },
    {
      "title": "キーボードレイアウトの変更",
      "level": 3,
      "content": "キーボードレイヤーを設定するには複数の方法があります。\n\n"
    },
    {
      "title": "setxkbmap キーボードレイアウトの方法",
      "level": 4,
      "content": "awesome のデフォルト設定では、レイアウトウィジェットがすでに有効化されています。\n\n複数のレイヤーを一時的に設定するには、次を実行します。\n\n```\n$ setxkbmap -layout \"us,de\"\n```\n\nウィジェットをクリックすると、レイアウトが切り替わります。キーコンボでレイアウトを変更したい場合は、-option \"grp:alt_shift_toggle\" を追加します。たとえば、Shift+Alt を押してレイアウトを変更できるようになります。完全なコマンドは次のようになります:\n\n```\n$ setxkbmap -layout \"us,de\" -option \"grp:alt_shift_toggle\"\n```\n\nEN および RU レイアウトを音声異体字で設定するには:\n\n```\n$ setxkbmap -model pc105 -option \"grp:shifts_toggle,compose:sclk\" \"us,ru(phonetic_YAZHERTY)\"\n```\n\nどこ\n\n- 作成キーは \"Scroll Lock\"、言語切り替えは 左Shift+右Shift に設定されています。\n- キーボードは 105 キーです\n\nLightDM を使用してセッションを開始する場合は、上記のコマンドを .xprofile ファイルに追加します。\n\n"
    },
    {
      "title": "rc.lua キーボードレイアウトの方法 (v.4 以降)",
      "level": 4,
      "content": "awesome 自体を使用して切り替えることができます (v.4 から) Shift+Alt を押してレイアウトを変更するには、次の 2 行を globalkeys に追加します。\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\n-- {{{ Key bindings\nglobalkeys = gears.table.join(\n    -- ...\n    awful.key({ \"Shift\" }, \"Alt_L\", function () mykeyboardlayout.next_layout(); end),\n    awful.key({ \"Mod1\" }, \"Shift_L\", function () mykeyboardlayout.next_layout(); end)\n)\n```\n\nこれには、setxkbmap コマンドまたは X 設定ファイルで切り替えられるキーボードレイアウトをセットアップする必要があります。\n\nレイアウトを設定するための適切なコマンドを見つけたら、それを 自動起動 に追加します。\n\n"
    },
    {
      "title": "Xorg の方法",
      "level": 4,
      "content": "Xorg/キーボード設定 を参照してください。\n\n"
    },
    {
      "title": "テーマ",
      "level": 3,
      "content": "Beautiful という lua ライブラリを使うことで awesome にテーマを適用するのに外部ファイルを使うことができるようになります。rc.lua を修正せずに動的に awesome のカラーや壁紙を変更できるためとても便利です。\n\nデフォルトテーマは /usr/share/awesome/themes/default にあります。それを ~/.config/awesome/themes/default にコピーしてください。(オプションで全てコピーすることもできます)、rc.lua を変更してください:\n\n```\n-- beautiful.init(gears.filesystem.get_configuration_dir() .. \"/themes/default/theme.lua\")\nlocal theme_path = string.format(\"%s/.config/awesome/themes/%s/theme.lua\", os.getenv(\"HOME\"), \"default\")\nbeautiful.init(theme_path)\n```\n\nテーマオプションについては [1] を参照してください。例えばギャップを追加するには、rc.lua のテーマセクションに以下を追加します:\n\n```\nbeautiful.useless_gap = 5\n```\n\nrc.lua のテーマセクションの下部にあります。\n\n"
    },
    {
      "title": "壁紙",
      "level": 4,
      "content": "Beautiful が壁紙を管理できるので、.xinitrc や .xsession などのファイルで壁紙を設定する必要はありません。またテーマごとに特定の壁紙を使うようにすることもできます。\n\n壁紙を指定するには 2 つの方法があります:\n\n- あなたのテーマ.theme.lua: -- absolute path theme.wallpaper = \"/path/to/wallpaper.png\" -- relative to your themes directory theme.wallpaper = theme_path .. \"path/to/wallpaper.png\"\n- または、rc.lua 内、Beautiful.init と local function set_wallpaper の間のどこか: -- absolute path beautiful.wallpaper = \"/path/to/wallpaper.png\" -- 設定ディレクトリからの相対パス beautiful.wallpaper = awful.util.get_configuration_dir() .. \"path/to/wallpaper.png\"\n\n```\n-- absolute path\ntheme.wallpaper = \"/path/to/wallpaper.png\"\n\n-- relative to your themes directory\ntheme.wallpaper = theme_path .. \"path/to/wallpaper.png\"\n```\n\n```\n-- absolute path\nbeautiful.wallpaper = \"/path/to/wallpaper.png\"\n\n-- 設定ディレクトリからの相対パス\nbeautiful.wallpaper = awful.util.get_configuration_dir() .. \"path/to/wallpaper.png\"\n```\n\n背景画像をランダムに表示するには、rc.lua に [2] を追加します。(v3.5+) 指定したディレクトリから自動的に画像を取得するには、代わりに[3] を使用します。\n\n"
    },
    {
      "title": "wibox を表示・隠す",
      "level": 3,
      "content": "awesome 4.0 の場合:\n\n```\nawful.key({ modkey }, \"b\",\n          function ()\n              myscreen = awful.screen.focused()\n              myscreen.mywibox.visible = not myscreen.mywibox.visible\n          end,\n          {description = \"toggle statusbar\"}\n),\n```\n\nModKey が押されている間のみ Wibox を表示する (または他のアクションを実行する) ことは、awesome 内からは不可能ですが、それを行う Python スクリプトがあります: autohidewibox\n\n"
    },
    {
      "title": "スクリーンショット",
      "level": 3,
      "content": "PrtSc ボタンが正しく割り当てられていることを確認するには、キーボード入力 を参照してください。次に、scrot などの スクリーンキャプチャプログラム をインストールします。\n\nglobalkeys 配列に以下を追加します:\n\n```\nawful.key({ }, \"Print\", function () awful.util.spawn(\"scrot -e 'mv $f ~/screenshots/ 2>/dev/null'\", false) end),\n```\n\nこの関数はスクリーンショットを ~/screenshots/ 内に保存します、必要に応じて編集して下さい。\n\n"
    },
    {
      "title": "ウィンドウのギャップを無くす",
      "level": 3,
      "content": "awesome 3.4 では、ウィンドウ間の小さなギャップを取り除くことが可能です。awful.rules.rules テーブルには properties セクションがあるので、それに追加します。\n\n```\nsize_hints_honor = false\n```\n\n"
    },
    {
      "title": "透過",
      "level": 3,
      "content": "Xorg#コンポジットを見て下さい。\n\nawesome 3.5 では、ウィンドウ透過はシグナルを使って動的に設定することもできます。例えば、あなたの rc.lua に以下を加えることができます:\n\n```\nclient.connect_signal(\"focus\", function(c)\n                              c.border_color = beautiful.border_focus\n                              c.opacity = 1\n                           end)\nclient.connect_signal(\"unfocus\", function(c)\n                                c.border_color = beautiful.border_normal\n                                c.opacity = 0.7\n                             end)\n```\n\n"
    },
    {
      "title": "Conky",
      "level": 4,
      "content": "conky を使っていて、デスクトップの代わりに conky にウィンドウを持たせたい場合、~/.conkyrc を次のように編集してください:\n\n```\nown_window yes\nown_window_transparent yes\nown_window_type desktop\n```\n\n上記のように設定していないと、全てのウィンドウが完全に透過してしまうなどの不可思議な現象が発生します。また、conky がデスクトップ上に透過ウィンドウを作成すると、awesome の rc.lua で定義したアクションは conky が存在する場所では動作しないので注意してください。\n\n"
    },
    {
      "title": "wiboxes",
      "level": 4,
      "content": "Awesome 3.1 現在、wiboxes 用に擬似透過がビルドインされています。これを有効にするには、テーマファイルに (~/.config/awesome/themes/default, /usr/share/awesome/themes/default のコピー) 次のように色の部分に16進数の値を2つ加えて下さい:\n\n```\nbg_normal = #000000AA\n```\n\n\"AA\" が透明度になります。\n\nModkey + PgUp/PgDown によって選択されたウィンドウの透明度を変更するために、community パッケージリポジトリにある transset-dfAUR を使って、以下のように rc.lua を修正することもできます:\n\n```\nglobalkeys = awful.util.table.join(\n    -- your keybindings\n    [...]\n    awful.key({ modkey }, \"Next\", function (c)\n        awful.util.spawn(\"transset-df --actual --inc 0.1\")\n    end),\n    awful.key({ modkey }, \"Prior\", function (c)\n        awful.util.spawn(\"transset-df --actual --dec 0.1\")\n    end),\n    -- Your other key bindings\n    [...]\n)\n```\n\n"
    },
    {
      "title": "Widget の間隔",
      "level": 3,
      "content": "デフォルトの rc.lua は、キーボードレイアウトや時計を含むウィジェットを Wibox 内にわずかな間隔で配置します。spacing プロパティを使用して、ウィジェット間に余分な間隔を追加することができます。\n\n```\n{ -- Right widgets\n       layout = wibox.layout.fixed.horizontal,\n       spacing = 10,\n       mykeyboardlayout,\n       ...\n```\n\n"
    },
    {
      "title": "ImageMagick",
      "level": 3,
      "content": "imagemagick の display コマンドで壁紙を設定すると問題が起こるかもしれません、xcompmgr との互換性に問題があるためです。awsetbg に display を使うのは他のオプションを設定していないときだけにしましょう。habak, feh, hsetroot などの代わりのプログラムをインストールしてください (grep -A 1 wpsetters /usr/bin/awsetbg で他のオプションが見れます)。\n\n"
    },
    {
      "title": "テキストを awesome-client を使ってウィジェットに渡す",
      "level": 3,
      "content": "簡単に awesome ウィジェットにテキストを送ることができます。次のように新しいウィジェットを作ります:\n\n```\nmywidget = widget({ type = \"textbox\", name = \"mywidget\" })\n mywidget.text = \"initial text\"\n```\n\n外部ソースからテキストをアップデートするには、awesome-client を使います:\n\n```\necho -e 'mywidget.text = \"new text\"' | awesome-client\n```\n\nウィジェットを wibox に追加するのを忘れないで下さい。\n\n"
    },
    {
      "title": "awesome のデフォルトと違うパネルを使う",
      "level": 3,
      "content": "あなたが awesome の軽量性と機能性を気に入っているが、そのデフォルトのパネルの見た目が気に入らないときは、xfce4-panel など異なるパネルをインストールできます。\n\nインストールしたら rc.lua の autorun セクションに追加してください (方法は割愛) 画面ごとに wibox を作成しているセクション (mywibox[s] = awful.wibox({ position = \"top\", screen = s }) から始まっているところ) をコメントアウトすることもできますが、特にその必要はありません。ただし次を実行して rc.lua にエラーがないかチェックすることは忘れずに行って下さい:\n\n```\n$ awesome -k rc.lua\n```\n\nまた、組み込みの awesome のランチャーの代わりに他のアプリケーションランチャーを起動するには、modkey+R キーバインドを変更する必要があります。例については、アプリケーション一覧#アプリケーションランチャー を参照してください。また以下を忘れずに追加してください。\n\n```\nproperties = { floating = true } },\n    { rule = { instance = \"$yourapplicationlauncher\" },\n```\n\nrc.lua にコピーします。\n\n"
    },
    {
      "title": "メニューバーのアプリケーションディレクトリ",
      "level": 3,
      "content": "awesome には メニューバー が含まれます。デフォルトでは、Mod+p を押すと、画面上部に dmenu のようなアプリケーションメニューが開きます。このメニューは、$XDG_DATA_DIRS/applications/ および $XDG_DATA_HOME/applications/ にある .desktop ファイルを検索します。\n\nmenubar.menu_gen.all_menu_dirs を変更することで、これらのディレクトリを拡張または置換できます:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\ntable.insert(menubar.menu_gen.all_menu_dirs, \"/path/to/custom/applications/\")\n```\n\n{ic|.desktop}} ファイルは awesome が起動するたびに再読み込みされるため、起動が遅くなることに注意してください。プログラムを起動する他の手段を好む場合、local menubar = require(\"menubar\") やmenubar 変数への参照を削除することで、rc.lua でメニューバーを無効にすることができます。\n\n"
    },
    {
      "title": "ポップアップメニュー",
      "level": 3,
      "content": "awesome 3 以降、デフォルトでシンプルなメニューがあり、カスタムメニューを簡素化しています。[4] freedesktop.org のメニューが欲しければ、\"awesome-freedesktop\" を見てください。\n\nawesome アイコンをクリックするか、デスクトップの空いている領域を右クリックするときに外部アプリケーションメニューを使用したい場合は、Xdg-menu#Awesome の手順に従ってください。ただし、プログラムを追加または削除しても、このメニューは更新されません。したがって、必ずコマンドを実行してメニューを更新してください。次のようになります:\n\n```\n$ xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "タイトルバー",
      "level": 3,
      "content": "設定ファイルで変数 titlebars_enabled を true に設定するだけで、awesome でタイトルバーを有効にするのは簡単です。(ルールエリア内)\n\n```\n{ rule_any = {type = { \"normal\", \"dialog\" }\n     }, properties = { titlebars_enabled = true }\n   },\n```\n\nしかし、タイトルバーのオン・オフを切り替えたい場合もあるでしょう。その場合は、以下のようなコードをキーバインドに追加してください: (このコードは clientkeys エリアの最後には書かないでください)\n\n```\n-- working toggle titlebar\n   awful.key({ modkey, \"Control\" }, \"t\", function (c) awful.titlebar.toggle(c)         end,\n             {description = \"Show/Hide Titlebars\", group=\"client\"}),\n```\n\n最初にタイトルバーを非表示にしたい場合。タイトルバーが作成された直後 (\"manage\" signal handler の中) に、次のように追加して下さい:\n\n```\nawful.titlebar.hide(c)\n```\n\n"
    },
    {
      "title": "バッテリー通知",
      "level": 3,
      "content": "rc.lua に追加する簡単なバッテリー通知については、このブログ投稿 を参照してください。通知には naughty が必要であることに注意してください (バージョン 3.5 ではデフォルトでインストールされます) 他の例は wiki で入手できます。\n\n"
    },
    {
      "title": "メディアコントロール",
      "level": 3,
      "content": "(alsa-utils パッケージに含まれている) amixer と playerctl を組み合わせることでボリュームや再生をコントロールできます。rc.lua 設定ファイルのキーバインドセクションに以下を追加してください:\n\n```\n-- Volume Keys\nawful.key({}, \"XF86AudioLowerVolume\", function ()\n  awful.util.spawn(\"amixer -q -D pulse sset Master 5%-\", false)\nend),\nawful.key({}, \"XF86AudioRaiseVolume\", function ()\n  awful.util.spawn(\"amixer -q -D pulse sset Master 5%+\", false)\nend),\nawful.key({}, \"XF86AudioMute\", function ()\n  awful.util.spawn(\"amixer -D pulse set Master 1+ toggle\", false)\nend),\n-- Media Keys\nawful.key({}, \"XF86AudioPlay\", function()\n  awful.util.spawn(\"playerctl play-pause\", false)\nend),\nawful.key({}, \"XF86AudioNext\", function()\n  awful.util.spawn(\"playerctl next\", false)\nend),\nawful.key({}, \"XF86AudioPrev\", function()\n  awful.util.spawn(\"playerctl previous\", false)\nend)\n```\n\n"
    },
    {
      "title": "Steam キーボード",
      "level": 3,
      "content": "Steam コントローラから使用することができるオンスクリーンの Steam キーボードで文字を入力したときにフリーズすることがあります。入力を受け取るにはクライアントにフォーカスがあたっている必要があり、入力が正しく送信されるまでキーボードが待機するためです。手動で他のクライアントにフォーカスをあてるとそのクライアントに入力が送信され、次の文字が入力されるまでキーボードはフリーズした状態になります。\n\n他のクライアントにフォーカスが移らないようにすることでキーボードを正しく動作させることができます。設定に以下のシグナルを追加してください (あるいは既存のクライアントのフォーカスシグナルに追記してください):\n\n```\nclient.connect_signal(\"focus\", function(c)\n    if awful.rules.match(c, { name = \"^Steam Keyboard$\" }) then\n        awful.client.focus.history.previous()\n    end\nend)\n```\n\n上記のように設定することでキーボードがフォーカスを受け取ったときに最後のクライアントにフォーカスが移るようになります。キーボード入力は Steam クライアントによって処理されフォーカスは必要ないため、テキストの入力は問題なく行うことができます。\n\n"
    },
    {
      "title": "rc.lua をデバッグする",
      "level": 3,
      "content": "[Xephyr]] を使うと、他の X のクライアントウィンドウの中で X をネストして実行することができます。これにより、現在のデスクトップを壊すことなく rc.lua をデバッグすることができます。まず、rc.lua を新しいファイル (例えば rc.lua.new) にコピーし、必要に応じて変更します。次に、Xephyr で awesome の新しいインスタンスを実行し、設定ファイルとして rc.lua.new を以下のように指定します:\n\n```\n$ Xephyr :1 -ac -br -noreset -screen 1152x720 &\n$ DISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new\n```\n\nこのアプローチの利点は、バグが発生した場合でも、現在の awesome デスクトップを壊すことがなく、X アプリケーションがクラッシュして作業が失われる可能性がないことです。新しい設定に満足したら、rc.lua.new を rc.lua にコピーして、awesome を再起動します。\n\n"
    },
    {
      "title": "自動リロード",
      "level": 4,
      "content": "上記の方法に加えて、inotify-tools を使うことで、~/.config/awesome ディレクトリ内の設定ファイルを更新した際に、自動的に Xephyr 内の Awesome インスタンスをリロードすることができます:\n\n```\n#!/usr/bin/env bash\n\nXephyr :1 -ac -br -noreset -screen 1920x1080 -dpi 96 &\nsleep 1\nDISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new &\ninstance=$!\n\nwhile inotifywait -r -e close_write ~/.config/awesome; do\n\tkill -s SIGHUP $instance\ndone\n```\n\n"
    },
    {
      "title": "awmtt",
      "level": 4,
      "content": "awmttAUR (Awesome WM Testing Tool) は Xephyr の使いやすいラッパースクリプトです。デフォルトでは ~/.config/awesome/rc.lua.test を使用します。テストファイルが見つからない場合は、実際の rc.lua を使用します。テストしたい設定ファイルの場所を指定することもできます:\n\n```\n$ awmtt start -C ~/.config/awesome/rc.lua.new\n```\n\nテストが完了したら、次のコマンドを実行してウィンドウを閉じます:\n\n```\n$ awmtt stop\n```\n\nまたは、次のコマンドを実行して、設定ファイルに加えた変更をすぐに確認します:\n\n```\n$ awmtt restart\n```\n\n"
    },
    {
      "title": "aawmtt",
      "level": 4,
      "content": "aawmttAUR (別の awesome WM テストツール) は、awmttAUR の代替実装であり、デフォルトで Live-Reload が含まれています。 これは awmtt-ng に似ていますが、awmtt-ng を備えた一部のマシンでは機能しない XOrg ディスプレイ検出に対するいくつかの修正が含まれています。 最初にテストファイルを実行しようとせず、デフォルトの設定を実行するだけであるという点で awmtt とは異なります。\n\nXephyrのウィンドウを開き、awesome を読み込む:\n\n```\n$ aawmtt\n```\n\nこれで、awesome の出力がターミナルに出力され、設定フォルダー内のファイルを変更すると、awesomewm がリロードされます。\n\nファイルの変更を監視するディレクトリ、または設定ファイルの場所を変更する場合は、次のコマンドを実行します:\n\n```\n$ aawmtt --config \"location_of_config_file\" --watch \"directory_to_watch_for_changes\"\n```\n\n変更が監視されるディレクトリはデフォルトで設定ファイルの親ディレクトリになるため、デフォルトでは \"~/.config/awesome\" になります。\n\n"
    },
    {
      "title": "ログファイル",
      "level": 3,
      "content": "LightDM を使っている場合、awesome はエラーのログを $HOME/.xsession-errors に出力します。.xinitrc を使って awesome を起動している場合、FAQ のエントリ の \"Where are logs, error messages or something?\" が参考になるはずです。\n\n"
    },
    {
      "title": "Mod4 キー",
      "level": 3,
      "content": "Awesome は mod4 を再マップすることを推奨しており、デフォルトでは Super または \"Windows\" キーになっているはずです。何らかの理由で mod4 にマッピングされていない場合は、xmodmap を使ってマッピングを調べてください。マッピングを変更するには、xev を使ってマッピングするキーのキーコードと名前を探します。そして、~/.xinitrc に以下のような内容を追加します。\n\n```\nxmodmap -e \"keycode 115 = Super_L\" -e \"add mod4 = Super_L\"\nexec awesome\n```\n\nこの場合の問題は、一部の xorg インストールではキーコード 115 が認識されるものの、誤って 選択 キーとして認識されることです。上記のコマンドは、キーコード 115 を正しい 'Super_L' キーに明示的に再マップします。\n\nmod4 を setxkbmap で再マップするには (xmodmap と競合) を参照してください:\n\n```\ntail -50 /usr/share/X11/xkb/rules/evdev\n```\n\nCaps Lock キーを mod4 として設定するには、以下を ~/.xinitrc に追加します:\n\n```\nsetxkbmap -option caps:hyper\n```\n\n"
    },
    {
      "title": "Java を修正 (GUI がグレーのみ表示される)",
      "level": 3,
      "content": "Java#灰色のウィンドウ、ウィンドウマネージャでアプリがリサイズされない、メニューがすぐに閉じる および [5] を参照してください。\n\n"
    },
    {
      "title": "Eclipse: メインウィンドウをリサイズ・移動できない",
      "level": 3,
      "content": "(mod4 + 右・左クリックを使って)メインウィンドウが移動・リサイズできない場合、workbench.xml を編集して fullscreen/maximized を false に設定し、幅と高さの数字をデスクトップ画面の大きさよりも小さくしてください。\n\nworkbench.xml は、eclipse_workspace/.metadata/.plugins/org.eclipse.ui.workbench/ にあります。次の行を編集します。\n\n```\n<window height=\"xx\" maximized=\"true\" width=\"xx\" x=\"xx\" y=\"xx\"\n```\n\n"
    },
    {
      "title": "Netbeans: コード予測が間違ったスクリーンに表示される",
      "level": 3,
      "content": "ディスプレイをふたつ使っていて Netbeans でコード予測 (Ctrl + Space) を使用したときに、誤ったディスプレイのほうにコード予測が表示されることがあります。解決するには:\n\n```\n.config/awesome/rc.lua\n```\n\n```\nawful.rules.rules = {\n        ...\n\t{\n\t\trule_matches = { -- Fix Netbeans\n\t\t\tclass = {\n\t\t\t\t\"sun-awt-X11-XWindowPeer\", \"NetBeans IDE 8.2\"\n\t\t\t},\n\t\t\tname = {\n\t\t\t\t\"win1\"\n\t\t\t}\n\t\t}, properties = { screen = 1 } -- even with screen 1 here, this still works on the seccond screen, too (don't know why).\n\t},\n        ...\n\n}\n```\n\n"
    },
    {
      "title": "IntelliJ: メニューが間違った位置に表示されたりウィンドウが開かない",
      "level": 3,
      "content": "GitHub issue #2204 を見てください。\n\n解決方法:\n\n```\n.config/awesome/rc.lua\n```\n\n```\nclientbuttons_jetbrains = gears.table.join(\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize)\n)\n\n...\n\nawful.rules.rules = {\n        ...\n\t{\n            rule = {\n                class = \"jetbrains-.*\",\n            }, properties = { focus = true, buttons = clientbuttons_jetbrains }\n        },\n        {\n            rule = {\n                class = \"jetbrains-.*\",\n                name = \"win.*\"\n            }, properties = { titlebars_enabled = false, focusable = false, focus = true, floating = true, placement = awful.placement.restore }\n        },\n        ...\n}\n```\n\n"
    },
    {
      "title": "scrot: キーボードショートカットを使ってマウスで選択した範囲のスクリーンショットが取れない",
      "level": 3,
      "content": "scrot を使用する場合、キーボードショートカットにマウス選択オプション (scrot -s) を割り当てられない問題がおきます。解決するには、以下の行を rc.lua に追加してください:\n\n```\nawful.key( { modkey,\t }, <shortcut>, function () awful.util.spawn_with_shell(\"sleep 0.5 && scrot -s\") end)\n```\n\n"
    },
    {
      "title": "YouTube: バックグラウンドで全画面表示される",
      "level": 3,
      "content": "フルスクリーンモードで YouTube ビデオが Web ブラウザのバックグラウンドで表示される場合、またはコントロールが非表示になっている場合は、これを rc.lua に追加します。\n\n```\n{ rule = { instance = \"plugin-container\" },\n  properties = { floating = true } },\n```\n\nChromium に追加\n\n```\n{ rule = { instance = \"exe\" },\n  properties = { floating = true } },\n```\n\nもしくは:\n\n```\n{ rule = { role = \"_NET_WM_STATE_FULLSCREEN\" },\n  properties = { floating = true } },\n```\n\nこちらも参照 [6]\n\n"
    },
    {
      "title": "マウスのスクロールホイールでタグが変更されないようにする",
      "level": 3,
      "content": "rc.lua で、Mouse Bindings セクションを次のように変更します:\n\n```\n-- {{{ Mouse bindings\nroot.buttons(gears.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end)\n))\n-- }}}\n```\n\n"
    },
    {
      "title": "Xdg-menu によって生成されるメニューエントリが重複する",
      "level": 3,
      "content": "/usr/share/applications から ~/.local/share/applications にデスクトップファイルをコピーすると、Xdg-menu は重複したエントリを生成します。awk を使って同じ名前のエントリを排除することで解決できます:\n\n```\n$ xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu | awk -F, '{if (a!=$1) print $a; a=$1}' >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "Xfce4 で一部のショートカットキーが機能しない",
      "level": 3,
      "content": "以下のコマンドを実行して、\"Super L\" などの Awesome によって実行されるキーが重なっていないか確認してください:\n\n```\n$ xfce4-keyboard-settings\n```\n\n"
    },
    {
      "title": "メモリリーク",
      "level": 3,
      "content": "メモリリーク が発生します。多くのウィジェットを使用している場合、最大5MB/分の速度でメモリリークが発生する可能性があります。これを軽減するには、~/.config/awesome/rc.lua にこれを追加することで、より頻繁なガベージコレクションを強制することができます:\n\n```\n-- Run garbage collector regularly to prevent memory leaks\ngears.timer {\n       timeout = 30,\n       autostart = true,\n       callback = function() collectgarbage() end\n}\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- https://awesomewm.org/apidoc/documentation/90-FAQ.md.html - FAQ\n- http://www.lua.org/pil/ - Lua プログラミング (第1版)\n- https://awesomewm.org/ - awesome 公式ウェブサイト\n- https://awesomewm.org/apidoc/ - awesome API ドキュメント\n- https://bbs.archlinux.org/viewtopic.php?id=88926 - share your awesome!\n\n"
    }
  ]
}