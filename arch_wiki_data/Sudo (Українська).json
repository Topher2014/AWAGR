{
  "title": "Sudo (Українська)",
  "url": "https://wiki.archlinux.org/title/Sudo_(%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D1%81%D1%8C%D0%BA%D0%B0)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article is being considered for redirection to sudo.** This article is being considered for redirection to sudo.\n\nThis article is being considered for redirection to sudo.\n\nNote: **Цю стаття чи розділ ще не перекладено. Дивіться також Команда перекладу ArchWiki українською.** Цю стаття чи розділ ще не перекладено. Дивіться також Команда перекладу ArchWiki українською.\n\nЦю стаття чи розділ ще не перекладено. Дивіться також Команда перекладу ArchWiki українською.\n\nПовʼязані статті\n\n- Users and groups\n- su\n- doas\n\nSudo дозволяє системному адміністратору передавати різним користувачам чи групам користувачів повноваження запускати команди від імені користувача „root“ чи будь-якого іншого користувача. Окрім цього, команда веде часопис використаних команд та їх аргументів.\n\nІнший спосіб запускати команди як root — su. От тільки, якщо su відкриває root консоль в якій можна вводити багато команд, то sudo дає право виконати лише одну команду. Завдяки цьому, зменшується ймовірність виконати команду з помилкою й поламати свою систему.\n\nІз Sudo ще й можна запускати команди від імені інших користувачів. А використані команди та невдалі спроби отримати доступ записуються до журналу, для перевірки безпеки.\n\n"
    },
    {
      "title": "Встановлення",
      "level": 2,
      "content": "Встановіть пакунок sudo.\n\n"
    },
    {
      "title": "Використання",
      "level": 2,
      "content": "Перед використанням, sudo потрібно налагодити. Прочитайте #Налагодження.\n\nЩоб скористатися sudo, просто додайте sudo поперед команди та її аргументів:\n\n```\n$ sudo команда\n```\n\nНаприклад, для pacman:\n\n```\n$ sudo pacman -Syu\n```\n\nПрочитайте sudo(8) щоб дізнатися більше.\n\n"
    },
    {
      "title": "Налагодження",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Defaults skeleton",
      "level": 3,
      "content": "sudoers(5) § SUDOERS OPTIONS lists all the options that can be used with the Defaults command in the /etc/sudoers file.\n\nSee [1] for a list of options (parsed from the version 1.8.7 source code) in a format optimized for sudoers.\n\nSee sudoers(5) for more information, such as configuring the password timeout.\n\n"
    },
    {
      "title": "Переглянути наявні налаштування",
      "level": 3,
      "content": "Запустіть sudo -ll щоб вивести налаштування, прийняті на даний момент. Щоб дізнатися налаштування для певного користувача, запустіть sudo -lU ім'я_користувача.\n\n"
    },
    {
      "title": "Використання visudo",
      "level": 3,
      "content": "Налаштування для sudo знаходяться у файлі /etc/sudoers. Його можна редагувати тільки через команду visudo(8). Вона блокує оригінальний файл, створює тимчасову копію і перевіряє його на наявність помилок, переди тим як скопіювати його назад до /etc/sudoers.\n\nNote: **Завжди** \n\n- Ви зобов'язані написати sudoers без помилок! Будь-яка помилка зробить sudo непридатним для використання. Завжди використовуйте visudo щоб запобігти утворенню помилок.\n- visudo(8) warns that configuring visudo to honor the user environment variables for their editor of choice may be a security hole, since it allows the user with visudo privileges to run arbitrary commands as root without logging simply by setting that variable to something else.\n\nvisudo використовує vi для редагування тексту. The sudo package is compiled with --with-env-editor and honors the use of the SUDO_EDITOR, VISUAL and EDITOR variables. EDITOR is not used when VISUAL is set.\n\nTo establish nano as the visudo editor for the duration of the current shell session, export EDITOR=nano; to use a different editor just once simply set the variable before calling visudo:\n\n```\n# EDITOR=nano visudo\n```\n\nAlternatively you may edit a copy of the /etc/sudoers file and check it using visudo -c /copy/of/sudoers. This might come in handy in case you want to circumvent locking the file with visudo.\n\nTo change the editor permanently, see Environment variables#Per user. To change the editor of choice permanently system-wide only for visudo, add the following to /etc/sudoers (assuming nano is your preferred editor):\n\n```\n# Reset environment by default\nDefaults      env_reset\n# Set default EDITOR to nano, and do not allow visudo to use EDITOR/VISUAL.\nDefaults      editor=/usr/bin/nano, !env_editor\n```\n\n"
    },
    {
      "title": "Example entries",
      "level": 3,
      "content": "To allow a user to gain full root privileges when they precede a command with sudo, add the following line:\n\n```\nUSER_NAME   ALL=(ALL) ALL\n```\n\nTo allow a user to run all commands as any user but only on the machine with hostname HOST_NAME:\n\n```\nUSER_NAME   HOST_NAME=(ALL) ALL\n```\n\nTo allow members of group wheel sudo access:\n\n```\n%wheel      ALL=(ALL) ALL\n```\n\nTo disable asking for a password for user USER_NAME:\n\n```\nDefaults:USER_NAME      !authenticate\n```\n\nEnable explicitly defined commands only for user USER_NAME on host HOST_NAME:\n\n```\nUSER_NAME HOST_NAME=/usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\nEnable explicitly defined commands only for user USER_NAME on host HOST_NAME without password:\n\n```\nUSER_NAME HOST_NAME= NOPASSWD: /usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\nA detailed sudoers example is available at /usr/share/doc/sudo/examples/sudoers. Otherwise, see the sudoers(5) for detailed information.\n\n"
    },
    {
      "title": "Sudoers default file permissions",
      "level": 3,
      "content": "The owner and group for the sudoers file must both be 0. The file permissions must be set to 0440. These permissions are set by default, but if you accidentally change them, they should be changed back immediately or sudo will fail.\n\n```\n# chown -c root:root /etc/sudoers\n# chmod -c 0440 /etc/sudoers\n```\n\n"
    },
    {
      "title": "Вимкнути термін очікування при введенні паролю",
      "level": 3,
      "content": "Найдратівливіша ситуація: тривалий процес, що працює десь на тлі, із нормальними дозволами, та піднімається лише за потреби. В такому разі, він потребує паролю для sudo. Якщо його не помітити, то він застаріває й процес, в найкращому випадку, вилітає. Щоби справитись із цим, радимо вимкнути пароль для sudo або збільшити його термін очікування. Можна взагалі вимкнути термін очікування паролю, та як воно взагалі не підвищує рівень безпеки, для цього встановіть його рівним нулю:\n\n```\nDefaults passwd_timeout=0\n```\n\n"
    },
    {
      "title": "Add terminal bell to the password prompt",
      "level": 3,
      "content": "To draw attention to a sudo prompt in a background terminal, users can simply make it echo a bell character:\n\n```\nDefaults passprompt=\"^G[sudo] password for %p: \"\n```\n\nNote the ^G is a literal bell character. E.g. in vim, insert using the sequence Ctrl+v Ctrl+g, or in nano, Alt+v Ctrl+g.\n\n"
    },
    {
      "title": "Passing aliases",
      "level": 3,
      "content": "If you use a lot of aliases, you might have noticed that they do not carry over to the root account when using sudo. However, there is an easy way to make them work. Simply add the following to your ~/.bashrc or /etc/bash.bashrc:\n\n```\nalias sudo='sudo '\n```\n\n"
    },
    {
      "title": "Disable per-terminal sudo",
      "level": 3,
      "content": "If you are annoyed by sudo's defaults that require you to enter your password every time you open a new terminal, set timestamp_type to global:\n\n```\nDefaults timestamp_type=global\n```\n\n"
    },
    {
      "title": "Reduce the number of times you have to type a password",
      "level": 3,
      "content": "If you are annoyed that you have to re-enter your password every 5 minutes (default), you can change this by setting a longer value for timestamp_timeout (in minutes):\n\n```\nDefaults timestamp_timeout=10\n```\n\nIf you are using a lot of sudo commands on a row, it is more logical to refresh the timeout every time you use sudo than to increase timestamp_timeout. Refreshing the timeout can be done with sudo -v (whereas sudo -K revokes immediately).\n\nYou might want to automate this by adding the following to your .bashrc:\n\n```\nalias sudo='sudo -v; sudo '\n```\n\nIt is also possible to use a bash function; for more details see stackexchange.\n\n"
    },
    {
      "title": "Environment variables",
      "level": 3,
      "content": "If you have a lot of environment variables, or you export your proxy settings via export http_proxy=\"...\", when using sudo these variables do not get passed to the root account unless you run sudo with the -E option.\n\n```\n$ sudo -E pacman -Syu\n```\n\nThe recommended way of preserving environment variables is to append them to env_keep:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults env_keep += \"ftp_proxy http_proxy https_proxy no_proxy\"\n```\n\n"
    },
    {
      "title": "Root password",
      "level": 3,
      "content": "Users can configure sudo to ask for the root password instead of the user password by adding targetpw (target user, defaults to root) or rootpw to the Defaults line in /etc/sudoers:\n\n```\nDefaults targetpw\n```\n\nTo prevent exposing your root password to users, you can restrict this to a specific group:\n\n```\nDefaults:%wheel targetpw\n%wheel ALL=(ALL) ALL\n```\n\n"
    },
    {
      "title": "Disable root login",
      "level": 3,
      "content": "Users may wish to disable the root login. Without root, attackers must first guess a user name configured as a sudoer as well as the user password. See for example OpenSSH#Deny.\n\n- Be careful, you may lock yourself out by disabling root login. Sudo is not automatically installed and its default configuration allows neither passwordless root access nor root access with your own password. Ensure a user is properly configured as a sudoer before disabling the root account!\n- If you have changed your sudoers file to use rootpw as default, then do not disable root login with any of the following commands!\n- If you are already locked out, see Password recovery for help.\n\nThe account can be locked via passwd:\n\n```\n# passwd -l root\n```\n\nA similar command unlocks root.\n\n```\n$ sudo passwd -u root\n```\n\nAlternatively, edit /etc/shadow and replace the root's encrypted password with \"!\":\n\n```\nroot:!:12345::::::\n```\n\nTo enable root login again:\n\n```\n$ sudo passwd root\n```\n\n"
    },
    {
      "title": "kdesu",
      "level": 4,
      "content": "kdesu may be used under KDE to launch GUI applications with root privileges. It is possible that by default kdesu will try to use su even if the root account is disabled. Fortunately one can tell kdesu to use sudo instead of su. Create/edit the file ~/.config/kdesurc:\n\n```\n[super-user-command]\nsuper-user-command=sudo\n```\n\nor use the following command:\n\n```\n$ kwriteconfig5 --file kdesurc --group super-user-command --key super-user-command sudo\n```\n\n"
    },
    {
      "title": "Harden with sudo example",
      "level": 3,
      "content": "Let us say you create 3 users: admin, devel, and joe. The user \"admin\" is used for journalctl, systemctl, mount, kill, and iptables; \"devel\" is used for installing packages, and editing config files; and \"joe\" is the user you log in with. To let \"joe\" reboot, shutdown, and use netctl we would do the following:\n\nEdit /etc/pam.d/su and /etc/pam.d/su-l. Require user be in the wheel group, but do not put anyone in it.\n\n```\n#%PAM-1.0\nauth            sufficient      pam_rootok.so\n# Uncomment the following line to implicitly trust users in the \"wheel\" group.\n#auth           sufficient      pam_wheel.so trust use_uid\n# Uncomment the following line to require a user to be in the \"wheel\" group.\nauth            required        pam_wheel.so use_uid\nauth            required        pam_unix.so\naccount         required        pam_unix.so\nsession         required        pam_unix.so\n```\n\nLimit SSH login to the 'ssh' group. Only \"joe\" will be part of this group.\n\n```\n# groupadd -r ssh\n# gpasswd -a joe ssh\n# echo 'AllowGroups ssh' >> /etc/ssh/sshd_config\n```\n\nRestart sshd.service.\n\nAdd users to other groups.\n\n1. for g in power network ;do ;gpasswd -a joe $g ;done\n\n```\n# for g in network power storage ;do ;gpasswd -a admin $g ;done\n```\n\nSet permissions on configs so devel can edit them.\n\n```\n# chown -R devel:root /etc/{http,openvpn,cups,zsh,vim,screenrc}\n```\n\n```\nCmnd_Alias  POWER       =   /usr/bin/shutdown -h now, /usr/bin/halt, /usr/bin/poweroff, /usr/bin/reboot\nCmnd_Alias  STORAGE     =   /usr/bin/mount -o nosuid\\,nodev\\,noexec, /usr/bin/umount\nCmnd_Alias  SYSTEMD     =   /usr/bin/journalctl, /usr/bin/systemctl\nCmnd_Alias  KILL        =   /usr/bin/kill, /usr/bin/killall\nCmnd_Alias  PKGMAN      =   /usr/bin/pacman\nCmnd_Alias  NETWORK     =   /usr/bin/netctl\nCmnd_Alias  FIREWALL    =   /usr/bin/iptables, /usr/bin/ip6tables\nCmnd_Alias  SHELL       =   /usr/bin/zsh, /usr/bin/bash\n%power      ALL         =   (root)  NOPASSWD: POWER\n%network    ALL         =   (root)  NETWORK\n%storage    ALL         =   (root)  STORAGE\nroot        ALL         =   (ALL)   ALL\nadmin       ALL         =   (root)  SYSTEMD, KILL, FIREWALL\ndevel\t    ALL         =   (root)  PKGMAN\njoe\t    ALL         =   (devel) SHELL, (admin) SHELL\n```\n\nWith this setup, you will almost never need to login as the Root user.\n\n\"joe\" can connect to his home WiFi.\n\n```\n$ sudo netctl start home\n$ sudo poweroff\n```\n\n\"joe\" can not use netctl as any other user.\n\n```\n$ sudo -u admin -- netctl start home\n```\n\nWhen \"joe\" needs to use journalctl or kill run away process he can switch to that user.\n\n```\n$ sudo -i -u devel\n$ sudo -i -u admin\n```\n\nBut \"joe\" cannot switch to the root user.\n\n```\n$ sudo -i -u root\n```\n\nIf \"joe\" want to start a gnu-screen session as admin he can do it like this:\n\n```\n$ sudo -i -u admin\n[admin]$ chown admin:tty `echo $TTY`\n[admin]$ screen\n```\n\n"
    },
    {
      "title": "Configure sudo using drop-in files in /etc/sudoers.d",
      "level": 3,
      "content": "sudo parses files contained in the directory /etc/sudoers.d/. This means that instead of editing /etc/sudoers, you can change settings in standalone files and drop them in that directory. This has two advantages:\n\n- There is no need to edit a sudoers.pacnew file;\n- If there is a problem with a new entry, you can remove the offending file instead of editing /etc/sudoers (but see the warning below).\n\nThe format for entries in these drop-in files is the same as for /etc/sudoers itself. To edit them directly, use visudo -f /etc/sudoers.d/somefile. See sudoers(5) § Including other files from within sudoers for details.\n\nThe files in /etc/sudoers.d/ directory are parsed in lexicographical order, file names containing . or ~ are skipped. To avoid sorting problems, the file names should begin with two digits, e.g. 01_foo.\n\n"
    },
    {
      "title": "Editing files",
      "level": 3,
      "content": "sudo -e or sudoedit lets you edit a file as another user while still running the text editor as your user.\n\nThis is especially useful for editing files as root without elevating the privilege of your text editor, for more details read sudo(8) § e.\n\nNote that you can set the editor to any program, so for example one can use meld to manage pacnew files:\n\n```\n$ SUDO_EDITOR=meld sudo -e /etc/file{,.pacnew}\n```\n\n"
    },
    {
      "title": "Увімкнути образи",
      "level": 3,
      "content": "Ви можете увімкнути образи в sudo. Для цього додайте цей рядок до файлу sudoers з visudo:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults insults\n```\n\nЯкщо ви введете хибний пароль, то замість Upon entering an incorrect password this will replace слід вказати пароль sudo буде писати різні кумедні образи.\n\n"
    },
    {
      "title": "SSH problem without TTY",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Configuration.** This article or section is a candidate for merging with #Configuration.\n\nThis article or section is a candidate for merging with #Configuration.\n\nSSH does not allocate a tty by default when running a remote command. Without an allocated tty, sudo cannot prevent the password from being displayed. You can use ssh's -t option to force it to allocate a tty.\n\nThe Defaults option requiretty only allows the user to run sudo if they have a tty.\n\n```\n# Disable \"ssh hostname sudo <cmd>\", because it will show the password in clear text. You have to run \"ssh -t hostname sudo <cmd>\".\n#\n#Defaults    requiretty\n```\n\n"
    },
    {
      "title": "Permissive umask",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Configuration.** This article or section is a candidate for merging with #Configuration.\n\nThis article or section is a candidate for merging with #Configuration.\n\nSudo will union the user's umask value with its own umask (which defaults to 0022). This prevents sudo from creating files with more open permissions than the user's umask allows. While this is a sane default if no custom umask is in use, this can lead to situations where a utility run by sudo may create files with different permissions than if run by root directly. If errors arise from this, sudo provides a means to fix the umask, even if the desired umask is more permissive than the umask that the user has specified. Adding this (using visudo) will override sudo's default behavior:\n\n```\nDefaults umask = 0022\nDefaults umask_override\n```\n\nThis sets sudo's umask to root's default umask (0022) and overrides the default behavior, always using the indicated umask regardless of what umask the user as set.\n\n"
    }
  ]
}