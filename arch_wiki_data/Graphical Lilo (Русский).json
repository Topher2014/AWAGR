{
  "title": "Graphical Lilo (Русский)",
  "url": "https://wiki.archlinux.org/title/Graphical_Lilo_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Загрузчик LILO (анг. LInux LOader) — устаревший мульти-загрузчик для Linux-подобных систем. Несмотря на то, что он являлся стандартом в течение многих лет, постепенно его использование сошло на нет. На данный момент активная разработка LILO прекращена.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "LILO доступен в пакетах liloAUR и lilo-gitAUR (разрабатываемая версия). LILO работает только на BIOS-системах.\n\nДля установки LILO в MBR, запустите команду lilo (как root).\n\nПеред тем, как запускать установку LILO, не забудьте отредактировать /etc/lilo.conf. Убедитесь, что в параметре root= правильно указан HDD с root-разделом. Например, если root'овый раздел находится на /dev/sda1, тогда в файле конфигурации LILO должно быть указано: root=/dev/sda1. Не забудьте сменить root-параметр для обеих записей 'arch' и 'arch-fallback'.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "LILO можно конфигурировать путем редактирования файла /etc/lilo.conf и последующего запуска команды lilo для применения изменений.\n\nНапоминаем, что необходимо запускать LILO после каждого обновления ядра, иначе можно получить незагружаемую систему при следующем включении компьютера.\n\nБольше информации по настройке LILO можно найти на сайте LILO-mini-HOWTO.\n\n"
    },
    {
      "title": "Пример настройки",
      "level": 2,
      "content": "Типичная конфигурация LILO:\n\n```\n/etc/lilo.conf\n```\n\n```\n#\n# /etc/lilo.conf\n#\n\nboot=/dev/hda\n# This line often fixes L40 errors on bootup\n# disk=/dev/hda bios=0x80\n\ndefault=Arch\ntimeout=100\nlba32\nprompt\ncompact\n\nimage=/boot/vmlinuz-linux\n        label=Arch\n\tappend=\"devfs=nomount\"\n\tvga=788\n        root=/dev/hda2\n        read-only\n\nimage=/boot/vmlinuz-linux\n        label=ArchRescue\n        root=/dev/hda8\n        read-only\n\nother=/dev/hda1\n        label=Windows\n\n# End of file\n```\n\nДля определения возможных VGA-режимов, запустите hwinfo --framebuffer.\n\n"
    },
    {
      "title": "Установка фонового изображения",
      "level": 3,
      "content": "Изначально, подготовим фоновую картинку:\n\n- Откройте необходимый файл в GIMP'е.\n- Сожмите её до размеров 640x480.\n- Переведите изображение в индексированный режим (Изображение > Режим > Индексированный).\n- Выберите \"Создать оптимальную палитру\" (Create optimal palette) и установите 16-цветовой режим. Используйте наиболее подходящий для Вас метод подмешивания шума (dithering method).\n- Откройте диалог \"Цветовая карта\" (Индексированная палитра). Выберите, какие цвета Вы будете использовать в дальнейшем для отображения пунктов, часов и т.д. В файле lilo.conf необходимо ссылаться на цвета по индексу.\n- Экспортируйте изображение в формате *.bmp в папку /boot. В диалоге экспорта установите параметр «Не сохранять данные о цветовом пространстве».\n\nТеперь приступим к редактированию файла lilo.conf. Ниже перечислены некоторые параметры, которыми можно настроить графическое меню. За дополнительной информацией обращайтесь в man lilo.conf.\n\n- bitmap=<bitmap-file> Пропишите здесь имя файла, который Вы подготовили (см. выше).\n- bmp-colors=<fg>,<bg>,<sh>,<hfg>,<hbg>,<hsh>\n\n- bmp-table=<x>,<y>,<ncol>,<nrow>,<xsep>,<spill> В данном параметре указывается место, где будет расположено меню. X и Y - числовые координаты, также можно указывать единицу измерения (англ. p) для использования пиксельных координат.\n- bmp-timer=<x>,<y>,<fg>,<bg>,<sh> В данном параметре описывается местоположение и цвет таймера, который отсчитывает время до загрузки выбранного по умолчанию пункта. Как и в предыдущем случае, цвета - индексы палитры, X и Y - координаты.\n\nПример:\n\n```\nbitmap=/boot/arch-lilo.bmp\nbmp-colors=1,0,8,3,8,1\nbmp-table=250p,150p,1,18\nbmp-timer=250p,350p,3,8,1\n```\n\nСохраните файл lilo.conf, после чего запустите lilo от root'а, перезагрузитесь и наслаждайтесь красотой!\n\n"
    },
    {
      "title": "Хук Pacman",
      "level": 2,
      "content": "Нужно запускать lilo после каждого обновления ядра. Можно использовать хук pacman для автоматизации.\n\nСоздайте каталог /etc/pacman.d/hooks если он ещё не существует.\n\n```\n/etc/pacman.d/hooks/lilo.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nOperation = Remove\nType = Package\nTarget = linux\nTarget = linux-lts\n\n[Action]\nDescription= Run lilo after kernel update\nWhen = PostTransaction\nDepends = lilo\nExec = /usr/bin/lilo\n```\n\n"
    },
    {
      "title": "Ошибка чтения-записи во время загрузки (Read write error)",
      "level": 3,
      "content": "Эта проблема была вызвана изменением в mkinitcpio, что было реакцией на это изменение в systemd. Причина - двойная проверка fsck'ом разделов при монтировании в режиме \"только чтение\" (read only). Для исправления ошибки отредактируйте /etc/lilo.conf и замените 'read only' на 'read write' для обеих arch-записей.\n\nДополнительно - смотрите тему на форуме.\n\n"
    },
    {
      "title": "Не найден Devmapper после обновления ядра",
      "level": 3,
      "content": "Вполне возможно, что после обновления ядра проявится данная ошибка. Для решения, после обновления ядра запустите modprobe dm-mod, и далее, как обычно, lilo.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Список параметров ядра, используемые во время загрузки\n- Список параметров ядра с подробным объяснением и группировкой по опциям ('Консольные загрузочные команды ядра', Linux-ядро в двух словах)\n\n"
    }
  ]
}