{
  "title": "Creating packages for other distributions (Português)",
  "url": "https://wiki.archlinux.org/title/Creating_packages_for_other_distributions_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Criando pacotes\n\nArch é o melhor. Mas você ainda pode querer empacotar para outras distribuições.\n\n"
    },
    {
      "title": "Geral",
      "level": 2,
      "content": "- Virtualização é uma forma óbvia, mas requer manutenção de sistema(s) adicional(is).\n- Use ferramentas de empacotamento específica de distribuição. Exemplos: dh-makeAUR, dpkg (Debian), rpm-tools (Fedora). Atalhos como dpkg-deb pode ser adequado para tarefas menos complexas.\n- Chroot para criar um sistema base dentro (apesar de separada do) Arch. Por exemplo: debootstrap (Debian), dnf (Fedora). Isso foi adicionado para beneficiar a construção em um ambiente mínimo e limpo.\n- Use chroot com ferramentas de empacotamento de uma forma automatizada. Exemplos: pbuilder-ubuntuAUR (Debian).\n- Uma forma diferente de lidar (possivelmente incompatível) com dependências é com vínculo estático. Por favor, note que a maioria das distribuições não gostam dessa prática.\n- A prática comum se aplica independentemente da distribuição usada. Por exemplo, não compilar pacotes como root.\n\n"
    },
    {
      "title": "Debian",
      "level": 2,
      "content": "Debian Packaging Tutorial explica as bases, descrevendo o uso das seguintes ferramentas:\n\n- cowdancer — Interface de cópia e escrita para o pbuilder\n\n- debootstrap — Uma ferramenta usada para criar um sistema base Debian do zero, sem exibir a disponibilidade de dpkg ou apt.\n\n- devscripts — Scripts para facilitara vida de um mantenedor de pacote do Debian\n\n- dh-autoreconf — Complemento ao Debhelper para chamar autoreconf e limpar após a compilação\n\n- dh-make — Ferramenta que converte os arquivos fonte em fonte de pacote do Debian\n\n- dpkg — O gerenciador de pacotes do Debian\n\n- dput — Ferramenta de envio de pacotes do Debian\n\n- equivs — Contorne dependências de pacotes do Debian\n\n- git-buildpackage — Ferramentas do Debian para integrar o sistema de compilação de pacotes com Git\n\n- pbuilder-ubuntu — Ambiente de chroot para compilação de pacotes do Debian\n\n- quilt — Gerencia uma série de patches mantendo rastro de alterações que cada patch faz\n\n"
    },
    {
      "title": "Sobrescrever tratamento de dependências",
      "level": 4,
      "content": "O dpkg não reconhece as dependências instaladas pelo pacman. Isso significa que dpkg-buildpackage geralmente falhará com erros como:\n\n```\ndpkg-checkbuilddeps: Unmet build dependencies: build-essential:native debhelper (>= 8.0.0)\ndpkg-buildpackage: warning: build dependencies/conflicts unsatisfied; aborting\n```\n\nPara contornar isso, use a opção -d:\n\n```\n$ dpkg-buildpackage -d -us -uc\n```\n\nVocê também pode precisar sobrescrever dh_shlibdeps adicionando as seguintes linhas ao debian/rules:\n\n```\noverride_dh_shlibdeps:\n   dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info\n```\n\nNote: **fortemente recomendado** \n\n"
    },
    {
      "title": "Configurar um chroot",
      "level": 4,
      "content": "Veja o How-To do Pbuilder para uma introdução ao pbuilder-ubuntu. O uso de cowdancer, além disso, é recomendado, pois cópia em gravação oferece um benefício de desempenho significativo.\n\n- debian-archive-keyring, ubuntu-keyring e gnupg1AUR são necessários.\n- eatmydata está disponível como libeatmydata. Para evitar erros de LD_PRELOAD, deve ser instalado dentro e fora do chroot. Como os caminhos são diferentes no Arch e Debian, crie os links simbólicos a seguir:\n\n```\n# ln -s /usr/lib/libeatmydata.so.1.1.1 /usr/lib/libeatmydata/libeatmydata.so\n# ln -s /usr/lib/libeatmydata.so.1.1.1 /usr/lib/libeatmydata/libeatmydata.so.1\n```\n\n- Exemplo de pbuilderrc\n- Para criar um pacote fonte para o pbuilder lidar:\n\n```\n$ dpkg-buildpackage -d -us -uc -S\n```\n\n"
    },
    {
      "title": "Veja também sobre o Debian",
      "level": 3,
      "content": "- Política do Debian\n- Novo Guia do Mantenedor\n- Quilt no empacotamento do Debian\n\n"
    },
    {
      "title": "Fedora",
      "level": 2,
      "content": "Como criar um pacote RPM\n\n- rpm-tools — Fork do RPM.org, usado na maioria das distros RPM\n\n- mock — Pega RPMs fonte e compila RPMs a partir deles em um chroot\n\n"
    },
    {
      "title": "Veja também sobre o Fedora",
      "level": 3,
      "content": "- Copr\n\n"
    },
    {
      "title": "openSUSE",
      "level": 2,
      "content": "O Open Build Service (OBS) é um sistema genérico para criar e distribuir pacotes de fontes de uma maneira automática, consistente e reproduzível. Suporta pelo menos pacotes .deb, .rpm e Arch.\n\n"
    },
    {
      "title": "Criando um pacote",
      "level": 4,
      "content": "1. Crie uma conta no [1]\n1. Instale o pacote oscAUR. A documentação upstream está disponível aqui.\n1. Crie um projeto exemplo home:foo.\n1. Crie um subprojeto exemplo home:foo:bar (opcional, mas recomendável).\n1. Crie um novo pacote exemplo ham com osc meta pkg -e home:foo:bar ham. Salve o XML criado e, então, sai.\n1. Mude para um diretório de trabalho limpe e, então, façacheckout do projeto que você acabou de criar: osc co home:foo:bar/ham.\n1. Agora, use cd para ir entrar nele: cd home:foo:bar/ham.\n\n"
    },
    {
      "title": "Gerenciando um pacote",
      "level": 4,
      "content": "Agora é hora de decidir como administraremos nosso projeto. Existem duas maneiras práticas de fazer isso:\n\n1. Manter um PKGBUILD mais seus arquivos auxiliares (como scripts *.install) em um sistema de controle de versão (como git, hg) e faça o OBS rastreá-lo;\n1. Manter um pacote inteiramente no próprio OBS.\n\nA primeira versão é mais flexível e dinâmica. Para prosseguir:\n\n- A partir do diretório do seu projeto, crie um arquivo _service com o seguinte conteúdo:\n\n```\n<services>\n  <service name=\"tar_scm\">\n    <param name=\"scm\">git</param>\n    <param name=\"url\">git://<seu_repo_aqui></param>\n    <param name=\"versionformat\">git%cd~%h</param>\n    <param name=\"versionprefix\"><sua_versão_aqui></param>\n    <param name=\"filename\"><nome_do_seu_pacote></param>\n  </service>\n  <service name=\"recompress\">\n    <param name=\"file\">*.tar</param>\n    <param name=\"compression\">xz</param>\n  </service>\n  <service name=\"set_version\"/>\n</services>\n```\n\nAqui está um exemplo para gimp-gitAUR:\n\n```\n<services>\n  <service name=\"tar_scm\">\n    <param name=\"scm\">git</param>\n    <param name=\"url\">git://git.gnome.org/gimp.git</param>\n    <param name=\"versionformat\">git%cd~%h</param>\n    <param name=\"versionprefix\">2.9.1</param>\n    <param name=\"filename\">gimp-git</param>\n  </service>\n  <service name=\"recompress\">\n    <param name=\"file\">*.tar</param>\n    <param name=\"compression\">xz</param>\n  </service>\n  <service name=\"set_version\"/>\n</services>\n```\n\n- Faça o OBS rastreá-lo: osc add _service\n- Se você tiver outros arquivos para incluir no repositório, apenas continue como antes: adicione os arquivos no diretório do projeto e faça a OBS rastreá-los (o OBS usa o subversion como seu SCM subjacente, portanto, esse processo pode já ser familiar para você)\n- Faça check-in (=upload) seus arquivos no repo osc ci -m \"mensagem de commit (p.ex., atualiza pacote xxx para versão yyy\".\n\nAgora, após um tempo, OBS vai começar a compilar seu pacote.\n\n"
    },
    {
      "title": "Dicas e truques sobre o openSUSE",
      "level": 4,
      "content": "- Para ver o progresso da compilação do seu pacote, faça cd para seu diretório de trabalho, então: osc results.\n- Há três repositórios, Arch:Core, Arch:Extra e Arch:Community. [community] pode ser anexado como um \"caminho de repositório\" após adicionar o repositório principal do Arch ao projeto.\n\n"
    },
    {
      "title": "Programa com o pacote ca-certificates-utils",
      "level": 4,
      "content": "Se a criação do OBS falhar por causa do pacote ca-certificates-utils, você poderá adicionar essa linha à configuração do seu projeto (na página do projeto, vá para Advanced -> Project Config).\n\n```\nPrefer: ca-certificates-utils ca-certificates\n```\n\n"
    },
    {
      "title": "Veja também sobre o openSUSE",
      "level": 4,
      "content": "- Repo exemplo: cpu-x-git\n- Diretrizes de empacotamentos do openSUSE\n- Portal:Packaging do wiki do openSUSE\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- BBS - PKGBUILD equivalentes para outras distros\n- BBS - Discussão original\n\n"
    }
  ]
}