{
  "title": "PostgreSQL (Русский)",
  "url": "https://wiki.archlinux.org/title/PostgreSQL_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- PhpPgAdmin\n\nPostgreSQL — это поддерживаемая сообществом система управления базами данных с открытым исходным кодом.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет postgresql. Он также создаст системного пользователя postgres.\n\nДля переключения в пользователя postgres можно использовать программу для повышения привилегий.\n\nДля переключения в пользователя postgres можно использовать одну из следующих команд:\n\n- Если у вас есть sudo и ваш пользователь прописан в sudoers: $ sudo -iu postgres\n- Или через su: $ su # su -l postgres\n\n```\n$ sudo -iu postgres\n```\n\n```\n$ su\n# su -l postgres\n```\n\nСмотрите также документацию sudo(8) или su(1).\n\n"
    },
    {
      "title": "Начальная настройка",
      "level": 2,
      "content": "В первую очередь необходимо инициализировать кластер баз данных:\n\n```\n[postgres]$ initdb -D /var/lib/postgres/data\n```\n\nГде опция -D указывает на стандартное расположение данных кластера (если вы хотите использовать другой каталог, смотрите раздел #Изменение стандартного каталога данных). initdb принимает дополнительные аргументы:\n\n- По умолчанию локаль и кодировка для кластера баз данных наследуются из вашего текущего окружения (используется значение $LANG). Если вас это не устраивает, вы можете прописать нужные параметры вручную с помощью опций --locale=локаль (где локаль должна быть одной из доступных системных локалей) и --encoding=кодировка для выбора кодировки (должна соответствовать выбранной локали). (После настройки базы данных вы сможете посмотреть используемые значения командой [postgres]$ psql -l.)\n- Если каталог с данными расположен на файловой системе без контроля целостности данных, вы можете включить встроенный в PostgreSQL подсчёт контрольных сумм для повышения гарантий целостности — для этого добавьте аргумент --data-checksums. Дополнительная информация описана в разделе #Включение подсчёта контрольных сумм. (После настройки базы данных вы сможете посмотреть. включена ли эта функция, командой [postgres]$ psql -c \"SHOW data_checksums\".)\n- Другие доступные опции можно посмотреть в initdb --help или официальной документации.\n\nПример для русской локали:\n\n```\n[postgres]$ initdb --locale=ru_RU.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data --data-checksums\n```\n\nПосле инициализации на экране появится много строчек, некоторых из которых оканчиваются на ... ок:\n\n```\nФайлы, относящиеся к этой СУБД, будут принадлежать пользователю \"postgres\".\nОт его имени также будет запускаться процесс сервера.\n\nКластер баз данных будет инициализирован с локалью \"ru_RU.UTF-8\".\nКодировка БД по умолчанию, выбранная в соответствии с настройками: \"UTF8\".\nВыбрана конфигурация текстового поиска по умолчанию \"russian\".\n\nКонтроль целостности страниц данных отключён.\n\nисправление прав для существующего каталога /var/lib/postgres/data... ок\nсоздание подкаталогов... ок\nвыбирается реализация динамической разделяемой памяти... posix\nвыбирается значение max_connections по умолчанию... 100\nвыбирается значение shared_buffers по умолчанию... 128MB\nвыбирается часовой пояс по умолчанию... Europe/Moscow\nсоздание конфигурационных файлов... ок\nвыполняется подготовительный скрипт... ок\nвыполняется заключительная инициализация... ок\nсохранение данных на диске... ок\n\ninitdb: предупреждение: включение метода аутентификации \"trust\" для локальных подключений\nДругой метод можно выбрать, отредактировав pg_hba.conf или используя ключи -A,\n--auth-local или --auth-host при следующем выполнении initdb.\n\nГотово. Теперь вы можете запустить сервер баз данных:\n\n    pg_ctl -D /var/lib/postgres/data -l файл_журнала start\n```\n\nЕсли вы видите подобное, значит инициализация прошла успешно. Можно вернуться в обычного пользователя, выполнив команду exit в сеансе пользователя postgres.\n\n- Если база данных располагается на файловой системе Btrfs, стоит отключить копирование при записи для каталога перед созданием любых баз данных.\n- Если база данных располагается на файловой системе ZFS, прочтите ZFS#Databases перед созданием любых баз данных.\n\nНаконец, запустите и включите службу postgresql.service.\n\n"
    },
    {
      "title": "Создание первой базы данных",
      "level": 2,
      "content": "Становимся пользователем postgres. Добавляем нового пользователя базы данных с помощью команды createuser:\n\n```\n[postgres]$ createuser --interactive\n```\n\nСоздаём новую базу данных от имени пользователя, имеющего доступ на чтение-запись, с помощью команды createdb (выполните эту команду в оболочке вашего обычного пользователя, если имя будущего владельца базы данных совпадает с вашим именем пользователя в Linux, в ином случае добавьте опцию -O имя-пользователя)\n\n```\n$ createdb имяМоейБазы\n```\n\n"
    },
    {
      "title": "Доступ к оболочке базы данных",
      "level": 3,
      "content": "Становимся postgres пользователем. Запускаем основную оболочку базы данных psql, в которой мы сможем создавать, удалять базы данных/таблицы, задавать права и запускать команды SQL. Используйте опцию -d, чтобы указать название базы данных, которую вы создали (если опцию не указать, то psql попытается подключиться к базе, имя которой совпадает с именем пользователя).\n\n```\n[postgres]$ psql -d имяМоейБазы\n```\n\nНекоторые полезные команды:\n\nПолучение справки:\n\n```\n=> \\help\n```\n\nПодключение к определённой базе данных:\n\n```\n=> \\c <database>\n```\n\nСписок всех пользователей и их уровни доступа:\n\n```\n=> \\du\n```\n\nКраткая информация о всех таблицах в текущей базе данных:\n\n```\n=> \\dt\n```\n\nВыход из оболочки psql:\n\n```\n=> \\q или CTRL+d\n```\n\nЕсть, конечно, много других мета-команд, но именно эти должны помочь вам начать работу. Для просмотра всех мета-команд введите:\n\n```\n=> \\?\n```\n\n"
    },
    {
      "title": "Дополнительные настройки",
      "level": 2,
      "content": "Файл настроек сервера баз данных PostgreSQL — postgresql.conf. Этот файл находится в папке данных сервера, обычно /var/lib/postgres/data. В этой же папке находятся основные файлы настроек включая и pg_hba.conf, который определяет параметры аутентификации, как для локальных пользователей, так и для пользователей с других хостов.\n\n"
    },
    {
      "title": "Ограничение доступа к суперпользователю по умолчанию",
      "level": 3,
      "content": "По умолчанию pg_hba.conf разрешает подключение любого локального пользователя к любому пользователю базы данных, в том числе суперпользователю. Скорее всего это не то, что вам нужно, поэтому, чтобы разрешить подключение только пользователю postgres, измените эту строку:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n```\n\nНа эту:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             postgres                                peer\n```\n\nМожно добавить дополнительные строки в зависимости от ваших потребностей.\n\n"
    },
    {
      "title": "Требование пароля при входе",
      "level": 3,
      "content": "Измените /var/lib/postgres/data/pg_hba.conf, прописав метод аутентификации для каждого пользователя (или «all» для всех пользователей) на scram-sha-256 (предпочтительно) или md5 (менее безопасно; по возможности стоит его избегать):\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             пользователь                            scram-sha-256\n```\n\nЕсли вы выбрали scram-sha-256, также нужно изменить /var/lib/postgres/data/postgresql.conf:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\npassword_encryption = scram-sha-256\n```\n\nПерезапустите службу postgresql.service и заново пропишите пароли для пользователей с помощью SQL-запроса ALTER USER пользователь WITH ENCRYPTED PASSWORD 'пароль';.\n\n"
    },
    {
      "title": "Доступ только через Unix-сокет",
      "level": 3,
      "content": "В разделе «connections and authentication» пропишите:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nlisten_addresses = ''\n```\n\nЭто полностью отключит доступ через сеть. Не забудьте перезапустить службу postgresql.service для применения изменений.\n\n"
    },
    {
      "title": "Доступ с удалённых хостов",
      "level": 3,
      "content": "В разделе «connections and authentication» раскомментируйте или исправьте строку listen_addresses по вашему желанию, например:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nlisten_addresses = 'localhost,мой_локальный_ip'\n```\n\nМожно использовать '*' для прослушивания всех доступных сетевых интерфейсов.\n\nЗатем измените настройки аутентификации:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n# IPv4 local connections:\nhost    all             all             ip_адрес/32             md5\n```\n\nгде ip_адрес — IP-адрес удалённого клиента.\n\nСмотрите также документацию по pg_hba.conf.\n\nПерезапустите службу postgresql.service для применения изменений.\n\nВ случае проблем посмотрите журнал сервера:\n\n```\n# journalctl -u postgresql.service\n```\n\n"
    },
    {
      "title": "Настройка аутентификации через PAM",
      "level": 3,
      "content": "PostgreSQL предлагает несколько методов аутентификации. Если вы хотите разрешить пользователям аутентифицироваться с их системным паролем, необходимы дополнительные шаги. Сначала вам нужно включить PAM для соединения.\n\nНапример, та же конфигурация, что и выше, но с включенным PAM:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# IPv4 local connections:\nhost   all   all   ip_адрес/32   pam\n```\n\nОднако сервер PostgreSQL работает без прав root и не сможет получить доступ к файлу /etc/shadow. Мы можем обойти это, разрешив группе postgres доступ к этому файлу:\n\n```\n# setfacl -m g:postgres:r /etc/shadow\n```\n\n"
    },
    {
      "title": "Изменение стандартного каталога данных",
      "level": 3,
      "content": "По умолчанию PostgreSQL настроен на использование каталога /var/lib/postgres/data для хранения всех баз данных. Для его изменения выполните следующие шаги:\n\nСоздайте новый каталог и сделайте пользователя postgres его владельцем:\n\n```\n# mkdir -p /путь/к/pgroot/data\n# chown -R postgres:postgres /путь/к/pgroot\n```\n\nВойдите в пользователя postgres и выполните инициализацию кластера:\n\n```\n[postgres]$ initdb -D /путь/к/pgroot/data\n```\n\nОтредактируйте службу postgresql.service, создав drop-in файл и переопределив настройки Environment и PIDFile. Например:\n\n```\n/etc/systemd/system/postgresql.service.d/PGROOT.conf\n```\n\n```\n[Service]\nEnvironment=PGROOT=/путь/к/pgroot\nPIDFile=/путь/к/pgroot/data/postmaster.pid\n```\n\nЕсли вы хотите использовать каталог в /home, добавьте ещё одну строку:\n\n```\nProtectHome=false\n```\n\n"
    },
    {
      "title": "Изменение кодировки новых баз данных на UTF-8",
      "level": 3,
      "content": "Когда создаётся новая база данных (например, командой createdb blog), PostgreSQL просто копирует шаблон базы данных. Есть два стандартных шаблона: template0 — ванильный, и template1, который используется по умолчанию и предназначен для редактирования администратором. Один из вариантов изменения кодировки новой базы данных — изменить шаблон template1. Для этого зайдите в оболочку PostgreSQL (psql) и выполните следующее:\n\nСперва нужно удалить template1. Шаблоны нельзя удалять, так что сперва нужно преобразовать его в обычную базу данных:\n\n```\nUPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';\n```\n\nТеперь можно удалить:\n\n```\nDROP DATABASE template1;\n```\n\nЗатем создайте новую базу данных с новой кодировкой по умолчанию, в качестве шаблона используя template0:\n\n```\nCREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';\n```\n\nТеперь снова сделайте template1 шаблоном:\n\n```\nUPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';\n```\n\nПо желанию, если вы не хотите, чтобы кто-либо подключался к этому шаблону, присвойте параметру datallowconn значение FALSE:\n\n```\nUPDATE pg_database SET datallowconn = FALSE WHERE datname = 'template1';\n```\n\nТеперь вы можете создать базу данных, используя стандартные команды в терминале:\n\n```\n[postgres]$ createdb blog\n```\n\nЕсли снова войти в psql и проверить базу данных, вы должны увидеть правильную кодировку новой базы данных:\n\n```\n\\l\n```\n\n```\nList of databases\n  Name    |  Owner   | Encoding  | Collation | Ctype |   Access privileges\n-----------+----------+-----------+-----------+-------+----------------------\nblog      | postgres | UTF8      | C         | C     |\npostgres  | postgres | SQL_ASCII | C         | C     |\ntemplate0 | postgres | SQL_ASCII | C         | C     | =c/postgres\n                                                     : postgres=CTc/postgres\ntemplate1 | postgres | UTF8      | C         | C     |\n```\n\n"
    },
    {
      "title": "Включение подсчёта контрольных сумм",
      "level": 3,
      "content": "Если файлы вашей базы данных находятся на файловой системе, которая не использует контрольные суммы, то данные в ней могут незаметно повреждаться из-за битфлипов и аппаратных проблем. Хотя такие случаи редки, желательно включить встроенный в PostgreSQL подсчёт контрольных сумм, если вы заботитесь о целостности данных. Эта функция должна быть включена на уровне кластера, а не для отдельных баз данных или таблиц.\n\n- Есть небольшое влияние на производительность, особенно при чтении больших массивов данных с диска. На операции в памяти это не влияет.\n- PostgreSQL не может исправить повреждённые данные — он только прервёт транзакции, читающие с повреждённых страниц, чтобы предотвратить дальнейшее повреждение или получение некорректных результатов выполнения.\n- Контрольные суммы охватывают только страницы данных (строк) на диске, но не метаданные или управляющие структуры. Страницы в памяти не проверяются. Хранилища с коррекцией ошибок и память с ECC по-прежнему полезны.\n\n- Чтобы включить подсчёт контрольных сумм при создании кластера, добавьте аргумент --data-checksums к команде initdb.\n- Чтобы проверить, включен ли подсчёт контрольных сумм, выполните [postgres]$ psql -c \"SHOW data_checksums\" (выведется off или on).\n- Чтобы включить подсчёт контрольных сумм на существующем кластере:\n\n1. Остановите службу postgresql.service.\n1. Выполните команду [postgres]$ pg_checksums --pgdata /var/lib/postgres/data --enable (или --disable, если вы хотите наоборот выключить эту функцию). Включение подсчёта контрольных сумм приведёт к перезаписи всех страниц базы данных, что займет некоторое время в больших базах данных.\n1. Запустите службу postgresql.service.\n\n"
    },
    {
      "title": "Графические инструменты",
      "level": 2,
      "content": "- phpPgAdmin — Веб-интерфейс для администрирования PostgreSQL.\n\n- pgAdmin — Комплексный графический интерфейс для управления PostgreSQL.\n\n- pgModeler — Инструмент для моделирования баз данных PostgreSQL.\n\nСписок инструментов, поддерживающих несколько разных СУБД, можно посмотреть в статье List of applications/Documents#Database tools.\n\n"
    },
    {
      "title": "Обновление PostgreSQL",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nДля обновления до новой мажорной версии PostgreSQL (например, с версии 13.x на версию 14.y) необходима специальная процедура.\n\nПосмотреть текущую версию базы данных можно так:\n\n```\n# cat /var/lib/postgres/data/PG_VERSION\n```\n\nЧтобы случайно не обновиться до несовместимой версии, рекомендуется запретить обновления пакетов PostgreSQL.\n\nМинорные обновления вполне безопасны. Однако если вы случайно обновитесь до другой мажорной версии, то не сможете получить доступ к данным. Всегда проверяйте домашнюю страницу PostgreSQL, чтобы знать, какие шаги требуются для каждого обновления. Чтобы узнать, почему это так, смотрите политику управления версиями.\n\nЕсть два основных способа обновить базу данных PostgreSQL. Подробности читайте в официальной документации.\n\n"
    },
    {
      "title": "pg_upgrade",
      "level": 3,
      "content": "Утилита pg_upgrade пытается скопировать как можно больше совместимых данных между кластерами и обновить всё остальное. Как правило, это самый быстрый метод обновления большинства экземпляров, хотя он требует доступа к бинарным файлам исходной и целевой версий PostgreSQL. Прочтите справочную страницу pg_upgrade(1), чтобы понять, какие действия он выполняет. Для нетривиальных экземпляров (например, с потоковой репликацией или трансляцией журналов) сперва ознакомьтесь с официальной документацией.\n\nДля тех, кто хочет использовать pg_upgrade, доступен пакет postgresql-old-upgrade, который всегда отстаёт на одну мажорную версию от основного пакета PostgreSQL. Его можно установить параллельно с новой версией PostgreSQL. Для обновления более старых версий PostgreSQL доступны пакеты AUR, например postgresql-12-upgradeAUR. (Нужно использовать команду pg_upgrade из той версии PostgreSQL, на которую вы хотите обновиться.)\n\nОбратите внимание, что каталог кластера баз данных не меняется от версии к версии, поэтому перед запуском pg_upgrade необходимо переименовать старый каталог данных и выполнить миграцию в новый каталог. Новый кластер баз данных необходимо инициализировать с теми же параметрами, что и старый.\n\nКогда вы будете готовы к обновлению, выполните следующие шаги:\n\n1. Пока старая база данных всё ещё доступна, соберите аргументы для команды initdb, которые использовались при создании базы. Команды для просмотра текущих настроек кластера описаны в разделе #Начальная настройка.\n1. Остановите службу postgresql.service. (Проверьте статус юнита, чтобы убедиться, что PostgreSQL завершился корректно, иначе pg_upgrade не сможет отработать корректно.)\n1. Обновите пакеты postgresql, postgresql-libs и postgresql-old-upgrade.\n1. Переименуйте каталог со старым кластером и создайте каталог для нового кластера и временный каталог: # mv /var/lib/postgres/data /var/lib/postgres/olddata # mkdir /var/lib/postgres/data /var/lib/postgres/tmp # chown postgres:postgres /var/lib/postgres/data /var/lib/postgres/tmp [postgres]$ cd /var/lib/postgres/tmp\n1. Инициализируйте новый кластер командой initdb с теми же аргументами, которые использовались для старого кластера: [postgres]$ initdb -D /var/lib/postgres/data --locale=ru_RU.UTF-8 --encoding=UTF8 --data-checksums\n1. Обновите кластер, выполнив эту команду (замените PG_VERSION на номер старой версии, например 13): [postgres]$ pg_upgrade -b /opt/pgsql-PG_VERSION/bin -B /usr/bin -d /var/lib/postgres/olddata -D /var/lib/postgres/data Примечание: Не забудьте обновить файлы конфигурации (например, pg_hba.conf и postgresql.conf) для соответствия старому кластеру. Примечание: Если pg_upgrade завершается с ошибкой The source cluster was not shut down cleanly, значит PostgreSQL не был остановлен перед запуском обновления. Остановите его, затем перезапустите кластер со старыми бинарными файлами, чтобы восстановить старые файлы кластера: [postgres]$ /opt/pgsql-PG_VERSION/bin/pg_ctl start -D /var/lib/postgres/olddata && /opt/pgsql-PG_VERSION/bin/pg_ctl stop -D /var/lib/postgres/olddata После этого можно снова выполнить pg_upgrade. Если обновиться всё равно не получается, остановите все процессы СУБД, откатитесь на более старую версию PostgreSQL, восстановите предыдущие данные кластера из резервных копий и перезапустите процесс обновления.\n1. Запустите службу postgresql.service.\n1. Опционально: Выполните [postgres]$ /usr/bin/vacuumdb --all --analyze-in-stages для пересчёта статистики анализатора запросов, что должно улучшить производительность запросов вскоре после обновления (добавление аргумента --jobs=ЧИСЛО_ЯДЕР_ПРОЦЕССОРА может улучшить производительность этой команды).\n1. Опционально: Сделайте резервную копию каталога /var/lib/postgres/olddata на случай, если вдруг понадобится вернуть старую версию PostgreSQL.\n1. Удалите каталог /var/lib/postgres/olddata со старыми данными кластера.\n1. Удалите каталог /var/lib/postgres/tmp.\n\n```\n# mv /var/lib/postgres/data /var/lib/postgres/olddata\n# mkdir /var/lib/postgres/data /var/lib/postgres/tmp\n# chown postgres:postgres /var/lib/postgres/data /var/lib/postgres/tmp\n[postgres]$ cd /var/lib/postgres/tmp\n```\n\n```\n[postgres]$ initdb -D /var/lib/postgres/data --locale=ru_RU.UTF-8 --encoding=UTF8 --data-checksums\n```\n\n```\n[postgres]$ pg_upgrade -b /opt/pgsql-PG_VERSION/bin -B /usr/bin -d /var/lib/postgres/olddata -D /var/lib/postgres/data\n```\n\n```\n[postgres]$ /opt/pgsql-PG_VERSION/bin/pg_ctl start -D /var/lib/postgres/olddata && /opt/pgsql-PG_VERSION/bin/pg_ctl stop -D /var/lib/postgres/olddata\n```\n\n"
    },
    {
      "title": "Выгрузка и загрузка вручную",
      "level": 3,
      "content": "Ещё можно сделать что-то вроде такого (после обновления и установки postgresql-old-upgrade):\n\n- В примере показано обновление с PostgreSQL 13; посмотрите в /opt/ установленную у вас версию postgresql-old-upgrade и исправьте команды по необходимости.\n- Если вы меняли файл pg_hba.conf, вам может понадобиться временно разрешить полный доступ к старому кластеру с локальной системы. После обновления не забудьте прописать нужные вам настройки в новом кластере и перезапустить службу postgresql.service.\n\nОстановите службу postgresql.service.\n\n```\n# mv /var/lib/postgres/data /var/lib/postgres/olddata\n# mkdir /var/lib/postgres/data\n# chown postgres:postgres /var/lib/postgres/data\n[postgres]$ initdb -D /var/lib/postgres/data\n[postgres]$ /opt/pgsql-13/bin/pg_ctl -D /var/lib/postgres/olddata/ start\n# cp /usr/lib/postgresql/postgis-3.so /opt/pgsql-13/lib/ # Только если установлен postgis\n[postgres]$ pg_dumpall -h /tmp -f /tmp/old_backup.sql\n[postgres]$ /opt/pgsql-13/bin/pg_ctl -D /var/lib/postgres/olddata/ stop\n```\n\nЗапустите службу postgresql.service.\n\n```\n[postgres]$ psql -f /tmp/old_backup.sql postgres\n```\n\n"
    },
    {
      "title": "Ускорение мелких транзакций",
      "level": 3,
      "content": "Если вы используете PostgreSQL на своей локальной машине для разработки и он медленный, то можете попробовать отключить synchronous_commit в конфигурации. Однако, не забывайте про его особенности.\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nsynchronous_commit = off\n```\n\n"
    },
    {
      "title": "Запретить запись на диск во время бездействия",
      "level": 3,
      "content": "PostgreSQL периодически обновляет свою статистику, лежащую в файле. По умолчанию этот файл находится на диске, что не даёт отдыхать жёсткому диску (и изнашивает его), заставляя его шуметь. Однако можно легко и безопасно переместить статистику в ОЗУ с помощью такой настройки:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nstats_temp_directory = '/run/postgresql'\n```\n\n"
    },
    {
      "title": "Проблемы с pgAdmin 4 после обновления до PostgreSQL 12",
      "level": 3,
      "content": "Если вы видите ошибки вроде string indices must be integers при навигации по дереву слева или column rel.relhasoids does not exist при просмотре данных, удалите сервер из списка соединений в pgAdmin и добавьте его заново. Без этого pgAdmin продолжает считать его сервером PostgreSQL 11, что и приводит к таким ошибкам.\n\n"
    },
    {
      "title": "PostgreSQL не может запуститься после обновления пакета при использовании расширений",
      "level": 3,
      "content": "Причина скорее всего в том, что существующий пакет не скомпилирован для новой версии (а она может быть актуальной), решение — пересобрать пакет вручную или дождаться обновления пакета расширения.\n\n"
    },
    {
      "title": "Не удаётся запустить PostgreSQL со старой версией базы данных при обновлении до новой версии с расширениями",
      "level": 3,
      "content": "Это происходит потому, что старая версия postgres из пакета postgresql-old-upgrade не имеет необходимых расширений (.so файлов) в своём каталоге lib. Предлагаемое здесь решение грязное и может вызвать много проблем, поэтому сохраните резервную копию базы данных на всякий случай. В целом, скопируйте необходимые .so файлы расширений из /usr/lib/postgresql/ в /opt/pgsql-XX/lib/ (не забудьте заменить XX на мажорную версию пакета postgresql-old-upgrade).\n\nНапример, для timescaledb:\n\n```\n# cp /usr/lib/postgresql/timescaledb*.so /opt/pgsql-13/lib/\n```\n\nЧтобы узнать точные файлы для копирования, посмотрите содержимое пакета расширения с помощью команды:\n\n```\n$ pacman -Ql имя_пакета\n```\n\n"
    }
  ]
}