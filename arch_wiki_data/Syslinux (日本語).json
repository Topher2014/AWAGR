{
  "title": "Syslinux (日本語)",
  "url": "https://wiki.archlinux.org/title/Syslinux_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Arch ブートプロセス\n\nSyslinux は、ドライブ、CD、および PXE 経由でネットワーク経由でブートできるブート ローダーのコレクションです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 サポートされているファイルシステム\n- 2 インストール\n- 3 Syslinux ブートローダーのインストール 3.1 BIOS システム 3.1.1 自動 3.1.2 手動 3.1.2.1 MBR パーティションテーブル 3.1.2.2 GUID パーティションテーブル 3.2 UEFI システム 3.2.1 UEFI Syslinux の制限 3.2.2 UEFI でのインストール\n- 4 設定 4.1 サンプル 4.1.1 ブートプロンプト 4.1.2 テキストブートメニュー 4.1.3 グラフィカルブートメニュー 4.2 カーネルパラメータ 4.3 自動ブート 4.4 セキュリティ 4.5 チェインロード 4.5.1 パーティションの VBR をチェインロードする 4.5.2 ディスクの MBR をチェインロードする 4.5.3 他のブートローダをチェインロードする 4.5.4 他の Linux システムをチェインロードする 4.6 memtest を使う 4.7 HDT 4.8 再起動と電源オフ 4.9 メニューをクリアする 4.10 キーボードリマッピング 4.11 メニューを隠す 4.12 PXELINUX 4.13 memdisk を使って ISO9660 イメージファイルを起動 4.14 シリアルコンソール 4.15 一度だけ別の OS をブートする\n- 5 トラブルシューティング 5.1 Failed to load ldlinux 5.2 Syslinux プロンプトを使う 5.3 Fsck が root パーティションで失敗する 5.4 No Default or UI found on some computers 5.5 Missing operating system 5.6 Syslinux を無視して Windows が起動する 5.7 メニューエントリが動作しない 5.8 ldlinux.sys を削除できない 5.9 vesamenu 使用時に白いブロックが左上に現れる 5.10 Windows を他のドライブにインストールしている時に、チェインロードが動作しない 5.11 ブートローダーログの読み取り 5.12 Btrfs の圧縮 5.13 Btrfs のマルチデバイス\n- 6 参照\n\n- 3.1 BIOS システム 3.1.1 自動 3.1.2 手動 3.1.2.1 MBR パーティションテーブル 3.1.2.2 GUID パーティションテーブル\n- 3.2 UEFI システム 3.2.1 UEFI Syslinux の制限 3.2.2 UEFI でのインストール\n\n- 3.1.1 自動\n- 3.1.2 手動 3.1.2.1 MBR パーティションテーブル 3.1.2.2 GUID パーティションテーブル\n\n- 3.1.2.1 MBR パーティションテーブル\n- 3.1.2.2 GUID パーティションテーブル\n\n- 3.2.1 UEFI Syslinux の制限\n- 3.2.2 UEFI でのインストール\n\n- 4.1 サンプル 4.1.1 ブートプロンプト 4.1.2 テキストブートメニュー 4.1.3 グラフィカルブートメニュー\n- 4.2 カーネルパラメータ\n- 4.3 自動ブート\n- 4.4 セキュリティ\n- 4.5 チェインロード 4.5.1 パーティションの VBR をチェインロードする 4.5.2 ディスクの MBR をチェインロードする 4.5.3 他のブートローダをチェインロードする 4.5.4 他の Linux システムをチェインロードする\n- 4.6 memtest を使う\n- 4.7 HDT\n- 4.8 再起動と電源オフ\n- 4.9 メニューをクリアする\n- 4.10 キーボードリマッピング\n- 4.11 メニューを隠す\n- 4.12 PXELINUX\n- 4.13 memdisk を使って ISO9660 イメージファイルを起動\n- 4.14 シリアルコンソール\n- 4.15 一度だけ別の OS をブートする\n\n- 4.1.1 ブートプロンプト\n- 4.1.2 テキストブートメニュー\n- 4.1.3 グラフィカルブートメニュー\n\n- 4.5.1 パーティションの VBR をチェインロードする\n- 4.5.2 ディスクの MBR をチェインロードする\n- 4.5.3 他のブートローダをチェインロードする\n- 4.5.4 他の Linux システムをチェインロードする\n\n- 5.1 Failed to load ldlinux\n- 5.2 Syslinux プロンプトを使う\n- 5.3 Fsck が root パーティションで失敗する\n- 5.4 No Default or UI found on some computers\n- 5.5 Missing operating system\n- 5.6 Syslinux を無視して Windows が起動する\n- 5.7 メニューエントリが動作しない\n- 5.8 ldlinux.sys を削除できない\n- 5.9 vesamenu 使用時に白いブロックが左上に現れる\n- 5.10 Windows を他のドライブにインストールしている時に、チェインロードが動作しない\n- 5.11 ブートローダーログの読み取り\n- 5.12 Btrfs の圧縮\n- 5.13 Btrfs のマルチデバイス\n\n"
    },
    {
      "title": "サポートされているファイルシステム",
      "level": 2,
      "content": "サポートされているファイルシステムの一部には、FAT、NTFS、ext2、ext3、ext4、XFS、UFS/FFS、および非圧縮のシングルデバイス Btrfs があります。\n\n- Syslinux は 512 バイト以外のセクタサイズを持つ FAT ファイルシステムをサポートしていません。\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "syslinux パッケージをインストールします。\n\nBIOS ブートには、BIOS/GPT 設定のために gptfdisk パッケージと、/boot パーティションが FAT フォーマットされている場合は mtools が必要です。\n\nUEFI ブートには、efibootmgr パッケージのインストールが必要です。\n\n"
    },
    {
      "title": "Syslinux ブートローダーのインストール",
      "level": 2,
      "content": "パッケージのインストールはブートローダーのインストールと同じではありません。関連するパッケージをインストールした後、ブートローダーコード自体をインストールする必要があります（通常は VBR または ESP の適切な領域に）ので、システムをブートできるようになります。以下のセクションでは、特定のシステムの特性に応じた代替手順を提供します。\n\n"
    },
    {
      "title": "BIOS システム",
      "level": 3,
      "content": "BIOS での Syslinux ブート プロセスは段階的に行われます。\n\n1. ステージ 1 : パート 1 - MBR をロードする - 起動時、BIOS は、ディスクの先頭にある 440 バイトの MBR ブートコードをロードします (/usr/lib/syslinux/bios/mbr.bin または /usr/lib/syslinux/bios/gptmbr.bin)。\n1. ステージ 1 : パート 2 - アクティブなパーティションを探索する - ステージ 1 の MBR ブートコードは、アクティブとマークされている (MBR ディスクのブートフラグ) パーティションを探索します。以降は例として、そのパーティションは /boot パーティションであると仮定しましょう。\n1. ステージ 2 : パート 1 - ボリュームブートレコードを実行する - ステージ 1 の MBR ブートコードは、/boot パーティションのボリュームブートレコード (VBR) を実行します。Syslinux の場合、VBR ブートコードは /boot/syslinux/ldlinux.sys (extlinux --install コマンドで作成されます) の開始セクターです。ldlinux.sys は ldlinux.c32 と同じでないことに注意してください。\n1. ステージ 2 : パート 2 - /boot/syslinux/ldlinux.sys を実行する - VBR は、/boot/syslinux/ldlinux.sys の残りをロードします。/boot/syslinux/ldlinux.sys のセクタの位置が変更されてはなりません。さもないと、Syslinux は起動しません。 ノート: Btrfs の場合、ファイルが移動した時に ldlinux.sys のセクタ位置が変わってしまうため上の方法はうまく行きません。従って、Btrfs では他のファイルシステムと異なり、ldlinux.sys コード全体を /boot/syslinux/ldlinux.sys にインストールする代わりに VBR の後の 64KB の領域に埋め込みます。\n1. ステージ 3 - /boot/syslinux/ldlinux.c32 をロードする - /boot/syslinux/ldlinux.sys は syslinux の残りのコアを含んでいる /boot/syslinux/ldlinux.c32 (コアモジュール) をロードします (ファイルサイズの制限のため ldlinux.sys に入らないもの)。ldlinux.c32 は全ての Syslinux 環境で必須であり、パーティションにインストールされている ldlinux.sys とバージョンが一致している必要があります。そうないと Syslinux が起動しません。詳しくは https://bugzilla.syslinux.org/show_bug.cgi?id=7 を見て下さい。\n1. ステージ 4 - 設定ファイルを探索、ロードする - Syslinux が完全にロードされると、設定ファイル /boot/syslinux/syslinux.cfg (もしくは /boot/syslinux/extlinux.conf) が検索されます。設定ファイルが見つかったら、ロードを行います。設定ファイルが存在しない場合、Syslinux の boot: プロンプトが表示されます。このステップ、および Syslinux の非コア部分 (/boot/syslinux/*.c32 モジュール、lib*.c32 と ldlinux.c32 は除く) では、/boot/syslinux/lib*.c32 (ライブラリ) モジュールが存在することを要求します ( https://wiki.syslinux.org/wiki/index.php/Common_Problems#ELF )。lib*.c32 ライブラリモジュールと非コアな *.c32 モジュールは、パーティションにインストールされている *.c32 のバージョンと一致していなければなりません。\n\n"
    },
    {
      "title": "自動",
      "level": 4,
      "content": "syslinux-install_update スクリプトは Syslinux をインストールし、*.c32 モジュールを /boot/syslinux にコピーし、ブートフラグを設定して MBR にブートコードをインストールします。ソフトウェア RAID の MBR や GPT ディスクを扱うことができます。\n\n```\n# syslinux-install_update -i -a -m\n```\n\n- ここでシステムを再起動すると、Syslinux プロンプトが表示されます。自動でシステムを起動したりブートメニューを表示するには、設定ファイルを作成する必要があります。\n- ディスクをクローンして /mnt/clone と読んでいる場合、Arch インストールメディアから次のコマンドを実行して syslinux をインストールしてください:\n\n```\n# syslinux-install_update.sh -i -a -m -c /mnt/clone\n```\n\n"
    },
    {
      "title": "手動",
      "level": 4,
      "content": "- 使っているパーティションテーブルがどっちか (MBR か GPT か) 定かでない場合は、次のコマンドを使うことで確認できます:\n\n```\n# blkid -s PTTYPE -o value /dev/sda\ngpt\n```\n\n- ライブ CD でインストール済みのシステムを復旧しようとしているのならば、これらのコマンドの前に chroot をするようにしてください。chroot を最初にしない場合、(/dev/ パスではない) 全てのファイルパスでマウントポイントを前に付ける必要があります。\n\nSyslinux をインストールする boot パーティションには FAT, ext2, ext3, ext4, Btrfs のいずれかのファイルシステムを含んでなくてはなりません。マウントしたディレクトリ (/dev/sdXY デバイスではありません) にインストールしてください。ファイルシステムの root ディレクトリにインストールする必要はありません (例: /boot にマウント。したデバイス /dev/sda1)。Syslinux を syslinux ディレクトリにインストールすることができます:\n\n```\n# mkdir /boot/syslinux\n# cp /usr/lib/syslinux/bios/*.c32 /boot/syslinux/                          # /usr/lib/syslinux/bios/ から *.c32 ファイルをすべてコピーします、シンボリックリンクでは駄目です\n# extlinux --install /boot/syslinux/\n```\n\nこの後、次のセクションに書かれているように Syslinux のブートコード (mbr.bin もしくは gptmbr.bin) をディスクの Master Boot Record の440バイトのブートコード領域 (MBR や msdos パーティションテーブルとは違います) にインストールしてください。\n\n次にパーティションテーブルで boot パーティションを active にする必要があります。これができるアプリケーションは fdisk, cfdisk, sfdisk, parted/gparted (\"boot\" フラグ) などです。以下のようにしてください:\n\n```\n# fdisk -l /dev/sda\n```\n\n```\n[...]\n  Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048      104447       51200   83  Linux\n/dev/sda2          104448   625142447   312519000   83  Linux\n```\n\nMBR をインストールしてください:\n\n```\n# dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/mbr.bin of=/dev/sda\n```\n\nSyslinux はもうひとつ MBR を提供しています: altmbr.bin。この MBR はブータブルパーティションのスキャンをしません。代わりに、MBR の最終バイトを使ってどのパーティションを起動するか示します。以下は altmbr.bin を所定の位置にコピーする方法の例です:\n\n```\n# printf '\\x5' | cat /usr/lib/syslinux/bios/altmbr.bin - | \\\ndd bs=440 count=1 iflag=fullblock conv=notrunc of=/dev/sda\n```\n\nこの場合、シングルバイトの値5が altmbr.bin の内容に加えられ結果的に440バイトがデバイス sda の MBR に書き込まれます。Syslinux はディスクの最初の論理パーティション (/dev/sda5) にインストールされます。\n\n/boot パーティションでビット2の属性 (\"legacy_boot\" 属性) を設定する必要があります:\n\n```\n# sgdisk /dev/sda --attributes=1:set:2\n```\n\nこのコマンドによってパーティション1の legacy BIOS bootable 属性が切り替わります。確認するには:\n\n```\n# sgdisk /dev/sda --attributes=1:show\n```\n\n```\n1:2:1 (legacy BIOS bootable)\n```\n\nMBR をインストールしてください:\n\n```\n# dd bs=440 conv=notrunc count=1 if=/usr/lib/syslinux/bios/gptmbr.bin of=/dev/sda\n```\n\nこのコマンドが動かない時は次のコマンドを試して下さい:\n\n```\n# syslinux-install_update -i -m\n```\n\n"
    },
    {
      "title": "UEFI システム",
      "level": 3,
      "content": "- efi64 は x86_64 EFI システムを意味します。IA32 (32 ビット) EFI の場合は、以下に示すコマンドで efi64 を efi32 に置き換えてください。\n- Syslinux では、カーネルと initramfs のファイルは、EFI システムパーティション (別名 ESP) 内に配置する必要があります。Syslinux は (現在) 他のファイルシステム内 (この場合、ESP の外) にあるファイルにアクセスする機能を持っていないためです。そのため、ESP を /boot にマウントすることを推奨します。\n- 自動インストールスクリプト /usr/bin/syslinux-install_update は、UEFI インストールをサポートしていません。\n- UEFI での syslinux.cfg 設定ファイルの構文は、BIOS のものと同じです。\n\n"
    },
    {
      "title": "UEFI Syslinux の制限",
      "level": 4,
      "content": "- UEFI Syslinux のメニューで TAB を使ってカーネルパラメータを編集すると表示がおかしくなる場合があります (text on top of one-another)。バグレポート: [2]\n- UEFI Syslinux は UEFI Shell や Windows Boot Manager など他の EFI アプリケーションのチェインロードをサポートしていません。改善リクエスト: [3]\n- QEMU/OVMF、VirtualBox、一部の VMware 製品/バージョン、DUET などの UEFI エミュレーション環境では UEFI Syslinux は起動しないことがあります。VMware Workstation 10.0.2 と Syslinux-6.02 以上では問題ないとされています。バグレポート: [4]、[5]、[6]\n- UEFI では Memdisk は使えません。改善リクエスト: [7]\n\n"
    },
    {
      "title": "UEFI でのインストール",
      "level": 4,
      "content": "- syslinux と efibootmgr パッケージをインストールしてください。そして、以下のように ESP 内に Syslinux をセットアップしてください:\n- Syslinux のファイルを ESP にコピーしてください:\n\n```\n# mkdir -p esp/EFI/syslinux\n# cp -r /usr/lib/syslinux/efi64/* esp/EFI/syslinux\n```\n\n- efibootmgr を使って、Syslinux のブートエントリをセットアップしてください (/dev/sdXY は、ブートローダを含むパーティションです):\n\n```\n# efibootmgr --create --disk /dev/sdX --part Y --loader /EFI/syslinux/syslinux.efi --label \"Syslinux\" --unicode\n```\n\n- #設定 セクションに従って、esp/EFI/syslinux/syslinux.cfg を作成/編集してください。\n\n- UEFI での設定ファイルは esp/EFI/syslinux/syslinux.cfg であり、/boot/syslinux/syslinux.cfg ではありません。/boot/syslinux/ 内のファイルは BIOS 用で UEFI syslinux とは関係ありません。\n- BIOS モードで起動された場合、efibootmgr は EFI の NVRAM エントリを /efi/syslinux/syslinux.efi に設定できません。EFI のデフォルトの場所にリソースを保存してください: esp/EFI/syslinux/* -> esp/EFI/BOOT/* と esp/EFI/syslinux/syslinux.efi -> esp/EFI/BOOT/bootx64.efi。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "Syslinux の設定ファイル, syslinux.cfg は Syslinux をインストールしたディレクトリと同じところに作成する必要があります。このページでは、BIOS 環境は /boot/syslinux/、UEFI 環境は esp/EFI/syslinux/ とします。\n\nブートローダーは syslinux.cfg (推奨) もしくは extlinux.conf を探します。\n\n- LINUX の代わりに、キーワード KERNEL を使うことも可能です。KERNEL はファイルのタイプを検知しようとしますが、LINUX はいつでも Linux カーネルと想定します。\n- TIMEOUT の値の単位は 0.1 秒 です。\n\n"
    },
    {
      "title": "サンプル",
      "level": 3,
      "content": "- 以下の設定ファイルのサンプルは、適宜編集して適切なカーネルパラメータを設定する必要があります。#カーネルパラメータ セクションを見てください。\n- パスには十分注意してください。以下の例はあなたの環境には合わないかもしれません (特に UEFI を使用している場合)。\n- 以下の例では、カーネルと initrd のファイルが syslinux.cfg の場所より1上のディレクトリ階層に存在していると仮定しています (つまり、より正確には、作業ディレクトリより1つ上の階層)。\n\n"
    },
    {
      "title": "ブートプロンプト",
      "level": 4,
      "content": "以下の例は、boot: プロンプトを表示し 5 秒後に自動的に起動するシンプルな設定ファイルです。プロンプトを表示させずに直接起動させたい場合は、PROMPT を 0 に設定してください。\n\n設定:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nPROMPT 1\nTIMEOUT 50\nDEFAULT arch\n\nLABEL arch\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\n"
    },
    {
      "title": "テキストブートメニュー",
      "level": 4,
      "content": "Syslinux ではブートメニューを使うこともできます。ブートメニューを使うには、モジュール menu と libutil を Syslinux のディレクトリにコピーしてください:\n\n```\n# cp /usr/lib/syslinux/bios/{menu,libutil}.c32 /boot/syslinux/\n```\n\nバージョン 5.00 以降、追加の lib*.c32 ライブラリモジュールも頻繁に必要になります。モジュールの依存関係ツリーは Syslinux wiki を見てください。\n\n設定:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nUI menu.c32\nPROMPT 0\n\nMENU TITLE Boot Menu\nTIMEOUT 50\nDEFAULT arch\n\nLABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\nメニューシステムに関する詳細は Syslinux wiki を見てください。\n\n"
    },
    {
      "title": "グラフィカルブートメニュー",
      "level": 4,
      "content": "Syslinux では、グラフィカルなブートメニューも使うことができます。グラフィカルなブートメニューを使うには、vesamenu COM32 モジュールを Syslinux のフォルダーにコピーしてください:\n\n```\n# cp /usr/lib/syslinux/bios/vesamenu.c32 /boot/syslinux/\n```\n\nバージョン 5.00 以降、追加の lib*.c32 ライブラリモジュールも頻繁に必要になります。モジュールの依存関係ツリーは Syslinux wiki を見てください。\n\n以下の設定では、Arch のインストール CD と同じメニューデザインを使用します。インストール CD の設定は gitlab.archlinux.org で入手できます。Arch Linux の背景画像もそこからダウンロードできます。画像を /boot/syslinux/splash.png にコピーしてください。\n\n設定:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nUI vesamenu.c32\nDEFAULT arch\nPROMPT 0\nMENU TITLE Boot Menu\nMENU BACKGROUND splash.png\nTIMEOUT 50\n\nMENU WIDTH 78\nMENU MARGIN 4\nMENU ROWS 5\nMENU VSHIFT 10\nMENU TIMEOUTROW 13\nMENU TABMSGROW 11\nMENU CMDLINEROW 11\nMENU HELPMSGROW 16\nMENU HELPMSGENDROW 29\n\n# https://wiki.syslinux.org/wiki/index.php/Comboot/menu.c32 を参照\n\nMENU COLOR border       30;44   #40ffffff #a0000000 std\nMENU COLOR title        1;36;44 #9033ccff #a0000000 std\nMENU COLOR sel          7;37;40 #e0ffffff #20ffffff all\nMENU COLOR unsel        37;44   #50ffffff #a0000000 std\nMENU COLOR help         37;40   #c0ffffff #a0000000 std\nMENU COLOR timeout_msg  37;40   #80ffffff #00000000 std\nMENU COLOR timeout      1;37;40 #c0ffffff #00000000 std\nMENU COLOR msg07        37;40   #90ffffff #a0000000 std\nMENU COLOR tabmsg       31;40   #30ffffff #00000000 std\n\n\nLABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux.img\n\n\nLABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\nSyslinux 3.84 以降、vesamenu.c32 は MENU RESOLUTION $WIDTH $HEIGHT ディレクティブをサポートしています。 このディレクティブを使うには、MENU RESOLUTION 1440 900 を設定に追加することで、解像度を 1440x900 に設定できます。 ただし、背景画像が正確に同じ解像度である必要があります。解像度が異なる場合、Syslinux はメニューをロードしません。\n\nメニューを中央に配置し解像度を調整するには、MENU RESOLUTION、MENU HSHIFT $N、MENU VSHIFT $N を使ってください。ただし、$N は正の数です。デフォルトの $N の値は両方 0 で、これはモニターの左上を表します。負の値はスクリーンの反対側からとなります (例: VHSHIFT -4 はスクリーンの下から 4 行となります)。\n\nメニューを中央に移動させるには、以下の値を追加/編集してください:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nMENU RESOLUTION 800 600 # or whatever your screen resolution is\nMENU WIDTH 78           # width of the menu also required to bring the menu box to size\nMENU VSHIFT 10          # moves menu down\nMENU HSHIFT 10          # moves menu right\n```\n\nVESA 規格は、一般的には 25 行 80 列が最大で、これらの値より大きくするとメニューがスクリーンからはみ出し、場合によってはレスキュー CD から設定を編集する羽目になります。\n\n"
    },
    {
      "title": "カーネルパラメータ",
      "level": 3,
      "content": "カーネルパラメータ は、syslinux.cfg で APPEND ディレクティブを使って設定します: それぞれの LABEL エントリに対して、最大 1 行の APPEND を受け入れます (つまり、複数の行に分けることはできません)。\n\n以下の変更は、「フォールバック」エントリに対しても行っておくことをおすすめします。\n\n最も単純な場合、root パラメータの値を変更する必要があります。サポートされている形式は 永続的なブロックデバイスの命名 を見てください。\n\n```\nAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw\n```\n\nroot=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX を変更して、正しいルートボリュームを指定してください。\n\ndm-crypt 暗号化をしている場合、APPEND の行を変更して、暗号化されているボリュームを使用してください:\n\n```\nAPPEND root=/dev/mapper/name cryptdevice=UUID=YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY:name rw\n```\n\nbtrfs サブボリュームを起動する場合、APPEND の行を rootflags=subvol=<root subvolume> の用に変更してください。例えば、/dev/disk/by-uuid/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX が 'ROOT' という btrfs サブボリュームとしてマウントされている場合 (例: mount -o noatime,subvol=ROOT /dev/disk/by-uuid/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX /mnt)、APPEND の行を以下のように変更する必要があります:\n\n```\nAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw rootflags=subvol=ROOT\n```\n\nそうしないと、次のエラーメッセージが表示されるでしょう: ERROR: Root device mounted successfully, but /sbin/init does not exist.\n\n"
    },
    {
      "title": "自動ブート",
      "level": 3,
      "content": "Syslinux のメニューを表示したくない場合は、#ブートプロンプト を使い、PROMPT を 0 に設定し、すべての UI メニューエントリをコメントアウトしてください。TIMEOUT 変数を 0 にしても良いでしょう。syslinux.cfg で DEFAULT が設定されていることを確認してください。起動時に Shift または Alt を押すか、Caps Lock または Scroll Lock を有効化することで、デフォルト以外のオプションを使用できるようになります。 他の手段については、上流の wiki を見てください。\n\n"
    },
    {
      "title": "セキュリティ",
      "level": 3,
      "content": "Syslinux には、ブートローダーのセキュリティとして2つのレベルがあります: メニューのマスターパスワードとメニューアイテムごとのパスワードです。syslinux.cfg を編集して、以下のようにブートローダーのマスターパスワードを設定できます:\n\n```\nMENU MASTER PASSWD passwd\n```\n\nまた、LABEL ブロックの中に以下を記述することでブートアイテムを個別にパスワードで保護できます:\n\n```\nMENU PASSWD passwd\n```\n\npasswd は平文かハッシュ値のどちらかを設定できます: 公式のドキュメントを参照してください。\n\n"
    },
    {
      "title": "チェインロード",
      "level": 3,
      "content": "Syslinux BIOS は他のパーティションからファイルを直接チェインロードできませんが、chain.c32 はパーティションのブートセクタ (VBR) や他のディスクの MBR を起動できます。\n\n"
    },
    {
      "title": "パーティションの VBR をチェインロードする",
      "level": 4,
      "content": "他のオペレーティングシステム (Windows など) やブートローダをチェインロードしたい場合は、chain.c32 モジュールを Syslinux ディレクトリにコピーしてください (追加の lib*.c32 ライブラリモジュールも必要かもしれません。前のセクションの指示を見てください)。そして設定ファイルにセクションを作成してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL windows\n\tMENU LABEL Windows\n\tCOM32 chain.c32\n\tAPPEND hd0 3\n...\n```\n\nhd0 3 は、1つ目の BIOS ドライブ上の3つ目のパーティションを指します。ドライブは0からカウントしますが、パーティションは1からカウントします。\n\n"
    },
    {
      "title": "ディスクの MBR をチェインロードする",
      "level": 4,
      "content": "BIOS がどのドライブを \"最初\" とみなすかわからない場合は、代わりに MBR 識別子を (GPT を使用している場合はファイルシステムラベル) 使うこともできます。MBR 識別子を使うには、以下のコマンドを実行してください (/dev/sdb はチェインロードしたいドライブに置き換えてください):\n\n```\n# fdisk -l /dev/sdb\n```\n\n```\nDisk /dev/sdb: 128.0 GB, 128035676160 bytes \n255 heads, 63 sectors/track, 15566 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0xf00f1fd3\n \nDevice Boot      Start         End      Blocks   Id  System\n/dev/sdb1            2048     4196351     2097152    7  HPFS/NTFS/exFAT\n/dev/sdb2         4196352   250066943   122935296    7  HPFS/NTFS/exFAT\n```\n\nディスク識別子では16進数を使用します (この例では 0xf00f1fd3)。syslinux.cfg の構文は以下のようになります:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL windows\n\tMENU LABEL Windows\n\tCOM32 chain.c32\n\tAPPEND mbr:0xf00f1fd3\n...\n```\n\nチェインロードに関する詳細は Syslinux wiki を見てください。\n\n"
    },
    {
      "title": "他のブートローダをチェインロードする",
      "level": 4,
      "content": "同じパーティションに GRUB がインストールされている場合、以下の設定を使用して GRUB をチェインロードできます:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL grub2\n\tMENU LABEL Grub2\n\tCOM32 chain.c32\n\tAPPEND file=../grub/boot.img\n...\n```\n\nあるいは、lnxboot.img を core.img の前に付けて GRUB を Linux カーネルとしてロードすることもできます。lnxboot.img ファイルは core/grub の一部で、/usr/lib/grub/i386-pc の中にあります。\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL grub2lnx\n\tMENU LABEL Grub2 (lnxboot)\n\tLINUX ../grub/i386-pc/lnxboot.img\n\tINITRD ../grub/i386-pc/core.img\n...\n```\n\nこれは、ISO イメージから起動する場合に必要になるかもしれません。\n\n"
    },
    {
      "title": "他の Linux システムをチェインロードする",
      "level": 4,
      "content": "Table content:\nこの記事またはセクションの正確性には問題があります。 理由: Among other inaccuracies... 1_ There is no obligation to install yet another boot loader if you already have one related to the other partition/OS (e.g. GRUB2 installed in the MBR or in the VBR of the partition being chainloaded to). 2_ Syslinux (in any of its derivatives) is never \"installed to the MBR\", so mentioning the MBR in this section without any explanation of what it is being meant or how to do it in practical terms is just adding confusion. 3_ Typos and misspelling. 4_No need to explain (yet again) how to install some (other) bootloader to some (other) partition / OS; just how to chainload from Syslinux to that other partition / bootloader / OS. (議論: トーク:Syslinux#)\n\nWindows など他のブートローダをチェインロードする場合、チェインするべきブートローダが明白に存在します。しかし Syslinux では、設定ファイルと同じパーティションにあるファイルしかロードすることができません。そのため、Linux の他バージョンを異なるパーティションに置いている (/boot を使っていない) ときは、他の OS のブートローダ (例: GRUB2) ではなく Extlinux を利用する必要がでてきます。基本的に、Extlinux はパーティションのスーパーブロック/VBR にインストールができ、Syslinux によってインストールされた MBR から 異なるブートローダ として呼ぶことができます。Extlinux は Syslinux プロジェクトの一部であり syslinux パッケージに含まれています。\n\n以下の手順は既に Syslinux がインストールされていることを前提にしています。また、/boot/syslinux の Arch Linux 設定パスを使っていてチェインロード / は /dev/sda3 にあると仮定しています。\n\n起動した Linux (Syslinux が起動するように設定されたパーティション) から、他の root パーティションを適当なマウントポイントにマウントしてください。ここでは例として /mnt を使います。また、2番目のオペレーティングシステムで /boot パーティションを分割している場合、それもマウントする必要があります。ここでは /dev/sda2 がそのパーティションとします。\n\n```\n# mount /dev/sda3 /mnt\n# mount /dev/sda2 /mnt/boot (only necessary for separate /boot)\n```\n\nExtlinux をインストールして、必要な *.c32 ファイルをコピーしてください:\n\n```\n# extlinux -i /mnt/boot/syslinux/ (first create the directory if necessary)\n# cp /usr/lib/syslinux/bios/*.c32 /mnt/boot/syslinux\n```\n\n/mnt/boot/syslinux/syslinux.cfg を作成してください。他の Linux のブートメニューファイルを参考にすることができます。以下は例です:\n\n```\n/mnt/boot/syslinux/syslinux.cfg on /dev/sda3\n```\n\n```\nTIMEOUT 10\n\nUI menu.c32\n\nLABEL OtherLinux\n\tLINUX /boot/vmlinuz-linux\n\tINITRD /boot/initramfs-linux.img\n\tAPPEND root=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw quiet\n\nLABEL MAIN\n\tCOM32 chain.c32\n\tAPPEND hd0 0\n```\n\nそしてメインの syslinux.cfg にエントリを追加してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL OtherLinux\n\tCOM32 chain.c32\n\tAPPEND hd0 3\n```\n\n<other-OS>/boot/syslinux/syslinux.cfg にある他の Linux エントリは、/ 内の最新のカーネルと initrd へのシンボリックリンクを貼らない限り、その OS のカーネルがアップデートされるたびに編集する必要があります。カーネルを直接ブートし、他の OS のデフォルトのブートローダをチェインロードしないからです。\n\n"
    },
    {
      "title": "memtest を使う",
      "level": 3,
      "content": "公式リポジトリから memtest86+ をインストールしてください。\n\nLABEL セクションを使って memtest を起動してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\n LABEL memtest\n         MENU LABEL Memtest86+\n         LINUX ../memtest86+/memtest.bin\n...\n```\n\n"
    },
    {
      "title": "HDT",
      "level": 3,
      "content": "HDT (Hardware Detection Tool) はハードウェアの情報を表示します。.c32 ファイルを /boot/syslinux/ からコピーする必要があります。 PCI 情報は、/usr/share/hwdata/pci.ids を /boot/syslinux/pci.ids にコピーしてから以下を設定ファイルに追加してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL hdt\n         MENU LABEL Hardware Info\n         COM32 hdt.c32\n```\n\n"
    },
    {
      "title": "再起動と電源オフ",
      "level": 3,
      "content": "以下のセクションを使ってマシンを再起動したり電源オフにできます:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL reboot\n         MENU LABEL Reboot\n         COM32 reboot.c32\n \n LABEL poweroff\n         MENU LABEL Power Off\n         COMBOOT poweroff.com\n```\n\n"
    },
    {
      "title": "メニューをクリアする",
      "level": 3,
      "content": "メニューを終了した時に画面をクリアするには、次の行を追加してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nMENU CLEAR\n```\n\n"
    },
    {
      "title": "キーボードリマッピング",
      "level": 3,
      "content": "ブートパラメータを頻繁に編集する必要があるような場合、キーボードレイアウトのリマップを行うとよいかもしれません。US キーボード以外で \"=\", \"/\" などの文字を打つのが楽になります。\n\nまず互換性のあるキーマップ (例えばドイツ語キーマップ) を作成するには:\n\n```\n# keytab-lilo /usr/share/kbd/keymaps/i386/qwerty/us.map.gz /usr/share/kbd/keymaps/i386/qwertz/de.map.gz > /boot/syslinux/de.ktl\n```\n\nsyslinux.cfg を編集して以下を追加してください:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nKBDMAP de.ktl\n```\n\n詳しくは Syslinux wiki を参照してください。\n\n"
    },
    {
      "title": "メニューを隠す",
      "level": 3,
      "content": "このオプションを使うことでメニューを隠し、タイムアウトだけを表示することができます:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nMENU HIDDEN\n```\n\nどれかキーを押すとメニューが表示されます。\n\n"
    },
    {
      "title": "PXELINUX",
      "level": 3,
      "content": "PXELINUX は syslinux に含まれています。\n\nBIOS クライアントの場合は、lpxelinux.0 と ldlinux.c32 をクライアントのブート ディレクトリにコピーします。\n\n```\n# cp /usr/lib/syslinux/bios/lpxelinux.0 \"TFTP_root/boot/\"\n# cp /usr/lib/syslinux/bios/ldlinux.c32 \"TFTP_root/boot/\"\n# mkdir \"TFTP_root/boot/pxelinux.cfg\"\n```\n\nまた、pxelinux.cfg を作成しましたが、このフォルダはデフォルトで pxelinux によって設定ファイルが検索されます。異なるホスト MAC を区別したくないので、default 設定を作ります。\n\n```\nTFTP_root/boot/pxelinux.cfg/default\n```\n\n```\ndefault linux\n\nlabel linux\nkernel vmlinuz-linux\nappend initrd=initramfs-linux.img quiet ip=:::::eth0:dhcp nfsroot=10.0.0.1:/arch\n```\n\nNBD を使っている場合、次の append 行を使って下さい:\n\n```\nappend ro initrd=initramfs-linux.img ip=:::::eth0:dhcp nbd_host=10.0.0.1 nbd_name=arch root=/dev/nbd0\n```\n\npxelinux の設定構文は syslinux と同じです; 詳しくは上流のドキュメントを参照してください。\n\nカーネルと initramfs は TFTP を使って転送されます。そのためそれらのパスは TFTP の相対パスになります。また、root ファイルシステムは NFS マウントになり、NFS サーバーの相対パスになります。\n\n実際に pxelinux をロードするには、/etc/dhcpd.conf 内の filename \"/grub/i386-pc/core.0\"; を filename \"/pxelinux.0\" に置き換えてください。\n\n"
    },
    {
      "title": "memdisk を使って ISO9660 イメージファイルを起動",
      "level": 3,
      "content": "Syslinux は memdisk モジュールを使って ISO イメージを直接起動できます。詳しくはマルチブート USB ドライブ#Syslinux と memdisk を使うを参照。\n\n"
    },
    {
      "title": "シリアルコンソール",
      "level": 3,
      "content": "シリアルコンソールを有効にするには syslinux.cfg ファイルの一番上に SERIAL port [baudrate] を追加します。\"port\" はポート番号 (/dev/ttyS0 の場合は 0) に置き換えてください。\"baudrate\" を省略すると、デフォルトのボーレートである 9600 bps が使われます。シリアルパラメータはパリティビット無しストップビットひとつの8ビットにハードコードされています [8]。\n\n```\nsyslinux.cfg\n```\n\n```\nSERIAL 0 115200\n```\n\nAPPEND オプションに console=tty0 console=ttyS0,115200n8 を追加することで起動時にカーネルでシリアルコンソールを有効にできます [9]:\n\n```\nsyslinux.cfg\n```\n\n```\nAPPEND root=UUID=126ca36d-c853-4f3a-9f46-cdd49d034ce4 rw console=tty0 console=ttyS0,115200n8\n```\n\nGRUB でシリアルコンソールを有効にする方法はシリアルコンソールを見てください。\n\n"
    },
    {
      "title": "一度だけ別の OS をブートする",
      "level": 3,
      "content": "一時的に Syslinux のデフォルト動作を変更し、次回のブート時にのみ別のラベルをブートすることができます。以下のコマンドは、次回のブート時に archfallback ラベルを一度だけブートする方法を示しています：\n\n```\n# extlinux -o archfallback /boot/syslinux\n```\n\n次回のブート時に、指定されたラベルが Syslinux のプロンプトを表示せずにブートされます。次回の再起動で、Syslinux のデフォルトのブート動作が復元されます。\n\n"
    },
    {
      "title": "Failed to load ldlinux",
      "level": 3,
      "content": "起動時に \"Failed to load ldlinux.c32\" というエラーメッセージが表示される理由は様々なものが考えられます。ファイルシステムツールやファイルシステムの構造の変化がそのひとつです。例えば、新しい ext4 ファイルシステムでは64ビット機能がデフォルトで有効になっています (古いバージョンの mke2fs では手動で設定する必要がある機能でした)。ext4 以外のファイルシステムでも構造やツールに変更が加えられることがあり、ブートローダーの挙動に影響します。\n\n- このメッセージ以外にもファイルシステムの問題と関連するエラーは存在します。\n- メッセージが出たからといって必ずしもファイルシステムに問題があるとは限りません。他の理由も存在し得ます。\n\n詳しくは [10] を参照してください。\n\n"
    },
    {
      "title": "Syslinux プロンプトを使う",
      "level": 3,
      "content": "(syslinux.cfg で設定した) 起動したいエントリの LABEL 名を入力することができます。サンプル設定を使っている場合、次を入力してください:\n\n```\nboot: arch\n```\n\n設定ファイルがロードできないというエラーが表示される場合、必要なブートパラメータを渡すことができます。例:\n\n```\nboot: ../vmlinuz-linux root=/dev/sda2 rw initrd=../initramfs-linux.img\n```\n\nramfs の boot: にアクセスできないと、一時的にカーネルを起動することができません。\n\n```\n# mkdir -p /new_root\n```\n\n```\n# mount /dev/sd[a-z][1-9] /new_root\n```\n\n"
    },
    {
      "title": "Fsck が root パーティションで失敗する",
      "level": 3,
      "content": "root パーティションが破損している (ジャーナルが壊れている) 場合、ramfs の緊急シェルで、root ファイルシステムをマウントしてください:\n\n```\n# mount /dev/root partition /new_root\n```\n\nそして root パーティションから tune2fs バイナリを取得してください (Syslinux には含まれていません):\n\n```\n# cp /new_root/sbin/tune2fs /sbin/\n```\n\next2fs: no external journal の指示に従って root パーティションの新しいジャーナルを作成して下さい。\n\n"
    },
    {
      "title": "No Default or UI found on some computers",
      "level": 3,
      "content": "特定のマザーボードメーカーでは USB デバイスからの起動への対応が遅れています。最近のコンピュータでは起動できる ext4 でフォーマットされた USB ドライブでも、カーネルや initrd が含まれているブートパーティションが FAT16 パーティションでないとフリーズするコンピュータもあります。旧式のマシンが ldlinux をロードして syslinux.cfg の読み込みに失敗するのを防ぐには、cfdisk を使って (2GB 以下の) FAT16 パーティションを作成して dosfstools を使ってフォーマットしてください:\n\n```\n# mkfs.msdos -F 16 /dev/sda1\n```\n\nそれから Syslinux をインストール・設定してください。\n\n"
    },
    {
      "title": "Missing operating system",
      "level": 3,
      "content": "このメッセージが表示されるときは、/boot が含まれているパーティションの boot フラグが有効になっているか確認してください。フラグが有効になっている場合、おそらくパーティションがセクタ63や2048でなく1から始まっています。fdisk -l で開始セクタを確認してください。セクタ1から始まっている場合は、レスキューディスクの gparted を使ってパーティションを移動することができます。もしくは、boot パーティションを分割しているのなら、次のコマンドで /boot をバックアップして Arch のインストールディスクで起動することができます:\n\n```\n# cp -a /boot /boot.bak\n```\n\n次に、cfdisk を使って /boot パーティションを削除して、再作成してください。この時パーティションを正しいセクタ 63 から開始してください。ビギナーズガイドに記述されているようにパーティションをマウントして、マウントしたシステムに chroot してください。次のコマンドで /boot を復元します:\n\n```\n# cp -a /boot.bak/* /boot\n```\n\n/etc/fstab が問題ないかどうか確認して、次のコマンドを実行して再起動してください:\n\n```\n# syslinux-install_update -iam\n```\n\nmd RAID 1 アレイから起動しようとして Syslinux が理解しない新しいバージョンのメタデータを使ってアレイを作成した場合にもこのエラーが表示されます。2013年8月現在、mdadm はデフォルトでバージョン 1.2 のメタデータでアレイを作成しますが、Syslinux は 1.0 以上の新しいメタデータを理解しません。この場合、--metadata=1.0 フラグを使って mdadm で RAID アレイを再生成する必要があります。\n\n"
    },
    {
      "title": "Syslinux を無視して Windows が起動する",
      "level": 3,
      "content": "解決方法: /boot を含むパーティションのブートフラグが有効になっているか確認してください。また、Windows パーティションのブートフラグは無効にする必要があります。上のインストールセクションを参照してください。\n\nSyslinux に含まれている MBR はブートフラグが設定されている一番最初の active なパーティションを検索します。おそらく最初に Windows のパーティションが認識されてしまっています。必要であれば、Windows や MS-DOS の fdisk による MBR を使うことができます。\n\n"
    },
    {
      "title": "メニューエントリが動作しない",
      "level": 3,
      "content": "メニューエントリを選択しても何も起こらない場合、メニューを\"更新\"するだけになっています。おそらく syslinux.cfg ファイルにエラーが存在しています。Tab を押してブートパラメータを編集してください。もしくは、Esc を押してブートエントリの LABEL を入力してください (例: arch)。\n\n"
    },
    {
      "title": "ldlinux.sys を削除できない",
      "level": 3,
      "content": "ldlinux.sys ファイルには immutable 属性が設定されるので、削除したり上書きすることができません。これはファイルのセクター位置が変わってしまうと Syslinux を再インストールする必要があるからです。ファイルを削除するには、以下を実行してください:\n\n```\n# chattr -i /boot/syslinux/ldlinux.sys\n# rm /boot/syslinux/ldlinux.sys\n```\n\n"
    },
    {
      "title": "vesamenu 使用時に白いブロックが左上に現れる",
      "level": 3,
      "content": "問題: linux-3.0 現在、modesetting ドライバーは解像度が変更された後もディスプレイの表示内容を保持しようとします (テキストモードの Syslinux で Intel のグラフィックチップを使っている場合に確認)。Syslinux の vesamenu モジュールと組み合わさると問題が発生します (白いブロックは Syslinux のメニューを保持しようとしたものですが、ドライバーは vesa グラフィックモードから画像を取得できていません)。\n\n初期モードセッティングでカスタム解像度と vesamenu を使用している場合、以下の設定を syslinux.cfg に追加してみてください:\n\n```\nAPPEND root=/dev/sda6 rw 5 vga=current quiet splash\n```\n\n"
    },
    {
      "title": "Windows を他のドライブにインストールしている時に、チェインロードが動作しない",
      "level": 3,
      "content": "Windows を Arch とは別のドライブにインストールしていてチェインロードに問題が起こるときは、以下の設定を試して下さい:\n\n```\nLABEL Windows\n       MENU LABEL Windows\n       COM32 chain.c32\n       APPEND mbr:0xdfc1ba9e swap\n```\n\nmbr コードはあなたの windows ドライブのものに置き換えて (詳しくは上を参照)、swap をオプションに追加してください。\n\n"
    },
    {
      "title": "ブートローダーログの読み取り",
      "level": 3,
      "content": "いくつかのケース（例：ブートローダーがカーネルをブートできない場合）では、ブートプロセスからより多くの情報を取得することが非常に望ましいです。Syslinux はエラーメッセージを画面に表示しますが、ブートメニューがすぐにテキストを上書きしてしまいます。ログ情報を失わないようにするために、syslinux.cfg で UI menu を無効にし、デフォルトの「コマンドライン」プロンプトを使用します。具体的には：\n\n- UI ディレクティブを避ける\n- ONTIMEOUT を避ける\n- ONERROR を避ける\n- MENU CLEAR を避ける\n- 高い TIMEOUT を使用する\n- PROMPT 1 を使用する\n- DEFAULT problematic_label を使用する\n\nより詳細なデバッグログを取得するには、追加の CFLAGS で syslinux パッケージを再コンパイルします：\n\n```\n-DDEBUG_STDIO=1 -DCORE_DEBUG=1\n```\n\n"
    },
    {
      "title": "Btrfs の圧縮",
      "level": 3,
      "content": "圧縮が有効になっている btrfs からの起動はサポートされていません [11]。以下のエラーが表示されます:\n\n```\nbtrfs: found compressed data, cannot continue!\ninvalid or corrupt kernel image.\n```\n\n"
    },
    {
      "title": "Btrfs のマルチデバイス",
      "level": 3,
      "content": "マルチデバイス Btrfs からの機能はサポートされていません [12] (main.c の validate_device_btrfs() の1246行目)。以下のようなエラーが表示されます:\n\n```\n/boot/syslinux is device /dev/sda1\nextlinux: path /boot/syslinux doesn't match device /dev/sda1\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- 公式ウェブサイト\n\n"
    }
  ]
}