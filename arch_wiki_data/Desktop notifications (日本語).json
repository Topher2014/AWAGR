{
  "title": "Desktop notifications (日本語)",
  "url": "https://wiki.archlinux.org/title/Desktop_notifications_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- GTK+\n- Libcanberra\n\nデスクトップ通知は、非同期に特定のイベントをユーザーに通知する小さくて控えめなポップアップダイアログです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 Libnotify\n- 2 通知サーバー 2.1 ビルトイン 2.2 スタンドアロン\n- 3 プログラミングでの使い方 3.1 Bash 3.2 Boo 3.3 C 3.4 C++ 3.5 C# 3.6 Crystal 3.7 F# 3.8 Genie 3.9 Go 3.10 Groovy 3.11 Haskell 3.12 IronPython 3.13 Java 3.14 JavaScript 3.15 JRuby 3.16 Jython 3.17 Lua 3.18 Nemerle 3.19 Pascal 3.20 Perl 3.20.1 libnotify を使用 3.20.2 直接 D-Bus 呼び出し 3.21 Python 3.22 Ruby 3.23 Rust 3.24 Scala 3.25 Vala 3.26 Visual Basic .NET\n- 4 ヒントとテクニック 4.1 他のユーザーに通知を送る 4.2 以前の通知を置き換える 4.3 ボタンを含める、閉じる/クリックを把握する 4.4 D-BUS サービスを備えた複数の通知サーバー 4.5 失敗した Systemd サービスに関する通知\n- 5 トラブルシューティング 5.1 アプリケーションがちょうど 1 分間ハングする\n- 6 参照\n\n- 2.1 ビルトイン\n- 2.2 スタンドアロン\n\n- 3.1 Bash\n- 3.2 Boo\n- 3.3 C\n- 3.4 C++\n- 3.5 C#\n- 3.6 Crystal\n- 3.7 F#\n- 3.8 Genie\n- 3.9 Go\n- 3.10 Groovy\n- 3.11 Haskell\n- 3.12 IronPython\n- 3.13 Java\n- 3.14 JavaScript\n- 3.15 JRuby\n- 3.16 Jython\n- 3.17 Lua\n- 3.18 Nemerle\n- 3.19 Pascal\n- 3.20 Perl 3.20.1 libnotify を使用 3.20.2 直接 D-Bus 呼び出し\n- 3.21 Python\n- 3.22 Ruby\n- 3.23 Rust\n- 3.24 Scala\n- 3.25 Vala\n- 3.26 Visual Basic .NET\n\n- 3.20.1 libnotify を使用\n- 3.20.2 直接 D-Bus 呼び出し\n\n- 4.1 他のユーザーに通知を送る\n- 4.2 以前の通知を置き換える\n- 4.3 ボタンを含める、閉じる/クリックを把握する\n- 4.4 D-BUS サービスを備えた複数の通知サーバー\n- 4.5 失敗した Systemd サービスに関する通知\n\n- 5.1 アプリケーションがちょうど 1 分間ハングする\n\n"
    },
    {
      "title": "Libnotify",
      "level": 2,
      "content": "Libnotify は GTK+ や Qt アプリケーションのサポートを提供する Desktop Notifications Specification の実装で特定のデスクトップに依存していません: Evolution や Pidgin など多数のオープンソースアプリによって使用されています。Libnotify は公式リポジトリにある libnotify パッケージでインストールすることが可能です。\n\nlibnotify を使うには、通知サーバーをインストールする必要があります。\n\n"
    },
    {
      "title": "ビルトイン",
      "level": 3,
      "content": "以下のデスクトップ環境では通知を表示するためにそれぞれ独自の実装を使っており、置き換えることができません。通知サーバーはログイン時に自動で起動し DBus によってアプリケーションからの通知を受け取ります。\n\n- Cinnamon は通知サーバーを備えており、通知は画面の右上に表示されます。\n- Enlightenment は Notification 拡張を通して通知サーバーを提供しています。通知オプションは設定が可能です。\n- GNOME は通知サーバーを備えており、通知は画面の上部に表示されます。\n- KDE は通知サーバーを備えており、通知は画面の右下に表示されます。\n\nまた、Deepin および GNOME Flashback も同様に通知サーバーを備えています。\n\n"
    },
    {
      "title": "スタンドアロン",
      "level": 3,
      "content": "他のデスクトップ環境では、ウィンドウマネージャやデスクトップ環境の自動実行を使って通知サーバーを起動する必要があります。\n\nD-Bus で初めて呼ばれた時に通知サーバーを起動させるには、通知サーバー (notification-daemon パッケージなど) をインストールした後、以下のように設定を /usr/share/dbus-1/services (またはユーザー個別に起動したい場合 $XDG_DATA_HOME/dbus-1/services) に追加します:\n\n```\norg.freedesktop.Notifications.service\n```\n\n```\n[D-BUS Service]\nName=org.freedesktop.Notifications\nExec=/usr/lib/notification-daemon-1.0/notification-daemon\n```\n\n通知サーバーは以下から選ぶことができます:\n\n- Avant Window Navigator — AWN で使うことができる通知デーモンアプレット。\n\n- Deadd Notification Center — Dnust にインスパイヤされた、通知センターが付いた通知デーモン。\n\n- Dunst — dwm などのミニマルなウィンドウマネージャにうってつけの Linux 用の最小通知デーモン。\n\n- fnott — wlroots-based コンポジタのための軽量な Wayland 向けの通知デーモン。キーボードによって操作される。\n\n- LXQt Notification Daemon — LXQt の通知サーバー。\n\n- mako — Wayland 向けの軽量な通知サーバー。現時点では Sway と一緒に動作します。\n\n- MATE Notification Daemon — MATE の通知サーバー。\n\n- Notification Daemon — GNOME Flashback によって使われている通知サーバー。\n\n- Notify OSD — Unity の通知サーバー。\n\n- statnot — 小さくて軽量な通知デーモン。ルートウィンドウのタイトルや標準出力、FIFO パイプなどに通知を出力できるので、タイル型ウィンドウマネージャと相性がとても良いです。\n\n- sandsmark-notificationd — ミニマムな通知デーモン。ミュート機能をサポート。\n\n- twmn — タイル型ウィンドウマネージャ向けの通知システム。\n\n- wired — レイヤーブロックのカスタマイズ性が高い軽量な通知デーモン。Rust で書かれている。\n\n- Xfce Notification Daemon — Xfce の通知サーバー。\n\n"
    },
    {
      "title": "プログラミングでの使い方",
      "level": 2,
      "content": "GObject-Introspection やバインディングを通して多くのプログラミング言語を使ったり、または bash を利用して簡単に libnotify でメッセージを表示することができます。\n\n以下の例ではシンプルな \"Hello world\" の通知が表示されます。\n\n"
    },
    {
      "title": "Bash",
      "level": 3,
      "content": "- 依存パッケージ: libnotify\n\n```\nhello_world.sh\n```\n\n```\n#!/bin/bash\nnotify-send 'Hello world!' 'This is an example notification.' --icon=dialog-information\n```\n\n- 利用可能なアイコンは Icon Naming Specification から参照できます。\n- root で実行するバックグラウンドスクリプトからデスクトップ通知を送信するには (X_user と X_userid は X を実行するユーザーおよびユーザー ID に置き換えてください): # sudo -u X_user DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/X_userid/bus notify-send 'Hello world!' 'This is an example notification.'。\n\n"
    },
    {
      "title": "Boo",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3 (booAUR)\n- ビルドするのに必要なパッケージ: booAUR\n- ビルド: booc hello_world.boo\n- 実行: mono hello_world.exe (または booi hello_world.boo)\n\n```\nhello_world.boo\n```\n\n```\nimport Notifications from \"notify-sharp\"\nHello = Notification()\nHello.Summary  = \"Hello world!\"\nHello.Body     = \"This is an example notification.\"\nHello.IconName = \"dialog-information\"\nHello.Show()\n```\n\n"
    },
    {
      "title": "C",
      "level": 3,
      "content": "- 依存パッケージ: glib2\n- ビルド: gcc -o hello_world `pkg-config --cflags --libs gio-2.0` hello_world.c\n\n```\nhello_world.c\n```\n\n```\n#include <gio/gio.h>\nint main() {\n\tGApplication *application = g_application_new (\"hello.world\", G_APPLICATION_FLAGS_NONE);\n\tg_application_register (application, NULL, NULL);\n\tGNotification *notification = g_notification_new (\"Hello world!\");\n\tg_notification_set_body (notification, \"This is an example notification.\");\n\tGIcon *icon = g_themed_icon_new (\"dialog-information\");\n\tg_notification_set_icon (notification, icon);\n\tg_application_send_notification (application, NULL, notification);\n\tg_object_unref (icon);\n\tg_object_unref (notification);\n\tg_object_unref (application);\n\treturn 0;\n}\n```\n\n- 依存パッケージ: libnotify\n- ビルド: gcc -o hello_world `pkg-config --cflags --libs libnotify` hello_world.c\n\n```\nhello_world.c\n```\n\n```\n#include <libnotify/notify.h>\nint main() {\n\tnotify_init (\"Hello world!\");\n\tNotifyNotification * Hello = notify_notification_new (\"Hello world\", \"This is an example notification.\", \"dialog-information\");\n\tnotify_notification_show (Hello, NULL);\n\tg_object_unref(G_OBJECT(Hello));\n\tnotify_uninit();\n\treturn 0;\n}\n```\n\n"
    },
    {
      "title": "C++",
      "level": 3,
      "content": "- 依存パッケージ: glibmm\n- ビルド: g++ -o hello_world `pkg-config --cflags --libs giomm-2.4` hello_world.cc\n\n```\nhello_world.cc\n```\n\n```\n#include <giomm-2.4/giomm.h>\nint main(int argc, char *argv[]) {\n\tauto Application = Gio::Application::create(\"hello.world\", Gio::APPLICATION_FLAGS_NONE);\n\tApplication->register_application();\n\tauto Notification = Gio::Notification::create(\"Hello world\");\n\tNotification->set_body(\"This is an example notification.\");\n\tauto Icon = Gio::ThemedIcon::create(\"dialog-information\");\n\tNotification->set_icon (Icon);\n\tApplication->send_notification(Notification);\n\treturn 0;\n}\n```\n\n- 依存パッケージ: libnotifymmAUR\n- ビルド: g++ -o hello_world `pkg-config --cflags --libs libnotifymm-1.0` hello_world.cc\n\n```\nhello_world.cc\n```\n\n```\n#include <libnotifymm.h>\nint main(int argc, char *argv[]) {\n\tNotify::init(\"Hello world!\");\n\tNotify::Notification Hello(\"Hello world\", \"This is an example notification.\", \"dialog-information\");\n       Hello.show();\n       return 0;\n}\n```\n\n"
    },
    {
      "title": "C#",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3\n- ビルド: mcs -pkg:notify-sharp-3.0 hello_world.cs\n- 実行: mono hello_world.exe\n\n```\nhello_world.cs\n```\n\n```\nusing Notifications;\npublic class HelloWorld {\n\tstatic void Main() {\n\t\tvar Hello = new Notification();\n\t\tHello.Summary  = \"Hello world!\";\n\t\tHello.Body     = \"This is an example notification.\";\n\t\tHello.IconName = \"dialog-information\";\n\t\tHello.Show();\n\t}\n}\n```\n\n"
    },
    {
      "title": "Crystal",
      "level": 3,
      "content": "- 依存パッケージ: woodruffw/notify.cr (shards から)\n- ビルドするのに必要なパッケージ: crystal および shards\n\n```\nhello_world.cr\n```\n\n```\nrequire \"notify\"\nnotifier = Notify.new\nnotifier.notify \"Hello\", body: \"World!\"\n```\n\n"
    },
    {
      "title": "F#",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3\n- ビルドするのに必要なパッケージ: fsharpAUR\n- ビルド: fsharpc -r:notify-sharp.dll -I:/usr/lib/mono/notify-sharp-3.0/ -I:/usr/lib/mono/gtk-sharp-3.0/ hello_world.fs\n- 実行: mono hello_world.exe\n\n```\nhello_world.fs\n```\n\n```\nopen Notifications\nlet Hello = new Notification()\nHello.Summary  <- \"Hello world!\"\nHello.Body     <- \"This is an example notification.\"\nHello.IconName <- \"dialog-information\"\nHello.Show()\n```\n\n"
    },
    {
      "title": "Genie",
      "level": 3,
      "content": "- 依存パッケージ: glib2\n- ビルドするのに必要なパッケージ: vala\n- ビルド: valac --pkg gio-2.0 hello_world.gs\n\n```\nhello_world.gs\n```\n\n```\nuses \n\tGLib\n\ninit\n\tvar Application = new GLib.Application (\"hello.world\", GLib.ApplicationFlags.FLAGS_NONE);\n\tApplication.register ();\n\tvar Notification = new GLib.Notification (\"Hello world\");\n\tNotification.set_body (\"This is an example notification.\");\n\tvar Icon = new GLib.ThemedIcon (\"dialog-information\");\n\tNotification.set_icon (Icon);\n\tApplication.send_notification (null, Notification);\n```\n\n- 依存パッケージ: libnotify\n- ビルドするのに必要なパッケージ: vala\n- ビルド: valac --pkg libnotify hello_world.gs\n\n```\nhello_world.gs\n```\n\n```\nuses \n\tNotify\n\ninit\n\tNotify.init (\"Hello world\")\n\tvar Hello=new Notify.Notification (\"Hello world!\",\"This is an example notification.\",\"dialog-information\")\n\tHello.show ()\n```\n\n"
    },
    {
      "title": "Go",
      "level": 3,
      "content": "- 依存パッケージ: libnotify\n- ビルドするのに必要なパッケージ: go-notify-gitAUR\n- ビルド: go build hello_world.go\n- 実行: go run hello_world.go\n\n```\nhello_world.go\n```\n\n```\npackage main\nimport (\"github.com/mqu/go-notify\")\n\nfunc main() {\n\tnotify.Init(\"Hello world\")\n\thello := notify.NotificationNew(\"Hello World!\", \"This is an example notification.\",\"dialog-information\")\n\thello.Show()\n}\n```\n\n"
    },
    {
      "title": "Groovy",
      "level": 3,
      "content": "- 依存パッケージ: groovy, java-gnomeAUR\n- ビルド: groovyc -cp /usr/share/java/gtk.jar HelloWorld.groovy && jar cfe HelloWorld.jar HelloWorld HelloWorld.class\n- 実行: java -cp /usr/share/groovy/embeddable/groovy-all.jar:/usr/share/java/gtk.jar:HelloWorld.jar HelloWorld (または groovy -cp /usr/share/java/gtk.jar HelloWorld.groovy)\n\n```\nHelloWorld.groovy\n```\n\n```\nimport org.gnome.gtk.*\nimport org.gnome.notify.*\n\nGtk.init()\nNotify.init(\"Hello world\")\ndef Hello = new Notification(\"Hello world!\", \"This is an example notification.\", \"dialog-information\")\nHello.show()\n```\n\n"
    },
    {
      "title": "Haskell",
      "level": 3,
      "content": "- ビルドするのに必要なパッケージ: haskell-fdo-notify\n- ビルド: ghc hello_world\n\n```\nhello_world.hs\n```\n\n```\nimport DBus.Notify\nmain = do\n         client <- connectSession\n         let hello = blankNote { summary=\"Hello world!\",\n                                 body=(Just $ Text \"This is an example notification.\"),\n                                 appImage=(Just $ Icon \"dialog-information\") }\n         notification <- notify client hello\n         return 0\n```\n\n"
    },
    {
      "title": "IronPython",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3, ironpythonAUR\n- 実行: ipy hello_world.py\n\n```\nhello_world.py\n```\n\n```\nimport clr\nclr.AddReference('notify-sharp')\nimport Notifications\nHello = Notifications.Notification()\nHello.Summary  = \"Hello world!\"\nHello.Body     = \"This is an example notification.\"\nHello.IconName = \"dialog-information\"\nHello.Show()\n```\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "- 依存パッケージ: java-gnomeAUR\n- ビルドするのに必要なパッケージ: java-environment\n- ビルド: javac -cp /usr/share/java/gtk.jar HelloWorld.java && jar cfe HelloWorld.jar HelloWorld HelloWorld.class\n- 実行: java -cp /usr/share/java/gtk.jar:HelloWorld.jar HelloWorld\n\n```\nHelloWorld.java\n```\n\n```\nimport org.gnome.gtk.Gtk;\nimport org.gnome.notify.Notify;\nimport org.gnome.notify.Notification;\n\npublic class HelloWorld\n{\n    public static void main(String[] args) {\n        Gtk.init(args);\n        Notify.init(\"Hello world\");\n        Notification Hello = new Notification(\"Hello world!\", \"This is an example notification.\", \"dialog-information\");\n        Hello.show();\n    }\n}\n```\n\n"
    },
    {
      "title": "JavaScript",
      "level": 3,
      "content": "- 依存パッケージ: gjs\n\n```\nhello_world.js\n```\n\n```\n#!/usr/bin/gjs\nconst Gio = imports.gi.Gio;\nvar Application = new Gio.Application ({application_id: \"hello.world\"});\nApplication.register (null);\nvar Notification = new Gio.Notification ();\nNotification.set_title (\"Hello world\");\nNotification.set_body (\"This is an example notification.\");\nvar Icon = new Gio.ThemedIcon ({name: \"dialog-information\"});\nNotification.set_icon (Icon);\nApplication.send_notification (null, Notification);\n```\n\n- 依存パッケージ: libnotify, gjs\n\n```\nhello_world.js\n```\n\n```\n#!/usr/bin/gjs\nconst Notify = imports.gi.Notify;\nNotify.init (\"Hello world\");\nvar Hello=new Notify.Notification ({summary: \"Hello world!\",\n                                    body: \"This is an example notification.\",\n                                    \"icon-name\": \"dialog-information\"});\nHello.show ();\n```\n\n"
    },
    {
      "title": "JRuby",
      "level": 3,
      "content": "- 依存パッケージ: java-gnomeAUR, jruby\n- ビルド: jrubyc hello_world.rb && jar cfe hello_world.jar hello_world hello_world.class\n- 実行: java -cp /opt/jruby/lib/jruby.jar:hello_world.jar hello_world または jruby hello_world.rb\n\n```\nhello_world.rb\n```\n\n```\nrequire '/usr/share/java/gtk.jar'\nimport Java::OrgGnomeGtk::Gtk\nimport Java::OrgGnomeNotify::Notify\nimport Java::OrgGnomeNotify::Notification\n\nGtk.init(nil)\nNotify.init(\"Hello world\")\nHello = Notification.new(\"Hello world!\", \"This is an example notification.\", \"dialog-information\")\nHello.show\n```\n\n"
    },
    {
      "title": "Jython",
      "level": 3,
      "content": "- 依存パッケージ: java-gnomeAUR, jython\n- 実行: jython -Dpython.path=/usr/share/java/gtk.jar hello_world.py\n\n```\nhello_world.py\n```\n\n```\nfrom org.gnome.gtk import Gtk\nfrom org.gnome.notify import Notify, Notification\nGtk.init(None)\nNotify.init(\"Hello world\")\nHello=Notification(\"Hello world!\", \"This is an example notification.\", \"dialog-information\")\nHello.show()\n```\n\n"
    },
    {
      "title": "Lua",
      "level": 3,
      "content": "- 依存パッケージ: lua-lgi\n\n```\nhello_world.lua\n```\n\n```\n#!/usr/bin/lua\nlgi = require 'lgi'\nGio = lgi.require('Gio')\nApplication = Gio.Application.new(\"hello.world\",Gio.ApplicationFlags.FLAGS_NONE);\nApplication:register();\nNotification = Gio.Notification.new(\"Hello world\");\nNotification:set_body(\"This is an example notification.\");\nIcon = Gio.ThemedIcon.new(\"dialog-information\");\nNotification:set_icon(Icon);\nApplication:send_notification(nil, Notification);\n```\n\n- 依存パッケージ: libnotify, lua-lgi\n\n```\nhello_world.lua\n```\n\n```\n#!/usr/bin/lua\nlgi = require 'lgi'\nNotify = lgi.require('Notify')\nNotify.init(\"Hello world\")\nHello=Notify.Notification.new(\"Hello world\",\"This is an example notification.\",\"dialog-information\")\nHello:show()</nowiki>\n```\n\n"
    },
    {
      "title": "Nemerle",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3\n- ビルドするのに必要なパッケージ: nemerleAUR\n- ビルド: ncc -pkg:notify-sharp-3.0 -out:hello_world.exe hello_world.n\n- 実行: mono hello_world.exe\n\n```\nhello_world.n\n```\n\n```\nusing Notifications;\npublic class HelloWorld {\n\tstatic Main() : void {\n\t\tdef Hello = Notification();\n\t\tHello.Summary  = \"Hello world!\";\n\t\tHello.Body     = \"This is an example notification.\";\n\t\tHello.IconName = \"dialog-information\";\n\t\tHello.Show();\n\t}\n}\n```\n\n"
    },
    {
      "title": "Pascal",
      "level": 3,
      "content": "- 依存パッケージ: libnotify\n- ビルドするのに必要なパッケージ: fpc, libnotify バインディング\n- ビルド: fpc hello_world\n\n```\nhello_world.pas\n```\n\n```\nprogram\thello_world;\nuses\tlibnotify;\nvar\thello : PNotifyNotification;\nbegin\n\tnotify_init(argv[0]);\n\thello := notify_notification_new ('Hello world', 'This is an example notification.', 'dialog-information');\n\tnotify_notification_show (hello, nil);\nend.\n```\n\n"
    },
    {
      "title": "libnotify を使用",
      "level": 4,
      "content": "- 依存パッケージ: libnotify, perl-glib-object-introspection\n\n```\nhello_world.pl\n```\n\n```\n#!/usr/bin/perl\nuse Glib::Object::Introspection;\nGlib::Object::Introspection->setup (\n\tbasename => 'Notify',\n\tversion => '0.7',\n\tpackage => 'Notify');\nNotify->init;\nmy $hello = Notify::Notification->new('Hello world!',\n\t\"This is an example notification.\",\n\t\"dialog-information\");\n$hello->show;\n```\n\n"
    },
    {
      "title": "直接 D-Bus 呼び出し",
      "level": 4,
      "content": "- 依存関係: perl-net-dbus\n\n```\nhello_world.pl\n```\n\n```\n#!/usr/bin/perl\nuse Net::DBus;\nmy $bus = Net::DBus->session;\nmy $svc = $bus->get_service('org.freedesktop.Notifications');\nmy $obj = $svc->get_object('/org/freedesktop/Notifications');\nmy $id = $obj->Notify('myapp', 0,\n                      'dialog-information',\n                      'Hello world!',\n                      'This is an example notification.',\n                      [], {}, 0);\n```\n\n"
    },
    {
      "title": "Python",
      "level": 3,
      "content": "- 依存パッケージ: python-gobject (または Python 2 なら python2-gobject)\n\n```\nhello_world.py\n```\n\n```\n#!/usr/bin/python\nimport gi\ngi.require_version('Gio', '2.0')\nfrom gi.repository import Gio\nApplication=Gio.Application.new (\"hello.world\", Gio.ApplicationFlags.FLAGS_NONE);\nApplication.register ()\nNotification=Gio.Notification.new (\"Hello world\")\nNotification.set_body (\"This is an example notification.\")\nIcon=Gio.ThemedIcon.new (\"dialog-information\")\nNotification.set_icon (Icon)\nApplication.send_notification (None, Notification)\n```\n\n- 依存パッケージ: libnotify, python-gobject (または Python 2 なら python2-gobject)\n\n```\nhello_world.py\n```\n\n```\n#!/usr/bin/python\nimport gi\ngi.require_version('Notify', '0.7')\nfrom gi.repository import Notify\nNotify.init (\"Hello world\")\nHello = Notify.Notification.new (\"Hello world\",\"This is an example notification.\",\"dialog-information\")\nHello.show ()\n```\n\n"
    },
    {
      "title": "Ruby",
      "level": 3,
      "content": "- 依存パッケージ: libnotify, ruby-gir_ffiAUR\n\n```\nhello_world.rb\n```\n\n```\n#!/usr/bin/ruby\nrequire 'gir_ffi'\nGirFFI.setup :Notify\nNotify.init(\"Hello world\")\nHello = Notify::Notification.new(\"Hello world!\", \"This is an example notification.\", \"dialog-information\")\nHello.show\n```\n\n"
    },
    {
      "title": "Rust",
      "level": 3,
      "content": "notify-rust を使用。\n\n- ビルドするのに必要なパッケージ: rust か rustup (Rust を参照)\n- ビルド: cargo build\n- 実行: target/debug/hello_world または cargo run\n\n```\nCargo.toml\n```\n\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nnotify-rust = \"^3\"\n```\n\n```\nsrc/main.rs\n```\n\n```\nextern crate notify_rust;\nuse notify_rust::Notification;\nfn main(){\n    Notification::new()\n        .summary(\"Hello world\")\n        .body(\"This is an example notification.\")\n        .icon(\"dialog-information\")\n        .show().unwrap();\n}\n```\n\n"
    },
    {
      "title": "Scala",
      "level": 3,
      "content": "- 依存パッケージ: java-gnomeAUR (と scala)\n- ビルドするのに必要なパッケージ: scala\n- ビルド: scalac -cp /usr/share/java/gtk.jar -d HelloWorld.jar HelloWorld.scala\n- 実行: java -cp /usr/share/java/gtk.jar:HelloWorld.jar HelloWorld (または scala -cp /usr/share/java/gtk.jar HelloWorld.scala)\n\n```\nHelloWorld.scala\n```\n\n```\nimport org.gnome.gtk._\nimport org.gnome.notify._\n\nobject HelloWorld {\n  def main(args: Array[String]) {\n    Gtk.init(args)\n    Notify.init(\"Hello world\")\n    var Hello = new Notification(\"Hello world!\", \"This is an example notification.\", \"dialog-information\")\n    Hello.show()\n  }\n}\n```\n\n"
    },
    {
      "title": "Vala",
      "level": 3,
      "content": "- 依存パッケージ: glib2\n- ビルドするのに必要なパッケージ: vala\n- ビルド: valac --pkg gio-2.0 hello_world.vala\n\n```\nhello_world.vala\n```\n\n```\nusing GLib;\npublic class HelloWorld {\n\tstatic void main () {\n\t\tvar Application = new GLib.Application (\"hello.world\", GLib.ApplicationFlags.FLAGS_NONE);\n\t\tApplication.register ();\n\t\tvar Notification = new GLib.Notification (\"Hello world\");\n\t\tNotification.set_body (\"This is an example notification.\");\n\t\tvar Icon = new GLib.ThemedIcon (\"dialog-information\");\n\t\tNotification.set_icon (Icon);\n\t\tApplication.send_notification (null, Notification);\n\t}\n}\n```\n\n- 依存パッケージ: libnotify\n- ビルドするのに必要なパッケージ: vala\n- ビルド: valac --pkg libnotify hello_world.vala\n\n```\nhello_world.vala\n```\n\n```\nusing Notify;\npublic class HelloWorld {\n\tstatic void main () {\n\t\tNotify.init (\"Hello world\");\n\t\tvar Hello = new Notify.Notification(\"Hello world!\", \"This is an example notification.\", \"dialog-information\");\n\t\tHello.show ();\n\t}\n}\n```\n\n"
    },
    {
      "title": "Visual Basic .NET",
      "level": 3,
      "content": "- 依存パッケージ: notify-sharp-3\n- ビルドするのに必要なパッケージ: mono-basicAUR\n- ビルド: vbnc -r:/usr/lib/mono/notify-sharp-3.0/notify-sharp.dll hello_world.vb\n- 実行: mono hello_world.exe\n\n```\nhello_world.vb\n```\n\n```\nImports Notifications\nPublic Class Hello\n\tPublic Shared Sub Main\n\t\tDim Hello As New Notification\n\t\tHello.Summary  = \"Hello world!\"\n\t\tHello.Body     = \"This is an example notification.\"\n\t\tHello.IconName = \"dialog-information\"\n\t\tHello.Show\n\tEnd Sub\nEnd Class\n```\n\n"
    },
    {
      "title": "他のユーザーに通知を送る",
      "level": 3,
      "content": "systemd-run(1) を使うことで (例えば root として実行されたバックグラウンドのスクリプトなどから)、他のユーザーのセッションに入り、そのユーザーに通知を送ることができます:\n\n```\n# systemd-run --machine=target_user@.host --user notify-send 'Hello world!' 'This is an example notification.'\n```\n\nもう一つの方法は systembus-notify です。以下のコマンドは、systembus-notify をセッション内に実行しているすべてのユーザーに通知を表示します:\n\n```\n$ dbus-send --system / net.nuetzlich.SystemNotifications.Notify 'string:Hello world!' 'string:This is an example notification.'\n```\n\n"
    },
    {
      "title": "以前の通知を置き換える",
      "level": 3,
      "content": "ID がわかっている場合は、通知を置き換えることができます。新しい通知リクエストで同じ ID が指定されている場合、常に古い通知が置き換えられます。(上記の libnotify バインディングはこれを自動的に処理します。) 残念ながら、notify-send はこの ID を報告しないため、CLI でこれを行うには代替ツールが必要です。有効な CLI ツールの 1 つは、Notice-send.py Python スクリプトです。これは、追加の ID レポート機能と置換機能を備えた Notify-Send 構文を提供します。\n\nただし、一部の 通知サーバー (Notify-OSD など) では、notify-send で string:x-canonical-private-synchronous: ヒントを使用して同じ結果を得ることができます。\n\nたとえば、時間を表示する通知を取得するには:\n\n```\nwhile true; do\n  date=$(date)\n  notify-send \"$date\" -h string:x-canonical-private-synchronous:my-notification\n  sleep 1\ndone\n```\n\n"
    },
    {
      "title": "ボタンを含める、閉じる/クリックを把握する",
      "level": 3,
      "content": "Notice-send.py スクリプトを使用すると、アクションを使用してボタンを表示したり、通知のデフォルトアクションをリッスンしたりできます (通常、ユーザーがそれをクリックする)と閉じるアクション。action-icons ヒントが true に設定されており、通知デーモンがこれをサポートしている場合、ボタンにはテキストの代わりにアイコンが表示されます。スクリプトは、対応するイベントが発生したときに、コマンドラインにアクション ID または \"close\" を出力します。デフォルトのアクション (クリック時) をリッスンするには、アクション識別子 \"default\" を使用する必要があります。\n\nボタン上のアイコンの例:\n\n```\nnotify-send.py \"Buttons\" \"Do you like em?\" --hint boolean:action-icons:true --action yes:face-cool no:face-sick\n```\n\n"
    },
    {
      "title": "D-BUS サービスを備えた複数の通知サーバー",
      "level": 3,
      "content": "スタンドアロン セクションで説明されているように、ユーザーは通知サーバーを自動的に起動できるように D-Bus サービスを作成できます。一部の実装には、すでに D-Bus サービスファイルが含まれています。ただし、複数の通知サーバーがインストールされており、それらの一部にサービス ファイルが付属している場合、これにより問題が発生します。たとえば、目的のサーバーを明示的に指定せずに dunst と mako の両方をインストールすると、D-Bus がユーザーにどちらかを選択しますが、その決定はユーザーが制御できません。この状況を回避するには、使用するサービスを指すシンボリックリンク $XDG_DATA_DIR/dbus-1/services/org.freedesktop.Notifications.service を作成して、使用するサービスをオーバーライドし、セッションを再起動します。\n\n"
    },
    {
      "title": "失敗した Systemd サービスに関する通知",
      "level": 3,
      "content": "失敗したサービスによる通知を受け取るには、ターゲットユーザーに systembus-notify をインストールして実行し、systemd#サービスの失敗を通知する に示されている手順に従います。ただし、failure-notification@ は置き換えてください。これを使用したテンプレートユニット:\n\n```\n/etc/systemd/system/failure-notification@.service\n```\n\n```\n[Unit]\nDescription=Send a notification about a failed systemd unit\nAfter=Graphical.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/dbus-send --system / net.nuetzlich.SystemNotifications.Notify 'string:%i' 'string:Unit failed'\n```\n\n残念ながら、このソリューションは通知の緊急性やタイムアウトの設定をまだサポートしていません。this issue を参照してください。\n\n"
    },
    {
      "title": "アプリケーションがちょうど 1 分間ハングする",
      "level": 3,
      "content": "通知を表示しようとしているときにアプリケーションがハングする場合は、通知サービスが D-Bus サービスを通じてその可用性を誤って宣伝していることが原因である可能性があります。\n\nたとえば、ユーザーが最近、plasma-workspace を必要とする KDE コンポーネントをインストールしたが、まだ XFCE を実行しているとします。この場合、KDE ​​通知機能が優先されますが、ユーザーはそれを実行していません。アプリケーションはサービスの待機中にハングし、タイムアウト後に xfce4-notifyd にフォールバックすることになります。\n\n最も顕著なハングは、音量インジケーターのスクロール調整に起因する可能性があります。\n\nこの状況に陥った場合は、2 つの通知ハンドラーが必要です。\n\n```\n$ find /usr/share/dbus-1/services/ -name '*Notif*'\n```\n\n```\norg.kde.plasma.Notifications.service\norg.xfce.xfce4-notifyd.Notifications.service\n```\n\nジャーナル に見られるように、これら 2 つのうち、1 つは 1 分のタイムアウト後に定期的に失敗します。\n\n```\n# journalctl -g notif\n```\n\n```\n[ press End to go to the end of the log ]\nJul 01 09:40:49 laptop dbus-daemon[866]: [session uid=1000 pid=866] Activating service name='org.freedesktop.Notifications' requested by ':1.193' (uid=1000 pid=5432 comm=\"/usr/lib/xfce4/panel/wrapper-2.0 /usr/lib/xfce4/pa\")\nJul 01 09:41:49 laptop plasma_waitforname[6093]: org.kde.knotifications: WaitForName: Service was not registered within timeout\nJul 01 09:41:49 laptop dbus-daemon[866]: [session uid=1000 pid=866] Activated service 'org.freedesktop.Notifications' failed: Process org.freedesktop.Notifications exited with status 1\n```\n\nD-BUS サービスを備えば複数の通知サーバー の説明に従って、使用するサービスを選択すると、問題が解決します。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Libnotify リファレンスマニュアル\n- C サンプル (アーカイブされたバージョン)\n- Python 通知サンプル\n- Python サンプル (フランス語の記事)\n\n"
    }
  ]
}