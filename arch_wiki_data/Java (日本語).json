{
  "title": "Java (日本語)",
  "url": "https://wiki.archlinux.org/title/Java_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Java パッケージガイドライン\n- Java 実行環境のフォント\n\nWikipedia より:\n\nArch Linux は、オープンソースの OpenJDK のバージョン 8、11、17、21 (Long-Term Support (LTS) のバージョン群)、そして 23 (最新バージョン) を公式にサポートしています。これらの JVM は全てインストールしても衝突せず、ヘルパースクリプト archlinux-java (java-runtime-common パッケージによってインストールされます) を使って切り替えることが可能です。他の Java 環境はいくつか Arch User Repository からインストールすることができますが、公式のサポートはありません。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 OpenJDK 1.2 OpenJFX 1.3 他の実装 1.4 開発ツール 1.4.1 逆コンパイラ 1.4.2 GUI フロントエンド\n- 2 JVM の切り替え 2.1 インストールされている Java 互換環境を表示 2.2 デフォルトの Java 環境を変更 2.3 デフォルトの Java 環境の設定を解除 2.4 デフォルトの Java 環境を修正 2.5 デフォルトでないバージョンの Java を使ってアプリケーションを起動\n- 3 archlinux-java をサポートするために必要なパッケージの前提条件\n- 4 トラブルシューティング 4.1 MySQL 4.2 IntelliJ IDEA 4.3 他のウィンドウマネージャになりすます 4.4 フォントが読みにくい 4.5 一部のアプリケーションでテキストが表示されない 4.6 灰色のウィンドウ、ウィンドウマネージャでアプリがリサイズされない、メニューがすぐに閉じる 4.7 JavaFX アプリケーションのデバッグ時にシステムがフリーズする 4.8 JavaFX の MediaPlayer コンストラクタが例外を投げる 4.9 Java アプリケーションで外部リンクを開けない 4.10 QuantumRenderer の初期化でエラー: no suitable pipeline found\n- 5 ヒントとテクニック 5.1 フォントレンダリングを改善する 5.2 コマンドラインの 'Picked up JDK_JAVA_OPTIONS' メッセージを消す 5.3 GTK のルックアンドフィール 5.3.1 GTK3 のサポート 5.4 HiDPI 5.5 2D のパフォーマンスの向上\n\n- 1.1 OpenJDK\n- 1.2 OpenJFX\n- 1.3 他の実装\n- 1.4 開発ツール 1.4.1 逆コンパイラ 1.4.2 GUI フロントエンド\n\n- 1.4.1 逆コンパイラ\n- 1.4.2 GUI フロントエンド\n\n- 2.1 インストールされている Java 互換環境を表示\n- 2.2 デフォルトの Java 環境を変更\n- 2.3 デフォルトの Java 環境の設定を解除\n- 2.4 デフォルトの Java 環境を修正\n- 2.5 デフォルトでないバージョンの Java を使ってアプリケーションを起動\n\n- 4.1 MySQL\n- 4.2 IntelliJ IDEA\n- 4.3 他のウィンドウマネージャになりすます\n- 4.4 フォントが読みにくい\n- 4.5 一部のアプリケーションでテキストが表示されない\n- 4.6 灰色のウィンドウ、ウィンドウマネージャでアプリがリサイズされない、メニューがすぐに閉じる\n- 4.7 JavaFX アプリケーションのデバッグ時にシステムがフリーズする\n- 4.8 JavaFX の MediaPlayer コンストラクタが例外を投げる\n- 4.9 Java アプリケーションで外部リンクを開けない\n- 4.10 QuantumRenderer の初期化でエラー: no suitable pipeline found\n\n- 5.1 フォントレンダリングを改善する\n- 5.2 コマンドラインの 'Picked up JDK_JAVA_OPTIONS' メッセージを消す\n- 5.3 GTK のルックアンドフィール 5.3.1 GTK3 のサポート\n- 5.4 HiDPI\n- 5.5 2D のパフォーマンスの向上\n\n- 5.3.1 GTK3 のサポート\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "- Arch Linux が公式にサポートしているのは OpenJDK 実装だけです。\n- インストール後、Java 環境をシェルに認識させる必要があります ($PATH 変数)。コマンドラインから /etc/profile を source するか、デスクトップ環境から一度ログアウトしてログインし直すか、または再起動することで、シェルに認識させることができます。\n\n2つの 共通 パッケージがそれぞれ依存パッケージとしてインストールされます: java-runtime-common (全ての Java Runtime Environment に共通のファイルが含まれています) と java-environment-common (全ての Java Development Kit に共通のファイルが含まれています) です。\n\n提供されている /etc/profile.d/jre.sh と /etc/profile.d/jre.csh は、シンボリックリンクを経由している /usr/lib/jvm/default/bin を参照しています。これは archlinux-java ヘルパースクリプトによって設定されます。\n\nJava 環境のほとんどの実行ファイルは、/usr/bin/ 内のダイレクトリンクによって提供されます。一方、その他は $PATH でアクセスできます。\n\n"
    },
    {
      "title": "OpenJDK",
      "level": 3,
      "content": "OpenJDK は、Java Platform, Standard Edition (Java SE) のオープンソースな実装であり、公式リファレンス実装として指定されています。OpenJDK ビルドには、Adoptium (以前は AdoptOpenJDK として知られていました) や Amazon Corretto などの複数のディストリビューターが存在しています。Arch Linux OpenJDK パッケージは上流の OpenJDK ソースコードからビルドされています。\n\nJDK、フル JRE、そしてヘッドレス JRE は互いに衝突します。これは、より小さいパッケージがより大きいパッケージのサブセットであるためです:\n\n- JDK とフル JRE は互いに衝突し、かつ前者は後者を提供しています。\n- フル JRE とヘッドレス JRE は互いに衝突し、かつ前者は後者を提供しています。\n\nTable content:\nバージョン | ヘッドレス JRE | フル JRE | JDK | ドキュメント | ソース\nOpenJDK 23 | jre-openjdk-headless | jre-openjdk | jdk-openjdk | openjdk-doc | openjdk-src\nOpenJDK 21 | jre21-openjdk-headless | jre21-openjdk | jdk21-openjdk | openjdk21-doc | openjdk21-src\nOpenJDK 17 | jre17-openjdk-headless | jre17-openjdk | jdk17-openjdk | openjdk17-doc | openjdk17-src\nOpenJDK 11 | jre11-openjdk-headless | jre11-openjdk | jdk11-openjdk | openjdk11-doc | openjdk11-src\nOpenJDK 8 | jre8-openjdk-headless | jre8-openjdk | jdk8-openjdk | openjdk8-doc | openjdk8-src\n\nIcedTea-Web — Java Web Start と非推奨の Java ブラウザプラグイン。\n\nOpenJDK EA — Oracle の開発版向け OpenJDK Early-Access ビルド。\n\nOpenJDK GA — Oracle の OpenJDK General-Availability Release ビルド。\n\nOpenJDK Wakefield — JDK での Wayland ディスプレイサーバーのためのサポート実装。\n\n"
    },
    {
      "title": "OpenJFX",
      "level": 3,
      "content": "OpenJFX は、JavaFX のオープンソースな実装です。Oracle JDK を使用している場合は、このパッケージをインストールする必要はありません。このパッケージは、Java のオープンソース実装 (OpenJDK プロジェクト) やその派生版のユーザのみを対象としています。\n\nTable content:\nバージョン | 実行環境及び開発キット | ドキュメント | ソース\nOpenJFX 22 | java-openjfxAUR | java-openjfx-docAUR | java-openjfx-srcAUR\nOpenJFX 21 | java21-openjfxAUR | java21-openjfx-docAUR | java21-openjfx-srcAUR\nOpenJFX 17 | java17-openjfxAUR | java17-openjfx-docAUR | java17-openjfx-srcAUR\nOpenJFX 11 | java11-openjfxAUR | java11-openjfx-docAUR | java11-openjfx-srcAUR\nOpenJFX 8 | java8-openjfxAUR | java8-openjfx-docAUR | java8-openjfx-srcAUR\n\n"
    },
    {
      "title": "他の実装",
      "level": 3,
      "content": "- AWS Corretto — OpenJDK の Amazon Web Services のディストリビューション。\n\n- Azul JDK — Azul の JDK 実装。OpenJDK の Azul Zulu ビルドはオープンソースですが、OpenJDK の Azul Zulu Prime ビルドは開発と評価用では無料の商用製品であることに注意してください。\n\n- Eclipse Adoptium/Temurin — Eclipse の JRE/JDK 実装。Hotspot JVM (以前は AdoptOpenJDK) をベースとしています。この JRE は、Eclipse Temurin として知られています。\n\n- IBM Certified — IBM Semeru Runtime Certified Edition。\n\n- IBM J9 — IBM の JRE 実装。OpenJ9 のコードを使用。\n\n- Liberica JDK — BellSoft の Liberica JDK 実装。\n\n- Microsoft OpenJDK — Microsoft の OpenJDK 実装。\n\n- OpenJ9 — IBM によって提供されている、J9 JVM ベースの、Eclipse の JRE/JDK 実装。\n\n- Oracle JDK — Oracle の OpenJDK 商用ライセンスビルド。一部のバージョンは手動ダウンロードでしか利用できないことに注意してください。手動ダウンロードでは、OTN 契約に署名し、Oracle アカウントを作成する必要があります。\n\n"
    },
    {
      "title": "開発ツール",
      "level": 3,
      "content": "統合開発環境については アプリケーション一覧/ユーティリティ#統合開発環境 や Java IDE サブセクションを見てください。\n\nリバースエンジニアリングを困難にするには、proguardAUR などの難読化ツールを使用できます。\n\n"
    },
    {
      "title": "逆コンパイラ",
      "level": 4,
      "content": "- CFR — Java 9、10、及びそれ以降の最近の機能をサポートしている Java 逆コンパイラ。\n\n- Fernflower — IntelliJ IDEA の一部として開発されている Java 解析逆コンパイラ。\n\n- Vineflower — Fernflower からフォークされた Java 逆コンパイラ。コードの品質を向上させることを目的としています。IntelliJ IDEA プラグインとしても利用できます。\n\n- Krakatau — Java 逆コンパイラ、アセンブラ、逆アセンブラ。\n\n- Procyon decompiler — 実験的な Java 逆コンパイラ。ILSpy と Mono.Cecil の影響を受けています。\n\n- Java Decompiler (JD-Core) — 人気な Java 逆コンパイラ。GUI (JD-GUI を参照) を提供し、Java 1~10 をサポートしています。\n\n- Jadx — Android DEX から Java に逆コンパイルします。オプションの GUI 有り (Jadx-GUI を参照)。\n\n- JAD — メンテナンスされていない Java 逆コンパイラ (最後のリリースは 2006 年です)。\n\n"
    },
    {
      "title": "GUI フロントエンド",
      "level": 4,
      "content": "- Bytecode Viewer — Java のリバースエンジニアリングスイート。逆コンパイラ、エディタ、そしてデバッガを含んでいます。CFR/Fernflower/Procyon のフロントエンドです。\n\n- Recaf — 使いやすいモダンな Java バイトコードエディタ。Java プログラムの複雑さを抽象化します。CFR/Fernflower/Procyon のフロントエンドです。\n\n- Java Decompiler (JD-GUI) — 人気な Java 逆コンパイラ。GUI を提供し、Java 1~10 をサポートしています。JD-Core のフロントエンドです。\n\n- Jadx-GUI — Android APK DEX から Java に逆コンパイルします。オプションの GUI 有り。Jadx のフロントエンドです。\n\n- Luyten — オープンソースの Java 逆コンパイラ GUI。Procyon のフロントエンドです。\n\n"
    },
    {
      "title": "JVM の切り替え",
      "level": 2,
      "content": "ヘルパースクリプト archlinux-java (java-runtime-common パッケージ) は、以下のような機能を提供します:\n\n```\narchlinux-java <COMMAND>\n\nCOMMAND:\n\tstatus\t\tインストールされている Java 環境と有効になっている環境を表示\n\tget\t\t\tデフォルトに設定されている Java 環境を返す\n\tset <JAVA_ENV>\t<JAVA_ENV> をデフォルトに設定\n\tunset\t\t\tデフォルトの Java 環境の設定を解除\n\tfix\t\t\t不正な Java 環境の設定を修正\n```\n\n"
    },
    {
      "title": "インストールされている Java 互換環境を表示",
      "level": 3,
      "content": "```\n$ archlinux-java status\n```\n\n例:\n\n```\n$ archlinux-java status\n```\n\n```\nAvailable Java environments:\n   java-11-openjdk (default)\n   java-8-openjdk/jre\n```\n\n(default) は java-11-openjdk がデフォルトに設定されていることを示しています。java やその他のバイナリの呼び出しはこの Java インストールに基づきます。また、上の出力では OpenJDK 8 の JRE しかインストールされていないことに注意してください。\n\n"
    },
    {
      "title": "デフォルトの Java 環境を変更",
      "level": 3,
      "content": "```\n# archlinux-java set <JAVA_ENV_NAME>\n```\n\n例:\n\n```\n# archlinux-java set java-8-openjdk/jre\n```\n\narchlinux-java は、存在しない Java 環境を設定することはできません。前の例では、jre8-openjdk はインストールされていますが jdk8-openjdk はインストールされていないため、java-8-openjdk を設定しようとしても失敗します:\n\n```\n# archlinux-java set java-8-openjdk\n```\n\n```\n'/usr/lib/jvm/java-8-openjdk' is not a valid Java environment path\n```\n\n"
    },
    {
      "title": "デフォルトの Java 環境の設定を解除",
      "level": 3,
      "content": "パッケージが設定を管理するため、Java 環境の設定を解除する必要はないはずです。それでも設定を解除したいときは、unset コマンドを使って下さい:\n\n```\n# archlinux-java unset\n```\n\n"
    },
    {
      "title": "デフォルトの Java 環境を修正",
      "level": 3,
      "content": "存在しない Java 環境のリンクが設定されている場合、archlinux-java fix コマンドを呼び出すとリンクの修正が行われます。デフォルトの Java 環境が設定されていないときは、インストールされている Java 環境を探して設定を行います (ここでは、公式でサポートされているパッケージ \"OpenJDK 8\" がまず初めに使われます。他のインストール環境はその後です):\n\n```\n# archlinux-java fix\n```\n\n"
    },
    {
      "title": "デフォルトでないバージョンの Java を使ってアプリケーションを起動",
      "level": 3,
      "content": "デフォルトのバージョン以外の Java を使ってアプリケーションを起動したい場合 (例えば、バージョン 18 (デフォルト) と 11 の両方がインストールされており、Java 11 の方を使用した場合など)、アプリケーションを小さなシェルスクリプトにラップすることで、Java のデフォルトのパスをローカルに変更することができます:\n\n```\n#!/bin/sh\n\nexport PATH=\"/usr/lib/jvm/java-11-openjdk/bin/:$PATH\"\nexec /path/to/application \"$@\"\n```\n\nSystemd サービスの場合、ドロップインファイル で JAVA_HOME を環境変数に追加することで可能です:\n\n```\n/etc/systemd/system/unit.d/override.conf\n```\n\n```\n[Service]\nEnvironment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk\n```\n\n"
    },
    {
      "title": "archlinux-java をサポートするために必要なパッケージの前提条件",
      "level": 2,
      "content": "このセクションでは、代替 JVM 用のパッケージを AUR で提供したいパッケージ製作者が、パッケージを Arch Linux の JVM スキームと統合できる (つまり、archlinux-java と互換性を持たせる) ようにするための説明を行います。これに関しては、パッケージ制作者は以下のことを行う必要があります:\n\n- 全てのファイルは /usr/lib/jvm/java-${JAVA_MAJOR_VERSION}-${VENDOR_NAME} 以下に配置すること\n- java-runtime-common と java-environment-common が提供するシンボリックリンクに対応する全ての実行ファイルが、該当するパッケージにおいて利用可能であること。(訳注: 例えば、java-runtime-common は /usr/bin/java シンボリックリンクを提供していますが、あなたの作成したパッケージにもこれに対応する実行ファイルが含まれていなければなりません。その他のシンボリックリンクにおいても同様です。)\n- シンボリックリンクがまだ [java-runtime-common と java-environment-common に存在しない場合にのみ、/usr/bin から実行ファイルへのシンボリックリンクを同梱すること。\n- man ページの末尾に -${VENDOR_NAME}${JAVA_MAJOR_VERSION} を付けて、衝突しないようにすること (jre8-openjdk のファイルリストを見れば -openjdk8 を付ける man ページがわかります)\n- 他の JDK、java-runtime、java-runtime-headless、java-environment を conflicts や replaces として宣言しないこと。\n- install 関数で archlinux-java スクリプトを使って、他の有効な Java 環境が設定されていない場合に 自身の Java 環境をデフォルトに設定すること (つまり、パッケージは強制的にデフォルトとして設定するべきではありません)。サンプルは公式にサポートされている Java 環境のパッケージのソースを参照。\n\n他の注意事項:\n\n- 任意の Java 環境を必要とするパッケージは、通常通り java-runtime、java-runtime-headless、java-environment のどれかを依存関係として宣言すること。\n- 特定の Java ベンダ を必要とするパッケージは、それに対応するパッケージを依存関係として宣言すること。\n- OpenJDK パッケージでは、provides=\"java-runtime-openjdk=${pkgver}\" などが宣言されるようになっています。これにより、サードパーティのパッケージではバージョンを指定せずに OpenJDK を依存関係として宣言できるようになっています。\n\n"
    },
    {
      "title": "MySQL",
      "level": 3,
      "content": "JDBC ドライバーは URL のポートを使ってデータベースへの接続を確立するため、同じホストで動作していたとしても\"リモート\"とされます (すなわち MySQL はデフォルト設定のようにポートを開きません)。そのため、JDBC と MySQL を使うには MySQL のリモートアクセスを有効にする必要があります。MariaDB#リモートアクセスを有効にする の指示に従って下さい。\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 3,
      "content": "IntelliJ IDEA がシステムの JAVA SDK のパスと共に The selected directory is not a valid home for JDK と出力する場合、他の JDK パッケージをインストールして、そのパッケージを IDEA の JDK として選択する必要があるかもしれません。\n\n"
    },
    {
      "title": "他のウィンドウマネージャになりすます",
      "level": 3,
      "content": "suckless.org の wmname を使うことで、他のウィンドウマネージャを動かしていると JVM に信じ込ませることができます。これによって、Awesome や Dwm、Ratpoison のようなウィンドウマネージャで発生する Java の GUI レンダリング問題を解決できる場合があります。これがうまく行く理由は、JVM にはリペアレンティング型でない既知のウィンドウマネージャのハードコードされたリストが含まれているからです。皮肉なことに、一部のユーザは、Sun によって Java で記述されたリペアレンティング型でないウィンドウマネージャである LG3D になりすますことを好みます。compiz や Metacity、LG3D に設定してみてください:\n\n```\n$ wmname ウィンドウマネージャ名\n```\n\nwmname コマンドを実行した後、問題が発生しているアプリケーションを再起動する必要があります。\n\nあるいは、javaagent JavaMatePatch を使うこともできます。これは、MATE においてウィンドウマネージャ名を設定し、Java Swing アプリがフルスクリーン時に不適切な挙動を行うバグを解決するために作成されました。使用するには、-javaagent:JavaMatePatch-1.0.0-SNAPSHOT.jar=ウィンドウマネージャ名 を java オプションに追加してください。\n\n"
    },
    {
      "title": "フォントが読みにくい",
      "level": 3,
      "content": "下の #フォントレンダリングを改善する で書かれている方法でも、フォントによっては読みやすくならないことがあります。このようなときは、使用している MS フォントを変えてみて下さい。ttf-ms-fontsAUR パッケージをインストールしてください。\n\n"
    },
    {
      "title": "一部のアプリケーションでテキストが表示されない",
      "level": 3,
      "content": "一部のアプリケーションでテキストが全く表示されない場合は FS#40871 で提案されているように #ヒントとテクニック のオプションを使うと直るかもしれません。\n\n"
    },
    {
      "title": "灰色のウィンドウ、ウィンドウマネージャでアプリがリサイズされない、メニューがすぐに閉じる",
      "level": 3,
      "content": "標準の Java GUI ツールキットには、「リペアレンティング型でない」ウィンドウマネージャのハードコードされたリストがあります。そのリストに無いウィンドウマネージャを使用すると、一部の Java アプリケーションで問題が発生する可能性があります。最も一般的な問題の1つが、Java アプリケーションが GUI をレンダリングせずにのっぺりとした灰色のボックスとして表示される「灰色のウィンドウ」問題です。クリックでメニューを開いてもすぐに閉じてしまう問題も発生することがあります。\n\n解決に役立つ方法がいくつか存在します:\n\n- #他のウィンドウマネージャになりすます の方法。\n- _JAVA_AWT_WM_NONREPARENTING=1 環境変数を設定する。\n- その後のバージョンでは、AWT_TOOLKIT=MToolkit 環境変数を設定する。\n- xmonad の場合、SetWMName を使用する。ただし、XMonad.Hooks.EwmhDesktops を使うと効果がキャンセルされてしまうことがあります。その場合、>> setWMName \"LG3D\" を LogHook に追加すると解決できる場合があります。\n\n詳細は Problems with Java applications, Applet java console を参照してください。\n\n"
    },
    {
      "title": "JavaFX アプリケーションのデバッグ時にシステムがフリーズする",
      "level": 3,
      "content": "JavaFX アプリケーションをデバッグする際にシステムがフリーズする場合、JVM のオプション -Dsun.awt.disablegrab=true を使ってみてください。\n\nhttps://bugs.java.com/bugdatabase/view_bug?bug_id=6714678 を参照。\n\n"
    },
    {
      "title": "JavaFX の MediaPlayer コンストラクタが例外を投げる",
      "level": 3,
      "content": "JavaFX のサウンドモジュールから MediaPlayer クラスのインスタンスを作成しようとしたときに以下の例外が発生することがあります (Oracle JDK と OpenJDK の両方で発生):\n\n```\n... (i.e. FXMLLoader construction exceptions) ...\nCaused by: MediaException: UNKNOWN : com.sun.media.jfxmedia.MediaException: Could not create player! : com.sun.media.jfxmedia.MediaException: Could not create player!\n at javafx.scene.media.MediaException.exceptionToMediaException(MediaException.java:146)\n at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:511)\n at javafx.scene.media.MediaPlayer.<init>(MediaPlayer.java:414)\n at <constructor call>\n...\n```\n\n原因は JavaFX が Arch Linux のリポジトリに含まれている新しい ffmpeg と互換性がないためです。\n\n解決方法は ffmpeg-compat-55AUR をインストールすることです。または、先のバージョンがビルドに失敗する場合は、ffmpeg3.4AUR をインストールするとうまく行くかもしれません。\n\n参照: https://www.reddit.com/r/archlinux/comments/70o8o6/using_a_javafx_mediaplayer_in_arch/\n\n"
    },
    {
      "title": "Java アプリケーションで外部リンクを開けない",
      "level": 3,
      "content": "Java アプリケーションからウェブブラウザなどのリンクを開けない場合、gvfs をインストールしてください。Desktop.Action.BROWSE メソッドがこれを必要とします。[1] を参照。\n\nアプリケーションが次のようなエラーメッセージを表示する場合、この問題が起こっている証拠です: java.lang.UnsupportedOperationException: The BROWSE action is not supported on the current platform!。\n\n"
    },
    {
      "title": "QuantumRenderer の初期化でエラー: no suitable pipeline found",
      "level": 3,
      "content": "考えられる問題と解決策:\n\n- GTK2 が無い。gtk2 をインストールしてください。\n- OpenJFX が無い。java-openjfxAUR をインストールしてください。\n\n"
    },
    {
      "title": "ヒントとテクニック",
      "level": 2,
      "content": "Java アプリケーションのほとんどは Java ランタイムの前に変数を設定することで挙動をコントロールすることができます。フォーラムの投稿より、変数を設定するには ~/.bashrc (もしくは全てのユーザーに適用するには /etc/profile.d/jre.sh) に次の行を追加してください:\n\n```\nexport JDK_JAVA_OPTIONS=\"-D<option 1> -D<option 2>...\"\n```\n\n例えば、システムのアンチエイリアスがされたフォントを使用して swing に GTK のルックアンドフィールを使わせるには:\n\n```\nexport JDK_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n```\n\nこのような変数は3つ存在しており、以下の表で後に説明されるオプションが優先されます。\n\nTable content:\nJAVA_TOOL_OPTIONS | javac や jshell といったアプリケーションとツールに影響します。\nJDK_JAVA_OPTIONS | アプリケーション (java コマンドで実行されるアプリケーション全て) に影響します。Java 9 が必要。\n(コマンドラインオプション) | \"クラス名\" の引数の前で指定される引数は Java オプションです。\n_JAVA_OPTIONS | 古い方法。アプリケーションとツールに影響します。\n\n"
    },
    {
      "title": "フォントレンダリングを改善する",
      "level": 3,
      "content": "クローズドソースとオープンソースの Java 実装のどちらもがフォントのアンチエイリアスを不適当に実装していることが知られています。次のオプションを使うことでこれを修正することが可能です: -Dawt.useSystemAAFontSettings=on, -Dswing.aatext=true\n\n詳しい情報は Java 実行環境のフォントを見てください。\n\n"
    },
    {
      "title": "コマンドラインの 'Picked up JDK_JAVA_OPTIONS' メッセージを消す",
      "level": 3,
      "content": "JDK_JAVA_OPTIONS 環境変数を設定すると java (openjdk) から標準エラー出力に次のようなメッセージが書き出されます: 'Picked up JDK_JAVA_OPTIONS=...'。ターミナルにこのメッセージを表示しないようにするには、シェルのスタートアップファイルから環境変数を消去して、以下のように java のエイリアスを作成してコマンドライン引数を使ってオプションを指定するようにしてください:\n\n```\nSILENT_JAVA_OPTIONS=\"$JDK_JAVA_OPTIONS\"\nunset JDK_JAVA_OPTIONS\nalias java='java \"$SILENT_JAVA_OPTIONS\"'\n```\n\nインタラクティブでないシェル (Java プログラムのランチャースクリプトなど) は、(通常) ~/.bashrc を読み込みません。ですが、export された変数を親プロセスから継承します (~/.bash_profile を読み込むログインシェルからどこかの時点でその変数を継承します)。 そうした場合、ファイルが読み取られるのを防ぐために、~/.bashrc の先頭に文を置いているのが一般的です。そのようにして、変数がデスクトップメニューから起動されたプログラムに渡され、メッセージが邪魔をするインタラクティブシェルの場合は alias が代わりに使用されます (スクリプトでは alias は使用できません)。\n\n"
    },
    {
      "title": "GTK のルックアンドフィール",
      "level": 3,
      "content": "Java プログラムの見た目が酷い場合、swing コンポーネントのデフォルトのルックアンドフィールを設定することができます:\n\n```\nswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n```\n\n頑固な Java プログラムはクロスプラットフォームの Metal ルックアンドフィールを使用し続けることがあります。そのような場合には以下のプロパティを設定することで GTK のルックアンドフィールを使うように強制することが可能です:\n\n```\nswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n```\n\n"
    },
    {
      "title": "GTK3 のサポート",
      "level": 4,
      "content": "バージョン 9 より前の Java では、GTK のルックアンドフィールが GTK2 に対してリンクされていますが、新しいデスクトップアプリケーションは GTK3 を使用します。GTK バージョン間の非互換性のせいで、GTK3 アプリに GUI の Java プラグインが存在すると、Java の GUI を開いたときにアプリがクラッシュする場合があります。同じプロセスで GTK2 と GTK3 を混ぜることはできません。例えば LibreOffice 5.0 などがこれに該当します。\n\nGTK ルックアンドフィールは GTK バージョン 2、2.2、そして 3 に対して実行でき、デフォルトは GTK3 です。これは、次のプロパティを設定することで上書きできます:\n\n```\njdk.gtk.version=2.2\n```\n\n"
    },
    {
      "title": "HiDPI",
      "level": 3,
      "content": "GUI フレームワークによっては、他の方法を使うことで HiDPI#Java アプリケーション を利用可能にできます。\n\n"
    },
    {
      "title": "2D のパフォーマンスの向上",
      "level": 3,
      "content": "OpenGL ベースのハードウェアアクセラレーションパイプラインに切り替えることで 2D の性能が改善します:\n\n```\nexport JDK_JAVA_OPTIONS='-Dsun.java2d.opengl=true'\n```\n\n"
    }
  ]
}