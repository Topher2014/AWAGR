{
  "title": "Arch Packaging Standards (Русский)",
  "url": "https://wiki.archlinux.org/title/Arch_Packaging_Standards_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Создание пакетов\n- PKGBUILD (Русский)\n- makepkg (Русский)\n- Система сборки Arch\n- Пользовательский репозиторий Arch\n- Arch package guidelines/Security\n\nПри создании пакетов для Arch Linux придерживайтесь рекомендаций по созданию пакетов, приведённых ниже, особенно если вы собираетесь отправить новый пакет в Arch Linux. Вам также следует ознакомиться с руководствами PKGBUILD(5) и makepkg(8).\n\n"
    },
    {
      "title": "Прототип PKGBUILD",
      "level": 2,
      "content": "```\n# Maintainer: Ваше Имя <вашапочта@domain.com>\npkgname=НАЗВАНИЕ\npkgver=ВЕРСИЯ\npkgrel=1\npkgdesc=\"\"\narch=()\nurl=\"\"\nlicense=('GPL')\ngroups=()\ndepends=()\nmakedepends=()\noptdepends=()\nprovides=()\nconflicts=()\nreplaces=()\nbackup=()\noptions=()\ninstall=\nchangelog=\nsource=($pkgname-$pkgver.tar.gz)\nnoextract=()\nmd5sums=() #заполняется автоматически через updpkgsums\n\nbuild() {\n  cd \"$pkgname-$pkgver\"\n\n  ./configure --prefix=/usr\n  make\n}\n\npackage() {\n  cd \"$pkgname-$pkgver\"\n\n  make DESTDIR=\"$pkgdir/\" install\n}\n```\n\nДругие прототипы можно найти в /usr/share/pacman/ из пакета pacman.\n\n"
    },
    {
      "title": "Этикет оформления пакетов",
      "level": 2,
      "content": "- Пакеты никогда не должны устанавливаться в /usr/local/.\n- Не вводите новые переменные или функции в скрипты сборки PKGBUILD, если возможно собрать пакет без них, так как они могут конфликтовать с переменными и функциями, используемыми в само́м makepkg.\n- Если абсолютно необходима новая переменная или новая функция, добавьте перед её именем подчёркивание (_), например, _customvariable=\n- Избегайте использования /usr/libexec/ для чего-либо. Вместо этого используйте /usr/lib/$pkgname/.\n- Поле packager из мета-файла пакета может быть настроено создателем пакета путём изменения соответствующей опции в файле /etc/makepkg.conf или переопределено в файле ~/.makepkg.conf.\n- Не используйте подпрограммы makepkg (например, error, msg, msg2, plain, warning), так как они могут измениться в любой момент. Для печати данных используйте printf или echo.\n- Все важные сообщения должны выводиться во время установки с помощью файла .install. Например, если пакет требует дополнительной настройки для работы, следует включить указания.\n- Зависимости — самая распространённая ошибка при создании пакета. Пожалуйста, уделите время их тщательной проверке, например, запустив ldd на динамических исполняемых файлах, проверив инструменты, требуемые скриптами, или посмотрев документацию к программе. В этом вам может помочь утилита namcap. Она может анализировать как PKGBUILD, так и готовый пакет и предупредит вас о неправильных разрешениях, отсутствующих или лишних зависимостях и других распространённых ошибках.\n- Любые необязательные зависимости, которые не нужны для запуска пакета или его общего функционирования, не должны включаться в массив depends; вместо этого информация должна быть добавлена в массив optdepends:\n\n```\n_customvariable=\n```\n\n```\noptdepends=('cups: printing support'\n            'sane: scanners support'\n            'libgphoto2: digital cameras support'\n            'alsa-lib: sound support'\n            'giflib: GIF images support'\n            'libjpeg: JPEG images support'\n            'libpng: PNG images support')\n```\n\n- При создании описания пакета не пишите в нём само имя пакета. Например, «Nedit — текстовый редактор для X11» можно упростить до «Текстовый редактор для X11». Также старайтесь, чтобы описания не превышали ~80 символов.\n- Старайтесь, чтобы длина строки в PKGBUILD не превышала ~100 символов.\n- По возможности удаляйте пустые строки из PKGBUILD (provides, replaces и т.д.).\n- Общепринятой практикой является сохранение порядка полей PKGBUILD, как показано выше. Однако это не является обязательным, поскольку единственным требованием в данном контексте является правильный синтаксис bash.\n- Оборачивайте в кавычки переменные, которые могут содержать пробелы, такие как \"$pkgdir\" и \"$srcdir\".\n- Для обеспечения целостности пакетов убедитесь, что переменные целостности содержат правильные значения. Их можно обновить с помощью инструмента updpkgsums(8).\n\n"
    },
    {
      "title": "Именование пакета",
      "level": 2,
      "content": "- Имена пакетов могут содержать только буквы, цифры и символы @, ., _, +, -. Имена не должны начинаться с дефисов или точек. Все буквы должны быть строчными.\n- Имена пакетов не должны иметь суффикс с мажорным номером версии (например, нам не нужен libfoo2, если upstream называет его libfoo v2.3.4) в случае, если ожидается, что библиотека и её зависимости будут использовать последнюю версию библиотеки с каждым соответствующим релизом upstream. Однако для некоторых программ или зависимостей этого ожидать нельзя. В прошлом это было особенно верно для наборов инструментов виджетов, таких как GTK и Qt. Программы, зависящие от них, обычно не могут быть тривиально портированы на новую мажорную версию. В таких случаях имена пакетов должны содержать суффикс основной версии (например, gtk2, gtk3, qt4, qt5). Для случаев, когда большинство зависимостей могут обновиться на новую версию, а некоторые не могут (например, программа без исходного кода, требующая libpng12 или что-то подобное), устаревшая версия пакета может называться libfoo1, в то время как текущая версия — просто libfoo.\n\n"
    },
    {
      "title": "Версионирование пакетов",
      "level": 2,
      "content": "- Версии пакетов (то есть PKGBUILD#pkgver) должны совпадать с версией, выпущенной автором. Версии могут включать буквы, если это необходимо (например, версия nmap — 2.54BETA32). Теги версий не должны включать дефисы!. Только буквы, цифры и точки.\n- Номера релизов (то есть PKGBUILD#pkgrel) являются специфичными для пакетов Arch Linux. Они позволяют пользователям различать более новые и более старые сборки пакетов. Когда новая версия пакета выпускается впервые, счётчик релизов начинается с 1. Затем, по мере внесения исправлений и оптимизаций, пакет будет перевыпущен для публики Arch Linux, и номер релиза будет увеличиваться. Когда выходит новая версия программы — счётчик релизов пакета обнуляется до 1. Теги номеров релизов пакетов следуют тем же ограничениям именования, что и теги версий.\n\n"
    },
    {
      "title": "Зависимости пакетов",
      "level": 2,
      "content": "- Не полагайтесь на транзитивные зависимости, так как они могут сломаться, если одна из зависимостей будет обновлена.\n- Перечислите все зависимости от библиотек. Чтобы определить их, можно использовать find-libdeps(1) (часть devtools).\n\n"
    },
    {
      "title": "Связи между пакетами",
      "level": 2,
      "content": "- Не добавляйте $pkgname в PKGBUILD#provides, так как он всегда неявно предоставляется пакетом.\n- Перечислите все библиотеки, содержащиеся в пакете, в PKGBUILD#provides (например, 'libsomething.so'). Для их идентификации можно использовать find-libprovides(1) (часть devtools).\n\n"
    },
    {
      "title": "Исходники пакетов",
      "level": 2,
      "content": "- По возможности следует использовать HTTPS источники (https:// для архивов, git+https:// для git).\n- Исходники должны быть проверены с помощью PGP-подписей везде, где это возможно (это может повлечь за собой сборку из git-тегов вместо архива, если upstream подписывает коммиты и теги, но не архивы)\n- При сборке из git-тега вместо имени тега используйте хэш объекта, полученный командой git rev-parse:\n\n```\n_tag=1234567890123456789012345678901234567890 # git rev-parse \"v$pkgver\"\nsource=(git+https://$url.git?signed#tag=$_tag)\n\npkgver() {\n    cd \"$pkgname\"\n    git describe\n}\n```\n\n- Не снижайте безопасность или проверку целостности пакета (например, удалением проверки контрольной суммы или проверки подписи PGP) из-за поломки апстрима или исчезновения функции (например, пропавшая в новом релизе подпись PGP).\n- Исходники должны быть уникальными в srcdir (это может потребовать переименования их при загрузке, например, \"${pkgname}-${pkgver}.tar.gz::https://${pkgname}.tld/download/${pkgver}.tar.gz\")\n- Избегайте использования определённых зеркал (например, на sourceforge) для загрузки, так как они могут стать недоступными.\n\n"
    },
    {
      "title": "Работа с upstream",
      "level": 2,
      "content": "Считается лучшей практикой тесно сотрудничать с upstream, когда это возможно. Это подразумевает сообщение о проблемах, связанных со сборкой и тестированием пакета.\n\n- Сразу же сообщайте о проблемах в upstream.\n- По возможности добавляйте исправления.\n- Добавляйте комментарии со ссылками на соответствующие баг-трекеры апстрима в PKGBUILD (это особенно важно, так как позволяет другим людям, работающим с пакетом, понять смысл внесённых вами изменений).\n\nРекомендуется отслеживать upstream с помощью инструментов вроде nvchecker или urlwatch, чтобы узнавать о выходе новых версий.\n\n"
    },
    {
      "title": "Каталоги",
      "level": 2,
      "content": "- Файлы конфигурации должны размещаться в каталоге /etc. Если существует более одного файла конфигурации, обычно принято использовать подкаталог, чтобы сохранить /etc как можно более чистым. Используйте /etc/pkg, где pkg — имя пакета (или подходящая альтернатива, например, apache использует /etc/httpd/).\n- Файлы пакетов должны следовать этим общим рекомендациям по каталогам:\n\nTable content:\n/etc | Системно-значимые файлы конфигурации\n/usr/bin | Бинарные файлы\n/usr/lib | Библиотеки\n/usr/include | Файлы заголовков\n/usr/lib/pkg | Модули, плагины и тд.\n/usr/share/doc/pkg | Документация приложений\n/usr/share/info | Системные файлы GNU Info\n/usr/share/licenses/pkg | Лицензии приложений\n/usr/share/man | Страницы man\n/usr/share/pkg | Данные приложений\n/var/lib/pkg | Постоянное хранилище приложений\n/etc/pkg | Файлы конфигураций для pkg\n/opt/pkg | Крупные автономные пакеты\n\n- Пакеты не должны содержать ни одного из следующих каталогов: /bin /sbin /dev /home /srv /media /mnt /proc /root /selinux /sys /tmp /var/tmp /run\n\n- /bin\n- /sbin\n- /dev\n- /home\n- /srv\n- /media\n- /mnt\n- /proc\n- /root\n- /selinux\n- /sys\n- /tmp\n- /var/tmp\n- /run\n\n"
    },
    {
      "title": "Функции makepkg",
      "level": 2,
      "content": "При использовании makepkg для сборки пакета он автоматически делает следующее:\n\n1. Проверяет, установлены ли пакеты из dependencies и makedepends.\n1. Загружает исходные файлы с серверов\n1. Проверяет целостность исходных файлов\n1. Распаковывает исходные файлы\n1. Применяет все необходимые патчи\n1. Собирает программное обеспечение и устанавливает его в fake root\n1. Удаляет символы из двоичных файлов\n1. Удаляет отладочные символы из библиотек\n1. Сжимает руководства и/или страницы info.\n1. Генерирует мета-файл пакета, включаемый в каждый пакет.\n1. Сжимает fake root в файл пакета\n1. Сохраняет файл пакета в настроенном каталоге назначения (по умолчанию в текущем рабочем каталоге)\n\n"
    },
    {
      "title": "Архитектуры",
      "level": 2,
      "content": "Массив arch должен содержать 'x86_64', если скомпилированный пакет зависит от архитектуры. В противном случае используйте 'any' для независимых от архитектуры пакетов.\n\n"
    },
    {
      "title": "Лицензии",
      "level": 2,
      "content": "Смотри PKGBUILD (Русский)#license.\n\n"
    },
    {
      "title": "Воспроизводимые сборки",
      "level": 2,
      "content": "Arch работает над тем, чтобы сделать все пакеты воспроизводимыми. Создатель пакета может проверить, является ли пакет воспроизводимым, с помощью makerepropkg из devtools или repro из archlinux-repro.\n\n```\n$ makerepropkg $pkgname-1-1-any.pkg.tar.zst\n```\n\nили\n\n```\n$ repro -f $pkgname-1-1-any.pkg.tar.zst\n```\n\nЕсли во время сборки требуется временная метка, используйте переменную окружения SOURCE_DATE_EPOCH. Формат описан в документации.\n\n"
    },
    {
      "title": "Дополнительные рекомендации",
      "level": 2,
      "content": "Сперва обязательно прочитайте приведённые выше рекомендации — там перечислены важные моменты, которые не будут повторяться на приведённых ниже страницах с рекомендациями. Эти конкретные рекомендации предназначены в качестве дополнения к стандартам, перечисленным на этой странице.\n\n32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Font – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust – Shell – VCS – Web – Wine\n\nПакеты, представленные в AUR, должны дополнительно соответствовать правилам публикации пакетов в AUR.\n\n"
    }
  ]
}