{
  "title": "Qt (日本語)",
  "url": "https://wiki.archlinux.org/title/Qt_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- KDE\n- Qt と GTK アプリケーションの外観の統合\n- GTK\n\nQt はクロスプラットフォームのアプリケーション・ウィジェットツールキットです。標準の C++ を使っていますが言語機能を強化するために特別なコードジェネレータ (Meta Object Compiler、またの名を moc) とマクロをフルに活用しています。主な特徴として:\n\n- 主要なデスクトッププラットフォームと一部のモバイルプラットフォームで動作します。\n- 幅広い国際化サポート。\n- SQL データベースのアクセス、XML のパース、スレッド管理、ネットワークのサポートを提供するライブラリと、ファイルを処理するための統一されたクロスプラットフォームのアプリケーションプログラミングインタフェース (API)。\n\nQt フレームワークは主要な開発プラットフォームの一つとして、KDE ソフトウェアコミュニティや VLC、VirtualBox、Mathematica など重要なオープンソース・プロプライエタリなアプリケーションで使われています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 デフォルトの Qt ツールキット 2.1 環境変数を使う 2.2 設定ファイルを使う\n- 3 設定 3.1 Qt 5 のスタイル 3.2 Qt 4 のスタイル 3.3 Qt スタイルシート 3.4 GTK と Qt 3.5 KDE Plasma 以外の環境での Qt 5/6 アプリケーションの設定\n- 4 開発 4.1 サポートされているプラットフォーム 4.1.1 Android 4.2 ツール 4.3 バインディング 4.3.1 C++ 4.3.2 QML 4.3.3 Python (PyQt) 4.3.4 Python (PySide2) 4.3.5 C#\n- 5 トラブルシューティング 5.1 Qt の journal ログの動作を無効化/変更する 5.2 アイコンテーマが適用されない 5.3 root アプリケーションにテーマが適用されない 5.4 Qt 4 スタイルが反映されない 5.5 Qt 5 のアップデート後に Qt 5 ベースの全アプリケーションが実行できなくなる 5.6 QXcbConnection: XCB error: 2 (BadValue) 5.7 グラフィックが整列されない、スケールがおかしい 5.8 Qt アプリでデッドキーが機能しない 5.9 ファイル選択ダイアログが非常に遅く、それと関連するアプリケーションがクラッシュする 5.10 Wayland で Qt 6.7 がインプットメソッドを無視することがある\n- 6 参照\n\n- 2.1 環境変数を使う\n- 2.2 設定ファイルを使う\n\n- 3.1 Qt 5 のスタイル\n- 3.2 Qt 4 のスタイル\n- 3.3 Qt スタイルシート\n- 3.4 GTK と Qt\n- 3.5 KDE Plasma 以外の環境での Qt 5/6 アプリケーションの設定\n\n- 4.1 サポートされているプラットフォーム 4.1.1 Android\n- 4.2 ツール\n- 4.3 バインディング 4.3.1 C++ 4.3.2 QML 4.3.3 Python (PyQt) 4.3.4 Python (PySide2) 4.3.5 C#\n\n- 4.1.1 Android\n\n- 4.3.1 C++\n- 4.3.2 QML\n- 4.3.3 Python (PyQt)\n- 4.3.4 Python (PySide2)\n- 4.3.5 C#\n\n- 5.1 Qt の journal ログの動作を無効化/変更する\n- 5.2 アイコンテーマが適用されない\n- 5.3 root アプリケーションにテーマが適用されない\n- 5.4 Qt 4 スタイルが反映されない\n- 5.5 Qt 5 のアップデート後に Qt 5 ベースの全アプリケーションが実行できなくなる\n- 5.6 QXcbConnection: XCB error: 2 (BadValue)\n- 5.7 グラフィックが整列されない、スケールがおかしい\n- 5.8 Qt アプリでデッドキーが機能しない\n- 5.9 ファイル選択ダイアログが非常に遅く、それと関連するアプリケーションがクラッシュする\n- 5.10 Wayland で Qt 6.7 がインプットメソッドを無視することがある\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "Qt 6.x および 5.x は公式リポジトリから入手できます。Qt のレガシーバージョン(4.x および 3.x) は AURから入手できます。以下のパッケージでインストールできます:\n\n- Qt 6.x は qt6-base パッケージでインストールできます。ドキュメントは qt6-doc パッケージに入っています。\n- Qt 5.x は qt5-base パッケージでインストールできます。ドキュメントは qt5-doc パッケージに入っています。\n- Qt 4.x は qt4AUR パッケージでインストールできます。ドキュメントは qt4-docAUR パッケージに入っています。\n- Qt 3.x は qt3AUR パッケージでインストールできます。ドキュメントのパッケージはありません。\n\n"
    },
    {
      "title": "デフォルトの Qt ツールキット",
      "level": 2,
      "content": "qtchooserAUR[リンク切れ: package not found] をインストールすることで、/usr/bin 内の Qt のバイナリ (例: qmake) を、それの古いバージョン (例: qmake-qt4 や qmake-qt3) を指すように変更できます (デフォルトでは Qt 5 のバージョン (例: qmake-qt5) を指しています)。\n\n"
    },
    {
      "title": "環境変数を使う",
      "level": 3,
      "content": "QT_SELECT 環境変数を使用して、デフォルトの Qt ツールキットを定義することができます。例えば、Qt n を使う場合、QT_SELECT=n を設定します。\n\n"
    },
    {
      "title": "設定ファイルを使う",
      "level": 3,
      "content": "Table content:\nこの記事またはセクションは情報が古くなっています。 理由: qtchooserAUR[リンク切れ: package not found] はもはや公式にサポートされていません。 (Discuss)\n\n/etc/xdg/qtchooser/ ディレクトリ内の .conf ファイルを指すシンボリックリンク ~/.config/qtchooser/default.conf を作成することで、デフォルトの Qt ツールキットを設定できます。例えば、Qt 4 に設定するには、/etc/xdg/qtchooser/4.conf を指すシンボリックリンク ~/.config/qtchooser/default.conf を作成します:\n\n```\n$ ln -s /etc/xdg/qtchooser/4.conf ~/.config/qtchooser/default.conf\n```\n\n"
    },
    {
      "title": "Qt 5 のスタイル",
      "level": 3,
      "content": "Table content:\nこの記事またはセクションは情報が古くなっています。 理由: qt5-base はもはや QGtkStyle を使用しません。 (Discuss)\n\nQt5 は使われているデスクトップ環境によって使用するスタイルを決定します:\n\n- KDE Plasma では、実際に選択されている Qt スタイルが使われます。KDE 5 System Settings (systemsettings) を使うことで設定できます。設定項目は Appearance > Application Style > Widget Style にあります。\n- Cinnamon、GNOME、MATE、LXDE、Xfce では GTK が使われます (QGtkStyle)。\n- 他のデスクトップ環境では、Fusion が使われます。\n\n特定のスタイルを強制するには、QT_STYLE_OVERRIDE 環境変数を設定してください。特に、GTK のテーマを使いたい場合は gtk2 に設定してください (注: GTK のスタイルを使うには、以下で説明されている Qt スタイルプラグインのインストールが必要です)。Qt 5 アプリケーションは -style フラグもサポートしており、特定のスタイルを使って Qt 5 アプリケーションを起動することができます。\n\nQt 5 には次のスタイルが含まれています: Fusion、Windows。他のスタイルは別途インストールできます:\n\n- Breeze — Plasma Desktop 用の Breeze ビジュアルスタイルのアートワーク、スタイル、アセット。\n\n- Oxygen — KDE Oxygen スタイル。\n\n- Lightly — Lightly は、視覚的にモダンでミニマルであることを目指す、breeze テーマのフォークです。\n\n- QtCurve — KDE と GTK のウィジェットスタイルの設定セット。\n\n- Adwaita-Qt — Qt アプリケーションを GNOME Shell に調和させるスタイル。\n\n- Qt style plugins — GTK、Cleanlooks、Motif、Plastique などの Qt5 の追加スタイルプラグイン。\n\n- Kvantum — Adapta、Arc、Ambiance などの人気な GTK テーマと同じ見た目のスタイルが含まれている、マスタマイズ可能な SVG ベースのテーマエンジン。\n\n"
    },
    {
      "title": "Qt 4 のスタイル",
      "level": 3,
      "content": "Qt 4 のアプリケーションは動作しているデスクトップ環境の挙動を模倣しようとします、ただし、なにか問題が発生したり、設定がハードコードされている場合は別です。\n\n- KDE Plasma では、実際に選択されている Qt スタイルが使われます。KDE システム設定 (systemsettings) を使って設定することができます。設定項目は Appearance > Application Style > Widget Style にあります。\n- Cinnamon、GNOME、Xfce では GTK が使われます (QGtkStyle)。\n- 他のデスクトップ環境では、Windows が使われます。\n\nQt4 アプリケーションのルックアンドフィールを変更したい場合は、(qt4AUR パッケージに含まれている) Qt 設定 (qtconfig-qt4) ツールが使えます。QtConfig を使うことで Qt 4 アプリケーションの外観をとてもシンプルに設定することができ、現在の Qt のスタイル・色・フォントなど高度なオプションまで簡単にアクセスすることが可能です。\n\nQt は設定情報を全て /etc/xdg/Trolltech.conf (システム全体) や ~/.config/Trolltech.conf (ユーザー個別) に保存しています。このファイルには外観と関係ない情報が多く含まれているため見づらいですが、変更をファイルの最後に加えれば前の値を上書きできます (変更は [Qt] ヘッダーの下に追加してください)。\n\n例えば、テーマを QtCurve に変更するには、以下を追加します:\n\n```\n~/.config/Trolltech.conf\n```\n\n```\n...\n[Qt]\nstyle=QtCurve\n```\n\nQt 4 には次のスタイルが含まれています: CDE、Cleanlooks、GTK、Motif、Plastique、Windows。他のスタイルは別途インストールできます:\n\n- Adwaita-Qt — Qt アプリケーションを GNOME Shell に調和させるスタイル。\n\n"
    },
    {
      "title": "Qt スタイルシート",
      "level": 3,
      "content": "Qt アプリケーションのルックアンドフィールをカスタマイズするのにスタイルシート、シンプルな CSS ファイルを使うこともできます。スタイルシートを使えば、アプリケーションの全てのウィジェットの外観を修正できます。\n\n他のスタイルを使ってアプリケーションを実行するには、次のように実行してください:\n\n```\n$ qt_application -stylesheet style.qss\n```\n\nQt スタイルシートの詳細は 公式ドキュメント や他のチュートリアル を見て下さい。スタイルシートの例はこの Dolphin の変更を見て下さい。\n\n"
    },
    {
      "title": "GTK と Qt",
      "level": 3,
      "content": "GTK と Qt のアプリケーションを使っているならば、それらの見た目が上手く調和しないことに気づくでしょう。GTK スタイルと Qt スタイルを調和させたい場合は Qt と GTK アプリケーションの外観の統合 を読んで下さい。\n\n"
    },
    {
      "title": "KDE Plasma 以外の環境での Qt 5/6 アプリケーションの設定",
      "level": 3,
      "content": "Qt 4 と違って、Qt 5 にはフォントやアイコン、スタイルを設定するための qtconfig ユーティリティが含まれていません。代わりに、Qt 5 は、実行中のデスクトップ環境の設定の使用を試みます。KDE Plasma や GNOME では問題なく設定が適用されますが、他のマイナーなデスクトップ環境やウィンドウマネージャを使っている場合、Qt 5 アプリケーションでアイコンが表示されなくなることがあります。環境変数で XDG_CURRENT_DESKTOP=KDE や XDG_CURRENT_DESKTOP=GNOME と設定して使っているデスクトップ環境を偽装し、適切なアプリケーションを使ってアイコンセットを設定することで解決できます。\n\nもしくは、デスクトップ環境に依存しない Qt 5 QPA の設定ユーティリティが含まれている qt5ct/qt6ct パッケージを使う方法もあります。パッケージをインストールしたら、qt5ct/qt6ct を実行してアイコンテーマを設定し、QT_QPA_PLATFORMTHEME=qt5ct:qt6ct 環境変数を設定して下さい。それで Qt アプリケーションに設定が反映されます。もしくは Qt 5 アプリケーションの引数として --platformtheme qt5ct を指定してください。\n\nqt5ct-kdeAUR は、(KDE QML アプリケーションを含む) KDE アプリケーションとのより良い統合が可能な、パッチ適用済みの qt5ct を提供します。\n\n以下のエラーが表示され、一部のアプリで一部のアイコンが表示されない場合、oxygen と oxygen-icons をインストールしてください:\n\n```\nIcon theme \"oxygen\" not found.\nIcon theme \"oxygen\" not found.\nError: standard icon theme \"oxygen\" not found!\n```\n\n"
    },
    {
      "title": "サポートされているプラットフォーム",
      "level": 3,
      "content": "Qt は、一部の時代遅れなプラットフォームを含めて、今日存在するほとんどのプラットフォームをサポートしており、時々移植が増えることもあります。完全なリストは Qt の Wikipedia の記事を見て下さい。\n\n"
    },
    {
      "title": "Android",
      "level": 4,
      "content": "まず、AUR か Android Studio を使って、Android SDK と NDK を入手する必要があります。\n\nSDK は OpenJDK も必要とします。Qt バージョンごとに異なるバージョン要件が存在します。詳細はこのページを確認してください。\n\n次に、Android 用の Qt 5 を入手する必要があります。以下で説明されているように AUR からインストールすることもできますし、自分でビルドすることもできます。Qt wiki ページでビルド手順を見ることができます。\n\n問題が発生した場合は、既知の問題を確認すると良いでしょう。\n\n- android-armv7a-eabi-qt5AUR - armeabi-v7a\n- android-aarch64-qt5AUR - aarch64\n- android-x86-qt5AUR - x86\n- android-x86-64-qt5AUR - x86_64\n\nもしくは、公式の Qt インストーラを使うこともできます。\n\n"
    },
    {
      "title": "ツール",
      "level": 3,
      "content": "以下は公式の Qt ツールです:\n\n- Qt Creator — Qt のために作られたクロスプラットフォームの IDE で、全ての機能をサポート。\n\n- Qt Linguist — Qt アプリケーションの翻訳や国際化を素早く行うためのツールのセット。\n\n- Qt Assistant — Qt qch ファイルの再配布可能で設定可能なドキュメントリーダー。\n\n- Qt Designer — Qt ウィジェットのためのパワフルなクロスプラットフォームの GUI レイアウトとフォームビルダー。\n\n- Qt Quick Designer — QML ファイルのビジュアルエディタ、WYSIWYG をサポート。Qt Quick アプリケーションを素早くデザインしてゼロからコンポーネントを作ることができます。\n\n- qmlscene — QML ドキュメントを読み込むためのツール。QML アプリケーションの開発やデバッグを容易にします。\n\n- qmake — 様々なプラットフォームをまたがった開発プロジェクトのビルドプロセスを簡素化するのを助けるツール。cmake に似ていますが、オプションは少なめで Qt アプリケーションのために作られています。\n\n- uic — *.ui XML ファイルを読み込み、対応する C++ ファイルを生成するツール。\n\n- rcc — ビルドプロセスの間に Qt アプリケーションにリソース (画像など) を埋め込むために使われるツール。Qt リソース (.qrc) ファイルで指定されたデータを含む C++ ソースファイルを生成します。\n\n- moc — Qt の C++ 拡張を扱うツール (シグナルとスロット機構、実行時型情報、動的プロパティシステムなど)。\n\n"
    },
    {
      "title": "バインディング",
      "level": 3,
      "content": "Qt には人気な言語のすべてに対してバインディングが存在します。完全なリストは https://wiki.qt.io/Language_Bindings を参照してください。\n\n以下では 'Hello world!' というメッセージを小さなウィンドウで表示するサンプルを示しています。\n\n"
    },
    {
      "title": "C++",
      "level": 4,
      "content": "- パッケージ: qt5-base\n- ウェブサイト: https://www.qt.io/developers/\n- ビルド: g++ $(pkg-config --cflags --libs Qt5Widgets) -fPIC -o hello hello.cpp\n- 実行コマンド: ./hello\n\n```\nhello.cpp\n```\n\n```\n#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char **argv)\n{\n    QApplication app(argc, argv);\n    QLabel hello(\"Hello world!\");\n\n    hello.show();\n    return app.exec();\n}\n```\n\n"
    },
    {
      "title": "QML",
      "level": 4,
      "content": "- パッケージ: qt5-declarative.\n- ウェブサイト: https://doc.qt.io/qt-5/qtquick-qmlscene.html\n- 実行コマンド: qmlscene hello.qml\n\n```\nhello.qml\n```\n\n```\nimport QtQuick 2.3\n\nRectangle {\n    id: page\n    width: 400; height: 100\n    color: \"lightgray\"\n\n    Text {\n        id: helloText\n        text: \"Hello world!\"\n        anchors.horizontalCenter: page.horizontalCenter\n        anchors.verticalCenter: page.verticalCenter\n        font.pointSize: 24; font.bold: true\n    }\n}\n```\n\n"
    },
    {
      "title": "Python (PyQt)",
      "level": 4,
      "content": "- パッケージ: python-pyqt5 - Python 3 バインディング\n- ウェブサイト: https://riverbankcomputing.com/software/pyqt/intro\n- 実行コマンド: python hello-pyqt.py.\n\n```\nhello-pyqt.py\n```\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QLabel\n\napp = QApplication(sys.argv)\nlabel = QLabel(\"Hello world!\")\n\nlabel.show()\nsys.exit(app.exec_())\n```\n\n"
    },
    {
      "title": "Python (PySide2)",
      "level": 4,
      "content": "- パッケージ: pyside2AUR\n- ウェブサイト: https://wiki.qt.io/Qt_for_Python\n- 実行コマンド: python hello-pyside.py\n\n```\nhello-pyside2.py\n```\n\n```\nimport sys\nfrom PySide2.QtWidgets import QApplication, QLabel\n\napp = QApplication(sys.argv)\nlabel = QLabel(\"Hello world!\")\n\nlabel.show()\nsys.exit(app.exec_())\n```\n\n"
    },
    {
      "title": "C#",
      "level": 4,
      "content": "QtSharp を参照。\n\n"
    },
    {
      "title": "Qt の journal ログの動作を無効化/変更する",
      "level": 3,
      "content": "KDE などの Qt ベースのデスクトップ環境を使用すると、systemd journal に頻繁にデバッグ情報が出力される場合があります。\n\nQT_LOGGING_RULES 環境変数を設定することで、この挙動を変更できます。例えば、ログを完全に無効化するには:\n\n```\n/etc/environment\n```\n\n```\nQT_LOGGING_RULES='*=false'\n```\n\nデバッグのログのみを無効化したい場合は、 QT_LOGGING_RULES=\"*.debug=false\" を使用してください。\n\n"
    },
    {
      "title": "アイコンテーマが適用されない",
      "level": 3,
      "content": "Qt 5.1 から SVG のサポートは1つのモジュールに移動されました。qt5-base は qt5-svg を依存パッケージとしていないため、qt5-base がインストールされていても qt5-svg がインストールされていない場合があります。この場合、SVG がサポートされないためにアイコンが何もエラーを出さずにスキップされてしまい、アイコンテーマが使われなくなってしまいます。qt5-svg をインストールすることで問題は解決します。\n\n"
    },
    {
      "title": "root アプリケーションにテーマが適用されない",
      "level": 3,
      "content": "ユーザーテーマファイル ($XDG_CONFIG_HOME/Trolltech.conf) は他のアカウントから読み込まれないため、root で X アプリケーションを起動した場合は設定したテーマが適用されません。以下の方法で解決できます:\n\n- シンボリックリンクを作成する。例: # ln -s /home/[username]/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n- システム全体に適用されるテーマファイルを作成: /etc/xdg/Trolltech.conf。\n- root でテーマを設定する。\n\n```\n# ln -s /home/[username]/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n```\n\n"
    },
    {
      "title": "Qt 4 スタイルが反映されない",
      "level": 3,
      "content": "(KDE ではない) Qt 4 アプリケーションが選択した Qt 4 スタイルを使用しない場合、KDE のスタイル (Oxygen や Phase など) がある場所を Qt 4 に教える必要があります。QT_PLUGIN_PATH 環境変数を設定する必要があります。例:\n\n```\nQT_PLUGIN_PATH=$HOME/.kde4/lib/kde4/plugins/:/usr/lib/kde4/plugins/\n```\n\nこれで qtconfig-qt4 が KDE のスタイルを見つけられるようになり全てが上手く行くはずです。\n\nもしくは、Qt 4 の styles ディレクトリから KDE4 の styles ディレクトリにシンボリックリンクを作成します:\n\n```\n# ln -s /usr/lib/{kde,qt}4/plugins/styles/theme_name\n```\n\n"
    },
    {
      "title": "Qt 5 のアップデート後に Qt 5 ベースの全アプリケーションが実行できなくなる",
      "level": 3,
      "content": "以下のようなエラーが表示される場合:\n\n```\nQt FATAL: Cannot mix incompatible Qt library (version 0x50900) with this library (version 0x50901)\n```\n\n最新バージョンの Qt 5 を使ってコンパイルされてない Qt 5 プラットフォームテーマあるいはスタイルプラグインを使っているのがエラーの原因です。特定のバージョンの Qt に依存する Qt のプライベートヘッダーを使っており、soname が一致しません。QT_STYLE_OVERRIDE と QT_QPA_PLATFORMTHEME 環境変数をチェックして使用しているテーマ・スタイルを確認し、テーマやスタイルの AUR パッケージを再ビルド・インストールしてください。\n\n"
    },
    {
      "title": "QXcbConnection: XCB error: 2 (BadValue)",
      "level": 3,
      "content": "以下のような内容でファイルを作成してください [1]:\n\n```\n/etc/xdg/QtProject/qtlogging.ini\n```\n\n```\n[Rules]\nqt.qpa.xcb.xcberror=false\n```\n\n"
    },
    {
      "title": "グラフィックが整列されない、スケールがおかしい",
      "level": 3,
      "content": "HiDPI#Qt 5 を参照。\n\n"
    },
    {
      "title": "Qt アプリでデッドキーが機能しない",
      "level": 3,
      "content": "適切なキーボード設定を行っていて、かつ GTK アプリ (あるいは他のウィジェット・ツールキット) ではデッドキーが機能しているが、KDE や Qt アプリでは機能しない場合、Xorg セッションに適切な構成ファイルが読み込まれていないのかもしれません。\n\n確かめる方法は以下の通りです:\n\n1. qt.xkb.compose.debug ログルールを有効化した状態で Qt アプリを起動する。例えば、qtqr を起動するには QT_LOGGING_RULES=qt.xkb.compose.debug=true qtqr\n1. つぎに、デッドキーを使って文字を入力してみる。例えば、ê (サーカムフレックス付き小文字のラテン E) を入力するには <dead_circumflex> <e>。\n1. qt.xkb.compose: failed to create compose table という出力が出た場合、この問題を抱えているのでしょう。\n\nこれを修正するには、まずロケールを特定してください。次に、あなたのロケールが /usr/share/X11/locale/ 内に独自のフォルダ (例: fr_FR.UTF-8) を持っていない場合、compose.dir マッピングファイルからそれを探し、対応する構成ファイルを見つけてください (例: en_US.UTF-8/Compose):\n\n```\n$ grep fr_FR.UTF-8 /usr/share/X11/locale/compose.dir\n```\n\n```\nen_US.UTF-8/Compose             fr_FR.UTF-8\nen_US.UTF-8/Compose:            fr_FR.UTF-8\n```\n\n次に、~/.XCompose を作成または編集し、この構成ファイルを追加してください:\n\n```\n~/.XCompose\n```\n\n```\ninclude \"%S/en_US.UTF-8/Compose\"\n```\n\n最後に、Qt アプリを再起動すれば、デッドキーが機能し、QT_LOGGING_RULES=qt.xkb.compose.debug=true でデバッグしても qt.xkb.compose: failed to create compose table エラーも出力されないはずです。\n\n"
    },
    {
      "title": "ファイル選択ダイアログが非常に遅く、それと関連するアプリケーションがクラッシュする",
      "level": 3,
      "content": "~/.config/QtProject.conf ファイルにはゴミデータが溜まっていき、数百メガバイトにまでなります。これを削除してください。[2][3]\n\n"
    },
    {
      "title": "Wayland で Qt 6.7 がインプットメソッドを無視することがある",
      "level": 3,
      "content": "Qt は Wayland プラットフォーム向けに text-input-v3 を導入しました。しかし、この実装は完璧ではなく、インプットメソッドの使用を妨げてしまう問題を引き起こすことがあります。\n\n使用している Wayland コンポジタが text-input-v2 プロトコルに対応している場合は、以下の環境変数をグローバルに設定してください:\n\n```\n/etc/environment\n```\n\n```\nQT_WAYLAND_TEXT_INPUT_PROTOCOL=zwp_text_input_v2\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- 公式ウェブサイト\n- Qt ドキュメント\n- Planet Qt\n\n"
    }
  ]
}