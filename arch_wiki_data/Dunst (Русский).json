{
  "title": "Dunst (Русский)",
  "url": "https://wiki.archlinux.org/title/Dunst_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\nСсылки по теме\n\n- Desktop notifications\n\nDunst — это легковесная альтернатива для демонов уведомлений, предоставляемых большинством сред рабочего стола.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет dunst.\n\nПример конфигурационного файла включен в /etc/dunst/dunstrc. Скопируйте этот файл в ~/.config/dunst/dunstrc и отредактируйте его соответствующим образом.\n\nЗапустите /usr/bin/dunst и убедитесь, что ваш оконный менеджер или среда рабочего стола запускает его при запуске/входе в систему.\n\n"
    },
    {
      "title": "Оформление",
      "level": 2,
      "content": "Тексту в уведомлениях можно придать определенный стиль. Некоторые примеры: жирный шрифт, курсив, зачеркивание и подчеркивание. Полное описание см. в Разметка Pango. Pango может быть удален из уведомлений, если markup установлен в none.\n\nМожно задать форматирование уведомления следующими параметрами:\n\n```\n%a  (application) приложение\n%s  (summary) заголовок\n%b  (body) основное тело\n%i  (iconname) имя иконки, включая путь \n%I  (iconname) имя иконки, исключая путь\n%p  (progress) прогресс (если установлен от [  0%] до [100%]) или ничего\n```\n\nИх можно использовать в сочетании с HTML-разметкой. Например, format можно задать как <b>%s</b>\\n%b для выделения жирным шрифтом заголовка уведомления, переноса строки и неформатированного основного тела.\n\n"
    },
    {
      "title": "Наборы иконок",
      "level": 3,
      "content": "Наборы иконки задаются параметром icon_path в разделе global конфигурационного файла. Используются status, devices и legacy. По умолчанию Dunst использует gnome-icon-themeAUR. Например, переключение на adwaita-icon-theme (который наследует gnome-icon-themeAUR) следует указать так:\n\n```\nicon_path = /usr/share/icons/Adwaita/16x16/status/:/usr/share/icons/Adwaita/16x16/devices/:/usr/share/icons/Adwaita/16x16/legacy/\n```\n\nВ разделе global вместо указания пути к директории с набором иконок можно использовать название темы. В этом случае необходимо установить enable_recursive_icon_lookup=true, чтобы включить поиск во вложенных директориях темы:\n\n```\nicon_theme = Papirus\nenable_recursive_icon_lookup = true\n```\n\n"
    },
    {
      "title": "Сочетания клавиш",
      "level": 2,
      "content": "Dunst можно управлять с помощью dunstctl. Вы можете изменить сочетания клавиш для вызова dunstctl.\n\nНапример, для закрытия всех оповещений:\n\n```\n$ dunstctl close-all\n```\n\nДля показа истории:\n\n```\n$ dunstctl history-pop\n```\n\n"
    },
    {
      "title": "Rules",
      "level": 2,
      "content": "You can create rules in your dunstrc file which match certain notifications and then perform an action on it such as executing a script.\n\n"
    },
    {
      "title": "Filtering",
      "level": 3,
      "content": "To create a new rule, create a new section with a custom name in your configuration file. In that section you can now use the attributes appname, summary, body, icon, category, match_transient and msg_urgency to match the notification. Globbing is supported. See Scripting for an example. Start dunst with the -print option to find out useful information about a notification to write proper rules.\n\n"
    },
    {
      "title": "Modifying",
      "level": 3,
      "content": "When a notification is matched you can perform certain actions on it like modifying the format string, which is especially useful if you want to completely ignore certain notifications. In that case simply add the line format=\"\" to your rule.\n\nAnother useful feature is if you want to keep certain notifications out of your history for example if you use dunst as a Volume indicator. To achieve this simply add history_ignore=yes to your rule.\n\n"
    },
    {
      "title": "Scripting",
      "level": 3,
      "content": "Dunst can be configured to run scripts based on certain notification content. Here is an example using Dunst to run a script when someone from pidgin signs on:\n\n```\n[signed_on]\n   appname = Pidgin\n   summary = \"*signed on*\"\n   urgency = low\n   script = do_something.sh\n```\n\nThe specified script will be passed the following parameters in that order: appname, summary, body, icon, urgency.\n\n"
    },
    {
      "title": "Disable dunst temporarily",
      "level": 2,
      "content": "To disable dunst temporarily there are two options.\n\nOnce paused dunst will hold back all notifications. After enabling dunst again all held back notifications will be displayed.\n\n"
    },
    {
      "title": "Dunstify",
      "level": 2,
      "content": "Dunstify is an alternative to the notify-send[ссылка недействительна: раздел не найден] command which is completely compatible to notify-send and can be used alongside it, but offers some more features. Dunstify works only with the Dunst notification daemon.\n\nAdditionally to the options available in notify-send, dunstify offers some more features like IDs and actions.\n\n"
    },
    {
      "title": "Replacing notifications",
      "level": 3,
      "content": "You can assign an ID to a notification by calling dunstify with the -r ID option, where ID must be an integer. If a notification with that ID already exists it will be replaced with the new one. You may also close a notification with dunstify -C ID.\n\nHowever, for most use cases, implementing tags is preferred over micromanaging IDs because the latter option has many hidden pitfalls [1]. Replacing IDs may be considered for debugging and for very complex notification senders instead of common practice [2].\n\nNotifications with the same tag (\"test\" in this example) are replaced without having to care for IDs.\n\n```\n$ dunstify -h string:x-dunst-stack-tag:test Test -A 'tested,default'\n$ dunstify -h string:x-dunst-stack-tag:test Testing\n```\n\n"
    },
    {
      "title": "Actions",
      "level": 3,
      "content": "You can define actions which can be invoked directly from the notification by specifying one or more --action=action,label parameters. For instance:\n\n```\ndunstify --action=\"replyAction,reply\" \"Message received\"\n```\n\nThe user can then access the specified actions via Dunst's context menu. The call to dunstify will block until either the notification disappears or an action is selected. In the former case dunstify will return 1 if the notification timed out and 2 if it was dismissed manually [3]. In the latter case it returns the action which was selected by the Dunst context menu.\n\nIn addition to invoking actions with the context menu, you may also define how mouse events invoke actions [4]. This allows Dunst to be used interactively, as was suggested in [5]. When a notification has only one action, or when an action is named \"default\", that action may be invoked by middle-clicking the notification (by default or when dunstrc defines mouse_middle_click = do_action).\n\n```\nreply_action () {}\nforward_action () {}\nhandle_dismiss () {}\n\nACTION=$(dunstify --action=\"default,Reply\" --action=\"forwardAction,Forward\" \"Message Received\")\n\ncase \"$ACTION\" in\n\"default\")\n    reply_action\n    ;;\n\"forwardAction\")\n    forward_action\n    ;;\n\"2\")\n    handle_dismiss\n    ;;\nesac\n```\n\n"
    },
    {
      "title": "Using dunstify as volume/brightness level indicator",
      "level": 3,
      "content": "You can use the replace id feature to implement a simple volume or brightness indicator notification like in this picture [6].\n\nTo realize that volume indicator place the following script somewhere on your PATH.\n\n```\n#!/bin/bash\n# changeVolume\n\n# Arbitrary but unique message tag\nmsgTag=\"myvolume\"\n\n# Change the volume using alsa(might differ if you use pulseaudio)\namixer -c 0 set Master \"$@\" > /dev/null\n\n# Query amixer for the current volume and whether or not the speaker is muted\nvolume=\"$(amixer -c 0 get Master | tail -1 | awk '{print $4}' | sed 's/[^0-9]*//g')\"\nmute=\"$(amixer -c 0 get Master | tail -1 | awk '{print $6}' | sed 's/[^a-z]*//g')\"\nif [[ $volume == 0 || \"$mute\" == \"off\" ]]; then\n    # Show the sound muted notification\n    dunstify -a \"changeVolume\" -u low -i audio-volume-muted -h string:x-dunst-stack-tag:$msgTag \"Volume muted\" \nelse\n    # Show the volume notification\n    dunstify -a \"changeVolume\" -u low -i audio-volume-high -h string:x-dunst-stack-tag:$msgTag \\\n    -h int:value:\"$volume\" \"Volume: ${volume}%\"\nfi\n\n# Play the volume changed sound\ncanberra-gtk-play -i audio-volume-change -d \"changeVolume\"\n```\n\nNow simply bind changeVolume 2dB+ unmute etc. to some hotkey and you are done. You might also want to make dunst ignore these type of notifications in its history. See #Modifying.\n\n"
    },
    {
      "title": "Overwrite previous notification",
      "level": 3,
      "content": "For some notifications (for example sound or brightness), you might want to overwrite the previous notification. You can either use the Dunst method in #Replacing notifications or refer to Desktop notifications#Replace previous notification for a more general example.\n\n"
    },
    {
      "title": "Dunst fails to start via systemd",
      "level": 3,
      "content": "When using dunst without a Display Manager, the DISPLAY environment variable might not be correctly set.[7]\n\nTo fix this, add the following to your .xinitrc:\n\n```\nsystemctl --user import-environment DISPLAY\n```\n\n"
    },
    {
      "title": "Non-matching font sizes (Emojis much larger than text)",
      "level": 3,
      "content": "This is caused by fontconfig not rescaling bitmap fonts. This is usually only noticed with certain emoji fonts (e.g. noto-fonts-emoji)\n\nTo solve, simply run:\n\n```\n# ln -s /etc/fonts/conf.avail/10-scale-bitmap-fonts.conf /etc/fonts/conf.d/\n```\n\nand restart Dunst.\n\n"
    },
    {
      "title": "Notifications from some applications don't obey timeout rules",
      "level": 3,
      "content": "You have set my timeouts to 30 for all urgencies.\n\nHowever, notifications from some applications, for example discord, mattermost, gitlab, disappear very quickly. approximately after just 3 seconds. See issue #276.\n\nThis happens because it comes push to close. A special parameter was introduced to ignore this - ignore_dbusclose.\n\n```\nignore_dbusclose (default: false)\n\n    Ignore the dbus closeNotification message. This is useful to enforce the timeout set by dunst configuration. Without this parameter, an application may close the notification sent before the user defined timeout.\n```\n\n"
    }
  ]
}