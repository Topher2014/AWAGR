{
  "title": "Firejail (Русский)",
  "url": "https://wiki.archlinux.org/title/Firejail_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Security\n- AppArmor\n- Bubblewrap\n\nFirejail - это простая в использовании Setuid программа-песочница, снижающая риск нарушения безопасности, ограничивая среду запуска недоверенных приложений с помощью пространств имен Linux, seccomp-bpf и возможностей Linux.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите либо пакет firejail, либо firejail-gitAUR. Также доступно приложение GUI для работы с Firejail - firetools.\n\n"
    },
    {
      "title": "Конфигурация",
      "level": 2,
      "content": "Большинству пользователей не потребуется никакой пользовательской конфигурации и они могут перейти к следующим действиям #Использование.\n\nFirejail использует профили для установки защиты безопасности для каждого из приложений, выполняемых внутри него - профили по умолчанию можно найти в /etc/firejail/application.profile. Если вам требуются пользовательские профили для приложений, не включенных в пакет, или вы хотите изменить значения по умолчанию, то можете поместить новые правила или копии значений по умолчанию в каталог . Вы можете иметь несколько файлов пользовательских профилей для одного приложения, а также использовать один и тот же файл профиля для нескольких приложений.\n\nЕсли у firejail нет профиля для конкретного приложения - он использует ограничительный общесистемный профиль по умолчанию. Это может привести к тому, что приложение не будет работать так, как нужно, без предварительного создания пользовательского профиля с меньшими ограничениями.\n\nОбратитесь к firejail-profile(5).\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Чтобы выполнить приложение, используя защиту firejail по умолчанию для этого приложения (профиль по умолчанию), выполните следующее:\n\n```\n$ firejail program_name\n```\n\nРазовые дополнения к профилю по умолчанию могут быть добавлены как опции командной строки (см. firejail(1)). Например, чтобы выполнить okular с защитой seccomp, выполните следующее:\n\n```\n$ firejail --seccomp okular\n```\n\nДля одной программы можно задать несколько профилей не по умолчанию. После создания файла профиля вы можете использовать его, выполнив следующие действия:\n\n```\n$ firejail --profile=/absolute/path/to/profile program_name\n```\n\n"
    },
    {
      "title": "Использование Firejail по-умолчанию",
      "level": 3,
      "content": "Чтобы использовать Firejail по умолчанию для всех приложений, для которых у него есть профили, запустите инструмент firecfg с помощью sudo:\n\n```\n$ sudo firecfg\n```\n\nЭто создает символические ссылки в /usr/local/bin, указывающие на /usr/bin/firejail для программ, для которых Firejail имеет профили по умолчанию или созданные самостоятельно. Обратите внимание, что firecfg(1) только симлинкует программы, перечисленные в /etc/firejail/firecfg.config. Некоторые программы CLI отсутствуют, такие как: tar, curl и git. Им ссылки необходимо указывать вручную. О том, почему они не включены, смотрите Профили не в firecfg #2507. firecfg дополнительно добавляет текущего пользователя в базу данных доступа пользователей Firejail и проверяет файлы /usr/share/applications/*.desktop, если они содержат полный путь к соответствующему исполняемому файлу, удаляет полный путь и копирует их в . Это гарантирует, что будут использованы симлинки в /usr/local/bin, что предотвращает обход Firejail. Если sudo не установлен в вашей системе, то следует выполнить:\n\n```\n# firecfg\n```\n\nот root и\n\n```\n$ firecfg --fix\n```\n\nкак пользователь, чтобы исправить файлы .desktop.\n\nВозможны случаи, когда потребуется вручную изменить строку Exec= в файле .desktop в ~/.local/share/applications/ для явного вызова Firejail.\n\n```\n/etc/pacman.d/hooks/firejail.hook\n```\n\n```\n[Trigger]\nType = Path\nOperation = Install\nOperation = Upgrade\nOperation = Remove\nTarget = usr/bin/*\nTarget = usr/local/bin/*\nTarget = usr/share/applications/*.desktop\n\n[Action]\nDescription = Configure symlinks in /usr/local/bin based on firecfg.config...\nWhen = PostTransaction\nDepends = firejail\nExec = /bin/sh -c 'firecfg >/dev/null 2>&1'\n```\n\nЧтобы вручную отобразить отдельные приложения, выполните:\n\n```\n# ln -s /usr/bin/firejail /usr/local/bin/application\n```\n\n- /usr/local/bin должен быть установлен перед /usr/bin и /bin в переменной окружения PATH.\n- Убедитесь, что значение PATH изменено для корректного запуска вашего окружения рабочего стола или оконного менеджера. Например, при запуске i3 с помощью .xinitrc убедитесь в правильности установки PATH в ~/.profile. При использовании менеджера входа в систему ly в файле /etc/ly/config.ini есть возможность задать путь вручную.\n- Чтобы запустить символьную программу с пользовательскими настройками Firejail - просто добавьте префикс firejail, как показано в #Конфигурация.\n- Для демона вам нужно будет перезаписать файл systemd unit для этого демона, чтобы вызвать firejail, см. Редактирование файлов юнитов.\n- Символические ссылки на gzip и xz мешают makepkgвозможности предварительной загрузки libfakeroot.so. См. BBS#230913.\n\n"
    },
    {
      "title": "Использование с hardened_malloc",
      "level": 3,
      "content": "hardened_mallocAUR это усиленная реализация распределителя glibc malloc(), изначально написанная для Android, но расширенная для использования на настольных компьютерах. Хотя он еще не интегрирован в glibc, его можно использовать выборочно с помощью LD_PRELOAD. Ниже показан правильный способ запуска приложения в firejail с использованием hardened_malloc. Чтобы сделать его постоянным, вам нужно создать собственную запись в /usr/local/bin для нужного приложения.\n\n```\n$ firejail --env=LD_PRELOAD='/usr/lib/libhardened_malloc.so' /usr/bin/firefox\n```\n\nВ качестве альтернативы добавьте следующее в пользовательский профиль:\n\n```\nenv LD_PRELOAD=/usr/lib/libhardened_malloc.so\n```\n\nРазличные переменные окружения и настройки, которые можно использовать для настройки hardened_malloc, можно найти на его github-странице.\n\n"
    },
    {
      "title": "Включение поддержки AppArmor",
      "level": 3,
      "content": "Начиная с версии 0.9.60-1, Firejail поддерживает более прямую интеграцию с AppArmor через общий профиль AppArmor. Во время установки профиль firejail-default помещается в каталог /etc/apparmor.d, и его необходимо загрузить в ядро, выполнив следующую команду от root:\n\n```\n# apparmor_parser -r /etc/apparmor.d/firejail-default\n```\n\nСмотрите firejail(1) § APPARMOR.\n\nЛокальная настройка профиля apparmor поддерживается путем редактирования файла /etc/apparmor.d/local/firejail-local\n\nAppArmor уже включен для большего количества профилей Firejail. Есть несколько способов включить ограничение AppArmor поверх профиля безопасности Firejail:\n\n- Передайте флаг --apparmor в Firejail в командной строке, например, .\n- Используйте пользовательский профиль и добавьте команду --apparmor.\n- Включите Apparmor глобально в /etc/firejail/globals.local и отключите по мере необходимости с помощью ignore apparmor в /etc/firejail/ProgramName.local.\n\nОбратите внимание, что включение AppArmor вышеуказанными методами всегда означает, что используется /etc/apparmor.d/firejail-default. Если вы хотите использовать конкретный профиль AppArmor для приложения - вам нужно использовать упомянутую выше команду ignore apparmor. Однако это не рекомендуется, поскольку использование Firejail и AppArmor для одних и тех же приложений часто создает проблемы.\n\n"
    },
    {
      "title": "Проверка использования Firejail",
      "level": 3,
      "content": "```\n$ firejail --list\n```\n\nБолее полный результат дает\n\n```\n$ firejail --tree\n```\n\n"
    },
    {
      "title": "Белые и черные списки",
      "level": 3,
      "content": "Черные списки активно используются в различных /etc/firejail/*.inc файлах, которые включены в большинство профилей. Черные списки бывают разрешающими:\n\n- Запретить доступ к директории или файлу и разрешить все остальное: blacklist <directory/file>\n- Запретить/отменить/игнорировать черный список каталога или файла, уже внесенного в черный список, например, в файле *.inc: noblacklist <directory/file>\n\nПорядок их появления в профиле важен: директивы noblacklist должны быть добавлены выше директив blacklist.\n\nБелые списки блокируют все, что не включено в явный белый список. Их не следует использовать в профилях приложений, которым нужен доступ к произвольным местам (например, текстовые редакторы, просмотрщики/редакторы изображений).\n\n- Разрешить доступ к каталогу или файлу и запретить все остальное: whitelist <directory/file>\n- Запретить/отменить/игнорировать белый список каталога или файла, уже включенного в белый список, например, в файле *.inc: nowhitelist <directory/file>\n\nПорядок их появления в профиле важен: директивы nowhitelist должны быть добавлены выше директив whitelist.\n\nБелый список всегда составляется перед черным списком. Как уже говорилось, директива белого списка заносит в черный список все остальное. Поэтому директива blacklist является запасным вариантом, если нет директив whitelist или если директива whitelist слишком разрешающа.\n\nДирективы (no)blacklist и (no)whitelist часто используются в комбинации. Пример: /etc/firejail/disable-programs.inc (который включается во все профили) содержит директиву:\n\n```\nblacklist ${HOME}/.mozilla\n```\n\nчтобы заблокировать доступ к этой директории для всех приложений, находящихся в песочнице Firejail. /etc/firejail/firefox.profile должен отключить эту директиву и должен добавить директиву белого списка, чтобы разрешить доступ к этому каталогу (поскольку профиль Firefox является профилем с белым списком):\n\n```\nnoblacklist ${HOME}/.mozilla\nwhitelist ${HOME}/.mozilla\n```\n\n"
    },
    {
      "title": "Написание профиля",
      "level": 3,
      "content": "Основной процесс заключается в следующем:\n\n1. Скопировать /usr/share/doc/firejail/profile.template в /etc/firejail/ или ~/.config/firejail/ и переименовать его в ProfileName.profile, где ProfileName должен совпадать с названием запускаемого в песочнице приложения\n1. Измените строку include PROFILE.local на include ProfileName.local\n1. Постепенно комментируйте/раскомментируйте различные опции, проверяя на каждом этапе, что приложение работает в новой песочнице. Не меняйте порядок разделов в этом шаблоне.\n1. Подробное объяснение возможных опций для профиля Firejail можно найти на странице руководства firejail-profile(5).\n1. Проверьте профиль на наличие дыр в безопасности, смотрите #Профили тестирования.\n\nЕсли вы хотите создать профиль с белым списком (т.е. профиль, который содержит директивы whitelist), вы можете создать белый список разрешенных мест, выполнив команду\n\n```\n$ firejail --build application\n```\n\nПомните, что профиль с белым списком проблематичен для приложений, которым требуется доступ к произвольным местам (например, текстовые редакторы или файловые менеджеры).\n\n- Идея состоит в том, чтобы быть как можно более ограничительным, сохраняя при этом удобство использования. Это может потребовать пожертвовать потенциально опасной функциональностью и изменить привычки беспечной работы.\n- По умолчанию фильтры seccomp работают по черному списку (который можно найти в /usr/share/doc/firejail/syscalls.txt). Можно использовать seccomp.keep для создания пользовательского белого списка фильтров для приложения. [1]. Удобным способом автоматизации этих шагов является выполнение /usr/lib/firejail/syscalls.sh. Если приложение все еще не работает из-за отсутствия syscalls, следует следовать инструкциям в нижней части /usr/share/doc/firejail/syscalls.txt.\n\n"
    },
    {
      "title": "Постоянная локальная адаптация",
      "level": 4,
      "content": "Стандартная схема профиля включает возможность постоянной локальной настройки посредством включения файлов .local[2]. В основном, каждый официально поддерживаемый профиль содержит строки include ProgramName.local и include globals.local. Эти файлы *.local могут быть расположены в /etc/firejail или в ~/.config/firejail. Поскольку порядок старшинства определяется тем, какой из них читается первым, это дает очень мощный способ локальной настройки. Например, по ссылке этот вопрос по firejail для глобального включения Apparmor и отключения соединения с интернетом, можно просто создать/отредактировать /etc/firejail/globals.local, включив в него строки\n\n```\n# включить Apparmor и отключить Интернет глобально\nnet none\napparmor\n```\n\nЗатем, чтобы позволить, например, \"curl\" подключаться к интернету, но при этом сохранить ограничение apparmor, нужно создать/отредактировать /etc/firejail/curl.local, включив в него эти строки.\n\n```\n# разрешить доступ в интернет для curl\nignore net\n```\n\nПоскольку curl.local читается раньше globals.local, ignore net отменяет net none, и, в качестве бонуса, вышеуказанные изменения будут сохраняться в будущих обновлениях.\n\n"
    },
    {
      "title": "Профили тестирования",
      "level": 3,
      "content": "Для тестирования и аудита профиля Firejail вам будет полезно следующее:\n\n1. firejail --debug $Program > $PathToOutputFile дает подробное описание песочницы\n1. firejail --debug-blacklists $Program и firejail --debug-whitelists $Program отображает каталоги и файлы из черного и белого списков для текущего профиля.\n1. firejail --debug-caps выдает список заглушек, поддерживаемых текущей сборкой ПО Firejail. Это полезно при составлении белого списка заглушек.\n1. firejail --help для полного списка параметров --debug\n1. firemon PID следит за запущенным процессом. См. firemon --help для подробностей\n1. Выполнение sudo jailcheck тестов, запущенных в песочнице. Смотрите страницу man jailcheck(1) для подробностей.\n1. checksec также могут быть полезны для проверки того, какие стандартные средства безопасности используются\n\n"
    },
    {
      "title": "Firejail с Xorg",
      "level": 2,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nНа Xorg любая программа может отображать весь ввод с клавиатуры и записывать все экраны. Цель песочницы X11 - ограничить такое поведение, что особенно проблематично для сложных программ, работающих с потенциально вредоносным вводом, таких как браузеры.\n\nXephyr и Xpra позволяют использовать \"песочницу\" Xorg. Хотя Xpra обеспечивает полную поддержку буфера обмена, рекомендуется использовать Xephyr из-за очень заметного и постоянного лага при работе со вложенными сессиями X11.\n\nДля полной настройки с (не идеальной) поддержкой буфера обмена (буфер обмена по-прежнему всегда общий), смотрите Руководство Gentoo от Sakaki, особенно раздел о буфере обмена и автоматическом масштабировании.\n\nВ качестве альтернативы, если поддержка буфера обмена не нужна, но нужно управлять окнами, установите отдельный оконный менеджер, например Openbox.\n\nxephyr-screen WidthxHeight можно установить в /etc/firejail/firejail.config, где Width и Height указаны в пикселях и основаны на разрешении вашего экрана.\n\nЧтобы открыть песочницу:\n\n```\n$ firejail --x11 --net=device openbox\n```\n\ndevice - это ваш активный сетевой интерфейс, необходимый для обеспечения работы DNS. Затем щелкните правой кнопкой мыши и выберите приложения для запуска.\n\nБолее простое руководство см. на сайте Firejail Wordpress.\n\nСогласно руководству:\n\nОбратите внимание, что утверждение:\n\nнеправильно, xserverrc может быть отредактирован на -nolisten local, что отключает абстрактные сокеты X11 и помогает изолировать его.\n\n"
    },
    {
      "title": "Песочница для браузера",
      "level": 3,
      "content": "Openbox может быть настроен на запуск определенного браузера при старте. program.profile - это соответствующий профиль, содержащийся в /etc/firejail, а --startup \"command - это командная строка, используемая для запуска программы. Например, чтобы запустить Chromium в песочнице:\n\n```\n$ firejail --x11 --profile=/etc/firejail/chromium.profile openbox --startup \"chromium\"\n```\n\n"
    },
    {
      "title": "Усиление Firejail",
      "level": 3,
      "content": "Риск безопасности, связанный с тем, что Firejail является исполняемым файлом SUID, может быть уменьшен путем добавления строки\n\n```\nforce-nonewprivs yes\n```\n\nв /etc/firejail/firejail.config. Однако это может нарушить работу определенных приложений. На Arch Linux VirtualBox больше не запускается. С ядром linux-hardened затронуты также Wireshark и браузеры на базе Chromium.\n\nДополнительные меры защиты включают создание специальной группы firejail с добавлением пользователя в эту группу и изменение файлового режима для исполняемого файла firejail. Подробности см. на сайте здесь.\n\nNote: Обязательно создайте группу firejail и добавьте в нее своего пользователя.\n\n```\n/etc/pacman.d/hooks/firejail-permissions.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nType = Package\nTarget = firejail\n[Action]\nDepends = coreutils\nDepends = bash\nWhen = PostTransaction\nExec = /usr/bin/sh -c \"chown root:firejail /usr/bin/firejail && chmod 4750 /usr/bin/firejail\"\nDescription = Setting /usr/bin/firejail owner to \"root:firejail\" and mode \"4750\"\n```\n\nОбязательно создайте группу firejail и добавьте в нее своего пользователя.\n\n"
    },
    {
      "title": "Пути, содержащие пробелы",
      "level": 3,
      "content": "Если вам нужно сослаться, внести каталог в белый или черный список в пользовательском профиле, например, с помощью palemoonAUR, вы должны сделать это, используя абсолютный путь, без инкапсуляции или экранирования:\n\n```\n/home/user/.moonchild productions\n```\n\n"
    },
    {
      "title": "Приватный режим",
      "level": 3,
      "content": "Firejail также включает одноразовый приватный режим, в котором не производится монтирование в chroots к вашему домашнему каталогу. При этом вы можете запускать приложения, не производя никаких изменений на диске. Например, чтобы запустить okular в приватном режиме, выполните следующее:\n\n```\n$ firejail --seccomp --private okular\n```\n\n"
    },
    {
      "title": "Экспериментальные усовершенствованные инструменты",
      "level": 3,
      "content": "Некоторые разработчики Firejail обнаружили проблемы с инструментами, поставляемыми вместе с ним, и создали свои собственные, улучшенные версии.\n\n- firecfg.py, улучшенная версия firecfg.\n- fjp, инструмент для взаимодействия с профилями Firejail.\n- firejail-handler-http, помогающий правильно открывать HTTP(S) ссылки при работе приложений в песочнице.\n- firejail-handler-extra, как и выше, но работает с другими протоколами.\n\n"
    },
    {
      "title": "Устранение неисправностей",
      "level": 2,
      "content": "Firejail может быть трудно отлаживать. Симптомы неправильной или иной неподходящей настройки варьируются от случайных сбоев сегментации и зависаний приложений до простых сообщений об ошибках.\n\nНекоторые приложения сложнее поместить в песочницу, чем другие. Например, приложения web browsers и Electron, как правило, нуждаются в более тщательном поиске неисправностей, чем другие, поскольку многое может пойти не так. Очень важно сначала проверить FAQ и открытые ошибки, так как отладка может занять довольно много времени.\n\n"
    },
    {
      "title": "Удаление символических ссылок Firejail",
      "level": 3,
      "content": "Чтобы удалить созданные Firejail символические ссылки (например, сбросить на значения по умолчанию):\n\n```\n# firecfg --clean\n```\n\nЕсли вы не хотите использовать Firejail для определенного приложения (например, потому что предпочитаете ограничиться AppArmor), то придется вручную удалить соответствующую символическую ссылку:\n\n```\n# rm /usr/local/bin/application\n```\n\nПоскольку последующее выполнение firecfg снова добавит удаленные симлинки - соответствующие приложения должны быть закомментированы в /etc/firejail/firecfg.config.\n\nПроверьте, все ли остатки Desktop entries (Русский) все еще отменяются Firejail.\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "Если Firejail вызывает проблемы с PulseAudio при работе с приложениями в \"песочнице\" [3], можно воспользоваться следующей командой:\n\n```\n$ firecfg --fix-sound\n```\n\nЭта команда создает пользовательский файл ~/.config/pulse/client.conf для текущего пользователя с enable-shm = no и возможными другими обходными путями.\n\n"
    },
    {
      "title": "hidepid",
      "level": 3,
      "content": "Если в системе используется параметр ядра hidepid, Firemon может быть запущен только от имени root. Это, в частности, приведет к проблемам с некорректным отображением в графическом интерфейсе Firetools параметров \"Capabilities\", \"Protocols\" и состояния \"Seccomp\"[4].\n\n"
    },
    {
      "title": "Проприетарные драйверы Nvidia",
      "level": 3,
      "content": "Некоторые пользователи сообщают о проблемах при использовании Firejail и проприетарных графических драйверов от NVIDIA (Русский) (например, [5], [6] или [7]). Часто проблему можно решить, отключив опцию noroot Firejail в файле профиля приложения.\n\n"
    },
    {
      "title": "Параметр --net и Linux kernel >=4.20.0",
      "level": 3,
      "content": "Существует ошибка в firejail 0.5.96 с linux >= 4.20.0, см. [8] и [9].\n\nПример сообщения об ошибке:\n\n```\n$ firejail --noprofile --net=eth0 ls\nParent pid 8521, child pid 8522\nError send: arp.c:182 arp_check: Invalid argument\nError: proc 8521 cannot sync with peer: unexpected EOF\nPeer 8522 unexpectedly exited with status 1\n```\n\n"
    },
    {
      "title": "Warning: Cannot confine the application using AppArmor",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Enable AppArmor support.** This article or section is a candidate for merging with #Enable AppArmor support.\n\nThis article or section is a candidate for merging with #Enable AppArmor support.\n\nДля некоторых приложений (например, Firefox) запуск с Firejail может привести к появлению предупреждений типа:\n\n```\nWarning: Cannot confine the application using AppArmor.\nMaybe firejail-default AppArmor profile is not loaded into the kernel.\nAs root, run \"aa-enforce firejail-default\" to load it.\n```\n\nПри выполнении предложенной команды вы можете увидеть:\n\n```\nERROR: Cache read/write disabled: interface file missing. (Kernel needs AppArmor 2.4 compatibility patch.)\n```\n\nЭто означает, что AppArmor не включен в качестве параметра ядра, поэтому его необходимо установить в соответствии с AppArmor#Installation.\n\n"
    },
    {
      "title": "/usr/bin/patch: **** Can't open patch file",
      "level": 3,
      "content": "Это означает, что PKGBUILD использует patch с аргументом -i, поэтому необходимо создать белый список для $SRCDEST в /etc/makepkg.conf.\n\nСоздайте переопределение patch.local со значением вашего $SRCDEST:\n\n```\nwhitelist /path/to/makepkg/sources.\n```\n\nИзменение PKGBUILD на использование stdin также работает:\n\n```\npatch -p1 < ../file.patch\n```\n\n"
    },
    {
      "title": "Зависание демонизированных/фоновых процессов",
      "level": 3,
      "content": "Существует известная проблема, не позволяющая процессам демонизироваться. В настоящее время не существует решения этой проблемы, за исключением отказа от использования Firejail в качестве \"песочницы\" для данного приложения. Поскольку это ошибка внутри Firejail - никакие настройки не могут решить эту проблему. К счастью, приложения, упомянутые в проблеме, обычно не имеют большой уязвимости, поэтому риск их работы без \"песочницы\" сравнительно невелик.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Страница проекта Firejail на GitHub\n\n"
    }
  ]
}