{
  "title": "Python (Français)/Virtual environment (Français)",
  "url": "https://wiki.archlinux.org/title/Python_(Fran%C3%A7ais)/Virtual_environment_(Fran%C3%A7ais)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "virtualenv est un outil utilisé pour créer un espace de travail isolé pour une application Python. Il présente divers avantages tels que la possibilité d'installer des modules localement, d'exporter un environnement de travail et d'exécuter un programme Python dans cet environnement.\n\n"
    },
    {
      "title": "Vue d'ensemble",
      "level": 2,
      "content": "Un environnement virtuel est un répertoire dans lequel sont installés des binaires et des scripts shell. Les binaires comprennent python pour l'exécution des scripts et pip pour l'installation d'autres modules dans l'environnement. Il existe également des scripts shell (un pour bash, csh et fish) pour activer l'environnement. Essentiellement, un environnement virtuel imite une installation complète de Python et de tous les modules souhaités sans interférer avec le système sur lequel l'application pourrait s'exécuter.\n\nEn 2017, Pipenv a été publié et gère tous les outils ci-dessus - la gestion des environnements virtuels des interprètes python, les dépendances des paquets, leur activation et le verrouillage reproductible des versions dans les Pipfiles.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Python 3.3+ est livré avec un module appelé venv. Pour les applications qui nécessitent une version plus ancienne de Python, il faut utiliser virtualenv.\n\n"
    },
    {
      "title": "Paquets",
      "level": 3,
      "content": "Installer un de ces paquets pour utiliser un environnement virtuel Python :\n\n- Python 3.3+: python\n- Python 3: python-virtualenv\n\nPour Pipenv:\n\n- Python 3: python-pipenv\n\n"
    },
    {
      "title": "Utilisation",
      "level": 2,
      "content": "Les trois outils utilisent un procédé similaire.\n\n"
    },
    {
      "title": "Création",
      "level": 3,
      "content": "Utilisez venv ou virtualenv pour créer l'environnement virtuel dans le répertoire de votre projet. Assurez-vous d'exclure le répertoire venv du contrôle de version - une copie de pip freeze suffira à le reconstruire.\n\n"
    },
    {
      "title": "venv",
      "level": 4,
      "content": "Cet outil est fourni par python (3.3+) :\n\n```\n$ python -m venv envname\n```\n\n"
    },
    {
      "title": "virtualenv",
      "level": 4,
      "content": "Utilisez virtualenv pour Python 3, disponible dans python-virtualenv.\n\n```\n$ virtualenv envname\n```\n\n"
    },
    {
      "title": "Activation",
      "level": 3,
      "content": "Utilisez l'un des scripts shell fournis pour activer et désactiver l'environnement. Cet exemple suppose que l'on utilise bash.\n\n```\n$ source envname/bin/activate\n(envname) $\n```\n\nUne fois dans l'environnement virtuel, les modules peuvent être installés avec pip et les scripts peuvent être exécutés de façon normale.\n\nPour quitter l'environnement virtuel, exécutez la fonction fournie par bin/activate :\n\n```\n(envname) $ deactivate\n```\n\n"
    },
    {
      "title": "Versions de Python",
      "level": 2,
      "content": "Par défaut, les environnements virtuels sont créés à l'aide du système Python. Le binaire bin/python est juste un lien symbolique vers le système python :\n\n```\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 15 Jan 29 18:48 envname/bin/python -> /usr/bin/python\n```\n\nSi vous souhaitez utiliser une version différente de Python dans l'environnement virtuel, vous pouvez utiliser l'option -p/--python de virtualenv :\n\n```\n$ virtualenv -p 3.8 envname\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 18 Jan 29 18:48 envname/bin/python -> /usr/bin/python3.8\n```\n\npypy3 peut également être utilisé :\n\n```\n$ virtualenv -p pypy3 envname\n```\n\n"
    },
    {
      "title": "virtualenvwrapper",
      "level": 2,
      "content": "virtualenvwrapper permet une interaction plus naturelle en ligne de commande avec vos environnements virtuels en exposant plusieurs commandes utiles pour créer, activer et supprimer des environnements virtuels. Ce paquet est un wrapper pour python-virtualenv.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Installer le paquet python-virtualenvwrapper et ajoutez les lignes suivantes à votre ~/.bashrc :\n\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n\nLa ligne source /usr/bin/virtualenvwrapper.sh peut causer des ralentissements lors du démarrage d'un nouveau shell. Pour corriger cela, essayez d'utiliser source /usr/bin/virtualenvwrapper_lazy.sh, qui chargera virtualenvwrapper la première fois que les fonctions de virtualenvwrapper seront appelées.\n\nRouvrez votre console pour appliquer les changements. Le répertoire WORKON_HOME sera créé automatiquement.\n\n"
    },
    {
      "title": "Utilisation de base",
      "level": 3,
      "content": "Voir https://virtualenvwrapper.readthedocs.io/en/latest/ pour l'utilisation (et les possibilités d'extension).\n\nCréer l'environnement virtuel (toutes les options de la ligne de commande sauf -a, -i, -r, et -h sont transmises directement à virtualenv, vous pouvez donc utiliser -p pour sélectionner la version de Python) :\n\n```\n$ mkvirtualenv envname\n```\n\nActiver l'environnement virtuel :\n\n```\n$ workon envname\n```\n\nInstaller un paquet dans l'environnement virtuel (par exemple, Django) :\n\n```\n(envname) $ pip install django\n```\n\nUne fois que vous avez fait ce que vous aviez à faire, quittez l'environnement virtuel :\n\n"
    },
    {
      "title": "Pipenv",
      "level": 2,
      "content": "pipenv permet de mieux gérer les interactions avec l'interface de programmation en fournissant un programme unique qui exécute toutes les fonctions des outils ci-dessus.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Installer le paquet python-pipenv.\n\n"
    },
    {
      "title": "Utilisation de base",
      "level": 3,
      "content": "Toutes les commandes peuvent être exécutées dans le dossier du projet, et pipenv reconnaîtra la situation spécifique - si un virtualenv existe dans le répertoire, il le localisera, et s'exécutera sur l'interpréteur virtuel spécifique lorsque pipenv sera exécuté.\n\nPlus d'information à [1], [2], [3].\n\n"
    },
    {
      "title": "Voir aussi",
      "level": 2,
      "content": "- Python venv\n- virtualenv PyPI page\n- virtualenvwrapper documentation\n\n"
    }
  ]
}