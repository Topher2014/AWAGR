{
  "title": "Vim (Русский)",
  "url": "https://wiki.archlinux.org/title/Vim_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- List of applications/Documents#Vi-style text editors\n\nVim - консольный текстовый редактор, являющийся расширенной версией vi с дополнительными функциями, которые включают в себя: подсветку синтаксиса, полноценную систему помощи, встроенную поддержку скриптов (vimscript), визуальный режим для простоты выделения и сравнение файлов (vimdiff).\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите один из следующих пакетов:\n\n- vim — с поддержкой Python 2/3, Lua, Ruby и Perl, но без поддержки GTK/X.\n- gvim — идентичен vim, но c поддержкой GTK/X.\n\n- Пакет vim собран без поддержки Xorg; отсутствует компонент +clipboard, поэтому Vim не сможет оперировать с основным и обменным буфером. Пакет gvim предоставляет доступ также и к Vim с интерфейсом командной строки, но с поддержкой +clipboard\n- Неофициальный репозиторий herecura предоставляет несколько версий Vim/gVim: vim-cli, vim-gvim-common, vim-gvim-gtk, vim-gvim-qt, vim-rt and vim-tiny.\n\n"
    },
    {
      "title": "Использование",
      "level": 2,
      "content": "Также вы можете запустить vimtutor (для версии с интерфейсом командной строки) или gvimtutor (для версии с графическим интерфейсом) для отображения руководства по использованию Vim.\n\nVim включает в себя широкую справочную систему, доступ к которой можно получить посредством :h субъект. Субъекты включают в себя команды, опции, горячие клавиши, плагины и так далее. Используйте команду :h (без какого-либо субъекта), чтобы полчуить информацию о вспомогательной системе и о том, как перемещаться между субъектами.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Файл конфигурации Vim для конкретного пользователя расположен в домашней директории - ~/.vimrc, файлы текущего пользователя в ~/.vim/. Общий файл конфигурации - ~/.vimrc, а общие файлы находятся в /usr/share/vim/.\n\n"
    },
    {
      "title": "Буфер обмена",
      "level": 3,
      "content": "Такие команды Vim как :yank или :paste работают с безымянным регистром, который по умолчанию соответствует регистру \"*. Если доступна +clipboard, то регистр \"* отображается в PRIMARY буфер в X.\n\nЧтобы изменить стандартный регистр на \"+, используйте :set clipboard=unnamedplus. Регистр \"+ соответствует CLIPBOARD буферу в X.\n\nДля более подробной информации смотрите :help 'clipboard'.\n\n"
    },
    {
      "title": "Подсветка синтаксиса",
      "level": 3,
      "content": "Чтобы включить подсветку синтаксиса для многих языков программирования:\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "Отступы",
      "level": 3,
      "content": "Отступы для определенного типа файла:\n\n```\n:типфайла indent on\n```\n\n"
    },
    {
      "title": "Визуальный перенос",
      "level": 3,
      "content": "Опция wrap (включена по умолчанию) указывает Vim переносить длинные строки, которые не помещаются на экран, так, что оставшаяся часть строки отображается на следующей линии. Опция wrap влияет только на отображение текста, сам текст при этом не изменяется.\n\nИзначально перенос строки происходит ровно в том месте, где размещается последний ее символ, поместившийся на экране, даже если он находится в середине слова. Для более умного переноса используйте опцию linebreak. Когда эта опция включена командой set linebreak, перенос строки происходит только после символов, которые перечислены в опции breakat, которая по умолчанию содержит в себе пробел и некоторые знаки препинания (смотрите :help breakat).\n\nОстаток строки обычно начинается с начала следующей линии, без всякого отступа. Опция breakindent сообщает Vim, что необходимо отображать перенесенный остаток строки с отступом, так, что на всех последующих линиях перенесенные части строки имеют тот же отступ, что и начало этой строки. Поведение breakindent может быть настроено при помощи опции breakindentopt. Например, для файлов исходного кода на языке Python может быть полезно добавлять дополнительный отступ в 4 пробела для перенесенных частей длинной строки (подробнее смотрите в :help breakindentopt):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "Использование мыши",
      "level": 3,
      "content": "Vim позволяет пользоваться мышью, но только в тех терминалах, которые это поддерживают:\n\n- xterm/urxvt\n- Консоль linux с gpm (смотрите подробнее на странице Console mouse support)\n- PuTTY\n\nЧтобы включить поддержку мыши, добавьте в ~/.vimrc:\n\n```\nset mouse=a\n```\n\nОпция mouse=a устанавливается в defaults.vim\n\n"
    },
    {
      "title": "Переход на новую строку с помощью клавиш со стрелками",
      "level": 3,
      "content": "По умолчанию, при нажатии ← в начале строки или → в конце, курсор не переводится на следующую/предыдущую строку.\n\nЭто можно исправить с помощью добавления строки set whichwrap=b,s,<,>,[,] в ваш файл ~/.vimrc.\n\n"
    },
    {
      "title": "Объединение файлов",
      "level": 2,
      "content": "Vim включает в себя diff-редактор (программа, которая отображает различия между двумя файлами и позволяет удобно их объединять). Используйте vimdiff для этого — просто укажите ей пару файлов: vimdiff файл1 файл2. Ниже приведен список команд vimdiff.\n\nTable content:\nДействие | Горячая клавиша\nследующие изменение | ]c\nпредыдущее изменение | [c\ndiff obtain | do\ndiff put | dp\nразвернуть блок | zo\nсвернуть блок | zc\nперечитать файлы | :diffupdate\nпереключить окна | Ctrl+w+w\n\n"
    },
    {
      "title": "Нумерация строк",
      "level": 3,
      "content": "Чтобы включить отображение номера столбца, используйте :set number. По умолчанию показываются абсолютные значения номеров строк, относительные включаются посредством :set relativenumber.\n\nПереход к новой строке осуществляется посредством :line number или line numbergg. Все переходы запоминаются в лист переходов, для более подробной информации смотрите :h jump-motions.\n\n"
    },
    {
      "title": "Проверка орфографии",
      "level": 3,
      "content": "Проверку орфографии в Vim можно включить с помощью:\n\n```\nset spell\n```\n\nПо умолчанию установлен только английский словарь. Другие словари можно найти в официальных репозиториях по запросу vim-spell. Еще больше словарей можно найти в FTP-архиве Vim[устаревшая ссылка 2025-01-22 ⓘ]. Словари необходимо поместить в каталог для словарей — ~/.vim/spell/. Включить словарь можно командой :setlocal spell spelllang=ru_yo (заменив ru_yo на имя нужного словаря).\n\nTable content:\nДействие | Команда\nследующая ошибка | ]s\nпредыдущая ошибка | [s\nпредложения для исправления | z=\nдобавить правильное написание | zg\nдобавить правильное написание (на сеанс) | zG\nдобавить неправильное написание | zw\nдобавить неправильное написание (на сеанс) | zW\nповторить проверку орфографии во всем файле | :spellr\n\nNote: **tex** \n\n- Чтобы включить проверку сразу для двух языков (например, английского и русского), добавьте set spelllang=en,ru в ~/.vimrc или /etc/vimrc и перезапустите Vim.\n- Вы можете включить проверку орфографии для конкретных типов файлов (например .txt), используя плагин FileType и собственное правило для определения типа файла. Чтобы включить проверку орфографии для всех файлов, оканчивающихся на .txt, создайте файл /usr/share/vim/vimfiles/ftdetect/plaintext.vim и вставьте туда строку: autocmd BufRead,BufNewFile *.txt setfiletype plaintext. Далее, вставьте строку autocmd FileType plaintext setlocal spell spelllang=ru в файл ~/.vimrc или /etc/vimrc и перезапустите Vim. Или поместите строку autocmd BufRead,BufNewFile *.txt setlocal spell в ~/.vimrc или /etc/vimrc и перезапустите Vim. Не забудьте отредактировать строчку (specifically *.txt), чтобы включить соответствующие типы файлов для проверки орфографии.\n- Чтобы включить проверку орфографии только для документов LaTeX (или TeX), добавьте autocmd FileType tex setlocal spell spelllang=ru в файл ~/.vimrc или /etc/vimrc и перезапустите Vim.\n\n"
    },
    {
      "title": "Сохранение позиции курсора",
      "level": 3,
      "content": "Если вы хотите, чтобы курсор возвращался в прежнее положение после открытия файла, добавьте следующее в ~/.vimrc:\n\n```\naugroup resCur\n  autocmd!\n  autocmd BufReadPost * call setpos(\".\", getpos(\"'\\\"\"))\naugroup END\n```\n\n"
    },
    {
      "title": "Запуск Vim по команде vi",
      "level": 3,
      "content": "Создайте псевдоним для vi на vim.\n\nЕсли вы хотите, чтобы при вводе sudo vi запускался vim, то установите пакет vi-vim-symlinkAUR, который удалит vi и заменить его символической ссылкой на vim.\n\n"
    },
    {
      "title": "Возврат каретки DOS/Windows",
      "level": 3,
      "content": "Если вы видите последовательность ^M в конце каждой линии, это означает, что вы редактируете текстовый файл, который был создан в MS-DOS или Windows. Дело в том, что в Linux для переноса принято использовать один символ новой строки (LR), тогда как в системах Windows/MS DOS для той же цели используется последовательность из двух символов: возврата каретки (CR) и новой строки (LR). Как раз эти символы возврата каретки и отображаются в виде ^M.\n\nДля удаления всех символов возврата каретки из файла, выполните:\n\n```\n:%s/^M//g\n```\n\nОбратите внимание, что ^ здесь — управляющий символ, а не обычный. Чтобы ввести управляющую последовательность ^M, нажмите Ctrl+v,Ctrl+m.\n\nТакже вы можете просто установить пакет dos2unix и исправлять файлы командой dos2unix файл.\n\n"
    },
    {
      "title": "Пустое пространство в нижней части окон gVim",
      "level": 3,
      "content": "Когда используется оконный менеджер, настроенный на игнорирование размеров окна, gVim заполняет неиспользованные области окна стандартным фоновым цветом темы GTK.\n\nРешение заключается в регулировании количества места, которое будет резервировать в нижней части окна gVim. Поместите следующую строку в ~/.vimrc:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Плагины",
      "level": 2,
      "content": "Плагины могут помочь повысить эффективность вашей работы в Vim. Они могут менять интерфейс Vim, добавлять новые команды, поддержку завершения кода, интеграцию других программ и утилит с Vim, поддержку дополнительных языков и многое другое.\n\n"
    },
    {
      "title": "Используя встроенную систему управления пакетами",
      "level": 4,
      "content": "В Vim 8 добавлена возможность загрузки сторонних плагинов. Чтобы использовать эту функциональность, переместите плагины в ~/.vim/pack/foo.\n\n"
    },
    {
      "title": "Используя менеджер плагинов",
      "level": 4,
      "content": "Менеджер плагинов позволяет устанавливать плагины и управлять ими одинаковым образом независимо от того, на какой системе вы запускаете Vim. Он представляет собой специальный плагин, который выполняет роль пакетного менеджера для других плагинов.\n\n- Vundle — в настоящее время наиболее популярный менеджер плагинов Vim.\n- Vim-plug - минималистичный менеджер плагинов для Vim, который имеет много особенностей, например, загрузка плагинов по запросу и параллельное обновление.\n- pathogen.vim — простой плагин для управления переменной runtimepath.\n- Dein.vim - менеджер плагинов, заменяющий NeoBundle, доступен как vim-dein-gitAUR.\n\n"
    },
    {
      "title": "Из репозиториев Arch",
      "level": 4,
      "content": "Группа vim-plugins объединяет множество разнообразных плагинов. Используйте команду pacman -Sg vim-plugins для отображения списка пакетов, которые вы можете затем установить, используя pacman.\n\n"
    },
    {
      "title": "cscope",
      "level": 3,
      "content": "Cscope является инструментом для навигации по программному проекту. Путем перехода к слову/символу/функции и вызову cscope (обычно с помощью горячих клавиш) можно найти: функции, которые вызывают данную, определение функции и многое другое.\n\nУстановите пакет cscope.\n\nСкопируйте стандартный файл cscope, который Vim будет автоматически читать:\n\n```\nmkdir -p ~/.vim/plugin\nwget -P ~/.vim/plugin https://cscope.sourceforge.net/cscope_maps.vim\n```\n\n```\nset timeoutlen=4000\nset ttimeout\n```\n\nСоздайте файл, который содержит список файлов для индексации (cscope может обрабатывать множество языков, но для примера мы возьмем файлы на Си/Си++ с расширениями .c, .cpp и .h):\n\n```\ncd /путь/к/каталогу/проекта\nfind . -type f -print | grep -E '\\.(c(pp)?|h)$' > cscope.files\n```\n\nСоздание файлы базы данных, которые cscope будет читать:\n\n```\ncscope -bq\n```\n\nГорячие клавиши по умолчанию:\n\n```\nCtrl-\\ и\n      c: найти функции вызывающие эту функцию\n      d: найти функции вызываемые этой функцией\n      e: найти egrep паттерн\n      f: найти этот файл\n      g: найти это определение\n      i: найти файлы, включающие этот файл (#include)\n      s: найти этот символ Си\n      t: найти присвоения\n```\n\nНе стесняйтесь изменять горячие клавиши:\n\n```\n#Maps ctrl-c to find functions calling the function\nnnoremap <C-c> :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n```\n\n"
    },
    {
      "title": "Taglist",
      "level": 3,
      "content": "Taglist отображает структуру файлов исходного кода и позволяет эффективно просматривать исходники на различных языках программирования.\n\nУстановите пакет vim-taglistAUR.\n\nПолезные опции можно записать в ~/.vimrc:\n\n```\nlet Tlist_Compact_Format = 1\nlet Tlist_GainFocus_On_ToggleOpen = 1\nlet Tlist_Close_On_Select = 1\nnnoremap <C-l> :TlistToggle<CR>\n```\n\n"
    },
    {
      "title": "Официальные ресурсы",
      "level": 3,
      "content": "- Домашняя страница\n- Документация\n- Vim Wiki\n- Vim Scripts\n\n"
    },
    {
      "title": "Руководства",
      "level": 3,
      "content": "- vim Tutorial and Primer\n- vi Tutorial and Reference Guide\n- Graphical vi-Vim Cheat Sheet and Tutorial\n- Vim Introduction and Tutorial[устаревшая ссылка 2020-08-06 ⓘ]\n- Open Vim - Коллекция средств обучения Vim.\n- Learn Vim Progressively\n- Learning Vim in 2014\n- Seven habits of effective text editing\n- Basic Vim Tips[устаревшая ссылка 2025-03-15 ⓘ]\n\n"
    },
    {
      "title": "Видео",
      "level": 4,
      "content": "- Vimcasts - Скринкаст в формате .ogg.\n- Vim Tutorial Videos - От основ к продвинутым темам.\n\n"
    },
    {
      "title": "Игры",
      "level": 4,
      "content": "- Vim Adventures\n- VimGolf\n\n"
    },
    {
      "title": "Конфигурация",
      "level": 3,
      "content": "- nion\n- Детальная конфигурация от Amir Salihefendic[устаревшая ссылка 2020-08-06 ⓘ]\n- Bart Trojanowski\n- Steve Francia's Vim Distribution\n- Vim Awesome - Vim Plugins\n- Конфигурация Vim W4RH4W\n- Fast vimrc/colorscheme from askapache\n- Базовый vimrc\n- Usevim\n\n"
    },
    {
      "title": "Цвета",
      "level": 4,
      "content": "- Vivify\n- Vim colorscheme customization\n\n"
    }
  ]
}