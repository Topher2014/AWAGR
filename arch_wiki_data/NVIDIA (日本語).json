{
  "title": "NVIDIA (日本語)",
  "url": "https://wiki.archlinux.org/title/NVIDIA_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- NVIDIA/ヒントとテクニック\n- NVIDIA/トラブルシューティング\n- Nouveau\n- NVIDIA Optimus\n- PRIME\n- Bumblebee\n- nvidia-xrun\n- Xorg\n- Vulkan\n\nこの記事は公式の NVIDIA グラフィックカードドライバをカバーしています。コミュニティによるオープンソースのドライバに関しては、Nouveau を見てください。Intel/NVIDIA のハイブリッドグラフックスを搭載しているノートパソコンを使っている場合は、代わりに NVIDIA Optimus を見て下さい。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 カスタムカーネル 1.2 DRM カーネルモード設定 1.2.1 早期ロード 1.2.1.1 Pacman フック 1.3 ビデオデコードのハードウェアアクセラレーション 1.4 NVENC によるビデオエンコードのハードウェアアクセラレーション\n- 2 Wayland 設定 2.1 基本的なサポート 2.1.1 modeset 2.1.2 fbdev 2.2 サスペンドのサポート\n- 3 Xorg 設定 3.1 自動設定 3.2 nvidia-settings 3.3 手動設定 3.3.1 最小設定 3.3.2 起動時のロゴを無効化 3.3.3 モニター検出をオーバーライド 3.3.4 輝度調整を有効化 3.3.5 SLI を有効化 3.4 マルチモニター 3.4.1 NVIDIA Settings を使う 3.4.2 ConnectedMonitor 3.4.3 TwinView 3.4.3.1 TwinView を使って垂直同期 3.4.3.2 Twinview を使ってゲームを遊ぶ 3.4.4 モザイクモード 3.4.4.1 ベースモザイク 3.4.4.2 SLI モザイク\n- 4 NVswitch\n- 5 ヒントとテクニック\n- 6 トラブルシューティング\n- 7 参照\n\n- 1.1 カスタムカーネル\n- 1.2 DRM カーネルモード設定 1.2.1 早期ロード 1.2.1.1 Pacman フック\n- 1.3 ビデオデコードのハードウェアアクセラレーション\n- 1.4 NVENC によるビデオエンコードのハードウェアアクセラレーション\n\n- 1.2.1 早期ロード 1.2.1.1 Pacman フック\n\n- 1.2.1.1 Pacman フック\n\n- 2.1 基本的なサポート 2.1.1 modeset 2.1.2 fbdev\n- 2.2 サスペンドのサポート\n\n- 2.1.1 modeset\n- 2.1.2 fbdev\n\n- 3.1 自動設定\n- 3.2 nvidia-settings\n- 3.3 手動設定 3.3.1 最小設定 3.3.2 起動時のロゴを無効化 3.3.3 モニター検出をオーバーライド 3.3.4 輝度調整を有効化 3.3.5 SLI を有効化\n- 3.4 マルチモニター 3.4.1 NVIDIA Settings を使う 3.4.2 ConnectedMonitor 3.4.3 TwinView 3.4.3.1 TwinView を使って垂直同期 3.4.3.2 Twinview を使ってゲームを遊ぶ 3.4.4 モザイクモード 3.4.4.1 ベースモザイク 3.4.4.2 SLI モザイク\n\n- 3.3.1 最小設定\n- 3.3.2 起動時のロゴを無効化\n- 3.3.3 モニター検出をオーバーライド\n- 3.3.4 輝度調整を有効化\n- 3.3.5 SLI を有効化\n\n- 3.4.1 NVIDIA Settings を使う\n- 3.4.2 ConnectedMonitor\n- 3.4.3 TwinView 3.4.3.1 TwinView を使って垂直同期 3.4.3.2 Twinview を使ってゲームを遊ぶ\n- 3.4.4 モザイクモード 3.4.4.1 ベースモザイク 3.4.4.2 SLI モザイク\n\n- 3.4.3.1 TwinView を使って垂直同期\n- 3.4.3.2 Twinview を使ってゲームを遊ぶ\n\n- 3.4.4.1 ベースモザイク\n- 3.4.4.2 SLI モザイク\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "まず、nouveau wiki のコードネームに関するページで、以下のコマンドで入手した GPU カードのモデル名/公式名に対応するファミリ名を探してください:\n\n```\n$ lspci -k -d ::03xx\n```\n\n次に、使用しているカードに適したドライバをインストールしてください:\n\nTable content:\nGPU ファミリ | ドライバ | 状態\nTuring (NV160/TUXXX) 及びそれ以降 | linux には nvidia-open nvidia-open-dkms は任意のカーネルで使えます | 上流で推奨されています。 現行。サポートあり。1\nMaxwell (NV110/GMXXX) から Ada Lovelace (NV190/ADXXX) | linux には nvidia linux-lts には nvidia-lts nvidia-dkms は任意のカーネルで使えます | 現行。サポートあり。1\nKepler (NVE0/GKXXX) | nvidia-470xx-dkmsAUR | レガシー。サポートなし。2,3\nFermi (NVC0/GF1XX) | nvidia-390xx-dkmsAUR\nTesla (NV50/G80-90-GT2XX) | nvidia-340xx-dkmsAUR\nCurie (NV40/G70) 及びそれ以前 | パッケージはもはや存在しません。\n\n1. これらのパッケージが動作しない場合 (たいていはハードウェアが新しいことが原因です)、nvidia-open-betaAUR が、新しいハードウェアをサポートしている新しいドライバのバージョンを提供しているかもしれません。\n1. Indirect Branch Tracking との互換性が無いため、第11世代及びそれ以降の Intel CPU を搭載しているシステムで Linux 5.18 (及びそれ以降) においてこれらのドライバは動作しない場合があります。Indirect Branch Tracking は、ブートローダーから ibt=off カーネルパラメータを設定することにより、無効化することができます。ただし、このセキュリティ機能はエクスプロイト手法の一種を緩和する役割があるので注意してください。\n1. NVIDIA はもはやこれらのカードをアクティブにサポートしておらず、これらのドライバは現在の Xorg バージョンを公式にはサポートしていない場合があります。nouveau ドライバを使うほうが簡単かもしれません。しかし、NVIDIA のレガシーなドライバは依然として利用可能であり、3D パフォーマンスまたは安定性に関して優れているかもしれません。\n\n- dkms をインストールする場合は、Dynamic Kernel Module Support#インストール を読んでください。\n- DKMS 版は特定のカーネルと結びついていません。カーネルのヘッダーファイルをインストールすると、そのカーネル用の NVIDIA カーネルモジュールをコンパイルし直すためです。\n\n32ビットアプリケーションのサポートに関しては、対応する lib32 パッケージも multilib リポジトリからインストールしてください (例: lib32-nvidia-utils)。\n\n/etc/mkinitcpio.conf 内の HOOKS 配列から kms を削除し、その後 initramfs を再生成してください。こうすることで、initramfs に nouveau モジュールが含まれないようにして、カーネルがこのモジュールを初期ブート中に読み込めないようにします。nvidia-utils パッケージには、再起動後に nouveau モジュールをブラックリスト化するファイルが含まれています。\n\nドライバーをインストールしたら、#Xorg 設定 または #Wayland 設定 へと進んでください。\n\n"
    },
    {
      "title": "カスタムカーネル",
      "level": 3,
      "content": "使用中のカーネルで CONFIG_DRM_SIMPLEDRM=y となっていることを確認してください。そして、CONFIG_DEBUG_INFO_BTF を使用している場合、PKGBUILD で以下が必要です (カーネル 5.16 以降):\n\n```\ninstall -Dt \"$builddir/tools/bpf/resolve_btfids\" tools/bpf/resolve_btfids/resolve_btfids\n```\n\n"
    },
    {
      "title": "DRM カーネルモード設定",
      "level": 3,
      "content": "NVIDIA は KMS の自動遅延読み込みをサポートしていないため、Wayland コンポジタを正しく動作させたり、Rootless Xorg を利用できるようにするには DRM (Direct Rendering Manager) カーネルモード設定を有効化する必要があります。\n\nnvidia-utils 560.35.03-5 から DRM はデフォルトで有効化されています。[1] それより古いドライバにおいては、nvidia_drm モジュールに対して modeset=1 カーネルモジュールパラメータを設定してください。\n\nDRM が本当に有効化されているか調べるには、以下のコマンドを実行してください:\n\n```\n# cat /sys/module/nvidia_drm/parameters/modeset\n```\n\n正しく設定されていれば、このコマンドは N ではなく Y と出力するはずです。\n\n"
    },
    {
      "title": "早期ロード",
      "level": 4,
      "content": "基本的な機能については先のカーネルパラメータを追加するだけで十分でしょう。可能な限り早い時にロードさせたい場合や、スタートアップ時に問題 (nvidia カーネルモジュールがディスプレイマネージャのあとにロードされてしまうなど) が発生する場合には、nvidia、nvidia_modeset、nvidia_uvm そして nvidia_drm を initramfs に追加することができます。initramfs ジェネレータを設定する方法については カーネルモジュール#モジュールの早期ロード を見てください。mkinitcpio を使用している場合、nvidia ドライバの更新時に毎回 initramfs を再生成する必要がある場合があります。これを自動化する方法については #Pacman フック を見てください。\n\nNVIDIA ドライバをアップグレードした後に initramfs をアップデートすることを忘れないように、以下のような pacman フックを利用することができます:\n\n```\n/etc/pacman.d/hooks/nvidia.hook\n```\n\n```\n[Trigger]\nOperation=Install\nOperation=Upgrade\nOperation=Remove\nType=Package\n# インストールした NVIDIA のパッケージをアンコメントしてください\nTarget=nvidia\n#Target=nvidia-open\n#Target=nvidia-lts\n# 他のカーネルを使う場合は以下を適宜変更してください\nTarget=linux\n\n[Action]\nDescription=Updating NVIDIA module in initcpio\nDepends=mkinitcpio\nWhen=PostTransaction\nNeedsTargets\nExec=/bin/sh -c 'while read -r trg; do case $trg in linux*) exit 0; esac; done; /usr/bin/mkinitcpio -P'\n```\n\n"
    },
    {
      "title": "ビデオデコードのハードウェアアクセラレーション",
      "level": 3,
      "content": "VDPAU によるビデオデコードのアクセラレーションは GeForce 8 シリーズ及びそれ以降のカードでサポートされています。NVDEC によるビデオデコードのアクセラレーションは Fermi (~400 シリーズ) 及びそれ以降のカードでサポートされています。詳しくは ハードウェアビデオアクセラレーション をご覧ください。\n\n"
    },
    {
      "title": "NVENC によるビデオエンコードのハードウェアアクセラレーション",
      "level": 3,
      "content": "NVENC は nvidia_uvm モジュールと、関連するデバイスノードが /dev 下に作成されることを要求します。\n\n最新のドライバーパッケージは、自動的にデバイスノードを作成する udev ルールを提供するので、追加の操作は必要ありません。\n\n古いドライバ (例えば、nvidia-340xx-dkmsAUR) を使用している場合、デバイスノードを作成する必要があります。nvidia-modprobe ユーティリティを実行するとデバイスノードが自動的に作成されます。/etc/udev/rules.d/70-nvidia.rules を作成して nvidia-modprobe を自動的に実行させることができます:\n\n```\n/etc/udev/rules.d/70-nvidia.rules\n```\n\n```\nACTION==\"add\", DEVPATH==\"/bus/pci/drivers/nvidia\", RUN+=\"/usr/bin/nvidia-modprobe -c 0 -u\"\n```\n\n"
    },
    {
      "title": "Wayland 設定",
      "level": 2,
      "content": "Xwayland に関しては Wayland#Xwayland を見てください。\n\nその他の設定オプションについては、それぞれのコンポジタの wiki ページやドキュメントを見てください。\n\n"
    },
    {
      "title": "基本的なサポート",
      "level": 3,
      "content": "nvidia_drm モジュールの重要なカーネルパラメータは modeset と fbdev です。nvidia-utils パッケージを使用している場合、これらは両方ともデフォルトで有効化されています。また、NVIDIA は将来のリリースでこれらのパラメータをデフォルトで有効化することを計画しています。\n\n"
    },
    {
      "title": "modeset",
      "level": 4,
      "content": "全ての Wayland 構成において modeset を有効化することは必須です。\n\nサポートの無いドライバについては、modeset を手動で有効化する必要があります。詳細は #DRM カーネルモード設定 と Wayland#要件 を見てください。\n\n"
    },
    {
      "title": "fbdev",
      "level": 4,
      "content": "一部の Wayland 構成においては fbdev を有効化する必要があります。\n\nLinux 6.11 以降においてこれは厳しい要件ですが、これが仕様なのかバグなのかは現在明らかになっていません。詳細は [2] を参照してください。\n\nこれは modesetting パラメータと同じようにして設定することができます。ただし、以下のコマンドの出力は modesetting と異なります:\n\n```\n# cat /sys/module/nvidia_drm/parameters/fbdev\n```\n\nfbdev が設定されていない場合は、このコマンドは N を出力するのではなく、ファイルが存在しないことを示すエラーが発生します。\n\n"
    },
    {
      "title": "サスペンドのサポート",
      "level": 3,
      "content": "Wayland でのサスペンドは X よりもデフォルトの設定の問題が発生しやすいです。詳細は NVIDIA/ヒントとテクニック#サスペンド後にビデオメモリを保持する を参照してください。\n\nGDM を使用している場合は、GDM#Wayland とプロプライエタリな NVIDIA ドライバ も参照してください。\n\n"
    },
    {
      "title": "Xorg 設定",
      "level": 2,
      "content": "プロプライエタリな NVIDIA グラフィックドライバは Xorg サーバの設定ファイルを必要としません。X を起動してみて、Xorg サーバが設定ファイル無しで正しく機能するかを確認することができます。しか、様々な設定を調整するために設定ファイル (/etc/X11/xorg.conf よりも /etc/X11/xorg.conf.d/20-nvidia.conf を優先して使用してください) を作成する必要があるかもしれません。この設定は、NVIDIA Xorg 設定ツールによって生成することができますし、手動で作成することもできます。手動で作成した場合、(Xorg サーバに基本的なオプションのみを与えると言う意味で) 最小の設定にすることができますし、あるいは、Xorg の自動検出されたオプションや事前設定されたオプションをバイパスできる設定を含めることもできます。\n\n"
    },
    {
      "title": "自動設定",
      "level": 3,
      "content": "NVIDIA のパッケージには、Xorg サーバの設定ファイル (xorg.conf) を作成するための自動設定ツールが含まれています。次のコマンドで実行できます:\n\n```\n# nvidia-xconfig\n```\n\nこのコマンドは /etc/X11/xorg.conf を自動検出し、現在のハードウェアに応じてそのファイルを作成 (すでに存在する場合は編集) します。\n\nDRI のインスタンスがある場合は、コメントアウトされているか確認してください:\n\n```\n#    Load        \"dri\"\n```\n\nデフォルトの深度、水平同期、垂直リフレッシュ、そして解像度が問題ないか /etc/X11/xorg.conf を二重にチェックしてください。\n\n"
    },
    {
      "title": "nvidia-settings",
      "level": 3,
      "content": "nvidia-settings は CLI または GUI を使って様々なオプションを設定することができるツールです。何もオプションをつけずに nvidia-settings を実行すると GUI が起動します。CLI のオプションについては nvidia-settings(1) を見てください。\n\nnvidia-settings の CLI/GUI は非 root なユーザとして実行でき、nvidia-settings Configuration タブにある Save Current Configuration オプションで設定を ~/.nvidia-settings-rc に保存できます。\n\n現在のユーザで ~/.nvidia-settings-rc をロードするには:\n\n```\n$ nvidia-settings --load-config-only\n```\n\n起動時に毎回このコマンドを実行させるには自動起動を見てください。\n\n- nvidia-settings から変更を加えると Xorg が起動しなくなったりクラッシュするようになったりすることがあります。生成された ~/.nvidia-settings-rc と Xorg のファイルの両方/片方を調整するか削除することで普通に起動できるようになるはずです。\n- Cinnamon デスクトップは nvidia-settings を通して作成された設定を上書きしてしまうことがあります。Cinnamon の起動時の挙動を変更して、設定を上書きしないようにすることができます。\n\n"
    },
    {
      "title": "手動設定",
      "level": 3,
      "content": "設定ファイルを編集することで、(自動的に、または nvidia-settingsによって有効化できない) いくつかの微調整をすることができます。変更を適用する前に Xorg サーバーを再起動する必要があります。\n\nその他の詳細やオプションについては NVIDIA Accelerated Linux Graphics Driver README and Installation Guide をご覧ください。\n\n"
    },
    {
      "title": "最小設定",
      "level": 4,
      "content": "20-nvidia.conf (もしくは非推奨の xorg.conf) の基本的な設定ブロックは以下のようになります:\n\n```\n/etc/X11/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"NVIDIA Card\"\n        Driver \"nvidia\"\n        VendorName \"NVIDIA Corporation\"\n        BoardName \"GeForce GTX 1050 Ti\"\nEndSection\n```\n\n"
    },
    {
      "title": "起動時のロゴを無効化",
      "level": 4,
      "content": "古いドライバ (nvidia-340xx-dkmsAUR) を使用している場合、X の起動時に表示される NVIDIA ロゴスプラッシュスクリーンを無効化しておいたほうがいいかもしれません。Device セクション内に \"NoLogo\" オプションを追加してください:\n\n```\nOption \"NoLogo\" \"1\"\n```\n\n"
    },
    {
      "title": "モニター検出をオーバーライド",
      "level": 4,
      "content": "Device セクション内の \"ConnectedMonitor\" オプションにより、 X サーバーが起動した時にモニター検出をオーバーライドできます。これにより、起動時間を大幅に減らせるかもしれません。利用可能なオプション: アナログ接続用の \"CRT\"、デジタルモニター用の \"DFP\"、テレビ用の \"TV\"。\n\n以下の行は起動時のチェックをバイパスし、モニターを DFP として認識することを NVIDIA ドライバーに強制します:\n\n```\nOption \"ConnectedMonitor\" \"DFP\"\n```\n\n"
    },
    {
      "title": "輝度調整を有効化",
      "level": 4,
      "content": "Table content:\nこの記事またはセクションは情報が古くなっています。 理由: 時代遅れの可能性あり[3]。上流のパッケージも古いようです。 (Discuss)\n\n以下をカーネルパラメータに追加してください:\n\n```\nnvidia.NVreg_RegistryDwords=EnableBrightnessControl=1\n```\n\nあるいは、以下を Device セクション内に追加してください:\n\n```\nOption \"RegistryDwords\" \"EnableBrightnessControl=1\"\n```\n\nもし、この設定で輝度調整がまだ機能しない場合は、nvidia-bl-dkmsAUR をインストールしてみてください。\n\n"
    },
    {
      "title": "SLI を有効化",
      "level": 4,
      "content": "NVIDIA ドライバーの README 付録 B によると: このオプションは、サポートされている構成で SLI レンダリングの設定を制御します。 \"サポートされている構成\"とは SLI 認定マザーボードと、2基または3基の SLI 認定 GeForce GPU を搭載しているコンピュータのことです。\n\nlspci を使って1つ目の GPU の PCI Bus ID を調べてください:\n\n```\n# lspci -d ::03xx\n```\n\n```\n00:02.0 VGA compatible controller: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor Graphics Controller (rev 09)\n03:00.0 VGA compatible controller: NVIDIA Corporation GK107 [GeForce GTX 650] (rev a1)\n04:00.0 VGA compatible controller: NVIDIA Corporation GK107 [GeForce GTX 650] (rev a1)\n08:00.0 3D controller: NVIDIA Corporation GM108GLM [Quadro K620M / Quadro M500M] (rev a2)\n```\n\n調べた BusID (前述の例では 3) を Device セクション内に追加してください:\n\n```\nBusID \"PCI:3:0:0\"\n```\n\n希望する SLI レンダリングモードの値を Screen セクション内に追加してください:\n\n```\nOption \"SLI\" \"AA\"\n```\n\n以下の表は利用可能なレンダリングモードです。\n\nTable content:\n値 | 挙動\n0, no, off, false, Single | レンダリング時にただ1つの GPU を使う。\n1, yes, on, true, Auto | SLI を有効化し、ドライバーが自動的に適切なレンダリングモードを選択することを許可する。\nAFR | SLI を有効化し、Alternate Frame Rendering モードを使う。\nSFR | SLI を有効化し、Split Frame Rendering モードを使う。\nAA | SLI を有効化し、SLI アンチエイリアシングを使う。この値を Full-Scene アンチエイリアシングと一緒に使うと視覚品質が向上します。\n\nあるいは、nvidia-xconfig ユーティリティを使って、これらの変更を xorg.conf に追加できます:\n\n```\n# nvidia-xconfig --busid=PCI:3:0:0 --sli=AA\n```\n\nSLI モードが有効化されていることをシェルから確認するには:\n\n```\n$ nvidia-settings -q all | grep SLIMode\n```\n\n```\nAttribute 'SLIMode' (arch:0.0): AA\n    'SLIMode' is a string attribute.\n    'SLIMode' is a read-only attribute.\n    'SLIMode' can use the following target types: X Screen.\n```\n\n以上の設定で機能しない場合は、nvidia-settings で得られる PCI Bus ID を使用する必要があるかもしれません。\n\n```\n$ nvidia-settings -q all | grep -i pcibus\n```\n\n```\nAttribute 'PCIBus' (host:0[gpu:0]): 101.\n  'PCIBus' is an integer attribute.\n  'PCIBus' is a read-only attribute.\n  'PCIBus' can use the following target types: GPU, SDI Input Device.\nAttribute 'PCIBus' (host:0[gpu:1]): 23.\n  'PCIBus' is an integer attribute.\n  'PCIBus' is a read-only attribute.\n  'PCIBus' can use the following target types: GPU, SDI Input Device.\n```\n\nそして、xorg.d 内の PrimaryGPU オプションをコメントアウトしてください:\n\n```\n/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf\n```\n\n```\n...\n\nSection \"OutputClass\"\n...\n    # Option \"PrimaryGPU\" \"yes\"\n...\n```\n\nこの設定でグラフィカルブートの問題も解決できるかもしれません。\n\n"
    },
    {
      "title": "マルチモニター",
      "level": 3,
      "content": "一般的な情報は マルチディスプレイ を見て下さい。\n\n"
    },
    {
      "title": "NVIDIA Settings を使う",
      "level": 4,
      "content": "nvidia-settings ツールを使ってマルチモニターを設定できます。\n\nCLI で設定する場合、まずは以下を実行して CurrentMetaMode を確認してください:\n\n```\n$ nvidia-settings -q CurrentMetaMode\n```\n\n```\nAttribute 'CurrentMetaMode' (hostnmae:0.0): id=50, switchable=no, source=nv-control :: DPY-1: 2880x1620 @2880x1620 +0+0 {ViewPortIn=2880x1620, ViewPortOut=2880x1620+0+0}\n```\n\n:: 以降の全て (上記の場合: DPY-1: 2880x1620 @2880x1620 +0+0 {ViewPortIn=2880x1620, ViewPortOut=2880x1620+0+0}) を使って nvidia-settings --assign \"CurrentMetaMode=your_meta_mode\" でディスプレイを再設定できます。\n\n"
    },
    {
      "title": "ConnectedMonitor",
      "level": 4,
      "content": "ドライバーがセカンドモニタを正しく認識しない場合は、ConnectedMonitor を使って認識するように強制できます。\n\n```\n/etc/X11/xorg.conf\n```\n\n```\nSection \"Monitor\"\n    Identifier     \"Monitor1\"\n    VendorName     \"Panasonic\"\n    ModelName      \"Panasonic MICRON 2100Ex\"\n    HorizSync       30.0 - 121.0 # this monitor has incorrect EDID, hence Option \"UseEDIDFreqs\" \"false\"\n    VertRefresh     50.0 - 160.0\n    Option         \"DPMS\"\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor2\"\n    VendorName     \"Gateway\"\n    ModelName      \"GatewayVX1120\"\n    HorizSync       30.0 - 121.0\n    VertRefresh     50.0 - 160.0\n    Option         \"DPMS\"\nEndSection\n\nSection \"Device\"\n    Identifier     \"Device1\"\n    Driver         \"nvidia\"\n    Option         \"NoLogo\"\n    Option         \"UseEDIDFreqs\" \"false\"\n    Option         \"ConnectedMonitor\" \"CRT,CRT\"\n    VendorName     \"NVIDIA Corporation\"\n    BoardName      \"GeForce 6200 LE\"\n    BusID          \"PCI:3:0:0\"\n    Screen          0\nEndSection\n\nSection \"Device\"\n    Identifier     \"Device2\"\n    Driver         \"nvidia\"\n    Option         \"NoLogo\"\n    Option         \"UseEDIDFreqs\" \"false\"\n    Option         \"ConnectedMonitor\" \"CRT,CRT\"\n    VendorName     \"NVIDIA Corporation\"\n    BoardName      \"GeForce 6200 LE\"\n    BusID          \"PCI:3:0:0\"\n    Screen          1\nEndSection\n```\n\nTwinView を使わずに1つのカードで2つのモニターを X で使うために Screen でデバイスを複製しています。nvidia-settings は追加した ConnectedMonitor オプションを全て消してしまうので注意してください。\n\n"
    },
    {
      "title": "TwinView",
      "level": 4,
      "content": "画面を2つ表示するのではなく1つの大きな画面を表示したい場合、TwinView 引数を 1 に設定してください。コンポジットを使いたい場合、このオプションを使用する必要があります。TwinView は全てのモニターが同一のカードに接続されている場合にのみ機能します。\n\n```\nOption \"TwinView\" \"1\"\n```\n\n設定例:\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"ServerLayout\"\n    Identifier     \"TwinLayout\"\n    Screen         0 \"metaScreen\" 0 0\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor0\"\n    Option         \"Enable\" \"true\"\nEndSection\n\nSection \"Monitor\"\n    Identifier     \"Monitor1\"\n    Option         \"Enable\" \"true\"\nEndSection\n\nSection \"Device\"\n    Identifier     \"Card0\"\n    Driver         \"nvidia\"\n    VendorName     \"NVIDIA Corporation\"\n\n    #refer to the link below for more information on each of the following options.\n    Option         \"HorizSync\"          \"DFP-0: 28-33; DFP-1 28-33\"\n    Option         \"VertRefresh\"        \"DFP-0: 43-73; DFP-1 43-73\"\n    Option         \"MetaModes\"          \"1920x1080, 1920x1080\"\n    Option         \"ConnectedMonitor\"   \"DFP-0, DFP-1\"\n    Option         \"MetaModeOrientation\" \"DFP-1 LeftOf DFP-0\"\nEndSection\n\nSection \"Screen\"\n    Identifier     \"metaScreen\"\n    Device         \"Card0\"\n    Monitor        \"Monitor0\"\n    DefaultDepth    24\n    Option         \"TwinView\" \"True\"\n    SubSection \"Display\"\n        Modes          \"1920x1080\"\n    EndSubSection\nEndSection\n```\n\nDevice オプション情報。\n\nSLI に対応しているカードが複数枚存在する場合、別々のカードに接続された複数のモニターを使うことができます (例: 2枚のカードが SLI で、各々のカードにモニターが1台ずつ接続)。SLI モザイクモードと \"MetaModes\" オプションで有効になります。以下は上記と同じように設定する例で、GNOME が完璧に動作します:\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"Device\"\n        Identifier      \"Card A\"\n        Driver          \"nvidia\"\n        BusID           \"PCI:1:00:0\"\nEndSection\n\nSection \"Device\"\n        Identifier      \"Card B\"\n        Driver          \"nvidia\"\n        BusID           \"PCI:2:00:0\"\nEndSection\n\nSection \"Monitor\"\n        Identifier      \"Right Monitor\"\nEndSection\n\nSection \"Monitor\"\n        Identifier      \"Left Monitor\"\nEndSection\n\nSection \"Screen\"\n        Identifier      \"Right Screen\"\n        Device          \"Card A\"\n        Monitor         \"Right Monitor\"\n        DefaultDepth    24\n        Option          \"SLI\" \"Mosaic\"\n        Option          \"Stereo\" \"0\"\n        Option          \"BaseMosaic\" \"True\"\n        Option          \"MetaModes\" \"GPU-0.DFP-0: 1920x1200+4480+0, GPU-1.DFP-0:1920x1200+0+0\"\n        SubSection      \"Display\"\n                        Depth           24\n        EndSubSection\nEndSection\n\nSection \"Screen\"\n        Identifier      \"Left Screen\"\n        Device          \"Card B\"\n        Monitor         \"Left Monitor\"\n        DefaultDepth    24\n        Option          \"SLI\" \"Mosaic\"\n        Option          \"Stereo\" \"0\"\n        Option          \"BaseMosaic\" \"True\"\n        Option          \"MetaModes\" \"GPU-0.DFP-0: 1920x1200+4480+0, GPU-1.DFP-0:1920x1200+0+0\"\n        SubSection      \"Display\"\n                        Depth           24\n        EndSubSection\nEndSection\n\nSection \"ServerLayout\"\n        Identifier      \"Default\"\n        Screen 0        \"Right Screen\" 0 0\n        Option          \"Xinerama\" \"0\"\nEndSection\n```\n\nTwinView と垂直同期 (nvidia-settings の \"Sync to VBlank\" オプション) を使っている場合、モニターの大きさが異なっていると片方の画面だけが同期されます。nvidia-settings にはどちらの画面を同期させるか設定するオプション (\"Sync to this display device\" オプション) が存在しますが、必ずしも機能するとはいいがたいです。起動時に以下の環境変数を追加することで解決します (例: /etc/profile に追加):\n\n```\nexport __GL_SYNC_TO_VBLANK=1\nexport __GL_SYNC_DISPLAY_DEVICE=DFP-0\nexport VDPAU_NVIDIA_SYNC_DISPLAY_DEVICE=DFP-0\n```\n\nDFP-0 は適切な画面に置き換えてください (DFP-0 は DVI 端子で CRT-0 は VGA 端子です)。ディスプレイの識別名は nvidia-settings の \"X Server XVideoSettings\" セクションで確認できます。\n\nTwinView を使ってフルスクリーンのゲームを遊ぶ場合、2つの画面が1つの大きな画面としてゲームから認識されることがあります。技術的にこれは正しいのですが (仮想的な X スクリーンの横幅は両方の画面を合わせたサイズになります)、ゲームを遊ぶときは両方の画面を使わないようにしたいときもあるでしょう。\n\nSDL のこの挙動を修正するには、次を試して下さい:\n\n```\nexport SDL_VIDEO_FULLSCREEN_HEAD=1\n```\n\nOpenGL の場合、xorg.conf の Device セクションに適切な Metamodes を追加して X を再起動してください:\n\n```\nOption \"Metamodes\" \"1680x1050,1680x1050; 1280x1024,1280x1024; 1680x1050,NULL; 1280x1024,NULL;\"\n```\n\n別の X サーバーでゲームを起動する方法もあります。上記の方法と一緒に使うことも可能です。\n\n"
    },
    {
      "title": "モザイクモード",
      "level": 4,
      "content": "モザイクモードは、複数のグラフィクカードでコンポジット有りで3つ以上のモニタを使用する唯一の方法です。ウィンドウマネージャは各モニタの違いを認識するかもしれませんし、しないかもしれません。モザイクモードには、有効な SLI 設定が必要です。SLI を使わずにベースモードを使用する場合でも、GPU は依然として SLI 対応/互換でなければなりません。\n\nベースモザイクモードは Geforce 8000 シリーズ以上の GPU で動作します。nvidia-setting の GUI から有効にすることはできません。nvidia-xconfig コマンドラインプログラムを使用するか xorg.conf を手動で編集する必要があります。Metamodes を指定してください。以下は4台の DFP を 2x2 の構成で使用する例です。各々の解像度は 1920x1024 で、2枚のカードにそれぞれ2台の DFP が接続されている場合:\n\n```\n$ nvidia-xconfig --base-mosaic --metamodes=\"GPU-0.DFP-0: 1920x1024+0+0, GPU-0.DFP-1: 1920x1024+1920+0, GPU-1.DFP-0: 1920x1024+0+1024, GPU-1.DFP-1: 1920x1024+1920+1024\"\n```\n\nSLI 構成を使っていて、使用する GPU が Quadro FX 5800 や Quadro Fermi 以降の場合、SLI モザイクモードが利用できます。nvidia-settings の GUI の中から有効化するか、コマンドラインで設定してください:\n\n```\n$ nvidia-xconfig --sli=Mosaic --metamodes=\"GPU-0.DFP-0: 1920x1024+0+0, GPU-0.DFP-1: 1920x1024+1920+0, GPU-1.DFP-0: 1920x1024+0+1024, GPU-1.DFP-1: 1920x1024+1920+1024\"\n```\n\n"
    },
    {
      "title": "NVswitch",
      "level": 2,
      "content": "NVswitch のあるシステム (AWS の H100x8 など) では、以下が必要です。\n\n- nvidia-fabricmanager をインストールする。\n- Fabric manager が必要とする、対応するカーネルモジュールをインストールする。\n\nFabric manager を使うと、pytorch が GPU が見つからないと報告してきます。\n\nFabric マネージャをインストールするには:\n\n1. Nvidia から tarball をダウンロードする。こちら\n1. バージョン 555.42.02 は正しく動作します。\n1. インストールスクリプト sbin/fm_run_package_installer.sh を変更してしてインストール先のパスを修正してください。\n\n対応するカーネルドライバを入手するには:\n\n1. nvidia-beta-dkms と nvidia-utils-beta の AUR リポジトリを git clone してください。\n1. PKGBUILD を変更してバージョン 555.42.02 を使用するようにしてください。\n1. ビルドし、インストールしてください。\n1. 再起動してください。\n\n最後に、systemctl enable nvidia-fabricmanager と systemctl start nvidia-fabricmanager を実行すれば、pytorch が動くはずです。\n\n"
    },
    {
      "title": "ヒントとテクニック",
      "level": 2,
      "content": "NVIDIA/ヒントとテクニック を参照。\n\n"
    },
    {
      "title": "トラブルシューティング",
      "level": 2,
      "content": "NVIDIA/トラブルシューティング を参照。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Current graphics driver releases in official NVIDIA Forum\n- NVIDIA Developers Forum - Linux Subforum\n\n"
    }
  ]
}