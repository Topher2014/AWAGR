{
  "title": "Go (日本語)",
  "url": "https://wiki.archlinux.org/title/Go_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Go パッケージガイドライン\n\nGo は、Google がサポートするオープンソースプログラミング言語です。the Go documentation から:\n\nGo は表現力豊かで、簡潔で、クリーンで効率的です。その同時実行メカニズムにより、マルチコアおよびネットワーク化されたマシンを最大限に活用するプログラムの作成が容易になり、また、その新しいタイプのシステムにより、柔軟なモジュール型プログラム構築が可能になります。Go はマシンコードに迅速にコンパイルされますが、ガベージコレクションの利便性と実行時リフレクションの機能を備えています。これは、動的に型付けされ解釈される言語のように感じられる、高速な静的型付けコンパイル言語です。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 代替コンパイラ 1.1.1 gccgo 1.1.2 TinyGo 1.2 ツール 1.3 インストールディレクトリ\n- 2 ヒントとテクニック 2.1 ソースコードのコンパイル 2.2 他のプラットフォームへのクロスコンパイル 2.2.1 cgo なし 2.2.2 cgo あり 2.3 代替 Go モジュールミラーの使用\n- 3 トラブルシューティング 3.1 Jetbrains の Go プラグイン\n- 4 参照\n\n- 1.1 代替コンパイラ 1.1.1 gccgo 1.1.2 TinyGo\n- 1.2 ツール\n- 1.3 インストールディレクトリ\n\n- 1.1.1 gccgo\n- 1.1.2 TinyGo\n\n- 2.1 ソースコードのコンパイル\n- 2.2 他のプラットフォームへのクロスコンパイル 2.2.1 cgo なし 2.2.2 cgo あり\n- 2.3 代替 Go モジュールミラーの使用\n\n- 2.2.1 cgo なし\n- 2.2.2 cgo あり\n\n- 3.1 Jetbrains の Go プラグイン\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "go パッケージを インストール して下さい、これには標準の Go コンパイラーとその他の開発ツールが含まれています。含まれるサブコマンドのリストについては、go コマンドのドキュメント を参照してください。\n\n"
    },
    {
      "title": "代替コンパイラ",
      "level": 3,
      "content": "go パッケージには、gc と呼ばれる標準 Go コンパイラが含まれています。次の代替コンパイラも使用できます。\n\n"
    },
    {
      "title": "gccgo",
      "level": 4,
      "content": "GCC のフロントエンド gccgo は、gcc-go パッケージによって提供されます。gccgo は、場合によっては gc より高速なバイナリを生成し、追加のオペレーティングシステムやアーキテクチャをターゲットにすることができます。実際には、ほぼすべてのワークロードにおいて、gc は gccgo よりも高速なバイナリを生成します。\n\n"
    },
    {
      "title": "TinyGo",
      "level": 4,
      "content": "TinyGo は、組み込みシステムおよび WebAssembly 用の非常に小さなバイナリを生成するように設計された LLVM ベースのコンパイラです。これは、tinygo パッケージによって提供されます。\n\n"
    },
    {
      "title": "ツール",
      "level": 3,
      "content": "次のパッケージは Go 用の開発者ツールを提供します:\n\n- Go ツール — 主に Go プログラムの静的解析のための様々なツールと Go パッケージ。\n\n- gopls — 公式 Go 言語サーバ\n\n- Delve — Go プログラミング言語のデバッガ。\n\n- GoReleaser — Go プロジェクト用のリリース自動化ツール\n\n- gox — 複数のプラットフォームのビルドを並列化する Go クロスコンパイル用のツール。\n\n- ko — Go アプリケーション用のコンテナイメージビルダ。\n\n- revive — 高速、構成可能、拡張可能、柔軟で美しい Go 用 linter。\n\n- Staticcheck — Goプログラミング言語用の最先端のリンター。\n\n- Yaegi — Goインタプリタ。yaegiコマンドラインインタープリタ /REPL を含みます。\n\n"
    },
    {
      "title": "インストールディレクトリ",
      "level": 3,
      "content": "go install コマンドは、GOBIN 環境変数 で指定されたディレクトリに Go 実行可能ファイルをインストールします。GOBIN のデフォルトは $GOPATH/bin、または GOPATH 環境変数が設定されていない場合は ~/go/bin です。\n\n便宜上、bin サブディレクトリを PATH に追加します:\n\n```\n$ export PATH=\"$PATH:$(go env GOBIN):$(go env GOPATH)/bin\"\n```\n\n詳細については、Go コードの書き方 および go help install を参照してください。\n\n"
    },
    {
      "title": "ソースコードのコンパイル",
      "level": 3,
      "content": "Hello World プログラムは次のように作成できます:\n\n```\nhello.go\n```\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, Arch!\")\n}\n```\n\n次に、go ツールを使用して実行します:\n\n```\n$ go run hello.go\n```\n\n```\nHello, Arch!\n```\n\n標準コンパイラによるコンパイル (go build -compiler=gc hello.go と同じ):\n\n```\n$ go build hello.go\n```\n\ngccgo によるコンパイル (go build -compiler=gccgo hello.go と同じ):\n\n```\n$ gccgo hello.go -o hello\n```\n\ntinygo でのコンパイル:\n\n```\n$ tinygo build -o hello ./hello.go\n```\n\n"
    },
    {
      "title": "他のプラットフォームへのクロスコンパイル",
      "level": 3,
      "content": "標準コンパイラは、多くのプラットフォーム に対してネイティブにクロスコンパイルできます。手順は、ソースコードが cgo を使用して C コードを呼び出すかどうかによって異なります。\n\n"
    },
    {
      "title": "cgo なし",
      "level": 4,
      "content": "ビルドに cgo が必要ない場合は、ターゲット OS とアーキテクチャを 環境変数 として go build に指定するだけです。\n\n```\n$ GOOS=linux GOARCH=arm64 go build .\n```\n\nGOOS と GOARCH の有効な組み合わせについては、公式ドキュメント を参照してください。\n\n"
    },
    {
      "title": "cgo あり",
      "level": 4,
      "content": "ビルドに cgo が必要な場合は、CC/CXX 環境変数を介して C/C++ クロスコンパイラーへのパスを指定する必要があります。\n\nGOOS=linux と GOARCH=arm64 をクロスコンパイルしたいとします。\n\nまず、aarch64-linux-gnu-gcc クロスコンパイラをインストールする必要があります。\n\n以下は、クロスコンパイルプロセスをテストできるように cgo を必要とするサンプルプログラムです:\n\n```\nhello.go\n```\n\n```\npackage main\n\n// #include <stdio.h>\n// void hello() { puts(\"Hello, Arch!\"); }\nimport \"C\"\n\nfunc main() {\n    C.hello()\n}\n```\n\n次に、次のようにクロスコンパイルできます:\n\n```\n$ GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc go build hello.go\n```\n\n生成されたバイナリのアーキテクチャが実際に aarch64 であることを確認できます:\n\n```\n$ file hello\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=b1d92ae8840a019f36cc2aee4606b6ae4a581bf1, for GNU/Linux 3.7.0, not stripped\n```\n\nhello を適切なホストにコピーすると、テスト実行できます:\n\n```\n[alarm@rpi3 ~]$ uname -a\nLinux alarm 5.3.8-1-ARCH #1 SMP Tue Oct 29 19:31:23 MDT 2019 aarch64 GNU/Linux\n[alarm@arpi3 ~]$ ./hello\nHello, Arch!\n```\n\n"
    },
    {
      "title": "代替 Go モジュールミラーの使用",
      "level": 3,
      "content": "デフォルトでは、Go は Google のサービス [1] をモジュールミラーとして使用します。\n\n代替ミラーが必要な場合は、環境変数 GOPROXY を使用して変更できます。次に例を示します:\n\n```\n$ export GOPROXY=https://goproxy.io/\n```\n\n多数のパブリックモジュールミラーが利用可能です。Go および Hugo Proxy Servers を参照してください。\n\n"
    },
    {
      "title": "Jetbrains の Go プラグイン",
      "level": 3,
      "content": "JetBrains IDE を使用していて、Go プラグインが Go SDK パスを見つけられない場合は、互換性のないパッケージを使用している可能性があります。gcc-go パッケージを削除し、go に置き換えます。GOPATH が設定されている場合、IDE は /usr/lib/go で Go SDK を見つけることができるはずです。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Go プログラミング言語のオフィシャルウェブサイト\n- Wikipedia の記事\n- 簡単な説明が付いているサンプル\n- インタラクティブな Go トレーニングツアー\n- Go の IDE とプラグイン\n- Go 1.5 Bootstrap Plan\n\n"
    }
  ]
}