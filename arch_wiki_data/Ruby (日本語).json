{
  "title": "Ruby (日本語)",
  "url": "https://wiki.archlinux.org/title/Ruby_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Ruby on Rails\n\nRuby はシンプルさと生産性に重点を置いた、動的でインタプリター型のオープンソースプログラミング言語です。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 複数のバージョン 1.2 ドキュメント 1.3 JRuby\n- 2 RubyGems 2.1 設定 2.2 使用方法 2.3 gem をシステム共通でインストール 2.4 Bundler 2.5 pacman を使って RubyGems を管理する 2.5.1 Quarry\n- 3 インタラクティブ・シェル 3.1 Pry\n- 4 参照\n\n- 1.1 複数のバージョン\n- 1.2 ドキュメント\n- 1.3 JRuby\n\n- 2.1 設定\n- 2.2 使用方法\n- 2.3 gem をシステム共通でインストール\n- 2.4 Bundler\n- 2.5 pacman を使って RubyGems を管理する 2.5.1 Quarry\n\n- 2.5.1 Quarry\n\n- 3.1 Pry\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "Ruby を使用するには、ruby パッケージをインストールしてください。\n\nIRB をインストールするには、ruby-irb パッケージを インストール します。\n\n"
    },
    {
      "title": "複数のバージョン",
      "level": 3,
      "content": "同じシステム上で複数のバージョン (例: 2.0.0-p0 と 1.9.3-p392) を動作させたい場合、一番簡単な方法は RVM, chrubyAUR, rbenv, asdf-vmAUR を使うことです。\n\n"
    },
    {
      "title": "ドキュメント",
      "level": 3,
      "content": "ri コマンドラインツールでドキュメントを見るには、ruby-rdoc および ruby-docs をインストールしてください。次のようにドキュメントを回覧できます: ri Array, ri Array.pop など (man-page と同じような感じです)。\n\n"
    },
    {
      "title": "JRuby",
      "level": 3,
      "content": "JRuby は JVM 上に実装された Ruby です。jruby パッケージでインストールできます。\n\n"
    },
    {
      "title": "RubyGems",
      "level": 2,
      "content": "RubyGems は Ruby のモジュール (Gem と呼ばれます) のためのパッケージマネージャで、Arch Linux における pacman に（多少は）相当します。上述の通り ruby に含まれています。\n\n"
    },
    {
      "title": "設定",
      "level": 3,
      "content": "Arch Linux では、デフォルトで gem を実行すると、gem はシステム全体 (/usr/lib/ruby/gems/) ではなく、ユーザーごとに (~/.local/share/gem/ruby/) インストールされます。これは、Pacman によってインストールされた gem に干渉する可能性があるため、Arch における gem の管理に最適な方法と考えられています。\n\nそれを設定する推奨方法は、手動で $GEM_HOME を指定し、それを $PATH 環境変数 に追加することで RubyGems のバイナリを実行可能にすることです:\n\n```\n~/.profile\n```\n\n```\nexport GEM_HOME=\"$(gem env user_gemhome)\"\nexport PATH=\"$PATH:$GEM_HOME/bin\"\n```\n\nこれにより、ライブラリはパスを変更しなくても動作しますが、実行可能な gem をフルパスを指定せずに使用するためには必要です。\n\n現在の RubyGems 環境を表示するには gem env を使用します:\n\n```\n$ gem env\n```\n\n"
    },
    {
      "title": "使用方法",
      "level": 3,
      "content": "インストールされている gem を確認するには:\n\n```\n$ gem list\n```\n\ngem についての情報を得るには:\n\n```\n$ gem spec gem_name\n```\n\nデフォルトで、gem list や gem spec は --local オプションを使います。つまりローカルのシステムだけで gem を検索します。これを --remote フラグで上書きすることが可能です。そう、例えば mysql の gem を検索するには:\n\n```\n$ gem list --remote mysql\n```\n\ngem をインストールするには:\n\n```\n$ gem install mysql\n```\n\nローカルのドキュメントが必要ない場合はスピードアップすることができます:\n\n```\n$ gem install mysql --no-document\n```\n\n```\n~/.gemrc\n```\n\n```\ngem: --no-document\n```\n\nインストールされている gem を全てアップデートするには:\n\n```\n$ gem update\n```\n\n"
    },
    {
      "title": "gem をシステム共通でインストール",
      "level": 3,
      "content": "--no-user-install フラグを付けて gem コマンドを root で実行することで Gem をシステム共通でインストールすることができます。/etc/gemrc (システム共通) または ~/.gemrc (ユーザー個別、システム共通設定を上書きします) にある --user-install を --no-user-install で置き換えることでこのフラグをデフォルトで設定可能です。\n\nBundler は gem をあなたのアプリケーションにパッケージングすることでこの問題をある程度解決します。bundler を使用するにあたって下のセクションを見て下さい。\n\n"
    },
    {
      "title": "Bundler",
      "level": 3,
      "content": "Bundler を使うことであなたのアプリケーションが依存している gem はどれか、さらに（任意で）その gem のバージョンは何でなければならないかを指定することができます。この記述があると、Bundler は必要な gem を全て (完全な gem の依存ツリーを含む) インストールして、後の点検のために結果をログに残します。デフォルトで、Bundler は gem を共有の場所にインストールしますが、あなたのアプリケーションに直接インストールすることも可能です。あなたのアプリケーションが実行されると、複数のバージョンの gem がインストールされている時でも、Bundler はそれぞれの gem の正しいバージョンを与えます。これにはわずかばかりの作業が必要です: アプリケーションは bundle exec で呼び出される必要があり、あなたのアプリケーションのメインの実行ファイルに2行のボイラープレートコード（おまじない）を入れなくてはなりません。\n\nBundler をインストールするには:\n\n```\n$ gem install bundler\n```\n\nデフォルトで、Bundler は gem をシステム全体にインストールします。これは Arch での gem それ自体の挙動とは反対です。これを正すには、次を ~/.bashrc に追加してください:\n\n```\nexport GEM_HOME=$(ruby -e 'print Gem.user_dir')\n```\n\n新しい bundle を始めるには:\n\n```\n$ bundle init\n```\n\n次に (bundle init によって作成された) 作業ディレクトリ内の Gemfile を編集して必要な gem を記載してください:\n\n```\nGemfile\n```\n\n```\ngem \"rails\", \"3.2.9\"\ngem \"mysql\"\n```\n\n次を実行して gem を GEM_HOME にインストールしてください:\n\n```\n$ bundle install\n```\n\nもしくは、次を実行して gem を作業ディレクトリ内の .bundle にインストールしてください:\n\n```\n$ bundle config set --local path '.bundle'\n```\n\nあなたのメインの実行ファイルを編集するのを忘れないで下さい:\n\n```\n#!/usr/bin/env ruby\n\n# \"これは自動的にあなたの Gemfile を発見し、その中のすべての gem を Ruby で利用できるようにします。\n# Gemfile にあるすべての gems を Ruby で利用できるようにします。\" https://bundler.io/rationale.html\n\nrequire 'bundler/setup'\n\n...\n```\n\n最後に、あなたのプログラムを実行して下さい:\n\n```\nbundle exec main_executable_name.rb\n```\n\n"
    },
    {
      "title": "pacman を使って RubyGems を管理する",
      "level": 3,
      "content": "gem で gems を管理する代わりに、pacman や AUR ヘルパーを利用することができます。Ruby のパッケージは ruby-gemname という命名規則に従っています。\n\nこのオプションは次のような利点があります。\n\n- Gems はシステムの他の部分と一緒にアップデートされます。\n- インストールされた gems は、インストールしたユーザだけが利用できるのではなく、システム全体で利用できるようになります。\n\n"
    },
    {
      "title": "Quarry",
      "level": 4,
      "content": "Quarry は Arch Linux のための rubygems バイナリリポジトリを運営するためのオープンソースツール (GPL3 ライセンス) です。ソースは github でホストされています。\n\nArch の開発者 anatolik によって非公式の rubygems リポジトリが http://pkgbuild.com/~anatolik/quarry/ で運営されており、いまのところ x86_64 アーキテクチャのみサポートしています。このリポジトリには多数の人気 gem が含まれており、gem を追加するようリクエストを送ることもできます。バイナリパッケージリポジトリは AUR のソースパッケージよりも簡単に使用することが可能です。\n\nリポジトリを有効にする方法は 非公式ユーザーリポジトリ#quarry を見て下さい。\n\n有効にしたら必要な gem をインストールしてください: # pacman -S ruby-$gemname。\n\n質問がありましたら、プロジェクトアナウンスに送って下さい: https://bbs.archlinux.org/viewtopic.php?id=182729\n\n"
    },
    {
      "title": "Pry",
      "level": 3,
      "content": "Pry は Ruby の標準的な IRB シェルに代わる強力なシェルです。シンタックスハイライト、柔軟なプラグインアーキテクチャ、ランタイム呼び出し、ソースとドキュメントのブラウジングが特徴です。\n\n```\n$gem install pry\n$pry\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Ruby on Rails\n- Ruby - http://ruby-lang.org/\n- Bundler - http://bundler.io/\n- ホワイの(感動的)Rubyガイド\n- Learn Ruby The Hard Way\n- Comparison of Bundler and RVM workflows\n\n"
    }
  ]
}