{
  "title": "Google Authenticator (日本語)",
  "url": "https://wiki.archlinux.org/title/Google_Authenticator_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- OATH\n- pam_oath\n- アイデンティティ管理\n\nGoogle Authenticator は、ワンタイムパスコード (OTP) を使用した二段階認証手続きを提供します。この認証方式は、オープン認証イニシアチブ(OATH) によって最初に標準化されました。認証メカニズムは Linux の PAM システムに統合されています。本ガイドでは、このメカニズムのインストールと設定方法を紹介します。\n\n逆の操作（Linux 上で Google Authenticator 互換のコードを生成する方法）については、以下のコード生成を参照してください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 SSH 2.1.1 ローカルネットワーク外から接続したときのみ OTP を要求する 2.2 デスクトップログイン\n- 3 使用方法 3.1 シークレットキーのファイル生成 3.1.1 保存場所 3.2 コード生成 3.2.1 モバイル端末ジェネレーター 3.2.2 コードマネージャー 3.2.3 KeePassXC 3.2.4 コマンドライン 3.3 テスト\n\n- 2.1 SSH 2.1.1 ローカルネットワーク外から接続したときのみ OTP を要求する\n- 2.2 デスクトップログイン\n\n- 2.1.1 ローカルネットワーク外から接続したときのみ OTP を要求する\n\n- 3.1 シークレットキーのファイル生成 3.1.1 保存場所\n- 3.2 コード生成 3.2.1 モバイル端末ジェネレーター 3.2.2 コードマネージャー 3.2.3 KeePassXC 3.2.4 コマンドライン\n- 3.3 テスト\n\n- 3.1.1 保存場所\n\n- 3.2.1 モバイル端末ジェネレーター\n- 3.2.2 コードマネージャー\n- 3.2.3 KeePassXC\n- 3.2.4 コマンドライン\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "クライアントプログラム google-authenticator(1) と PAM モジュール pam_google_authenticator.so を提供する libpam-google-authenticator パッケージをインストールします。開発版は google-authenticator-libpam-gitAUR で利用可能です。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "このセクションでは、システムの PAM を設定して、SSH およびオプションでデスクトップログインに対して Google Authenticator の OTP 認証を要求する方法を説明します。\n\n"
    },
    {
      "title": "SSH",
      "level": 3,
      "content": "通常、リモートログインに対してのみ 2 パス認証を要求します。対応する PAM 設定ファイルは /etc/pam.d/sshd です。Google Authenticator を全体に適用したい場合は、/etc/pam.d/system-auth を変更する必要がありますが、この場合は非常に慎重に進め、ログインできなくなることを避けてください。 このガイドでは、最も安全な（必ずしも必要ではありませんが）ローカルセッションで /etc/pam.d/sshd を編集します。\n\nUNIX パスワードと OTP の両方を入力するには、pam_google_authenticator.so を /etc/pam.d/sshd 内の system-remote-login 行の上に追加します。\n\n```\nauth            required        pam_google_authenticator.so\nauth            include         system-remote-login\naccount         include         system-remote-login\npassword        include         system-remote-login\nsession         include         system-remote-login\n```\n\nこれにより、OTP が要求された後に UNIX パスワードの入力が求められます。これらのモジュールの順序を変更すると、順序が逆になります。\n\nOTP または UNIX パスワードのいずれかでログインを許可するには、次のようにします。\n\n```\nauth            sufficient      pam_google_authenticator.so\n```\n\n/etc/ssh/sshd_config.d/99-archlinux.conf でキーボード対話型認証を有効にします。\n\n```\nKbdInteractiveAuthentication yes\n```\n\n最後に、sshd.service をリロードします。\n\n"
    },
    {
      "title": "ローカルネットワーク外から接続したときのみ OTP を要求する",
      "level": 4,
      "content": "場合によっては、ローカルネットワーク外から接続するときにのみ 2FA 機能を有効にしたいことがあります。 これを実現するには、ファイル（例: /etc/security/access-local.conf）を作成し、2FA をバイパスできるネットワークを追加します。\n\n```\n# ローカル IP 範囲のみ許可\n+ : ALL : 192.168.20.0/24\n# 追加ネットワーク: VPN トンネル IP 範囲（ある場合）\n+ : ALL : 10.8.0.0/24\n+ : ALL : LOCAL\n- : ALL : ALL\n```\n\n次に、/etc/pam.d/sshd を編集し、以下の行を追加します。\n\n```\n#%PAM-1.0\nauth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\nauth      required  pam_google_authenticator.so\nauth      include   system-remote-login\naccount   include   system-remote-login\npassword  include   system-remote-login\nsession   include   system-remote-login\n```\n\n"
    },
    {
      "title": "デスクトップログイン",
      "level": 3,
      "content": "Google Authenticator の PAM プラグインは、コンソールログインや GDM にも使用できます。/etc/pam.d/login または /etc/pam.d/gdm-password ファイルに次の行を追加するだけです。\n\n```\nauth required pam_google_authenticator.so\n```\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "2 パス認証を使用したいユーザーは、それぞれ\n\n- ホームフォルダにシークレットキーのファイルを生成し、\n- 対応する OTP ジェネレーターを設定する必要があります。\n\n"
    },
    {
      "title": "シークレットキーのファイル生成",
      "level": 3,
      "content": "google-authenticator は以下のように TOTP シークレットキーのファイルを生成します。\n\n```\n$ google-authenticator\n```\n\n```\nDo you want authentication tokens to be time-based (y/n) y\ngenerated_QR_code_here\nYour new secret key is: ZVZG5UZU4D7MY4DH\nYour verification code is 269371\nYour emergency scratch codes are:\n  70058954\n  97277505\n  99684896\n  56514332\n  82717798\n\nDo you want me to update your \"/home/username/.google_authenticator\" file (y/n) y\n\nDo you want to disallow multiple uses of the same authentication\ntoken? This restricts you to one login about every 30s, but it increases\nyour chances to notice or even prevent man-in-the-middle attacks (y/n) y\n\nBy default, tokens are good for 30 seconds and in order to compensate for\npossible time-skew between the client and the server, we allow an extra\ntoken before and after the current time. If you experience problems with poor\ntime synchronization, you can increase the window from its default\nsize of 1:30min to about 4min. Do you want to do so (y/n) n\n\nIf the computer that you are logging into is not hardened against brute-force\nlogin attempts, you can enable rate-limiting for the authentication module.\nBy default, this limits attackers to no more than 3 login attempts every 30s.\nDo you want to enable rate-limiting (y/n) y\n```\n\n緊急スクラッチコードを安全に保管することをお勧めします（印刷して安全な場所に保管してください）。これらは、携帯電話（OTP ジェネレーター）を紛失した場合、SSH を介してログインする唯一の方法です。また、~/.google_authenticator にも保存されているため、ログインしている限りいつでも確認できます。\n\n"
    },
    {
      "title": "保存場所",
      "level": 4,
      "content": "シークレットキーのファイル保存パスを変更したい場合は、--secret フラグを使用します。\n\n```\n$ google-authenticator --secret=\"/path_folder/username\"\n```\n\nその後、PAM の場所パスを /etc/pam.d/sshd で忘れずに変更します。\n\n```\n/etc/pam.d/sshd\n```\n\n```\nauth required pam_google_authenticator.so user=root secret=/path_folder/${USER}\n```\n\nuser=root は、PAM に root ユーザーを使用してファイルを検索させるために使用されます。\n\nまた、シークレットキーのファイルのパーミッションに注意してください。ファイルは所有者のみ読み取り可能でなければなりません（chmod: 400）。ここでは、所有者は root です。\n\n```\n$ chown root:root /path_file/secret_key_files\n$ chmod 400 /path_file/secret_key_files\n```\n\n"
    },
    {
      "title": "コード生成",
      "level": 3,
      "content": "最終設定ステップでは、各ユーザーがホームディレクトリに生成されたシークレットキーのファイルを選択した OTP ジェネレーターに関連付けて認証コードを生成する必要があります。冗長性のために、モバイル端末の OTP アプリケーションや別のパスワードマネージャーなど、複数のデバイスでジェネレーターを設定したり、以前に生成した緊急スクラッチコードをバックアップとして利用することもできます。\n\n"
    },
    {
      "title": "モバイル端末ジェネレーター",
      "level": 4,
      "content": "携帯電話にジェネレーターアプリケーションをインストールします（例）：\n\n- Android 用 FreeOTP（F-Droid、Google Play）または iOS 用（App Store）。\n- Android 用 FreeOTP+（F-Droid、Google Play）。\n- Android 用 Aegis（F-Droid、Google Play）。\n- Android 用 Bitwarden（F-Droid、Google Play）または iOS 用（App Store）。\n- Android 用 Google Authenticator（Google Play）または iOS 用（App Store）。\n\nモバイルアプリケーションで新しいアカウントを作成し、シークレットキーのファイル生成時に表示された URL から QR コードをスキャンするか、シークレットキー（上記の例では「ZVZG5UZU4D7MY4DH」）を手動で入力します。\n\nこれで、携帯電話に 30 秒ごとに新しいパスコードトークンが生成されるはずです。\n\nGoogle Authenticator を他のシステムでも設定している場合、デバイスを紛失するとそれらのシステムにログインできなくなることがあります。コードを生成する追加の方法を持つことが役立ちます。\n\n"
    },
    {
      "title": "コードマネージャー",
      "level": 4,
      "content": "Google Authenticator コードの表示、生成、保存、管理を可能にするスクリプトは gashellAUR によって提供されています。代替オプションとして auther-gitAUR もあります。\n\n"
    },
    {
      "title": "KeePassXC",
      "level": 4,
      "content": "GUI パスワードマネージャー keepassxc では、Google Authenticator コードをエントリに関連付け、その後 OTP コードを生成して QR コード経由でキーをエクスポートすることができます。\n\n"
    },
    {
      "title": "コマンドライン",
      "level": 4,
      "content": "最も簡単なコード生成方法は oathtool(1) です。これは oath-toolkit パッケージに含まれており、次のように使用できます。\n\n```\n$ oathtool --totp --base32 secret_key\n```\n\nほとんどの Android システムでは、Google Authenticator データベースをデバイスからコピーして直接アクセスできます。このデータベースは SQLite データベースです。ただし、2022年7月のある時点 で、アカウントテーブルのシークレット列で暗号化が使用され始めました。データベースバックアップでこの暗号化が使用されていない場合、このシェルスクリプトを使用して Google Authenticator データベースを読み取り、見つかった各キーのライブコードを生成できます。\n\n```\ngoogle-authenticator.sh\n```\n\n```\n#!/bin/sh\n\n# これは Google Authenticator アプリファイルへのパスです。通常は\n# Android の /data にあります。PC にコピーして安全な場所に保管し、\n# ここにそのパスを指定します。\nDB=\"/path/to/com.google.android.apps.authenticator/databases/databases\"\n\nsqlite3 \"$DB\" 'SELECT email,secret FROM accounts;' | while read A\ndo\n        NAME=`echo \"$A\" | cut -d '|' -f 1`\n        KEY=`echo \"$A\" | cut -d '|' -f 2`\n        CODE=`oathtool --totp -b \"$KEY\"`\n        echo -e \"\\e[1;32m$CODE\\e[0m - \\e[1;33m$NAME\\e[0m\"\ndone\n```\n\n"
    },
    {
      "title": "テスト",
      "level": 3,
      "content": "別のマシンや別のターミナルウィンドウからホストに SSH 接続します。\n\n```\n$ ssh hostname\nlogin as: username\nVerification code: generated/backup_code\nPassword: password\n$\n```\n\n"
    }
  ]
}