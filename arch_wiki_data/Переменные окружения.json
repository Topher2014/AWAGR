{
  "title": "Переменные окружения",
  "url": "https://wiki.archlinux.org/title/%D0%9F%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5_%D0%BE%D0%BA%D1%80%D1%83%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Приложения по умолчанию\n- systemd/Пользователь#Переменные окружения\n\nПеременная окружения — именованный объект, содержащий текстовую информацию, которую могут использовать запускаемые программы. Проще говоря, это переменная с именем и значением. Значением такой переменной может быть, например, место размещения исполняемых файлов в системе, имя предпочитаемого текстового редактора или настройки системной локали. Новые в Linux пользователи часто находят такой способ хранения настроек неудобным. Однако переменные окружения позволяют простым и надёжным способом передавать настройки сразу для множества приложений.\n\n"
    },
    {
      "title": "Утилиты",
      "level": 2,
      "content": "Пакет coreutils содержит программы printenv и env. Программа printenv позволяет отобразить список текущих переменных окружения и их значения:\n\n```\n$ printenv\n```\n\nПрограмма env может быть использована для запуска команд с указанием нового значения переменной окружения. В следующем примере будет запущен xterm, для которого переменная окружения EDITOR имеет значение vim. Такой вызов не затронет переменную окружения EDITOR в текущем сеансе терминала.\n\n```\n$ env EDITOR=vim xterm\n```\n\nВстроенная в командную оболочку команда set(1p) позволяет вам устанавливать значения переменных окружения в текущем сеансе терминала, а также отображать имена и значения переменных окружения текущего сеанса.\n\nЧтобы увидеть переменные окружения конкретных процессов, откройте файл /proc/pid/environ, где pid — числовой идентификатор интересующего процесса. Записи в этом файле отделены друг от друга нулевым байтом (\\x0), который обычно не виден в терминале. Вы можете использовать, например, sed для отображения переменных окружения процесса в более читабельном формате, заменив нулевые байты на переносы строки: sed 's:\\x0:\\n:g' /proc/$PID/environ\n\n"
    },
    {
      "title": "Установка переменных",
      "level": 2,
      "content": "Чтобы избежать замусоривания переменных окружения, стоит по возможности ограничивать области действия переменных. Кроме того, графические сеансы и службы systemd требуют установки переменных в определённых местах, чтобы они сработали. Область действия переменных окружения разделяется на контексты, на которые они влияют:\n\n- системный — все программы у любых пользователей, кроме служб systemd;\n- пользовательский — все программы определённого пользователя, кроме служб systemd (смотрите systemd/Пользователь#Переменные окружения) или графических окружений (смотрите раздел #Графические приложения).\n\n"
    },
    {
      "title": "С помощью файлов инициализации оболочки",
      "level": 4,
      "content": "Большинство дистрибутивов Linux советуют изменять или добавлять переменные окружения в /etc/profile или других местах. Имейте в виду, что сразу множество файлов могут содержать переменные окружения и переопределять их, вроде /etc/locale.conf. По сути, любой скрипт может быть использован для этого, однако по принятым в UNIX соглашениям следует использовать для этого только определённые файлы.\n\nДля установки переменных окружения на уровне всей системы можно использовать следующие файлы (каждый со своими ограничениями):\n\n- /etc/environment используется модулем pam_env. Он не привязан к командным оболочкам, поэтому скрипты или glob-выражения использовать здесь нельзя. Здесь можно указывать только пары имя=значение.\n- /etc/profile устанавливает переменные только в оболочках входа (когда пользователь выполняет вход в систему). В нём можно запускать скрипты (например, запускаются скрипты из каталога /etc/profile.d/) и он может использоваться в оболочках, совместимых с Bourne shell.\n- Файлы настроек, специфичные для конкретных командных оболочек — глобальные файлы настроек для вашей командной оболочки, инициализирует переменные и запускает скрипты. Например, Bash (Русский)#Файлы настроек (например, ~/.bashrc) или Zsh (Русский)#Файлы запуска/завершения (например, ~/.zshrc).\n\nНиже приведён пример скрипта, который создаёт функцию для добавления нескольких каталогов (например, ~/bin и ~/scripts) в PATH. Чтобы это сделать, просто поместите код в один из системных файлов инициализации окружения (/etc/profile или /etc/bash.bashrc):\n\n```\nset_path(){\n\n    # Проверяем, что id пользователя 1000 или больше\n    [ \"$(id -u)\" -ge 1000 ] || return\n\n    for i in \"$@\";\n    do\n        # Проверяем существование каталога\n        [ -d \"$i\" ] || continue\n\n        # Проверяем, что его ещё нет в $PATH.\n        echo \"$PATH\" | grep -Eq \"(^|:)$i(:|$)\" && continue\n\n        # Затем добавляем в $PATH и экспортируем переменную\n        export PATH=\"${PATH}:$i\"\n    done\n}\n\nset_path ~/bin ~/scripts\n```\n\nОдним из способов использования общих переменных окружения в разных оболочках является создание файла без комментариев, пустых строк и пробелов (bash), который может быть прочитан непосредственно программой envsubst (вдохновлено [1]):\n\n```\n.env\n```\n\n```\nEDITOR=vim\nXDG_CACHE_HOME=$HOME/.cache\nXDG_CONFIG_HOME=$HOME/.config\nXDG_DATA_HOME=$HOME/.local/share\nXDG_STATE_HOME=$HOME/.local/state\n```\n\n```\n~/.bashrc\n```\n\n```\nexport $(envsubst < .env)\n```\n\n```\n~/.config/fish/config.fish\n```\n\n```\nexport (envsubst < .env)\n```\n\n"
    },
    {
      "title": "С помощью pam_env",
      "level": 4,
      "content": "PAM-модуль pam_env(8) загружает переменные для прописывания в окружение из этих файлов в указанном порядке: /etc/security/pam_env.conf и /etc/environment.\n\n- Эти файлы считываются перед другими файлами, в частности перед ~/.profile, ~/.bash_profile и ~/.zshenv.\n- Устаревший файл ~/.pam_environment больше не считывается. Смотрите FS#68945.\n\n/etc/environment должен содержать только простые пары вида ПЕРЕМЕННАЯ=значение на отдельных строках, например:\n\n```\n/etc/environment\n```\n\n```\nEDITOR=nano\n```\n\n/etc/security/pam_env.conf имеет формат:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nПЕРЕМЕННАЯ [DEFAULT=значение] [OVERRIDE=значение]\n```\n\n@{HOME} и @{SHELL} являются специальными переменными, значение которых берётся из /etc/passwd. Следующий пример показывает, как использовать переменную HOME внутри другой переменной:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nXDG_CONFIG_HOME   DEFAULT=@{HOME}/.config\n```\n\nФормат также позволяет расширить уже определённые переменные значениями из других переменных с помощью ${ПЕРЕМЕННАЯ} , например:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nGOPATH DEFAULT=${XDG_DATA_HOME}/go\n```\n\nПары ПЕРЕМЕННАЯ=значение тоже допускаются, но расширение переменных здесь не поддерживается. Подробнее смотрите pam_env.conf(5).\n\n"
    },
    {
      "title": "На уровне пользователя",
      "level": 3,
      "content": "Не всегда требуется устанавливать переменные окружения на уровне системы. Например, вы можете захотеть добавить свой каталог /home/пользователь/bin в PATH, однако не хотите, чтобы это затрагивало других пользователей системы. Пользовательские переменные окружения можно устанавливать во многих файлах:\n\n- Файлы инициализации командной оболочки, например Bash (Русский)#Файлы настроек или Zsh (Русский)#Файлы запуска/завершения. Если вы не хотите ограничить область действия переменных только открытыми терминалами (например, только для приложений командной строки), вы скорее всего хотите изменить параметры оболочки входа.\n- Пользовательские переменные окружения systemd считываются из файлов ~/.config/environment.d/*.conf.\n\n- Если вы не хотите ограничить область действия переменных только открытыми терминалами (например, только для приложений командной строки), вы скорее всего хотите изменить параметры оболочки входа.\n\nНапример, чтобы добавить каталог в PATH, поместите следующее в ~/.bash_profile:\n\n```\nexport PATH=\"${PATH}:/home/пользователь/bin\"\n```\n\nДля применения изменений перелогиньтесь или выполните source: $ source ~/.bash_profile.\n\n"
    },
    {
      "title": "Графические приложения",
      "level": 4,
      "content": "Если переменная окружения влияет только на графические приложения, можно ограничить область её применения, установив её только в рамках графического сеанса. В порядке сужения области:\n\n- #На уровне Xorg или #На уровне Wayland — охватывают весь графический сеанс, в том числе наверняка среду рабочего стола;\n- #На уровне графического сеанса — охватывает приложения, запущенные в рамках графического сеанса, в том числе, возможно, и среду рабочего стола;\n- #На уровне приложения — только для отдельного графического приложения.\n\nНекоторые графические окружения (например, KDE Plasma), поддерживают запуск скриптов при входе: можно использовать их для установки переменных окружения. Пример есть в статье KDE (Русский)#Автозапуск приложений.\n\nУстановка переменных окружения для сеанса Xorg зависит от того, каким конкретно способом он запускается:\n\n- Большинство экранных менеджеров выполняют source файла xprofile.\n- startx и SLiM выполняют xinitrc.\n- XDM выполняет ~/.xsession; смотрите XDM (Русский)#Определение сеанса.\n- LightDM[2] и SDDM[3] дополнительно выполняет source скриптов оболочек входа, вроде ~/.bash_profile для bash или ~/.zprofile и ~/.zlogin для zsh.\n\nХотя конец скрипта зависит от того, какой это файл, а любой расширенный синтаксис зависит от используемой оболочки, базовое использование универсально:\n\n```\n~/.xprofile, ~/.xinitrc или ~/.xsession\n```\n\n```\n...\nexport ПЕРЕМЕННАЯ=значение\n...\n```\n\nТак как Wayland не использует Xorg-специфичные файлы, GDM и KDE Plasma вместо них загружают пользовательские переменные окружения systemd.\n\n```\n~/.config/environment.d/envvars.conf\n```\n\n```\nПЕРЕМЕННАЯ=значение\n```\n\nДругие экранные менеджеры (например, SDDM) пока что не поддерживают это напрямую. Однако LightDM и SDDM выполняет source скриптов оболочек входа и для сеансов Wayland тоже.\n\ngreetd также использует /etc/profile и ~/.profile — это поведение контролируется его настройкой source_profile, включенной по умолчанию.\n\nЕсли ваш экранный менеджер выполняет скрипты запуска вроде ~/.bash_profile и вы хотите использовать environment.d, то с помощью run-parts можно сделать так:\n\n```\n~/.bash_profile\n```\n\n```\n# использует systemd-environment-d-generator(8) для генерации переменных окружения и экспортирует их\nset -o allexport\nsource <(/usr/lib/systemd/user-environment-generators/30-systemd-environment-d-generator)\nset +o allexport\n```\n\nЧтобы установить переменные окружения только для определённого приложения вместо целого сеанса, измените .desktop файл этого приложения. Смотрите Ярлыки приложений#Изменение переменных окружения.\n\nДля игры из Steam можно настроить окружение, отредактировав её параметры запуска.\n\n"
    },
    {
      "title": "На уровне сеанса или оболочки",
      "level": 3,
      "content": "Иногда бывает нужно установить временную переменную окружения. Например, если нужно временно запускать исполняемые файлы из определённого каталога, но не хочется вводить абсолютный путь к каждому из них или редактировать настройки командной оболочки на время работы с ними.\n\nВ таком случае можно определить переменную PATH в текущем сеансе с помощью команды export. Пока командная оболочка продолжает работать, все запускаемые в ней процессы будут использовать изменённое значение переменной.\n\n```\n$ export PATH=\"${PATH}:/home/my_user/tmp/usr/bin\"\n```\n\n"
    },
    {
      "title": "Примеры",
      "level": 2,
      "content": "В этом разделе описываются типовые переменные окружения, используемые в Linux.\n\n- XDG_CURRENT_DESKTOP — это переменная freedesktop.org, содержащая список разделённых двоеточиями строк, которыми идентифицируется среда рабочего стола [4]. Стандартные значения — GNOME, GNOME-Flashback, KDE, LXDE, LXQt, MATE, TDE, Unity, XFCE, EDE, Cinnamon, Pantheon и DDE [5]. Cinnamon был зарегистрирован [6][устаревшая ссылка 2025-03-15 ⓘ] других сред. В итоге некоторые приложения по-прежнему ожидают старое нестандартное значение X-CINNAMON, например Qt[7][устаревшая ссылка 2025-03-15 ⓘ]. Hyprland неофициально признан за Hyprland.\n\n- Cinnamon был зарегистрирован [6][устаревшая ссылка 2025-03-15 ⓘ] других сред. В итоге некоторые приложения по-прежнему ожидают старое нестандартное значение X-CINNAMON, например Qt[7][устаревшая ссылка 2025-03-15 ⓘ].\n- Hyprland неофициально признан за Hyprland.\n\n- XDG_SESSION_DESKTOP похожа на XDG_CURRENT_DESKTOP, но допускает использование только одной строки. Несмотря на название, переменная не входит в стандарт freedesktop.org.\n\n- DE — более старая переменная для обозначения текущей среды рабочего стола (Desktop Environment). Её значения не стандартизированы, но можно ориентироваться на xdg-utils как на справочник типовых значений для многих сред рабочего стола.\n\n- DESKTOP_SESSION — ещё одна старая переменная, но используется реже, чем DE. Значение также может быть путём к файлу .desktop сеанса в каталоге /usr/share/xsessions/ [8].\n\n- WINDOW_MANAGER — переменная, иногда используемая для выбора оконного менеджера, который будет использоваться в среде рабочего стола. Это отличает её от других упомянутых здесь переменных, которые устанавливаются уже выбранным экранным менеджером или средой рабочего стола и используется для чтения другими программами.\n\n- PATH содержит список каталогов, разделённых двоеточиями, в которых система ищет исполняемые файлы. Когда обычная команда (например, ls, systemctl или pacman) интерпретируется командной оболочкой (например, bash или zsh), оболочка ищет исполняемый файл с указанным именем в каталогах из этого списка и, если находит, запускает файл, передав ему указанные аргументы командной строки. Чтобы запускать исполняемые файлы, пути к которым не находятся в PATH, необходимо указывать относительный или абсолютный путь к файлу, например ./a.out или /bin/ls.\n\n- HOME содержит путь к домашнему каталогу текущего пользователя. Эта переменная может использоваться приложениями для определения расположения файлов настроек пользователя, который их запускает.\n\n- PWD содержит путь к текущему рабочему каталогу.\n\n- OLDPWD содержит путь к предыдущему рабочему каталогу, то есть, значение PWD перед последним вызовом cd.\n\n- TERM содержит тип запущенного терминала, например xterm-256color. Это используется некоторыми программами, которые хотят знать возможности текущего терминала.\n\n- MAIL содержит путь к каталогу, где сохраняется входящая почта. Обычно имеет значение /var/spool/mail/$LOGNAME.\n\n- ftp_proxy и http_proxy содержат адреса прокси-серверов для протоколов FTP и HTTP соответственно:\n\n```\nftp_proxy=\"ftp://192.168.0.1:21\"\nhttp_proxy=\"http://192.168.0.1:80\"\n```\n\n- MANPATH содержит разделённый двоеточиями список каталогов, которые использует man для поиска man-страниц.\n\n- INFODIR содержит разделённый двоеточиями список каталогов, которые использует info для поиска info-страниц, например /usr/share/info:/usr/local/share/info.\n\n- TZ может использоваться для установки временной зоны. Можно ссылаться на файл из /usr/share/zoneinfo/, например TZ=\":/usr/share/zoneinfo/Europe/Moscow\", тогда перед путём к файлу должно стоять двоеточие (смотрите документацию GNU).\n\n"
    },
    {
      "title": "Программы по умолчанию",
      "level": 3,
      "content": "- SHELL содержит путь к предпочитаемой командной оболочке текущего пользователя. Имейте в виду, что это не обязательно совпадает с текущей работающей оболочкой. Если значение не указано, Bash автоматически устанавливает в качестве её значения оболочку входа, прописанную в файле /etc/passwd, или /bin/sh, если это не удаётся определить.\n\n- PAGER указывает команду для запуска программы постраничного просмотра содержимого текстовых файлов, например, /bin/less.\n\n- EDITOR содержит команду для запуска программы для редактирования текстовых файлов, например /usr/bin/nano. Также можно задать специальную команду, которая будет выбирать редактор в зависимости от окружения, например, gedit в X или nano в терминале, как в этом примере:\n\n```\n[ -n \"$DISPLAY\" ] && export EDITOR=gedit || export EDITOR=nano\n```\n\n- VISUAL позволяет указать имя продвинутого текстового редактора для более сложных задач, например, редактирования почты. Это могут быть vi, vim, emacs и т. д.\n\n- BROWSER содержит команду для запуска веб-браузера. Может быть полезно устанавливать это значение в зависимости от наличия графического окружения:\n\n```\n[ -n \"$DISPLAY\" ] && export BROWSER=firefox || export BROWSER=links\n```\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Gentoo:Handbook:X86/Working/EnvVar\n- Ubuntu Community Wiki - Environment Variables\n\n"
    }
  ]
}