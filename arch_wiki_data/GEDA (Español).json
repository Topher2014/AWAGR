{
  "title": "GEDA (Español)",
  "url": "https://wiki.archlinux.org/title/GEDA_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2018-11-02** \n\nEl proyecto gEDA ha producido y continúa trabajando en una suite de herramientas GPL y un kit de herramientas de automatización de diseño electrónico. Estas herramientas se utilizan para el diseño de circuitos eléctricos, captura esquemática, simulación, creación de prototipos y producción. Actualmente, el proyecto gEDA ofrece un conjunto maduro de aplicaciones de software gratuitas para el diseño electrónico, que incluyen captura esquemática, gestión de atributos, generación de listas de materiales (BOM), creación netlist a más de 20 formatos de netlist, simulación analógica y digital y diseño de placa de circuito impreso (PCB).\n\nEl proyecto gEDA se inició debido a la falta de herramientas EDA gratuitas para los sistemas POSIX con el principal propósito de avanzar en el estado del hardware libre o el hardware de código abierto. La suite se está desarrollando principalmente en la plataforma GNU/Linux con un cierto esfuerzo de desarrollo para asegurarse de que las herramientas se ejecuten también en otras plataformas.\n\n(Fuente: página web de gEDA)\n\n"
    },
    {
      "title": "Instalación",
      "level": 2,
      "content": "El paquete geda-gafAUR le instalará el editor de esquemas y el editor de atributos, el cual está disponible en los repositorios oficiales. También podría ser necesario instalar ttf-dejavu y ttf-liberation para obtener un correcto escalado de las fuentes.\n\nLa instalación de pcbAUR le dará el editor de PCB, disponible en AUR.\n\n"
    },
    {
      "title": "Crear símbolo esquemático",
      "level": 3,
      "content": "Puede crear nuevos símbolos a medida que esté creando esquemas. Abra un archivo vacío con\n\n```\n$ gschem mysymbol.sym\n```\n\ny agregue pines con ap y atributos con aa . Consulte la wiki de geda para obtener más información. Una vez que haya terminado, no olvide traducir su símbolo a cero absoluto con et . Si no lo hace, su símbolo probablemente estará fuera de su ventana gráfica una vez que lo coloque en su esquema.\n\nGuarde el símbolo con fs y verifíquelo con\n\n```\n$ gsymcheck -vv mysymbol.sym\n```\n\n"
    },
    {
      "title": "Ruta de búsqueda esquemática",
      "level": 4,
      "content": "No olvide colocar su símbolo dentro de la ruta de búsqueda de gschem. También puede ser útil extender esta ruta a una carpeta en su propio proyecto creando un archivo llamado\n\n```\ngafrc\n```\n\nen la carpeta del proyecto con el siguiente contenido\n\n```\n(component-library \"./symbols\")\n```\n\ny luego copie todos los símbolos requeridos por el proyecto a una subcarpeta llamada \"symbols\".\n\n"
    },
    {
      "title": "Crear esquema",
      "level": 3,
      "content": "Ejecute el editor de esquemas:\n\n```\n$ gschem\n```\n\nVéase también:\n\nFAQ\n\n"
    },
    {
      "title": "Crear y enrutar el PCB",
      "level": 3,
      "content": "Una vez que haya alcanzado un punto en su esquema en el que desee comenzar a enrutar el PCB (puede hacerlo de forma iterativa), es el momento de crear un proyecto gsch2pcb. Agregue las siguientes líneas a un archivo recién creado, llamado firstpcb.prj :\n\n```\nschematics firstpcb.sch\nempty-footprint nofootprint\noutput-name firstpcb\n```\n\nEste proyecto leerá de firstpcb.sch, ignorará cualquier parte que tenga una huella llamada 'nofootprint' y los archivos de salida comenzarán a ser:\n\n- El PCB: firstpcb.pcb\n- El netlist: firstpcb.net\n- Comandos del nombre de pin: firstpcb.cmd\n- ...\n\nSi optó por un directorio de símbolos local, debe incluirlo aquí. También es probable que desee un directorio local de huella, de paso. Así que agregue estas líneas al archivo prj:\n\n```\nelements-dir footprints\nelements-dir symbols\n```\n\nAhora ejecute gsch2pcb con este archivo de proyecto:\n\n```\n$ gsch2pcb -f firstpcb.prj\n```\n\ngsch2pcb le dirá qué hacer a continuación o si hubo algún error.\n\n"
    }
  ]
}