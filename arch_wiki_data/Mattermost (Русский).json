{
  "title": "Mattermost (Русский)",
  "url": "https://wiki.archlinux.org/title/Mattermost_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "С домашней страницы Mattermost:\n\nВ этой статье описано, как установить и настроить сервер Mattermost.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Сервер Mattermost может быть установлен двумя способами:\n\n- С помощью Docker по шагам, описанным в разделе #С помощью Docker;\n- С помощью пакета по шагам, описанным в разделе #С помощью пакета.\n\nКлиент для рабочего стола на базе Electron предоставляется пакетом mattermost-desktop.\n\n"
    },
    {
      "title": "С помощью Docker",
      "level": 3,
      "content": "При использовании Docker вам не нужно вручную устанавливать сервер базы данных и настраивать зависимости Mattermost. Так как образ docker поставляется со всеми зависимостями, вам потребуется меньше работы.\n\nОднако недостаток такого подхода в том, что вы не можете выбрать нужный вам бэкенд базы данных или веб-сервер. Можно использовать только то, что предоставляется образами Docker, или же сделать свой собственный образ.\n\n- Установите Docker (в том числе docker-compose).\n- Скачайте исходники:\n\n```\n$ git clone https://github.com/mattermost/mattermost-docker.git\n```\n\n- Отредактируйте файл docker-compose.yml: Раскомментируйте строку args:. Для редакции Team удалите комментарии в строке: - edition=team. Приведите UID/GID в разделе в соответствие с владельцем ваших папок ./volumes/app/mattermost/*. Пропишите проброс портов в разделе app (например, между build и restart)\n\n- Раскомментируйте строку args:.\n- Для редакции Team удалите комментарии в строке: - edition=team.\n- Приведите UID/GID в разделе в соответствие с владельцем ваших папок ./volumes/app/mattermost/*.\n- Пропишите проброс портов в разделе app (например, между build и restart)\n\n```\nports:\n  - \"127.0.0.1:8065:8000\"\n```\n\n- Соберите и запустите контейнер docker:\n\n```\n$ cd mattermost-docker\n$ docker-compose build\n$ docker-compose up -d\n```\n\n- Откройте http://localhost:8000/ в вашем браузере.\n\nОбратитесь к официальному руководству, чтобы узнать, как настроить TLS, электронную почту, включить функции Enterprise и использовать несколько серверных узлов с помощью Docker Compose.\n\nНа официальной странице Mattermost Docker Hub также представлены некоторые образы Docker. Пожалуйста, обратитесь также к репозиторию Docker-образов Mattermost.\n\n"
    },
    {
      "title": "С помощью пакета",
      "level": 3,
      "content": "Установите пакет mattermost. Разрабатываемая версия доступна в пакете mattermost-gitAUR.\n\n- При установке будут созданы пользователь и группа mattermost.\n- Настройка выполняется в файле /etc/webapps/mattermost/config.json, где владельцем и группой /etc/webapps/mattermost/ и /etc/webapps/mattermost/config.json является mattermost:mattermost.\n- В /var/lib/mattermost/, которым тоже владеет mattermost:mattermost, можно найти: files — папку, где хранятся все пользовательские файлы, размещённые в сообщениях, изображения профилей и команд; client — папку, связанную с клиентом webapp, которая содержит файлы, переписываемые webapp во время выполнения, а в подпапке plugins — веб-плагины, установленные через веб-интерфейс; plugins — папку, связанную с плагинами (серверная часть).\n- В /var/log/mattermost — папке, созданной в процессе установки (tmpfiles.d) — хранятся журналы сервера в формате json. /var/log/mattermost и /var/log/mattermost/mattermost.log принадлежат mattermost:mattermost.\n- Остальная часть неизменяемого каталога Mattermost находится по адресу /usr/share/webapps/mattermost/, и её владельцем является root:root.\n\n- files — папку, где хранятся все пользовательские файлы, размещённые в сообщениях, изображения профилей и команд;\n- client — папку, связанную с клиентом webapp, которая содержит файлы, переписываемые webapp во время выполнения, а в подпапке plugins — веб-плагины, установленные через веб-интерфейс;\n- plugins — папку, связанную с плагинами (серверная часть).\n\nДалее требуется #Настройка базы данных.\n\n"
    },
    {
      "title": "Настройка базы данных",
      "level": 2,
      "content": "Для работы Mattermost требуется база данных. Если вы планируете запускать его на той же машине, сначала установите MySQL или PostgreSQL в качестве базы данных.\n\nСледуйте одному из следующих разделов, а затем переходите к разделу #Настройка Mattermost.\n\n"
    },
    {
      "title": "MySQL/MariaDB",
      "level": 3,
      "content": "```\n$ mysql -u root -p\n```\n\n```\nCREATE DATABASE mattermostdb;\nCREATE USER mmuser IDENTIFIED BY 'mmuser_password';\nGRANT ALL ON mattermostdb.* TO mmuser;\n```\n\n"
    },
    {
      "title": "PostgreSQL",
      "level": 3,
      "content": "1. Установите и настройте PostgreSQL.\n\n2. Выберите TCP или UNIX-сокет и перейдите к соответствующему разделу.\n\n"
    },
    {
      "title": "TCP-сокет",
      "level": 4,
      "content": "3. Создайте нового пользователя, подключившись к серверу как пользователь postgres (вам будет предложено ввести пароль для нового пользователя):\n\n```\n$ sudo -u postgres createuser -P mmuser\n```\n\n4. Создайте базу данных Mattermost, принадлежащую пользователю mmuser:\n\n```\n$ sudo -u postgres createdb -O mmuser mattermostdb\n```\n\n5. Настройте доступ с удалённых хостов.\n\n6. Проверьте, что всё работает:\n\n```\n$ psql --host=ip_адрес --dbname=mattermostdb --username=mmuser --password\n```\n\n"
    },
    {
      "title": "Unix-сокет",
      "level": 4,
      "content": "3. Создайте нового пользователя, подключившись к серверу как пользователь postgres:\n\n```\n$ sudo -u postgres createuser mattermost\n```\n\n4. Создайте базу данных Mattermost, принадлежащую пользователю mattermost:\n\n```\n$ sudo -u postgres createdb -O mattermost mattermostdb\n```\n\n5. Настройте Unix-сокет, добавив следующую строку в /var/lib/postgres/data/pg_hba.conf:\n\n```\nlocal    mattermostdb    mattermost    peer\n```\n\n6. Перезапустите службу postgresql.service.\n\n7. Проверьте, что всё работает:\n\n```\n$ sudo -u mattermost psql --dbname=mattermostdb --username=mattermost\n```\n\n"
    },
    {
      "title": "Настройка Mattermost",
      "level": 3,
      "content": "Настройка Mattermost выполняется в файле /etc/webapps/mattermost/config.json. Строки должны быть заключены в кавычки.\n\nЕсть две настройки, которые необходимо изменить под вашу базу данных.\n\nНастройка DriverName: mysql для MySQL и postgres для PostgreSQL.\n\nНастройка DataSource:\n\n- Для MySQL установите значение mmuser:mmuser_password@unix(/run/mysqld/mysqld.sock)/mattermostdb?charset=utf8mb4,utf8.\n- Для PostgreSQL TCP-сокет: postgres://mmuser:mmuser_password@127.0.0.1:5432/mattermostdb?sslmode=disable&connect_timeout=10 Unix-сокет: postgres:///mattermostdb?host=/run/postgresql; после postgres: должны стоять 3 слэша; mattermostdb — имя базы данных, а /run/postgresql - каталог, содержащий Unix-сокет.\n\n- TCP-сокет: postgres://mmuser:mmuser_password@127.0.0.1:5432/mattermostdb?sslmode=disable&connect_timeout=10\n- Unix-сокет: postgres:///mattermostdb?host=/run/postgresql; после postgres: должны стоять 3 слэша; mattermostdb — имя базы данных, а /run/postgresql - каталог, содержащий Unix-сокет.\n\nЗапустите/включите службу mattermost.service и откройте http://localhost:8065/\n\n"
    },
    {
      "title": "Начальная настройка Mattermost",
      "level": 2,
      "content": "1. Перейдите к вашей установке Mattermost и создайте команду и пользователя.\n1. Первый пользователь в системе автоматически получает роль system_admin, которая даёт вам доступ к системной консоли.\n1. Нажмите на кнопку меню в верхнем левом углу и выберите пункт Системная консоль (System Console).\n1. Обновите настройки Окружение > SMTP (Environment > SMTP) для настройки отправки почты через SMTP. В приведённом ниже примере предполагается использование AmazonSES. Установите SMTP сервер (SMTP Server) на email-smtp.us-east-1.amazonaws.com Установите Порт SMTP сервера (SMTP Server Port) на 465 Установите Включить SMTP аутентификацию (Enable SMTP Authentication) на да (true) Установите Имя пользователя SMTP (SMTP Server Username) на имя_пользователя_smtp Установите Пароль SMTP Сервера (SMTP Server Password) на пароль_smtp Установите Безопасность соединения (Connection Security) на TLS Сохраните настройки\n1. Обновите Настройки сайта > Уведомления (Site configuration > Notifications): Установите Включить уведомления по электронной почте (Send Email Notifications) на да (true) Установите Отображаемое в уведомлении имя (Notification Display Name) на No-Reply Установите Уведомления приходят с адреса (Notification From Address) на mattermost@example.com Установите Эл.почта поддержки (Support Email Address) на какой-нибудь реальный адрес, который может принимать входящие письма Сохраните настройки\n1. Обновите настройки Аутентификация > Электронная почта (Authentication > Email), изменив Требовать подтверждение адреса электронной почты (Require Email Verification) на да (true).\n1. Обновите настройки Окружение > Ведение журнала (Environment > Logging), установив Исходящие журналы в консоль (Log to The Console) на нет (false).\n1. По желанию измените другие настройки.\n1. Перезапустите службу mattermost.service.\n\n- Установите SMTP сервер (SMTP Server) на email-smtp.us-east-1.amazonaws.com\n- Установите Порт SMTP сервера (SMTP Server Port) на 465\n- Установите Включить SMTP аутентификацию (Enable SMTP Authentication) на да (true)\n- Установите Имя пользователя SMTP (SMTP Server Username) на имя_пользователя_smtp\n- Установите Пароль SMTP Сервера (SMTP Server Password) на пароль_smtp\n- Установите Безопасность соединения (Connection Security) на TLS\n- Сохраните настройки\n\n- Установите Включить уведомления по электронной почте (Send Email Notifications) на да (true)\n- Установите Отображаемое в уведомлении имя (Notification Display Name) на No-Reply\n- Установите Уведомления приходят с адреса (Notification From Address) на mattermost@example.com\n- Установите Эл.почта поддержки (Support Email Address) на какой-нибудь реальный адрес, который может принимать входящие письма\n- Сохраните настройки\n\n"
    },
    {
      "title": "Плагины",
      "level": 3,
      "content": "Плагины включены по умолчанию, но требуют доступа к каталогу plugins, который должен быть создан с правильными правами доступа:\n\n```\n$ mkdir /usr/share/webapps/mattermost/client/plugins\n$ chown mattermost:mattermost /usr/share/webapps/mattermost/client/plugins\n```\n\n"
    },
    {
      "title": "Доверенный HTTPS через обратный веб-прокси",
      "level": 3,
      "content": "Для безопасного доступа к вашему серверу Mattermost из приложений для Android и iOS, которые не поддерживают самоподписанные TLS-сертификаты, вы можете настроить обратный веб-прокси.\n\nОсновными преимуществами прокси являются:\n\n- SSL-терминирование\n- Перенаправление с HTTP на HTTPS\n- Перенаправление порта 80 на 8065\n- Стандартные журналы запросов\n\nПроксирование может быть реализовано на большинстве веб-серверов.\n\n"
    },
    {
      "title": "nginx",
      "level": 4,
      "content": "1. Установите и запустите nginx, предпочтительно nginx-mainline.\n1. Настройте ваше доменное имя (например, mattermost.example.com) так, чтобы оно указывало на ваш сервер.\n1. Настройте nginx для проксирования соединений из интернета на сервер Mattermost. Создайте и отредактируйте файл настроек nginx /etc/nginx/sites-available/mattermost. upstream backend { server 127.0.0.1:8065; keepalive 32; } proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off; server { listen 80; server_name mattermost.example.com; location ~ /api/v[0-9]+/(users/)?websocket$ { proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; client_max_body_size 50M; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_buffers 256 16k; proxy_buffer_size 16k; client_body_timeout 60; send_timeout 300; lingering_timeout 5; proxy_connect_timeout 90; proxy_send_timeout 300; proxy_read_timeout 90s; proxy_pass http://backend; } location / { client_max_body_size 50M; proxy_set_header Connection \"\"; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_buffers 256 16k; proxy_buffer_size 16k; proxy_read_timeout 600s; proxy_cache mattermost_cache; proxy_cache_revalidate on; proxy_cache_min_uses 2; proxy_cache_use_stale timeout; proxy_cache_lock on; proxy_pass http://backend; } }\n1. Включите этот файл: # mkdir /etc/nginx/sites-enabled # ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n1. Перезапустите службу nginx.service.\n1. Убедитесь, что вы можете получить доступ к Mattermost через прокси: $ curl http://localhost/ Вы должны увидеть страницу под названием Mattermost.\n1. Настройте Let's Encrypt.\n\n```\nupstream backend {\n    server 127.0.0.1:8065;\n    keepalive 32;\n}\n\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\nserver {\n    listen 80;\n    server_name    mattermost.example.com;\n\n    location ~ /api/v[0-9]+/(users/)?websocket$ {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://backend;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_pass http://backend;\n    }\n}\n```\n\n```\n# mkdir /etc/nginx/sites-enabled\n# ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n```\n\n```\n$ curl http://localhost/\n```\n\n"
    },
    {
      "title": "Lighttpd2",
      "level": 4,
      "content": "Пример конфигурации для lighttpd2-gitAUR, чтобы действовать как прокси для Mattermost, предполагая, что у вас есть сертификат в /etc/lighttpd2/certs/lighttpd2.pem.\n\nСмотрите mod_vhost, если вы хотите перенести прокси на виртуальный хост.\n\n```\n/etc/lighttpd2/lighttpd.conf\n```\n\n```\nsetup {\n\n    module_load [\n        \"mod_accesslog\",\n        \"mod_proxy\",\n        \"mod_openssl\"\n    ];\n\n    openssl [\n        \"listen\" => \"0.0.0.0:443\",\n        \"listen\" => \"[::]:443\",\n        \"pemfile\" => \"/etc/lighttpd2/certs/lighttpd2.pem\",\n        \"options\" => [\"ALL\", \"NO_TICKET\"],\n        \"verify\" => true,\n        \"verify-any\" => true,\n        \"verify-depth\" => 9\n    ];\n\n    listen \"0.0.0.0:80\";\n    listen \"[::]:80\";\n\n    log [\"debug\" => \"\", default => \"/var/log/lighttpd2/error.log\"];\n    accesslog \"/var/log/lighttpd2/access.log\";\n    accesslog.format \"%h %V %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}\\\"\";\n\n    static.exlude_extensions [ \".php\", \".pl\", \".fcgi\", \"~\", \".inc\" ];\n\n}\n\nopenssl.setenv \"client-cert\";\nkeepalive.timeout 360;\n\ndocroot \"/srv/http\";\nindex [ \"index.php\", \"index.html\", \"index.htm\" ];\n\ninclude \"/etc/lighttpd2/mimetypes.conf\";\n\nproxy \"127.0.0.1:8065\";\n```\n\n"
    },
    {
      "title": "Тестирование переводов и запросов на слияние",
      "level": 3,
      "content": "Можно использовать неофициальный скрипт mattermost-prepare-pkgbuild для тестирования переводов и запросов на слияние.\n\n"
    }
  ]
}