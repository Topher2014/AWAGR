{
  "title": "Wayland (Português)",
  "url": "https://wiki.archlinux.org/title/Wayland_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- KMS\n- Xorg\n- Screen capture#Wayland\n\nWayland é um protocolo de servidor de exibição. Seu objetivo é se tornar o sucessor do Sistema de janelas X. Você pode encontrar uma comparação entre Wayland e Xorg no Wikipedia.\n\nServidores de exibição que usam o protocolo Wayland são chamados de compositores devido a também agirem como um gerenciador de janelas de composição. Abaixo você pode encontrar uma lista de compositores Wayland.\n\nPara executar aplicações X11 legadas sem problemas de compatibilidade, Xwayland pode ser usado, que oferece um Servidor X no Wayland.\n\n"
    },
    {
      "title": "Requerimentos",
      "level": 2,
      "content": "A maioria do compositores Wayland somente funcionam em sistemas que usam Kernel mode setting. Wayland por si só não provê um ambiente gráfico; para isto você também precisa de um compositor (veja a seção seguinte), ou um ambiente desktop que inclui um compositor (e.x. GNOME ou KDE.\n\nPara o driver GPU e o compositor Wayland serem compatíveis eles devem suportar a mesma buffer API. Existem duas principais APIs: GBM e EGLStreams.\n\nTable content:\nBuffer API | Suporte de driver GPU | Suporte de compositores Wayland\nGBM | Todos exceto NVIDIA | Todos\nEGLStreams | NVIDIA | GNOME, Weston (com uma modificação de terceiros)\n\n"
    },
    {
      "title": "Compositores",
      "level": 2,
      "content": "Veja Window manager#Types para diferenças entre Tiling e Stacking.\n\n"
    },
    {
      "title": "Tiling",
      "level": 3,
      "content": "- Cagebreak — Baseado no cage, inspirado pelo ratpoison.\n\n- dwl — Compositor Wayland parecido com o dwm baseado no wlroots.\n\n- Hyprland — Compositor wayland tiling dinâmico sem abster-se da aparência.\n\n- japokwm — Compositor Wayland tiling dinâmico baseado na criação de layouts, baseado no wlroots.\n\n- Qtile — Um gerenciador de janelas e compositor Wayland cheio de funcionalidades e configurável ecrito e configurado em Python.\n\n- river — Compositor Wayland tiling dinâmico inspirado pelo dwm e bspwm.\n\n- Sway — Compositor Wayland compatível com o i3 baseado no wlroots.\n\n- Velox — Simples gerenciador de janelas baseado no swc, inspidado pelo dwm e xmonad.\n\n"
    },
    {
      "title": "Stacking",
      "level": 3,
      "content": "- Enlightenment — Veja Enlightenment#Manually. Para mais informações: [1] [2]\n\n- hikari — Compositor baseado no wlroots inspirado pelo cwm que é ativamente desenvolvido no FreeBSD mas também suporta Linux.\n\n- KDE KWin — Veja KDE#Iniciando o Plasma.\n\n- Liri Shell — Parte do Liri, escrito em QtQuick e QtCompositor como um compositor para Wayland.\n\n- labwc — Compositor baseado no wlroots inspirado pelo Openbox.\n\n- Mutter — Veja GNOME#Iniciando.\n\n- wayfire — Compositor 3D inspirado pelo Compiz e baseado no wlroots.\n\n- Weston — Implementação referência de um compositor Wayland.\n\n- wio — Compositor baseado no wlroots que têm como objetivo replicar a aparência e sentimento do ambiente Rio do Plan 9.\n\n"
    },
    {
      "title": "Outros",
      "level": 3,
      "content": "- Cage — Exibe uma única aplicação em modo tela cheia como um quiosque.\n\nAlguns destes acima podem suportar gerenciadores de exibição. Verifique /usr/share/wayland-sessions/compositor.desktop para ver como eles são inicializados.\n\n"
    },
    {
      "title": "Gerenciadores de exibição",
      "level": 2,
      "content": "Gerenciadores de exibição listados abaixo suportam lançar compositores Wayland. A coluna Tipo indica se o gerenciador de exibição suporta ou não se executar em Wayland.\n\nTable content:\nNome | Tipo | Descrição\nGDM | Roda em Wayland | Gerenciador de login do GNOME.\ngreetd | Daemon de login | Daemon de login minímo e flexível.\nLightDM | Roda em X11 | Gerenciador de login TUI escrito em C\nLy | Roda no console | TUI display manager written in C\nSDDM | Roda em X11 | Gerenciador de login feito em QML.\ntbsm | Roda no console | Simples lançador CLI de sessão escrito em bash puro.\n\n"
    },
    {
      "title": "Bibliotecas GUI",
      "level": 2,
      "content": "Veja detalhes no site oficial[link inativo 2024-10-12 ⓘ].\n\n"
    },
    {
      "title": "GTK",
      "level": 3,
      "content": "Os pacotes gtk3 e gtk4 tem o backend Wayland já habilitado. GTK irá ser executado por padrão em Wayland, mas é possível sobrescrever isto para Xwayland ao modificar a variável de ambiente: GDK_BACKEND=x11.\n\n"
    },
    {
      "title": "Qt",
      "level": 3,
      "content": "Para habilitar o suporte ao Wayland no Qt 5 ou 6, instale o pacote qt5-wayland ou qt6-wayland, respectivamente.\n\nPara rodar um programa Qt com o plugin Wayland [3], use -platform wayland ou a variável de ambiente QT_QPA_PLATFORM=wayland. Para forçar o uso do X11 numa sessão Wayland, use QT_QPA_PLATFORM=xcb. Isto pode ser necessário para alguns programas proprietários que não usam a implementação do Qt presente no sistema, como zoomAUR.\n\nEm alguns compositores, como o sway, programas Qt executados nativamente em Wayland podem perder funcionalidade. Por exemplo, KeepassXC não vai conseguir minimizar para a barra. Isto pode ser resolvido ao instalar qt5ct e definindo QT_QPA_PLATFORMTHEME=qt5ct antes de executar o programa.\n\n"
    },
    {
      "title": "Clutter",
      "level": 3,
      "content": "O toolkit Clutter suporta o backend Wayland e isto possibilita que ele rode como um cliente Wayland. O backend já é habilitado por padrão no pacote clutter.\n\nPara rodar um programa Clutter em Wayland, defina: CLUTTER_BACKEND=wayland.\n\n"
    },
    {
      "title": "SDL2",
      "level": 3,
      "content": "Para rodar um programa SDL2 no Wayland, defina SDL_VIDEODRIVER=wayland.\n\n"
    },
    {
      "title": "GLEW",
      "level": 3,
      "content": "O pacote glew-waylandAUR[link quebrado: package not found] atualmente ainda não funciona com muitas aplicações baseada no GLEW, então a única opção é usar glew com Xwayland. Veja FS#62713.\n\n"
    },
    {
      "title": "EFL",
      "level": 3,
      "content": "EFL tem suporte completo ao Wayland. Para rodar um programa EFL no Wayland, veja a página do projeto[link inativo 2024-10-12 ⓘ].\n\n"
    },
    {
      "title": "winit",
      "level": 3,
      "content": "Winit é uma biblioteca de gerenciamento de janela em Rust. Por padrão utiliza o backend Wayland, mas é possível forçar o uso do Xwayland ao modificar a variável de ambiente: WINIT_UNIX_BACKEND=x11.\n\n"
    },
    {
      "title": "Electron",
      "level": 3,
      "content": "Para usar aplicações baseadas no electron nativamente no Wayland, crie ou edite o arquivo ${XDG_CONFIG_HOME}/electron-flags.conf para adicionar as seguintes opções.\n\n```\n~/.config/electron-flags.conf\n```\n\n```\n--enable-features=UseOzonePlatform\n--ozone-platform=wayland\n```\n\nNote que versões mais antigas do electron precisam de seu próprio arquivo electron-flags.conf. Por exemplo, se você tem o pacote electron13AUR instalado, você pode querer executar\n\n```\n$ ln -s electron-flags.conf electron13-flags.conf\n```\n\nde dentro do seu diretório ${XDG_CONFIG_HOME} (ou manter um arquivo separado ${XDG_CONFIG_HOME}/electron12-flags.conf se quer que diferentes versões do electron usem diferentes opções em tempo de execução).\n\n"
    },
    {
      "title": "Xwayland",
      "level": 2,
      "content": "Xwayland[link inativo 2024-10-12 ⓘ] é um Servidor X que executa no Wayland. Isto oferece compatibilidade para aplicações X11 legadas.\n\nPara usa-lo, instale o pacote xorg-xwayland.\n\nXwayland é iniciado pelo compositor, então você deve verificar pela compatibilidade Xwayland e instruções de como iniciar o Xwayland com o compositor de sua escolha.\n\n"
    },
    {
      "title": "Driver da Nvidia",
      "level": 3,
      "content": "Note que é necessário habilitar DRM KMS. Também veja informação adicional na documentação oficial e sobre o seu gerenciador de exibição (e.x. GDM).\n\n"
    },
    {
      "title": "Correção de cor",
      "level": 3,
      "content": "Veja Backlight#Color correction.\n\n"
    },
    {
      "title": "Tela lenta, glitches gráficos, e crashes",
      "level": 3,
      "content": "Usuários do gnome-shell podem sofrer problemas na tela quando eles mudam para Wayland do X. Uma das causas desse problema pode ser o CLUTTER_PAINT=disable-clipped-redraws:disable-culling definido para o gnome-shell baseado no Xorg. Tente remover isto do /etc/environment ou outros arquivos rc para ver se tudo volta ao normal.\n\n"
    },
    {
      "title": "Cannot open display: :0 com programas feitos em Electron",
      "level": 3,
      "content": "Tenha certeza que você não definiu GDK_BACKEND=wayland. Definir isso globalmente irá quebrar programas Electron.\n\n"
    },
    {
      "title": "Exibição remota",
      "level": 3,
      "content": "- (20200206) wlroots (usado pelo Sway) oferece um backend VNC com wayvnc desde a versão 0.10. Suporte ao backend RDP foi removido.\n\n[4].\n\n- (20180401) mutter tem agora desktop remoto habilitado no tempo de compilação, veja [5] e gnome-remote-desktop para detalhes.\n- Existe um merge do FreeRDP no Weston em 2013, habilitado com uma flag de compilação. O pacote weston vem com isso habilitado desde a versão 6.0.0.\n- waypipe-gitAUR é um proxy transparente para programas Wayland, com um comando que roda via SSH.\n\n"
    },
    {
      "title": "Captação de entradas nos jogos, desktop remoto e janelas VM",
      "level": 3,
      "content": "Diferente do Xorg, Wayland não permite captação exclusiva de entrada, também conhecido como captação ativa ou explicita (exemplo teclado, mouse), ao invés disso, depende do compositor Wayland para direcionar os atalhos do teclado e confinar o ponteiro para a janela do programa.\n\nEsta mudança na captação de entrada quebra o atual comportamento dos programas:\n\n- Combinação de teclas e modificadores irão ser pegos pelo compositor e não serão enviados para o desktop remoto e janelas de máquina virtual.\n- O mouse não irá ser restrito a janela da aplicação, isto pode causar um efeito de paralaxe onde a localização do ponteiro dentro da janela da máquina virtual ou desktop remoto é mal interpretado do host.\n\nIsto é resolvido adicionando extensões para o protocolo Wayland e Xwayland. O suporte para estas extensões precisam ser adicionados para compositores Wayland. Os clientes nativos do Wayland, toolkits widget (exemplo GTK, Qt) ou as próprias aplicações, se nenhum toolkit está sendo usado, também precisam suportar estas extensões. Programas Xorg não precisam de mudança devido a existência do Xwayland.\n\nEstas extensões já estão incluídas no wayland-protocols, e suportadas pelo xorg-xwayland.\n\nExtensões relacionadas são:\n\n- Xwayland keyboard grabbing protocol\n- Compositor shortcuts inhibit protocol\n- Relative pointer protocol\n- Pointer constraints protocol\n\nCompositores que suportam Wayland:\n\n- Mutter, compositor do GNOME desde versão 3.28.\n- wlroots suporta relative-pointer e pointer-constraints\n\nToolkits widget que suportam:\n\n- GTK desde a versão 3.22.18.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- Documentação online do Wayland\n- Repositório Git oficial do Wayland\n- Fedora:How to debug Wayland problems\n- Incríveis projetos Wayland\n- Temas de cursor\n- Discussão no fórum do Arch Linux\n- Guia de migração i3 - Alternativas Wayland a aplicações X11 usadas no i3\n- Explorador Wayland - Uma melhor maneira de ler a documentação Wayland\n\n"
    }
  ]
}