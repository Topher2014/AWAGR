{
  "title": "Fish (Русский)",
  "url": "https://wiki.archlinux.org/title/Fish_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Командная оболочка\n\nfish (friendly interactive shell) — это удобная оболочка командной строки, предназначенная в основном для интерактивного использования.\n\nfish намеренно не является полностью совместимой с POSIX, она нацелена на устранение неконсистентности POSIX (по мнению создателей) с помощью упрощённого или иного синтаксиса. Это означает, что даже простые POSIX-совместимые скрипты могут потребовать значительной адаптации или даже полного переписывания для работы с fish.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет fish. Разрабатываемая версия доступна в пакете fish-gitAUR.\n\nПосле установки просто наберите fish, чтобы попасть в оболочку fish.\n\nКоманда help откроет документацию в веб-браузере. Рекомендуется прочитать хотя бы раздел «Syntax overview» на странице «The fish language», поскольку синтаксис fish отличается от многих других оболочек.\n\n"
    },
    {
      "title": "Интеграция с системой",
      "level": 2,
      "content": "Решите, будет ли fish оболочкой пользователя по умолчанию, то есть запускаться сразу при входе в систему, или она будет запускаться вручную как дочерний процесс текущей оболочки по умолчанию (в качестве примера данная статья будет подразумевать, что оболочкой по умолчанию является Bash). Остановимся подробнее на этих двух установках:\n\n- fish используется как оболочка по умолчанию: этот режим требует некоторого базового понимания функционирования fish и её скриптового языка. Текущие скрипты инициализации и переменные окружения пользователя должны быть перенесены в новое окружение fish. Чтобы настроить систему в этом режиме, выполните действия, описанные в разделе #Установка fish в качестве оболочки по умолчанию.\n- fish используется только как интерактивная оболочка: все скрипты инициализации Bash запускаются как обычно, а fish работает поверх Bash в интерактивном режиме, подключенном к терминалу. Чтобы настроить fish в этом режиме, выполните шаги, описанные в разделе #Установка fish только в качестве интерактивной оболочки.\n\n"
    },
    {
      "title": "Установка fish в качестве оболочки по умолчанию",
      "level": 3,
      "content": "Если вы решили сделать fish оболочкой по умолчанию, первым шагом будет установка оболочки этого конкретного пользователя на /usr/bin/fish. Необходимые шаги описаны в разделе Командная оболочка#Выбор оболочки по умолчанию.\n\nСледующим шагом будет перенос необходимых действий и настроек, выполняемых в различных скриптах инициализации Bash, а именно /etc/profile, ~/.bash_profile, /etc/bash.bashrc и ~/.bashrc, во фреймворк fish.\n\nВ частности, содержимое переменной окружения $PATH, после непосредственного входа в fish, следует проверить и настроить под свои нужды. В fish $PATH определена как глобальная переменная окружения: она имеет глобальную область видимости для всех функций, теряется при перезагрузке и является переменной окружения, что означает, что она экспортируется в дочерние процессы. Рекомендуемый способ добавления дополнительных мест в path — вызов команды fish_add_path из config.fish. Например:\n\n```\n$ fish_add_path -p /первый/путь /второй/путь /третий/путь\n```\n\nУказанные три пути будут добавлены в начало path.\n\n"
    },
    {
      "title": "Установка fish только в качестве интерактивной оболочки",
      "level": 3,
      "content": "Если не устанавливать fish в качестве оболочки по умолчанию, то при входе будут выполняться текущие скрипты Bash. При этом переменные окружения текущего пользователя остаются неизменными и экспортируются в fish, которая затем запускается как дочерний процесс Bash. Ниже описано несколько способов запуска fish в интерактивном режиме без установки в качестве оболочки по умолчанию.\n\n"
    },
    {
      "title": "Запуск fish через .bashrc",
      "level": 4,
      "content": "Оставьте Bash оболочкой по умолчанию и просто добавьте строку exec fish в подходящий файл настроек Bash, например .bashrc. Это позволит Bash правильно выполнить source файла /etc/profile и всех файлов в /etc/profile.d/. Поскольку процесс Bash полностью заменяется на процесс fish, выход из fish также приведёт к выходу из терминала. По сравнению со следующими вариантами, это наиболее универсальное решение, поскольку оно работает как на локальной машине, так и на SSH-сервере.\n\n- При использовании такой установки используйте команду bash --norc, чтобы вручную войти в Bash без выполнения команд из ~/.bashrc, который запустит exec fish и вернёт вас обратно в fish.\n- Чтобы команды наподобие bash -c 'echo test' выполняли команду в Bash вместо запуска fish, можно написать if [ -z \"$BASH_EXECUTION_STRING\" ]; then exec fish; fi вместо простого exec.\n- Можно настроить вход в fish только в том случае, если родительский процесс не является fish. Это позволяет быстро войти в bash, вызвав команду bash, без потери настроек из ~/.bashrc:\n\n```\nif [[ $(ps --no-header --pid=$PPID --format=comm) != \"fish\" && -z ${BASH_EXECUTION_STRING} ]]\nthen\n\texec fish\nfi\n```\n\n"
    },
    {
      "title": "Использование настроек эмулятора терминала",
      "level": 4,
      "content": "Другой вариант — запускать эмулятор терминала с параметром, запускающим fish. В большинстве терминалов для этого используется аргумент -e, поэтому, например, чтобы открыть gnome-terminal с запуском в нём fish, сделайте ярлык с такой командой:\n\n```\ngnome-terminal -e fish\n```\n\nВ эмуляторах терминала, которые не поддерживают установку оболочки, например, lilyterm-gitAUR, можно использовать другой способ:\n\n```\nSHELL=/usr/bin/fish lilyterm\n```\n\nТакже, в зависимости от терминала, вы можете установить fish в качестве оболочки по умолчанию либо в настройках, либо в профиле терминала.\n\n"
    },
    {
      "title": "Использование настроек терминального мультиплексора",
      "level": 4,
      "content": "Например, если вы используете tmux и хотите использовать в нём fish в качестве командной оболочки, добавьте следующее в файл ~/.tmux.conf:\n\n```\nset-option -g default-shell \"/usr/bin/fish\"\n```\n\nПосле этого при запуске tmux будет запускаться fish.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Файл настроек ~/.config/fish/config.fish запускается при каждом входе. Добавление команд или функций в этот файл приводит к их выполнению/определению при открытии терминала, аналогично .bashrc. Обратите внимание, что если переменная должна быть сохранена, её следует установить как универсальную, а не определять в вышеупомянутом файле настроек.\n\nПользовательские функции находятся в каталоге ~/.config/fish/functions/ в файлах имя_функции.fish.\n\n"
    },
    {
      "title": "Веб-интерфейс",
      "level": 3,
      "content": "Цвета терминала fish, строка приглашения, функции, переменные, история, привязки и сокращения могут быть настроены через интерактивный веб-интерфейс:\n\n```\nfish_config\n```\n\nОн может не запуститься, если IPv6 отключен. Смотрите [1] и IPv6 (Русский)#Отключение IPv6.\n\n"
    },
    {
      "title": "Завершение команд",
      "level": 3,
      "content": "fish может генерировать автодополнение из страниц руководства man. Оно сохраняется в ~/.config/fish/generated_completions/ и может быть сгенерировано командой:\n\n```\nfish_update_completions\n```\n\nВы также можете определить свои собственные правила автодополнения в ~/.config/fish/completions/. Примеры можно посмотреть в /usr/share/fish/completions/.\n\nКонтекстно-зависимое автодополнение для команд, специфичных для Arch Linux, таких как pacman, pacman-key, makepkg, pbget, pacmatic, встроено в fish, поскольку политика разработки fish заключается в том, чтобы всё было включено в состав fish. Управление памятью достаточно умно, чтобы избежать любого негативного влияния на ресурсы.\n\n"
    },
    {
      "title": "Подстановка команд",
      "level": 3,
      "content": "В fish не реализована подстановка команд из истории в стиле Bash (наподобие sudo !!), и в fish faq разработчики рекомендуют использовать интерактивный интерфейс вставки команд истории: стрелка вверх (Up) вызывает поставляет прошлые строки из истории целиком, Alt+Up (или Alt+.) подставляет аргументы по отдельности, а Alt+s добавляет sudo в начало текущей строки.\n\nОднако в fish wiki: описаны некоторые обходные пути: хотя они не обеспечивают полный аналог подстановки в стиле Bash, некоторые функции заменяют !! на предыдущую команду или !$ на предыдущий последний аргумент.\n\n"
    },
    {
      "title": "Отключение приветствия",
      "level": 3,
      "content": "По умолчанию fish печатает приветствие при запуске. Чтобы отключить его, выполните эту команду один раз:\n\n```\n$ set -U fish_greeting\n```\n\nЭто очищает универсальную переменную fish_greeting, которая является общей для всех экземпляров fish и сохраняется при перезапуске оболочки.\n\n"
    },
    {
      "title": "Запуск fish через su",
      "level": 3,
      "content": "Если при выполнении su запускается с оболочкой Bash из-за того, что Bash является оболочкой по умолчанию целевого пользователя (root, если имя пользователя не указано), то можно создать функцию, которая всегда будет выполнять su с аргументом, запускающим оболочку fish вместо стандартной оболочки целевого пользователя:\n\n```\n~/.config/fish/functions/su.fish\n```\n\n```\nfunction su\n   command su --shell=/usr/bin/fish $argv\nend\n```\n\n"
    },
    {
      "title": "Запуск X при входе",
      "level": 3,
      "content": "Добавьте следующее в конце файла ~/.config/fish/config.fish.\n\n```\n# Start X at login\nif status is-login\n    if test -z \"$DISPLAY\" -a \"$XDG_VTNR\" = 1\n        exec startx -- -keeptty\n    end\nend\n```\n\nЕсли вы запускаете fish в интерактивном режиме, замените status is-login на status is-interactive.\n\n"
    },
    {
      "title": "Отображение статуса git в приглашении",
      "level": 3,
      "content": "Если вы хотите, чтобы fish отображал статус branch и dirty, когда вы находитесь в каталоге git, можно создать такую функцию fish_prompt:\n\n```\n~/.config/fish/functions/fish_prompt.fish\n```\n\n```\nfunction fish_prompt\n  set -l last_status $status\n\n  if not set -q __fish_git_prompt_show_informative_status\n    set -g __fish_git_prompt_show_informative_status 1\n  end\n  if not set -q __fish_git_prompt_color_branch\n    set -g __fish_git_prompt_color_branch brmagenta\n  end\n  if not set -q __fish_git_prompt_showupstream\n    set -g __fish_git_prompt_showupstream \"informative\"\n  end\n  if not set -q __fish_git_prompt_showdirtystate\n    set -g __fish_git_prompt_showdirtystate \"yes\"\n  end\n  if not set -q __fish_git_prompt_color_stagedstate\n    set -g __fish_git_prompt_color_stagedstate yellow\n  end\n  if not set -q __fish_git_prompt_color_invalidstate\n    set -g __fish_git_prompt_color_invalidstate red\n  end\n  if not set -q __fish_git_prompt_color_cleanstate\n    set -g __fish_git_prompt_color_cleanstate brgreen\n  end\n\n  printf '%s%s %s%s%s%s ' (set_color $fish_color_host) (prompt_hostname) (set_color $fish_color_cwd) (prompt_pwd) (set_color normal) (__fish_git_prompt)\n\n  if not test $last_status -eq 0\n    set_color $fish_color_error\n  end\n  echo -n '$ '\n  set_color normal\nend\n```\n\nОднако теперь это устарело, смотрите fish-shell git. В качестве альтернативы, Informative Git Prompt теперь встроен в fish и при желании может быть активирован из fish_config.\n\n"
    },
    {
      "title": "Изменение цвета имени хоста в приглашении при подключении через SSH",
      "level": 3,
      "content": "Для динамического изменения цвета имени хоста в приглашении при подключении по SSH добавьте следующие строки либо в функцию fish_prompt, либо в файл настроек fish, в данном примере используется красный цвет:\n\n```\n~/.config/fish/functions/fish_prompt.fish\n```\n\n```\n...\nif set -q SSH_TTY\n  set -g fish_color_host brred\nend\n...\n```\n\n"
    },
    {
      "title": "Использование переменных ssh-agent",
      "level": 3,
      "content": "В fish выполнить команду eval (ssh-agent) не получится, так как в ней используется несовместимый способ установки переменных. Вместо этого можно использовать стиль csh с помощью опции -c:\n\n```\n$ eval (ssh-agent -c)\n```\n\n"
    },
    {
      "title": "Хук \"command not found\"",
      "level": 3,
      "content": "В составе fish есть хук «command not found», который будет автоматически искать нераспознанную команду в пакетах подключенных репозиториев. Этот хук будет запущен с использованием pkgfile, или, если он не установлен, pacman -F.\n\nНачиная с версии 3.2.2, «command not found» не будет использовать pacman -F по умолчанию из-за его плохой производительности.\n\nЕсли задержка, которую вызывает такое поведение, нежелательна, этот хук можно отменить, переопределив fish_command_not_found так, чтобы он печатал только сообщение об ошибке:\n\n```\n$ function fish_command_not_found\n      __fish_default_command_not_found_handler $argv[1]\n  end\n```\n\nЧтобы сделать это изменение постоянным, можно использовать встроенную функцию funcsave:\n\n```\n$ funcsave fish_command_not_found\n```\n\n"
    },
    {
      "title": "Скрытие процесса из списка заданий",
      "level": 3,
      "content": "fish завершает все задания (jobs), переведённые в фоновый режим, когда fish завершает работу. Чтобы продолжить выполнение задания после завершения fish, сначала используйте disown. Например, следующая команда запускает firefox в фоновом режиме, а затем отсоединяет его от fish:\n\n```\n$ firefox &\n$ disown\n```\n\nТаким образом firefox останется запущен после завершения работы fish. Смотрите disown(1) в оболочке fish для более подробной информации.\n\n"
    },
    {
      "title": "Установка постоянного псевдонима",
      "level": 3,
      "content": "Чтобы быстро создать постоянный псевдоним, можно сделать так:\n\n```\n$ alias lsl \"ls -l\"\n$ funcsave lsl\n```\n\nНачиная с версии 3.0, alias также поддерживает опцию -s/--save:\n\n```\n$ alias -s lsl \"ls -l\"\n```\n\nЭто создаст функцию:\n\n```\nfunction lsl\n    ls -l $argv\nend\n```\n\nи сохранит её. Чтобы увидеть все функции и/или отредактировать их, можно просто использовать fish_config и заглянуть на вкладку functions на странице настроек.\n\nБолее подробную информацию можно найти на официальном сайте: alias - create a function — fish-shell.\n\n"
    },
    {
      "title": "Быстрая навигация по файловой системе с помощью zoxide",
      "level": 3,
      "content": "zoxide — умный аналог cd,, позволяющий перемещаться в любое место всего за несколько нажатий клавиш. Она запоминает ваши часто используемые каталоги и использует механизм подсчёта баллов, чтобы угадать, куда вы хотите перейти.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- https://fishshell.com/ - Домашняя страница\n- https://fishshell.com/docs/current/ - Документация\n- https://hyperpolyglot.org/unix-shells - Сравнение синтаксиса разных оболочек («shell rosetta»)\n- https://github.com/fish-shell/fish-shell - репозиторий на GitHub\n\n"
    }
  ]
}