{
  "title": "Chromium (日本語)",
  "url": "https://wiki.archlinux.org/title/Chromium_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ブラウザ拡張機能\n- Firefox\n- Vivaldi\n\nChromium は、Blink レンダリングエンジンをベースとした、オープンソースなグラフィカルウェブブラウザです。プロプライエタリな Google Chrome ブラウザの基礎となっています。\n\nChromium と Google Chrome との違いについては このページ を見てください。さらに:\n\n- 同期は Chromium 89 以上 (2021-03-02) で利用できません。[1]\n\n他の Chromium ベースのブラウザは アプリケーション一覧/インターネット#Blink ベース を見てください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 デフォルトアプリケーション 2.2 証明書 2.3 フラグを永続化する 2.4 GPU アクセラレーションを強制する 2.5 ハードウェアビデオアクセラレーション 2.5.1 Vulkan 2.5.2 ヒントとテクニック 2.6 KDE 統合 2.7 PDF ビューアプラグイン 2.8 Xwayland での動作 2.9 ネイティブ Wayland サポート 2.9.1 ナビゲーションのタッチパッドジェスチャ\n- 3 ヒントとテクニック 3.1 ブラウズのエクスペリエンス 3.1.1 chrome:// URL 3.1.2 Chromium タスクマネージャ 3.1.3 Chromium が Preferences ファイルを上書き/オーバーライドしてしまう 3.1.4 検索エンジン 3.1.5 Tmpfs 3.1.5.1 tmpfs にキャッシュ 3.1.5.2 tmpfs にプロファイル 3.1.6 新しいブラウザインスタンスを起動 3.1.7 torrent クライアントで *.torrent ファイルやマグネットリンクを直接開く 3.1.8 タッチスクリーンデバイスでタッチスクロール 3.1.9 メモリの使用量を減らす 3.1.10 ユーザーエージェント 3.1.11 DOM Distiller 3.1.12 特定の GPU の使用を強制する 3.1.13 Firefox からブックマークをインポート 3.1.14 ネイティブ通知の有効化 3.1.15 マウスの中ボタンでの自動スクロールを有効化する 3.1.16 U2F 認証 3.1.17 テーマ 3.1.18 ダークモード 3.1.18.1 Chromium 114 より前 3.1.19 サイドパネルを有効化する 3.2 プロファイルのメンテナンス 3.3 セキュリティ 3.3.1 JIT を無効化 3.3.2 WebRTC 3.3.3 SSL 証明書 3.3.3.1 自己署名証明書の CAcert 証明書を追加 3.3.3.2 例 1: シェルスクリプトを使って TomatoUSB から証明書を分離 3.3.3.3 例 2: Firefox を使って TomatoUSB から証明書を分離 3.3.4 Canvas Fingerprinting 3.3.5 プライバシー拡張 3.3.6 Do Not Track 3.3.7 特定のパスワードストアを強制する 3.3.8 ハイブリッドポスト量子鍵交換を有効化する\n- 4 トラブルシューティング 4.1 フォント 4.1.1 タブのフォントサイズが大きすぎる 4.2 WebGL 4.3 HiDPI の描画がおかしい 4.4 GNOME Keyring を使用していると起動するたびにパスワードを要求される 4.5 パスワードだけが同期されない 4.6 デスクトップ環境を切り替えると cookie とパスワードが消える 4.7 Google Sync を有効化すると起動時に固まる 4.8 デフォルトのブラウザとして設定するかを毎回尋ねてくる 4.9 \"このブラウザまたはアプリは安全でない可能性があります\" Google へのログインエラー 4.10 60 FPS より高いリフレッシュレートのディスプレイを使用しているのに Chromium は 60 FPS で描画される 4.10.1 混合リフレッシュレート 4.10.2 Wayland バックエンドで実行する 4.11 Chromium でスクロール速度が遅い 4.12 動画がロードされるが再生されない 4.13 データベースの破損によりパスワードが保存されない 4.14 KDE Wayland でカーソルが正しく描画されない 4.15 Wayland で Chromium のウィンドウが透明になる 4.16 Wayland hardware acceleration buffer handle is null エラー 4.17 サウンドサーバー無しだと音が出ない\n- 5 参照\n\n- 2.1 デフォルトアプリケーション\n- 2.2 証明書\n- 2.3 フラグを永続化する\n- 2.4 GPU アクセラレーションを強制する\n- 2.5 ハードウェアビデオアクセラレーション 2.5.1 Vulkan 2.5.2 ヒントとテクニック\n- 2.6 KDE 統合\n- 2.7 PDF ビューアプラグイン\n- 2.8 Xwayland での動作\n- 2.9 ネイティブ Wayland サポート 2.9.1 ナビゲーションのタッチパッドジェスチャ\n\n- 2.5.1 Vulkan\n- 2.5.2 ヒントとテクニック\n\n- 2.9.1 ナビゲーションのタッチパッドジェスチャ\n\n- 3.1 ブラウズのエクスペリエンス 3.1.1 chrome:// URL 3.1.2 Chromium タスクマネージャ 3.1.3 Chromium が Preferences ファイルを上書き/オーバーライドしてしまう 3.1.4 検索エンジン 3.1.5 Tmpfs 3.1.5.1 tmpfs にキャッシュ 3.1.5.2 tmpfs にプロファイル 3.1.6 新しいブラウザインスタンスを起動 3.1.7 torrent クライアントで *.torrent ファイルやマグネットリンクを直接開く 3.1.8 タッチスクリーンデバイスでタッチスクロール 3.1.9 メモリの使用量を減らす 3.1.10 ユーザーエージェント 3.1.11 DOM Distiller 3.1.12 特定の GPU の使用を強制する 3.1.13 Firefox からブックマークをインポート 3.1.14 ネイティブ通知の有効化 3.1.15 マウスの中ボタンでの自動スクロールを有効化する 3.1.16 U2F 認証 3.1.17 テーマ 3.1.18 ダークモード 3.1.18.1 Chromium 114 より前 3.1.19 サイドパネルを有効化する\n- 3.2 プロファイルのメンテナンス\n- 3.3 セキュリティ 3.3.1 JIT を無効化 3.3.2 WebRTC 3.3.3 SSL 証明書 3.3.3.1 自己署名証明書の CAcert 証明書を追加 3.3.3.2 例 1: シェルスクリプトを使って TomatoUSB から証明書を分離 3.3.3.3 例 2: Firefox を使って TomatoUSB から証明書を分離 3.3.4 Canvas Fingerprinting 3.3.5 プライバシー拡張 3.3.6 Do Not Track 3.3.7 特定のパスワードストアを強制する 3.3.8 ハイブリッドポスト量子鍵交換を有効化する\n\n- 3.1.1 chrome:// URL\n- 3.1.2 Chromium タスクマネージャ\n- 3.1.3 Chromium が Preferences ファイルを上書き/オーバーライドしてしまう\n- 3.1.4 検索エンジン\n- 3.1.5 Tmpfs 3.1.5.1 tmpfs にキャッシュ 3.1.5.2 tmpfs にプロファイル\n- 3.1.6 新しいブラウザインスタンスを起動\n- 3.1.7 torrent クライアントで *.torrent ファイルやマグネットリンクを直接開く\n- 3.1.8 タッチスクリーンデバイスでタッチスクロール\n- 3.1.9 メモリの使用量を減らす\n- 3.1.10 ユーザーエージェント\n- 3.1.11 DOM Distiller\n- 3.1.12 特定の GPU の使用を強制する\n- 3.1.13 Firefox からブックマークをインポート\n- 3.1.14 ネイティブ通知の有効化\n- 3.1.15 マウスの中ボタンでの自動スクロールを有効化する\n- 3.1.16 U2F 認証\n- 3.1.17 テーマ\n- 3.1.18 ダークモード 3.1.18.1 Chromium 114 より前\n- 3.1.19 サイドパネルを有効化する\n\n- 3.1.5.1 tmpfs にキャッシュ\n- 3.1.5.2 tmpfs にプロファイル\n\n- 3.1.18.1 Chromium 114 より前\n\n- 3.3.1 JIT を無効化\n- 3.3.2 WebRTC\n- 3.3.3 SSL 証明書 3.3.3.1 自己署名証明書の CAcert 証明書を追加 3.3.3.2 例 1: シェルスクリプトを使って TomatoUSB から証明書を分離 3.3.3.3 例 2: Firefox を使って TomatoUSB から証明書を分離\n- 3.3.4 Canvas Fingerprinting\n- 3.3.5 プライバシー拡張\n- 3.3.6 Do Not Track\n- 3.3.7 特定のパスワードストアを強制する\n- 3.3.8 ハイブリッドポスト量子鍵交換を有効化する\n\n- 3.3.3.1 自己署名証明書の CAcert 証明書を追加\n- 3.3.3.2 例 1: シェルスクリプトを使って TomatoUSB から証明書を分離\n- 3.3.3.3 例 2: Firefox を使って TomatoUSB から証明書を分離\n\n- 4.1 フォント 4.1.1 タブのフォントサイズが大きすぎる\n- 4.2 WebGL\n- 4.3 HiDPI の描画がおかしい\n- 4.4 GNOME Keyring を使用していると起動するたびにパスワードを要求される\n- 4.5 パスワードだけが同期されない\n- 4.6 デスクトップ環境を切り替えると cookie とパスワードが消える\n- 4.7 Google Sync を有効化すると起動時に固まる\n- 4.8 デフォルトのブラウザとして設定するかを毎回尋ねてくる\n- 4.9 \"このブラウザまたはアプリは安全でない可能性があります\" Google へのログインエラー\n- 4.10 60 FPS より高いリフレッシュレートのディスプレイを使用しているのに Chromium は 60 FPS で描画される 4.10.1 混合リフレッシュレート 4.10.2 Wayland バックエンドで実行する\n- 4.11 Chromium でスクロール速度が遅い\n- 4.12 動画がロードされるが再生されない\n- 4.13 データベースの破損によりパスワードが保存されない\n- 4.14 KDE Wayland でカーソルが正しく描画されない\n- 4.15 Wayland で Chromium のウィンドウが透明になる\n- 4.16 Wayland hardware acceleration buffer handle is null エラー\n- 4.17 サウンドサーバー無しだと音が出ない\n\n- 4.1.1 タブのフォントサイズが大きすぎる\n\n- 4.10.1 混合リフレッシュレート\n- 4.10.2 Wayland バックエンドで実行する\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "Chromium をインストールできるパッケージがいくつか存在します:\n\n- chromium — 安定版\n- chromium-devAUR — 開発版\n- chromium-snapshot-binAUR — nightly ビルド\n\nGoogle Chrome のパッケージは:\n\n- google-chromeAUR — 安定版\n- google-chrome-betaAUR — ベータ版\n- google-chrome-devAUR — 開発版\n- google-chrome-canaryAUR — カナリアリリース\n\n"
    },
    {
      "title": "デフォルトアプリケーション",
      "level": 3,
      "content": "Chromium をデフォルトのブラウザに設定したり、ダウンロードしたファイルを開くときに Chromium がどのアプリケーションを起動するかを変更したりするには、デフォルトアプリケーション を見てください。\n\n"
    },
    {
      "title": "証明書",
      "level": 3,
      "content": "Chromium は証明書の管理に Network Security Services を使っています。chrome://settings/certificates で証明書を管理できます。\n\n"
    },
    {
      "title": "フラグを永続化する",
      "level": 3,
      "content": "フラグは、$HOME/.config/ 内 ($XDG_CONFIG_HOME 環境変数を設定した場合は、その環境変数が示すディレクトリの中) の chromium-flags.conf ファイルに記述することができます。グローバルに設定したい場合は、/etc/ 内に配置できます。\n\n特別な構文は使用されず、フラグはターミナルに書き込まれるのと同じように定義されます。\n\n- 引数は空白で分割され、シェルの引用符の規則が適用されますが、それ以上の解析は実行されません。\n- ファイル中のどこかが不適切に引用符によって囲まれている場合、致命的なエラーが発生します。\n- フラグは読みやすくするために個別の行に分けることができますが、これは必須ではありません。\n- ハッシュ記号 (#) で始まる行は読み飛ばされます。(これは Chromium のランチャースクリプトでのみサポートされており、Google Chrome を使用している場合は動作しません。)\n\n以下は、フラグ --start-maximized --incognito を定義している chromium-flags.conf ファイルの例です:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n# この行は無視されます。\n--start-maximized\n--incognito\n```\n\n"
    },
    {
      "title": "GPU アクセラレーションを強制する",
      "level": 3,
      "content": "少なくとも Chromium 110 から、ほとんどのシステムに対して GPU アクセラレーションがデフォルトで有効化されています。あなたのシステム構成がブラックリストと合致する場合、以下のフラグを永続的な設定に追加する必要があります:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--ignore-gpu-blocklist\n--enable-zero-copy\n```\n\n"
    },
    {
      "title": "ハードウェアビデオアクセラレーション",
      "level": 3,
      "content": "- この機能に対する Chromium や Arch Linux からの公式サポートはありません [2]。しかし、公式リポジトリの chromium は VA-API サポートありでコンパイルされており、専用のフォーラムスレッドで助けを求めることができます。\n- Chromium バージョン 122 から、追加の VA-API のパッケージはもはや必要なくなりました。公式リポジトリの chromium パッケージでネイティブな Wayland バックエンドを使用している場合、VA-API は動作します。\n- AMD GPU デバイス上では、VA-API はそのままでは動作しません。動作させるには mesa >= 24.1 が必要であり、Vulkan を有効化する必要があります。これによって、X11/XWayland で WebGL の問題が発生する場合があります。ネイティブ Wayland サポートでの Vulkan はバージョン 125.0.6422.141-1 から動作します。\n\nvainfo (ハードウェアビデオアクセラレーション#VA-API の確認 を参照) の出力を見て VA-API のサポートがあることを確認した場合は、ひとまず以下のフラグだけで試してみてください:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--enable-features=AcceleratedVideoDecodeLinuxGL\n```\n\nそれ以外の場合は、以下も読んでください。\n\nChromium でアクセラレートされたエンコードを有効化するには:\n\n- AcceleratedVideoEncoder を features に追加してください (例: --enable-features=AcceleratedVideoDecodeLinuxGL,AcceleratedVideoEncoder)。詳細は、[3] と [4] を読んでください。\n\nVA-API サポートを有効にするには:\n\n- 使用中のビデオカード用の適切な VA-API ドライバをインストールしてください。そして、VA-API が有効化されて正常に動作していることを確認してください。ハードウェアビデオアクセラレーションを見てください。プロプライエタリな NVIDIA サポートは、libva-nvidia-driver をインストールする必要があります。\n- --enable-features=VaapiVideoDecoder オプションを設定してください。ANGLE GL レンダラーと libva-intel-driver を使用している場合は、これで十分です。\n- ANGLE を使用すると、intel-media-driver が使用されている場合、Chromium は古い i965 ドライバを強制的に使用し失敗します。回避策として、VA-API を手動で設定してください。詳細については [5] を見てください。\n- Xorg か Wayland でシステムの GL レンダラを使用するには、--use-gl=egl を使用してください。Chrome 112 を使用している場合、このオプションはもはや必要ないかもしれず、AMD GPU を使用している場合は GPU アクセラレーションの機能が壊れる場合があります。\n- VA-API がまだ動かない場合は、--enable-features=VaapiIgnoreDriverChecks か --disable-features=UseChromeOSDirectVideoDecoder フラグを試してください。\n- VA-API が Xorg と古い GPU 上でまだ動かない場合は、LIBVA_DRI3_DISABLE=1 環境変数を設定してください [6]。\n\n"
    },
    {
      "title": "Vulkan",
      "level": 4,
      "content": "Vulkan を使用する場合、以下のフラグが必要で、Chromium 126 と Mesa 24.1 ではこれで十分でしょう:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--enable-features=VaapiVideoDecoder,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE\n```\n\n先述の追加のフラグは入れないでください。\n\n"
    },
    {
      "title": "ヒントとテクニック",
      "level": 4,
      "content": "Table content:\nこの記事またはセクションは情報が古くなっています。 理由: Wayland + RADV の環境では Chromium は AV1 に VaapiVideoDecoder を使用します。 Wayland + RADV の環境では Chromium は全てのサイスの動画に VaapiVideoDecoder を使用します。 (Discuss)\n\n- Wayland + RADV の環境では Chromium は AV1 に VaapiVideoDecoder を使用します。\n- Wayland + RADV の環境では Chromium は全てのサイスの動画に VaapiVideoDecoder を使用します。\n\n使用中の VA-API ドライバでサポートされているコーデックの動画の視聴がうまく行くかどうか確認するには (vainfo はどのコーデックがサポートされているかを表示しますが、Chromium は VP9 と h264 だけをサポートします):\n\n- Ctrl+Shift+I を押すか、コンテキスト (右クリック) メニューの 検証 ボタンを押して DevTools を開いてください\n- Media inspection タブを追加してください: ハンバーガーメニュー(︙) > More tools > Media\n- 新しく開いた Media タブで、Video Decoder の Hardware decoder の状態を見てください。\n\n十分に大きな動画でテストしてください。バージョン 86 から、デスクトップ版の Chromium は 720p よりも大きい動画でしかアクセラレーションを使用しません。\n\nVP8/VP9 ハードウェアデコードが使用できない Youtube 動画を視聴しているときに CPU 使用率を減らすには、h264ify や enhanced-h264ify、Not yet, AV1[7] 拡張機能を使用してください。\n\n一部のシステム (特に Xwayland) では、#GPU アクセラレーションを強制する 必要があるかもしれません。このセクションでの目的に対しては --ignore-gpu-blocklist のみで十分です。\n\nSkia レンダラーは、現在ビデオデコードアクセラレーションと互換性がないので、無効化する必要があるかもしれません: --disable-features=UseSkiaRenderer\n\n"
    },
    {
      "title": "KDE 統合",
      "level": 3,
      "content": "Plasma との統合は plasma-browser-integration をインストールしてください。詳細は KDE Plasma Browser Integration を見てください。\n\n"
    },
    {
      "title": "PDF ビューアプラグイン",
      "level": 3,
      "content": "Chromium と Google Chrome には Chromium PDF Viewer プラグインがバンドルされています。このプラグインを使用したくない場合は、chrome://settings/content/pdfDocuments 内の Download PDFs を確認してください。\n\n"
    },
    {
      "title": "Xwayland での動作",
      "level": 3,
      "content": "NVIDIA 社のプロプライエタリドライバを使用している場合、Xwayland 上で Chromium を実行すると、GPU プロセスが時々クラッシュすることがあります。GPU プロセスがクラッシュしないようにするには、以下のフラグを追加してください:\n\n```\n--use-angle=vulkan --use-cmd-decoder=passthrough\n```\n\n"
    },
    {
      "title": "ネイティブ Wayland サポート",
      "level": 3,
      "content": "バージョン 97 以降、Chromium でのネイティブ Wayland サポートは、次のフラグを使用して有効にできます [8]:\n\n```\n--ozone-platform-hint=auto\n```\n\nこれがうまくいかない場合 (例えば Weston バージョン 106 以下の場合)、次を使ってください:\n\n```\n--ozone-platform=wayland\n```\n\n永続的な設定については #フラグを永続化する を参照してください。このフラグはブラウザのフラグメニューからも設定できます。\n\nこの設定により、wayland セッション内では wayland Ozone バックエンドが選択されます。なので、X11 と Wayland を頻繁に切り替える場合でも、デスクトップエントリは一つだけで大丈夫です。\n\n追加で、インプットメソッドの問題が発生している場合は、新しい GTK を強制すると良いかもしれません:\n\n```\n--gtk-version=4\n```\n\nFcitx5 を使用していて上記のフラグを使うと正しく動作しない場合は、--gtk-version=4 の代わりに --enable-wayland-ime フラグを使用してみてください。[9]\n\n```\n--enable-wayland-ime --wayland-text-input-version=3\n```\n\n"
    },
    {
      "title": "ナビゲーションのタッチパッドジェスチャ",
      "level": 4,
      "content": "2本の指でスワイプすると戻ったり進んだりする機能を有効にするには、以下のフラグを使用してください:\n\n```\n--ozone-platform-hint=auto --enable-features=TouchpadOverscrollHistoryNavigation\n```\n\n"
    },
    {
      "title": "ヒントとテクニック",
      "level": 2,
      "content": "特に注意書きがなければ以下のヒントとテクニックは Chromium と Chrome の両方で使うことができます。\n\n"
    },
    {
      "title": "chrome:// URL",
      "level": 4,
      "content": "多くの調整は Chrome の URL からアクセスすることができます。完全なリストは chrome://chrome-urls を参照してください。\n\n- chrome://flags - WebGL などの実験的な機能や GPU によるウェブページのレンダリングなどにアクセスできます。\n- chrome://extensions - 現在使用している Chromium 拡張を表示・有効化・無効化。\n- chrome://gpu - 様々な GPU オプションの状態。\n- chrome://sandbox - サンドボックスの状態を表示。\n- chrome://version - バージョンや /usr/bin/chromium を実行するときに使われたスイッチを表示。\n\nChromium のスイッチ (コマンドラインパラメータ) の自動的に更新される完全なリストが こちら にあります。\n\n"
    },
    {
      "title": "Chromium タスクマネージャ",
      "level": 4,
      "content": "Shift+ESC でブラウザのタスクマネージャを立ち上げることができます。メモリや CPU、ネットワークの使用量が閲覧可能です。\n\n"
    },
    {
      "title": "Chromium が Preferences ファイルを上書き/オーバーライドしてしまう",
      "level": 4,
      "content": "Google アカウントの同期を有効にしている場合、~/.config/chromium/Default/Preferences 下の Preferences ファイルに直接編集を加えていても Chromium によって上書きされてしまいます。上書きされないようにするには、--disable-sync-preferences スイッチを付けて Chromium を起動してください:\n\n```\n$ chromium --disable-sync-preferences\n```\n\nデスクトップ環境のログイン時にバックグラウンドで Chromium を起動する場合、デスクトップ環境から使用するコマンドを以下のようにしてください:\n\n```\n$ chromium --disable-sync-preferences --no-startup-window\n```\n\n"
    },
    {
      "title": "検索エンジン",
      "level": 4,
      "content": "wiki.archlinux.org や wikipedia.org などのウェブサイトは検索を実行してから Settings > Search を選択して Manage search engines.. ボタンをクリックすることで簡単に検索できるように設定できます。エントリを \"Edit\" してキーワードを w などに変更してください (ショートカットは自由に決めて下さい)。これでアドレスバーに \"w arch linux\" と入力するだけで \"Arch Linux\" で検索できるようになります。\n\n"
    },
    {
      "title": "Tmpfs",
      "level": 4,
      "content": "物理ディスクに対する Chromium のキャッシュの書き込みを制限したい場合、--disk-cache-dir フラグでキャッシュの書き込み先を変更することができます:\n\n```\n$ chromium --disk-cache-dir=\"$XDG_RUNTIME_DIR/chromium-cache\"\n```\n\nキャッシュは一時的になり、再起動したりハードロックすると消えます。もしくは、tmpfs 領域を /etc/fstab 内でセットアップすることもできます:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs\t/home/username/.cache\ttmpfs\tnoatime,nodev,nosuid,size=400M\t0\t0\n```\n\nまたは、/tmp へのシンボリックリンクを作成してください。以下のコマンドを実行する前に、Chromium のキャッシュフォルダは削除しておいてください:\n\n```\n$ ln -s /tmp /home/ユーザ名/.cache/chromium\n```\n\nまた、全てのアプリケーションで有効なXDG_CACHE_HOMEもあります。\n\n/tmp や /dev/shm などの tmpfs ファイルシステムにプロファイルを保存することで、プロファイル全体が RAM 内に保存されるので、Chromium の応答性が改善されます。\n\nprofile-sync-daemon などの、プロファイルを動的に管理するスクリプトを使うことで信頼性と使いやすさを最大限高めることができます。profile-sync-daemon はブラウザプロファイルのディレクトリのシンボリックリンクを作成し、定期的にメモリと同期をとります。詳細については Profile-sync-daemon の記事を参照して下さい。\n\n"
    },
    {
      "title": "新しいブラウザインスタンスを起動",
      "level": 4,
      "content": "ブラウザを起動すると、最初に同じプロファイルを使っているインスタンスが他にないか確認されます。存在する場合、新しいウィンドウは既存のインスタンスに関連付けられます。以下のように --user-data-dir パラメータを使って起動することで別のプロファイルでブラウザを起動できます:\n\n```\n$ chromium --user-data-dir=/path/to/some/directory\n```\n\n"
    },
    {
      "title": "torrent クライアントで *.torrent ファイルやマグネットリンクを直接開く",
      "level": 4,
      "content": "デフォルトでは Chromium は *.torrent ファイルを直接ダウンロードするため、ファイルを torrent クライアントで開くには画面左下の通知をクリックする必要があります。以下の方法で毎回クリックする手間を省けます:\n\n- *.torrent ファイルをダウンロード。\n- 画面左下に表示される通知を右クリック。\n- \"Always Open Files of This Type\" チェックボックスにチェックを入れる。\n\nデフォルトの関連付けの変更については xdg-open を見てください。\n\n"
    },
    {
      "title": "タッチスクリーンデバイスでタッチスクロール",
      "level": 4,
      "content": "使用するタッチデバイスを指定する必要があります。タッチスクリーンデバイスを xinput list で確認して、--touch-devices=x パラメータを付けて Chromium を起動してください (\"x\" はデバイスの id に置き換えてください)。\n\n"
    },
    {
      "title": "メモリの使用量を減らす",
      "level": 4,
      "content": "デフォルトでは、Chromium は開いているウェブサイトの数だけ OS プロセスを作成します [10]。Chromium の起動時にコマンドラインスイッチを指定することで挙動を変更することが可能です。\n\n例えば、全てのウェブサイトでひとつのプロセスを共有するには:\n\n```\n$ chromium --process-per-site\n```\n\nシングルプロセスモデルを使うには:\n\n```\n$ chromium --single-process\n```\n\nさらに Tab Suspender や OneTab などの拡張を使うことでアクティブでないタブを停止・保存することができます。\n\n"
    },
    {
      "title": "ユーザーエージェント",
      "level": 4,
      "content": "Chromium の起動時に --user-agent=\"[string]\" パラメータを指定することでユーザーエージェントは任意に変更することができます。\n\n"
    },
    {
      "title": "DOM Distiller",
      "level": 4,
      "content": "Chromium には Firefox にあるのと似たレンダリングモードが存在します。これは DOM Distiller と呼ばれ、オープンソースプロジェクトです。 デフォルトでは無効化されていますが、chrome://flags/#enable-reader-mode フラグを使用することにより有効化できます。このフラグは永続化させることができます。 DOM Distiller は、ページのコンテンツから不要なものを取り除くことでより良いレンダリングエクスペリエンスを提供するだけでなく、印刷用にページを単純化してくれます。後者のチェックボックスオプションが印刷ダイアログから削除されたものの、不要なものを取り除いたページを印刷することは依然として可能です。これらには、基本的には同じ効果があります。\n\nフラグを有効化すると、ウェブサイトから不要なものを取り除くことができると Chromium が判断したときに、\"Enter reader mode\" メニューアイテムとアイコンがアドレスバーに出現します。\n\n"
    },
    {
      "title": "特定の GPU の使用を強制する",
      "level": 4,
      "content": "GPU が複数ある環境の場合、Chromium はレンダリングに使用する GPU (ディスクリートや統合 GPU) を自動的に検出します。99% は問題ありませんが、誤った GPU が選択された場合 (VFIO GPU パススルー環境でディスクリートグラフィックが選ばれるなど)、chrome://gpu は GPU プロセスを初期化できないというエラーを吐きます。同じページの Driver Information には複数の GPU が表示されます (GPU0, GPU1, ...)。ユーザーフレンドリな方法で GPU を切り替えることはできませんが、デバイス/ベンダー ID を使って Chromium のフラグで使用する GPU を設定できます:\n\n```\n$ chromium --gpu-testing-vendor-id=0x8086 --gpu-testing-device-id=0x1912\n```\n\n0x8086 と 0x1912 は使用したい GPU の ID に置き換えてください (chrome://gpu ページで確認できます)。\n\n"
    },
    {
      "title": "Firefox からブックマークをインポート",
      "level": 4,
      "content": "Firefox から Chromium にブックマークをインポートすることができます。\n\nChromium で chrome://settings/importData を開いてください。\n\nコンピュータに Firefox がインストールされている場合、直接 Firefox からブックマークなどをインポートできます。\n\nMozilla Firefox を選択してください。不要なアイテムのチェックは外してかまいません。Import をクリックしてから Done をクリックすればインポートは完了です。\n\n他の PC からブックマークをインポートする場合、先に Firefox からブックマークをエクスポートする必要があります。\n\nFirefox で Ctrl+Shift+o Import and Backup > Export Bookmarks To HTML を選択してください\n\n後の作業は同じです。chrome://settings/importData を開いてください。ただし今度は From ドロップダウンメニューで Bookmarks HTML File を選択して Choose File ボタンをクリックしてブックマークファイルをアップロードします。\n\n後の作業は同じです。chrome://settings/importData を開いてください。ただし今度は From ドロップダウンメニューで Bookmarks HTML File を選択して Choose File ボタンをクリックしてブックマークファイルをアップロードします。\n\n"
    },
    {
      "title": "ネイティブ通知の有効化",
      "level": 4,
      "content": "chrome://flags#enable-system-notifications を開いて、Enabled を選択してください。\n\n"
    },
    {
      "title": "マウスの中ボタンでの自動スクロールを有効化する",
      "level": 4,
      "content": "自動スクロールはまだ試験的な機能です [12]。開発版ビルドでない Chromium または Chromium ベースのブラウザで、Linux 環境で動作させている場合は、デフォルトで無効化されています。[13]\n\nこの機能を有効化するには、ブラウザを --enable-features=MiddleClickAutoscroll フラグで起動してください。このオプションを永続化させたい場合は、#フラグを永続化する を見てください。\n\n- --enable-blink-features は --enable-features と同じように動作しますが、ブラウザが、このフラグはサポートされておらず、安定性とセキュリティが損なわれると警告を表示することがあります。\n- 代替策として Chrome Web Store から似たような機能を持つ WHEELY のような拡張機能を追加することもできます。\n\n"
    },
    {
      "title": "U2F 認証",
      "level": 4,
      "content": "libfido2 ライブラリをインストールしてください。このパッケージは、(通常) ユーザとして U2F キーにアクセスできるようにするために必要な udev ルールを提供します。 U2F キーはデフォルトでは root としてしかアクセスできないので、これらのルールが無いと Chromium はエラーを吐きます。\n\n"
    },
    {
      "title": "テーマ",
      "level": 4,
      "content": "Chromium に現在の GTK テーマをブラウザメニューやコントロールで使用させることができます。chrome://settings/appearance で Use GTK を押してください。\n\n"
    },
    {
      "title": "ダークモード",
      "level": 4,
      "content": "Chromium 114 から、ユーザの優先外観を自動的に決定するために XDG デスクトップ ポータル が使用されるようになりました (issue)。よって、ダークモードの有効化とユーザの GTK テーマが切り離されました。この設定は、CSS、JavaScript、設定、そして Dev-Tools の prefers-color-scheme に適用されます。\n\n優先外観を変更する方法は、XDG Desktop Portal バックエンドに依存します。例えば、多くのデスクトップ環境はそれぞれの外観設定インターフェイスにモードを切り替えるスイッチを提供しています。または、例えば xdg-desktop-portal-gtk 場合は、以下のコマンドを使って優先モードを prefer-light や prefer-dark、default に設定します:\n\n```\n$ dconf write /org/gnome/desktop/interface/color-scheme \\'prefer-dark\\'\n```\n\ndbus の dbus-send を使用することで、現在の優先外観をクエリできます (ドキュメント):\n\n```\n$ dbus-send --session --print-reply=literal --dest=org.freedesktop.portal.Desktop /org/freedesktop/portal/desktop org.freedesktop.portal.Settings.Read string:org.freedesktop.appearance string:color-scheme | tr -s ' ' | cut -d ' ' -f 5\n```\n\n- 0: 設定無し\n- 1: ダークモードを優先\n- 2: ライトモードを優先\n\nダークモードを有効化し、ダークテーマ (通常、incognito モードで使用されます) を有効化するには、以下のフラグを永続的な設定に追加してください:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--force-dark-mode\n--enable-features=WebUIDarkMode\n```\n\n"
    },
    {
      "title": "サイドパネルを有効化する",
      "level": 4,
      "content": "サイドパネルは chrome://flags から有効化できます。Side panel を有効化/無効化することができ、Side panel border や Side panel drag and drop といったオプションを変更できます。\n\n"
    },
    {
      "title": "プロファイルのメンテナンス",
      "level": 3,
      "content": "Chromium は Sqlite データベースを使用して履歴やお気に入りを管理しています。Sqlite データベースは使っているうちに断片化していきます。しかしながら、データベースをチェックしたり最適化するプロセスが存在しないため、断片化によって段々とパフォーマンスに影響が出て来ます。デフラグを行ってデータベースから未使用領域を削除することで、起動時間やブックマークや履歴に関連する作業を素早く実行することができます。\n\nprofile-cleaner と browser-vacuumAUR でメンテナンスができます。\n\n"
    },
    {
      "title": "JIT を無効化",
      "level": 4,
      "content": "JS エンジンにおけるセキュリティ上の脆弱性のうち約半分は JIT に原因があります。パフォーマンスが劣化しますが、--js-flags=--jitless フラグを使用することで、JavaScript からネイティブなコードへの just-in-time コンパイルを無効化できます。\n\n"
    },
    {
      "title": "WebRTC",
      "level": 4,
      "content": "WebRTC は JavaScript を使用する通信プロトコルですが、VPN を使っている場合でもマシンの IP アドレスやハードウェアのハッシュ値が漏洩する可能性があります。VPN ソフトウェアによってはスクリプトの実行が阻止されることもありますが、プロトコルを直接ブロックしてしまう方が安全です。2016年10月現在、デスクトップ版 Chromium で WebRTC を無効化する方法はありませんが、ローカル IP アドレスの漏洩を阻止する拡張が存在します 。そのひとつがこの拡張機能です。\n\nWebRTC は https://browserleaks.com/webrtc でテストできます。\n\n"
    },
    {
      "title": "SSL 証明書",
      "level": 4,
      "content": "Chromium には SSL 証明書マネージャが存在しません。Chromium は NSS の共有データベース ~/.pki/nssdb を使用しています。データベースに SSL 証明書を追加するには、シェルを使う必要があります。\n\nCAcerts を取得して nssdb を作成してください (存在しない場合)。作成するには nss パッケージをインストールして以下を実行する必要があります:\n\n```\n$ mkdir -p $HOME/.pki/nssdb\n$ cd $HOME/.pki/nssdb\n$ certutil -N -d sql:.\n```\n\n```\n$ curl -k -o \"cacert-root.crt\" \"http://www.cacert.org/certs/root.crt\"\n$ curl -k -o \"cacert-class3.crt\" \"http://www.cacert.org/certs/class3.crt\"\n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"CAcert.org\" -i cacert-root.crt \n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"CAcert.org Class 3\" -i cacert-class3.crt\n```\n\nこれでユーザーは手動で自己署名証明書をインポートできるようになります。\n\n以下は証明書を展開してユーザーの nssdb に追加するシンプルなスクリプトです:\n\n```\n#!/bin/sh\n#\n# usage:  import-cert.sh remote.host.name [port]\n#\nREMHOST=$1\nREMPORT=${2:-443}\nexec 6>&1\nexec > $REMHOST\necho | openssl s_client -connect ${REMHOST}:${REMPORT} 2>&1 |sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'\ncertutil -d sql:$HOME/.pki/nssdb -A -t \"P,,\" -n \"$REMHOST\" -i $REMHOST \nexec 1>&6 6>&-\n```\n\n使用方法はコメント化されている行を見てください。\n\n参照:\n\n- https://web.archive.org/web/20180718193807/https://blog.avirtualhome.com/adding-ssl-certificates-to-google-chrome-linux-ubuntu\n- https://chromium.googlesource.com/chromium/src/+/master/docs/linux/cert_management.md\n\nfirefox ブラウザを使って証明書をファイルに保存してデータベースに手動でインポートすることができます。\n\nFirefox を使って:\n\n1. 取得先の URL を開く。\n1. \"This Connection is Untrusted\" 警告画面が表示されたら I understand the Risks > Add Exception... をクリック。\n1. View > Details > Export をクリックしてどこか一時的な場所に証明書を保存 (以下の例では /tmp/easy.pem を使用)。\n\nChromium で使用する証明書をインポート:\n\n```\n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"easy\" -i /tmp/easy.pem\n```\n\n参照:\n\n- https://sahissam.blogspot.com/2012/06/new-ssl-certificates-for-tomatousb-and.html\n\n"
    },
    {
      "title": "Canvas Fingerprinting",
      "level": 4,
      "content": "Canvas Fingerprinting は HTML5 の canvas のレンダリング結果の差異を使ってユーザーを識別する技術です。--disable-reading-from-canvas フラグを使うことで Canvas Fingerprinting を使えないようにすることができます。\n\nフラグが機能しているかどうか確認するには こちらのテスト を実行して \"hash of canvas fingerprint\" の結果を確認してください。\n\n- 一部の拡張機能は canvas からの読み込みを必要としており、--disable-reading-from-canvas を設定すると壊れる場合があります。\n- YouTube プレイヤーや Google マップは canvas からの読み込みができないと正しく動作しません (Qutebrowser issue 5345、BBS#255958、BBS#276425 を参照)。\n\n"
    },
    {
      "title": "プライバシー拡張",
      "level": 4,
      "content": "ブラウザ拡張機能#プライバシー を参照してください。\n\n"
    },
    {
      "title": "Do Not Track",
      "level": 4,
      "content": "Do Not Track を有効化するには、chrome://settings を開き、Advanced まで下へスクロールして、Privacy and security の Send a \"Do Not Track\" request with your browsing traffic にチェックを入れてください。\n\n"
    },
    {
      "title": "特定のパスワードストアを強制する",
      "level": 4,
      "content": "Chromium はパスワードストアを使ってパスワードと (cookie の値を暗号化するのに使われる) Chromium Safe Storage キーを保存します [14]。\n\nデフォルトでは Chromium は使用するパスワードストアを自動的に認識しますが、デスクトップ環境やウィンドウマネージャを変えたときにパスワードと cookie が失われてしまう可能性があります。\n\n--password-store フラグで以下のどれかの値を指定して Chromium を起動することで特定のパスワードストアを強制的に使うようにすることができます [15]:\n\n- gnome-libsecret - libsecret 経由で Gnome Keyring を使用\n- kwallet5 - KDE Wallet 5 を使用。\n- kwallet6 - KDE Wallet 6 を使用。\n- basic - Login Data ファイルにプレーンテキストとしてパスワードと cookie の暗号鍵を保存\n- detect - デフォルトの自動認識\n\n例えば、Gnome Keyring を使うようにするには --password-store=gnome-libsecret を付けてください。永続化する方法は #フラグを永続化する を参照。\n\n他のデスクトップ環境のパスワードストアを使う場合、自動的にアンロックされるように設定すると良いでしょう。GNOME/Keyring#キーリングを使用する や KDE Wallet#ログイン時に KDE ウォレットを自動的にアンロック を参照。\n\n"
    },
    {
      "title": "ハイブリッドポスト量子鍵交換を有効化する",
      "level": 4,
      "content": "バージョン 155 から Chromium は、TLS 1.3 向けのハイブリッドポスト量子鍵交換 X25519Kyber768 をサポートしています [16]。この機能はデフォルトで無効化されていますが、chrome://flags/#enable-tls13-kyber フラグで有効化できます。\n\n"
    },
    {
      "title": "タブのフォントサイズが大きすぎる",
      "level": 4,
      "content": "GTK#設定 で言及されているように、Chromium は GTK の設定を使用します。Chromium はタブに gtk-font-name の設定を使用します (これにより、ウインドウのフォントサイズと合わなくなる場合があります)。この設定を上書きするには、--force-device-scale-factor=1.0 を使用してください。\n\nChrome Refresh 2023 がデフォルトになってから、Cantarell フォントを使用している GNOME で動かすとタブタイトル内の一部の文字 (小文字の g など) が切れてしまうことがあります。chromium.org のイシューを参照してください。\n\nこの問題が解決するまでの回避策は、フォント設定#デフォルトまたは代替フォントを設定する に載っている設定を使って Cantarell から別のフォントに変えることです。例えば:\n\n```\n~/.config/fontconfig/conf.d/10-chromium-font.conf\n```\n\n```\n<match target=\"pattern\">\n    <test name=\"prgname\" compare=\"eq\">\n        <string>chromium</string>\n    </test>\n    <test qual=\"any\" name=\"family\">\n         <string>Cantarell</string>\n    </test>\n    <edit name=\"family\" mode=\"assign\" binding=\"strong\">\n        <string>Ubuntu</string>\n    </edit>\n</match>\n```\n\nこの設定は、プロセスの名前が chromium にマッチする場合にのみ適用されます。Google Chrome に対しては chrome としてください。\n\n"
    },
    {
      "title": "WebGL",
      "level": 3,
      "content": "使用中のグラフィックカードが Chromium のブラックリストに入っている可能性があります。#GPU アクセラレーションを強制する を見てください。\n\nBumblebee で Chromium を使っている場合、GPU のサンドボックスによって WebGL がクラッシュすることがあります。このようなときは、optirun chromium --disable-gpu-sandbox で GPU のサンドボックスを無効にできます。\n\nWebGL サポートのデバッグ情報は chrome://gpu/ を見てください。\n\nChromium はユーザプロファイルに GPU に関する誤った情報を保存することがあります。例えば、Optimus を使って Nvidia カードから Intel カードに切り替えた場合、たとえ Nvidia カードや primusrun/optirun を使用していなくても、chrome://gpu に Nvidia カードが表示されます。異なるユーザデータディレクトリを使って実行することにより (例: chromium --user-data-dir=$(mktemp -d))、この問題を解決できる場合があります。持続的な解決策として、~/.config/chromium/Local\\ State を削除して GPU の情報をリセットできます。\n\n"
    },
    {
      "title": "HiDPI の描画がおかしい",
      "level": 3,
      "content": "Chromium は自動的に HiDPI ディスプレイでの倍率設定を行います。しかし、これにより GUI の描画がおかしくなることがあります。\n\n--force-device-scale-factor=1 フラグをを使用して、自動倍率設定を上書きできます。\n\nネイティブの Wayland サポート が有効化されている場合、Chromium は、各モニタに設定された倍率を元に自動的に倍率を設定します。\n\n"
    },
    {
      "title": "GNOME Keyring を使用していると起動するたびにパスワードを要求される",
      "level": 3,
      "content": "GNOME/Keyring#パスワードが保存されない を見てください。\n\n"
    },
    {
      "title": "パスワードだけが同期されない",
      "level": 3,
      "content": "同期がパスワードに対してだけ機能しない場合 (chrome://sync-internals/ で確認できます)、プロファイルのログインデータを削除してください:\n\n```\n$ rm ~/.config/chromium/Default/Login\\ Data*\n```\n\n詳細は Google Chrome Help forum を見てください。\n\n"
    },
    {
      "title": "デスクトップ環境を切り替えると cookie とパスワードが消える",
      "level": 3,
      "content": "Chromium を起動したときにターミナルに Failed to decrypt token for service AccountId-* というメッセージが表示される場合、Chromium が間違ったパスワード保存バックエンドを使おうとしたのかもしれません。これはデスクトップ環境を切り替えたときに起こりえます。\n\n#特定のパスワードストアを強制する を見てください。\n\n"
    },
    {
      "title": "Google Sync を有効化すると起動時に固まる",
      "level": 3,
      "content": "--password-store=basic フラグを使うか、他の適切なパスワードストアを使って Chrome を起動してみてください。\n\n#特定のパスワードストアを強制する を見てください。\n\n"
    },
    {
      "title": "デフォルトのブラウザとして設定するかを毎回尋ねてくる",
      "level": 3,
      "content": "KDE を使用していて、一度 Firefox を (Firefox 内のボタンをクリックして) デフォルトのブラウザとして設定したことがある場合、たとえ \"デフォルトに設定\" ボタンをクリックしたとしても 、Chromium を起動するたびに毎回 Chromium をデフォルトのブラウザとして設定するかを尋ねられることがあります。\n\nChromium は xdg-settings check default-web-browser chromium.desktop を実行することで chromium がデフォルトのブラウザであるかを確認します。そのコマンドの出力が \"no\" である場合、chromium がデフォルトのブラウザでないと認識します。xdg-settings スクリプトは以下の MIME の関連付けを確認し、すべてが chromium.desktop であることを期待します:\n\n```\nx-scheme-handler/http\nx-scheme-handler/https\ntext/html\n```\n\nこれを直すには、システム設定 > アプリケーション > デフォルトのアプリケーション > Web browser を開いて、Chormium を指定してください。そして、text/html の MIME の関連付けを設定してください:\n\n```\n$ xdg-mime default chromium.desktop text/html\n```\n\n最後に、MIME のデータベースを更新してください:\n\n```\n$ update-mime-database ~/.local/share/mime\n```\n\n"
    },
    {
      "title": "\"このブラウザまたはアプリは安全でない可能性があります\" Google へのログインエラー",
      "level": 3,
      "content": "2020年04月20日以降、Web 開発用に --remote-debugging-port=9222 フラグを指定して chromium を実行すると、 Google アカウントにログインできません。このフラグを一時的に無効にしてログインすると、再び有効にできます。\n\n"
    },
    {
      "title": "60 FPS より高いリフレッシュレートのディスプレイを使用しているのに Chromium は 60 FPS で描画される",
      "level": 3,
      "content": "一般的な問題に関する上流のバグレポートはここにあり、その他の回避策が見つかるかもしれません。また、混合リフレッシュレートに関する問題はここで報告されています。\n\n"
    },
    {
      "title": "混合リフレッシュレート",
      "level": 4,
      "content": "混合リフレッシュレート (例えば 60 Hz と 144 Hz) のあるディスプレイを使用している場合、Chromium は最も低いリフレッシュレートのディスプレイに合わせて描画するかもしれません。\n\nこの問題に対する適切な回避策があります。以下のフラグを永続的な設定に追加してください:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--use-gl=egl\n--ignore-gpu-blocklist\n--enable-gpu-rasterization\n```\n\nこれにより、コンポジタが 144 FPS でリフレッシュする場合、144Hz ディスプレイ上で使用すると Chromium が 144 FPS で実行されます。これにより、少しカクつくかもしれないことを留意してください FS#67035。しかし、60 FPS で止まるよりはマシです。\n\n"
    },
    {
      "title": "Wayland バックエンドで実行する",
      "level": 4,
      "content": "この問題を引き起こす Wayland コンポジタ固有の問題があるようです。\n\n特に、Plasma 5 は環境によらず 60Hz で描画されるようですが、Plasma 6 (この記事の時点では rc1) では Chromium が高いリフレッシュレートでも問題なく動作します。\n\nその他の解決策がうまく行かなかった場合は、XWayland バックエンドに切り替えてみてください。\n\n"
    },
    {
      "title": "Chromium でスクロール速度が遅い",
      "level": 3,
      "content": "Chromium や Electron ベースのアプリケーションでマウスホイールのスクロールが遅すぎることがあります。以下にいくつか解決法を挙げます。\n\nLibinput#マウスホイールのスクロール速度の調整 では libinput の libinput_event_pointer_get_axis_value 関数をインジェクトし、スケール係数を変更するインターフェイスを提供します。これはアプリケーションレベルのインジェクションではないので、アプリケーション固有のスケール係数調整用の追加スクリプトが必要です。Chromium の縦幅の小さい開発者ツールでは、スケール係数を十分大きくするとスクロールが速くなりすぎるかもしれないことに注意してください。\n\nimwheel は X のホイールボタンのイベントを複数回リプレイすることでスクロールの距離を増やします。しかし、chromium は実際のスクロールとリプレイされたスクロールを2つのイベントとして認識します。これらの間には小さいですが感知できる遅延が存在します。なので、一回のマウスホイールスクロールで2回のページジャンプが発生します。タッチパッドのスクロールでも注意が必要です。\n\nLinux Scroll Speed Fix と SmoothScroll はスクロール距離の変更をサポートする chromium 拡張機能です。ウェブページ内でスクロールすると、現在フォーカスされているノードの最も近いスクロールできる祖先を見つけて、たとえその祖先が一番下までスクロールされていたとしても、その祖先に対してスクロールメソッドがピクセル距離を使って呼ばれます。なので、テキストエディタやスクロール可能な要素にスクロールすると、マウスを動かす以外の方法でその要素からスクロールして出ることはできません。また、拡張機能ベースの手段は Chromium 外では利用できません。\n\n"
    },
    {
      "title": "動画がロードされるが再生されない",
      "level": 3,
      "content": "これは PulseAudio の問題である場合があります。PulseAudio/トラブルシューティング#ブラウザ (firefox) が動画をロードするが、再生しない で提案されている修正方法を確認してください。\n\n"
    },
    {
      "title": "データベースの破損によりパスワードが保存されない",
      "level": 3,
      "content": "パスワードデータベースは破損することがあり、その場合、再ビルドする必要があります。再ビルドすると、データベース内の全データが破壊され、保存されているパスワードは失われます。\n\nターミナルから Chromium を起動すると、以下のように出力されます:\n\n```\n[472531:472565:1207/055404.688559:ERROR:login_database.cc(1048)] Password decryption failed, encryption_result is 2\n```\n\nChromium を終了し、3つのデータベースファイル (~/.config/chromium/Default/Login Data*) を削除してください。\n\nChromium を再度起動すると、データベースファイルが再作成されるはずです。\n\n"
    },
    {
      "title": "KDE Wayland でカーソルが正しく描画されない",
      "level": 3,
      "content": "KDE#Plasma のカーソルがときどきおかしくなる を参照してください。\n\n"
    },
    {
      "title": "Wayland で Chromium のウィンドウが透明になる",
      "level": 3,
      "content": "あるバグにより、chromium 124 はコマンドラインフラグ --ozone-platform=wayland を明示的に指定して起動する必要があります。\n\n"
    },
    {
      "title": "Wayland hardware acceleration buffer handle is null エラー",
      "level": 3,
      "content": "とあるバグにより (特にハードウェアアクセラレーションが有効化されている場合)、ターミナルから起動した際に以下のような出力がログに現れることがあります:\n\n```\n[333310:333425:0919/121130.103852:ERROR:gpu_channel.cc(502)] Buffer Handle is null.\n[333341:18:0919/121130.104000:ERROR:shared_image_interface_proxy.cc(134)] Buffer handle is null. Not creating a mailbox from it.\n[333310:333425:0919/121130.137149:ERROR:gbm_pixmap_wayland.cc(82)] Cannot create bo with format= YUV_420_BIPLANAR and usage=SCANOUT_CPU_READ_WRITE\n```\n\n今のところの回避策は以下のフラグを使用することです:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--disable-gpu-memory-buffer-video-frames\n```\n\n"
    },
    {
      "title": "サウンドサーバー無しだと音が出ない",
      "level": 3,
      "content": "ChromiumはAdvanced_Linux_Sound_Architecture#ハードウェアを直接割り当てるをサポートしません。 ミキシングの為の出力デバイスpcm.dmixerを設定し、 --alsa-output-device=pcm.dmixerフラグを使ってください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Chromium ホームページ\n- Google Chrome リリースノート\n- Chrome ウェブストア\n- Chromium と Google Chrome の違い\n- Chromium コマンドラインスイッチのリスト\n- Profile-sync-daemon - Chromium プロファイルを tmpfs に保存し、ディスクと同期する systemd サービス\n- Tmpfs - /etc/fstab での tmpfs ファイルシステム\n- 公式の tmpfs カーネルドキュメント\n\n"
    }
  ]
}