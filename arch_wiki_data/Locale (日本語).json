{
  "title": "Locale (日本語)",
  "url": "https://wiki.archlinux.org/title/Locale_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- 環境変数\n- ローカリゼーション\n\nロケール (Locale) は glibc などのロケールに対応しているプログラムやライブラリによって使われ、テキストのレンダリング、時刻や日付、地域通貨の正しい表示、アルファベットなどの決まり事が設定されます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ロケールの生成\n- 2 ロケールの設定 2.1 システム全体のロケールを設定する 2.2 ユーザーセッションでシステムロケールを上書き 2.3 ロケールを即座に変更する 2.4 他の使用方法\n- 3 変数 3.1 LANG: デフォルトロケール 3.2 LANGUAGE: フォールバックロケール 3.3 LC_TIME: 日付と時刻の形式 3.4 LC_COLLATE: 照合順序 3.5 LC_ALL: トラブルシューティング\n- 4 トラブルシューティング 4.1 設定を変更しても言語が変わらない 4.2 カスタムのロケールを使うと問題が発生する 4.2.1 LC_CTYPE を設定する 4.2.2 Xlib データベースを修正する\n- 5 参照\n\n- 2.1 システム全体のロケールを設定する\n- 2.2 ユーザーセッションでシステムロケールを上書き\n- 2.3 ロケールを即座に変更する\n- 2.4 他の使用方法\n\n- 3.1 LANG: デフォルトロケール\n- 3.2 LANGUAGE: フォールバックロケール\n- 3.3 LC_TIME: 日付と時刻の形式\n- 3.4 LC_COLLATE: 照合順序\n- 3.5 LC_ALL: トラブルシューティング\n\n- 4.1 設定を変更しても言語が変わらない\n- 4.2 カスタムのロケールを使うと問題が発生する 4.2.1 LC_CTYPE を設定する 4.2.2 Xlib データベースを修正する\n\n- 4.2.1 LC_CTYPE を設定する\n- 4.2.2 Xlib データベースを修正する\n\n"
    },
    {
      "title": "ロケールの生成",
      "level": 2,
      "content": "ロケール名は基本的に language[_territory][.codeset][@modifier] という形式になっています。language は ISO 639 言語コード、territory は ISO 3166 国名コード、codeset は文字集合または ISO-8859-1 や UTF-8 などのエンコーディングです。詳しくは setlocale(3) を参照してください。\n\n利用可能なロケールのリストを確認するには、以下のコマンドを実行:\n\n```\n$ locale -a\n```\n\nシステムでロケールを利用するには、まず生成する必要があります。/etc/locale.gen の中の適当なエントリをアンコメントして locale-gen を実行することで生成できます。同じく、エントリをコメントアウトするとロケールは無効になります。変更するときは、システム上の他のユーザーが必要としている言語や特定の変数にも注意してください。\n\n例えば日本語の ja_JP.UTF-8 UTF-8 をアンコメントする場合:\n\n```\n/etc/locale.gen\n```\n\n```\n...\n#ja_JP.EUC-JP EUC-JP\nja_JP.UTF-8 UTF-8\n#ka_GE.UTF-8 UTF-8\n...\n```\n\nファイルを保存して、ロケールを生成:\n\n```\n# locale-gen\n```\n\n- locale-gen は glibc のアップデート時に毎回実行されます [1]。\n- UTF-8 を使用することが推奨されています [2]。\n\n"
    },
    {
      "title": "ロケールの設定",
      "level": 2,
      "content": "現在設定されているロケールと関連する環境設定を確認するには:\n\n```\n$ locale\n```\n\n使用するロケールは locale.conf ファイルに設定します。ファイルの中では1行毎に環境変数を設定します。locale の出力と同じフォーマットです。\n\n生成済みの利用可能なロケールを確認するには:\n\n```\n$ localedef --list-archive\n```\n\nもしくは localectl(1) を使用:\n\n```\n$ localectl list-locales\n```\n\n"
    },
    {
      "title": "システム全体のロケールを設定する",
      "level": 3,
      "content": "システム全体のロケールを設定するには LANG 変数を /etc/locale.conf に書き込みます。使用するロケールは /etc/locale.gen でアンコメントしたエントリの最初のカラムと同じです:\n\n```\n/etc/locale.conf\n```\n\n```\nLANG=ja_JP.UTF-8\n```\n\n/etc/locale.conf を修正する代わりに、以下のコマンドを実行することでも設定可能:\n\n```\n# localectl set-locale LANG=ja_JP.UTF-8\n```\n\n他の設定など詳しくは変数や locale.conf(5) を参照。\n\n"
    },
    {
      "title": "ユーザーセッションでシステムロケールを上書き",
      "level": 3,
      "content": "システム全体のロケールは ~/.config/locale.conf (または $XDG_CONFIG_HOME/locale.conf や $HOME/.config/locale.conf) を作成・編集することでユーザーセッションで上書きできます。\n\nlocale.conf ファイルの優先順位は /etc/profile.d/locale.sh で定義されています。\n\n- /var/log のログは英語のままで、ユーザー環境では自分の言語を使うということが可能です。\n- /etc/skel/.config/locale.conf ファイルを作成することで useradd と -m オプションで追加された新しいユーザーの ~/.config/locale.conf が自動的に生成されます。\n\n"
    },
    {
      "title": "ロケールを即座に変更する",
      "level": 3,
      "content": "システムやユーザーの locale.conf ファイルを作成・編集した場合、新しく設定した値は次にログインしたときに有効になります。新しい設定をすぐに使うには LANG の設定を解除して /etc/profile.d/locale.sh を source してください:\n\n```\n$ unset LANG\n$ source /etc/profile.d/locale.sh\n```\n\n"
    },
    {
      "title": "他の使用方法",
      "level": 3,
      "content": "環境変数で説明されている方法でロケール変数を定義することも可能です。\n\n例えば、開発中に特定のアプリケーションをテスト・デバッグしたいとき、以下のように起動することができます:\n\n```\n$ LANG=C ./my_application.sh\n```\n\n同じく、現在のシェルから実行する全てのプロセルにロケールを設定するには (例えば、システムのインストール中などに使うと有用です):\n\n```\n$ export LANG=C\n```\n\n"
    },
    {
      "title": "変数",
      "level": 2,
      "content": "locale.conf ファイルは以下の環境変数をサポートしています:\n\n- LANG\n- LANGUAGE\n- LC_ADDRESS\n- LC_COLLATE\n- LC_CTYPE\n- LC_IDENTIFICATION\n- LC_MEASUREMENT\n- LC_MESSAGES\n- LC_MONETARY\n- LC_NAME\n- LC_NUMERIC\n- LC_PAPER\n- LC_TELEPHONE\n- LC_TIME\n\n上記の LC_* 変数の意味は locale(7) の man ページに、詳しい説明は locale(5) の man ページに存在します。\n\n{{Note|複数の環境変数が設定されている場合の優先順位は [GNU gettext のドキュメント]に述べられています。\n\n"
    },
    {
      "title": "LANG: デフォルトロケール",
      "level": 3,
      "content": "この変数で設定されたロケールは LC_* 変数全てで使われます (明示的に別のロケールを設定した場合はそちらが優先されます)。\n\n例えば、数値や日付などはスペイン語表記にしつつメッセージを英語で表示するには、LANG を es_ES.UTF-8 に、LC_MESSAGES を en_US.UTF-8 に設定します。\n\n"
    },
    {
      "title": "LANGUAGE: フォールバックロケール",
      "level": 3,
      "content": "gettext を使って翻訳されたプログラムは通常の変数に加えて LANGUAGE オプションも認識します。ユーザーは ロケールの使用順序 を指定することが可能です。もし一番使用したい言語が使えない場合、デフォルトのロケールの代わりに別の似たようなロケールが使われます。例えば、アメリカ流の綴りよりも英国流の綴りを好むオーストラリアのユーザーの場合:\n\n```\nlocale.conf\n```\n\n```\nLANG=en_AU.UTF-8\nLANGUAGE=en_AU:en_GB:en\n```\n\n"
    },
    {
      "title": "LC_TIME: 日付と時刻の形式",
      "level": 3,
      "content": "例えば LC_TIME が en_US.UTF-8 に設定されていた場合、日付フォーマットは \"MM/DD/YYYY\" になります。ISO 8601 の日付フォーマットである \"YYYY-MM-DD\" を使いたい場合:\n\n```\nlocale.conf\n```\n\n```\nLC_TIME=en_DK.UTF-8\n```\n\n"
    },
    {
      "title": "LC_COLLATE: 照合順序",
      "level": 3,
      "content": "ソートや正規表現で使われる照合順序を管理する変数です。\n\n例えば値を C に設定することで ls コマンドはドットファイルを先に表示して、大文字・小文字のファイル名を後にします:\n\n```\nlocale.conf\n```\n\n```\nLC_COLLATE=C\n```\n\n詳しくは [3] を参照してください。\n\n潜在的な問題を回避するため、Arch では以前 /etc/profile で LC_COLLATE=C と設定していましたが、現在は使われなくなっています。\n\n"
    },
    {
      "title": "LC_ALL: トラブルシューティング",
      "level": 3,
      "content": "この変数で設定されたロケールは常に LANG と他の LC_* 変数よりも優先して使われます。\n\nLC_ALL は locale.conf ファイルで設定できない唯一の LC_* 変数です。あくまで /etc/profile などで使うテスト用あるいはトラブルシューティング用の変数です。\n\n"
    },
    {
      "title": "トラブルシューティング",
      "level": 2,
      "content": "エンコードの問題については 文字コード#トラブルシューティング を確認してください。\n\n"
    },
    {
      "title": "設定を変更しても言語が変わらない",
      "level": 3,
      "content": "locale.conf 以外の他のファイルによって環境変数が再定義されている可能性があります。詳しくは環境変数#変数の定義を参照してください。\n\nGNOME などのデスクトップ環境を使用している場合、locale.conf の設定がデスクトップ環境の言語設定で上書きされることがあります。\n\nKDE Plasma も UI の言語を Plsama 側で変更できます。変更後にもデフォルト言語が表示されている場合、[4] にあるように ~/.config/plasma-localerc (以前は ~/.config/plasma-locale-settings.sh でした) を削除すると解決するはずです。\n\nディスプレイマネージャを accountsservice と組み合わせて使っている場合、ディスプレイマネージャ#ユーザセッションで使う言語を設定する の指示に従ってください。\n\nLightDM は、accountsservice がインストールされている場合、自動的に accountsservice を使用してユーザのロケールを設定します。インストールされていない場合、LightDM はユーザセッションの設定を ~/.dmrc 内に保存します。望まないロケールの設定がそのファイルから取得されている可能性もあります。\n\n"
    },
    {
      "title": "カスタムのロケールを使うと問題が発生する",
      "level": 3,
      "content": "公式にサポートされていないロケール (例: locale-en_xxAUR) をインストールすると、次のようないくつかの問題が発生する可能性があります: デッドキー (compose キー) が一部のアプリケーションで機能しない、ロケールが存在しないとアプリケーションが報告する。 これらの問題を解決するために、カスタムのロケールをインストールした後に手動の介入が必要になります。 2つのアプローチがあります (en_XX.UTF-8 は任意のカスタムロケールに置き換えてください):\n\n"
    },
    {
      "title": "LC_CTYPE を設定する",
      "level": 4,
      "content": "LC_CTYPE を公式にサポートされているロケール (例えば en_US.UTF-8) に設定します。例えば:\n\n```\n/etc/locale.conf\n```\n\n```\nLANG=en_XX.UTF-8\nLC_CTYPE=en_US.UTF-8\n```\n\n"
    },
    {
      "title": "Xlib データベースを修正する",
      "level": 4,
      "content": "以下を追加して Xlib データベースを修正します:\n\n```\n/usr/share/X11/locale/locale.dir\n```\n\n```\nen_US.UTF-8/XLC_LOCALE en_XX.UTF-8\nen_US.UTF-8/XLC_LOCALE: en_XX.UTF-8\n```\n\n```\n/usr/share/X11/locale/compose.dir\n```\n\n```\nen_US.UTF-8/Compose en_XX.UTF-8\nen_US.UTF-8/Compose: en_XX.UTF-8\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Gentoo Linux ローカリゼーションガイド\n- ICU's interactive collation testing\n- Free Standards Group Open Internationalisation Initiative\n- The Single UNIX Specification definition of Locale by The Open Group\n- Locale environment variables\n\n"
    }
  ]
}