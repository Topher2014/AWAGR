{
  "title": "Kernels/Compilation/Traditional (日本語)",
  "url": "https://wiki.archlinux.org/title/Kernels/Compilation/Traditional_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "この記事では、kernel.org のソースからカスタムカーネルをビルドする方法を紹介します。この方法は、全てのディストリビューションで共通の伝統的な方法です。あなたの経験量にもよりますが、カーネル/Arch build system を用いる方法よりも複雑です。Arch Build System のツールは、繰り返されるコンパイルタスクを効率的かつ安全にするために開発されメンテナンスされているということを考慮に入れておいてください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 準備 1.1 コアパッケージをインストールする 1.2 カーネルコンパイル用のディレクトリを作成する 1.3 カーネルのソースをダウンロードする 1.3.1 準公式カーネルミラー 1.4 カーネルのソースを展開する\n- 2 カーネルの設定 2.1 Arch のデフォルト設定 2.2 高度な設定\n- 3 コンパイル\n- 4 インストール 4.1 モジュールをインストールする 4.2 カーネルを /boot ディレクトリにコピーする 4.3 初期 RAM ディスクを作成する 4.3.1 自動化されたプリセットを用いる方法 4.3.2 手動による方法 4.4 System.map をコピーする\n- 5 ブートローダの設定\n- 6 参照\n\n- 1.1 コアパッケージをインストールする\n- 1.2 カーネルコンパイル用のディレクトリを作成する\n- 1.3 カーネルのソースをダウンロードする 1.3.1 準公式カーネルミラー\n- 1.4 カーネルのソースを展開する\n\n- 1.3.1 準公式カーネルミラー\n\n- 2.1 Arch のデフォルト設定\n- 2.2 高度な設定\n\n- 4.1 モジュールをインストールする\n- 4.2 カーネルを /boot ディレクトリにコピーする\n- 4.3 初期 RAM ディスクを作成する 4.3.1 自動化されたプリセットを用いる方法 4.3.2 手動による方法\n- 4.4 System.map をコピーする\n\n- 4.3.1 自動化されたプリセットを用いる方法\n- 4.3.2 手動による方法\n\n"
    },
    {
      "title": "準備",
      "level": 2,
      "content": "カーネルの準備では root アカウントや root 権限 (つまり、sudo) を使う必要はありませんし、推奨されてもいません。\n\n"
    },
    {
      "title": "コアパッケージをインストールする",
      "level": 3,
      "content": "base-devel メタパッケージをインストールしてください。これにより、make や gcc などの必須パッケージがインストールされます。デフォルトの Arch カーネルの PKGBUILD に記載されている次のパッケージもインストールすることを推奨します: xmlto、kmod、inetutils、bc、libelf、git、cpio、perl、tar、xz。\n\n"
    },
    {
      "title": "カーネルコンパイル用のディレクトリを作成する",
      "level": 3,
      "content": "あなたのカーネル用の個別のビルドディレクトリを作成することをおすすめします。以下の例では home ディレクトリに kernelbuild を作成します:\n\n```\n$ mkdir ~/kernelbuild\n```\n\n"
    },
    {
      "title": "カーネルのソースをダウンロードする",
      "level": 3,
      "content": "https://www.kernel.org からカーネルのソースをダウンロードしてください。カーネルのソースファイルは、あなたが選んだカーネルの tarball (.tar.xz) ファイルの形であるはずです。\n\nブラウザから tar.xz (tarball) リンクを右クリックしてダウンロードすることもできますし、HTTP や TFTP、Rsync、Git を使用するグラフィカルツールやコマンドラインツールでもダウンロードできます。\n\n- ダウンロードしたカーネルの tarball の PGP 署名を検証するのは良いアイデアです。そうすれば、そのファイルが正規のものであることを確実にでき、信用の輪 (Web of Trust) を構築するのに役立ちます。kernel.org/signature を参照してください。\n- 特定のリリース (例: -rc リリース) では、ダウンロードしたアーカイブと展開後のディレクトリが、このページの例で使用されている A.B.C という命名形式に厳密には従っていません。必要に応じて調整してください。\n\n以下のコマンドでは、wget がインストールされていて、~/kernelbuild 内で wget を使ってカーネル A.B.C を取得しています:\n\n```\n$ cd ~/kernelbuild\n$ wget https://cdn.kernel.org/pub/linux/kernel/vA.x/linux-A.B.C.tar.xz\n```\n\nダウンロードしたファイルを信頼する前に、そのファイルの正しさを検証するべきです。まず、署名をダウンロードし、その署名を使って署名鍵のフィンガープリントを入手します。そして、そのフィンガープリントを使って実際の署名鍵を入手します:\n\n```\n$ wget https://cdn.kernel.org/pub/linux/kernel/vA.x/linux-A.B.C.tar.sign\n$ gpg --list-packets linux-A.B.C.tar.sign\n$ gpg --recv-keys 前のコマンドで入手したフィンガープリント\n```\n\n注意点として、この署名は tar アーカイブ (つまり、拡張子 .tar) に対して生成されたものであって、圧縮された .tar.xz ファイルのものではありません。.tar.xz ファイルを .tar へ展開する必要があります。xz がインストールされていることを確認してください。インストールされていれば、以下のようにできます:\n\n```\n$ unxz linux-A.B.C.tar.xz\n$ gpg --verify linux-A.B.C.tar.sign linux-A.B.C.tar\n```\n\nこのコマンドで \"Good signature\" という文字列を含む出力が出てこなかった場合、この先に進んではなりません。\n\nwget をビルドディレクトリ内で使わなかった場合、tarball をビルドディレクトリ内へ移動する必要があります。例えば:\n\n```\n$ mv /path/to/linux-A.B.C.tar.xz ~/kernelbuild/\n```\n\n"
    },
    {
      "title": "準公式カーネルミラー",
      "level": 4,
      "content": "いくつかの kernel.org Git リポジトリの準公式ミラーがそれぞれのメンテナによって提供されています。これらのミラーは kernel.org よりも clone が速い傾向にあります。\n\n- メインラインブランチは Linus Torvalds の GitHub アカウントでミラーリングされています: https://github.com/torvalds/linux.git 。\n- 安定ブランチは Greg Kroah-Hartman の GitHub アカウントでミラーリングされています: https://github.com/gregkh/linux 。[1]\n\n"
    },
    {
      "title": "カーネルのソースを展開する",
      "level": 3,
      "content": "ビルドディレクトリ内で、カーネルの tarball を展開してください:\n\n```\n$ tar -xvf linux-A.B.C.tar\n```\n\nパーミッションエラーが発生しないことを確実にするには、chown を実行してフォルダの所有者を現在のユーザに変更する必要があります。\n\nフォルダとその中の全ファイルの所有者を現在のユーザに変更するには、chown コマンドを実行してください。\n\n```\n$ chown -R $USER:$USER linux-A.B.C\n```\n\nこれにより、フォルダ内の全ファイルの所有者があなたになりました。なので、パーミッション関連のエラーは発生しません。\n\n準備を終える前に、カーネルツリーが絶対的にクリーンであることを確認してください。解凍後のソースツリーがクリーンであると思い込んではなりません。確認するには、新しく作成したカーネルソースディレクトリに移動し、make mrproper コマンドを実行してください:\n\n```\n$ cd linux-A.B.C\n$ make mrproper\n```\n\n"
    },
    {
      "title": "カーネルの設定",
      "level": 2,
      "content": "これは、あなたのコンピュータの仕様を正確に反映させるために、デフォルトのカーネルをカスタマイズする作業の中で最も重要なステップです。カーネルの設定 (コンフィグレーション) は .config ファイルで設定されます。このファイルには、カーネルモジュールの使用に関する設定も含まれています。.config 内のオプションを適切に設定すれば、あなたのカーネルとコンピュータを最も効率的に機能させることができます。\n\nカーネルの設定は、以下の2つを組み合わせて行うことができます:\n\n- 公式カーネルの Arch のデフォルト設定を使う (推奨)\n- カーネルオプションを手動で設定する (任意。高度な方法であり、推奨されません)\n\n"
    },
    {
      "title": "Arch のデフォルト設定",
      "level": 3,
      "content": "この方法では、Arch のデフォルトのカーネル設定を使ってカスタムカーネル用の .config ファイルを作成します。標準の Arch カーネルが実行中である場合、カスタムカーネルのソースディレクトリ内で以下のコマンドを実行することで、現在実行中のカーネルの .config ファイルを作成できます:\n\n```\n$ zcat /proc/config.gz > .config\n```\n\nあるいは、オンラインで official Arch Linux カーネルパッケージからデフォルトの設定を入手できます。\n\n- カーネルをアップグレードすると、一部のオプションが変更されたり、削除されたりする場合があります。この場合、#コンパイル 時に make を実行すると、バージョン間で変更された設定オプションに答えるよう尋ねてきます。このプロンプトを表示させずにデフォルトを適用させるには、make olddefconfig を実行してください。\n- modprobed-db を使用することで、不要なモジュールをデフォルトの Arch .config から取り除くことができます。適切に生成されたデータベースを入手できたら、make LSMOD=$HOME/.config/modprobed.db localmodconfig を実行して、modprobed.db データベース内に存在しないモジュールをすべて取り除いてください。\n\n"
    },
    {
      "title": "高度な設定",
      "level": 3,
      "content": "カーネルの設定を調整するためのツールが複数存在します。これらを使えば、何時間も掛けてコンパイル中に利用可能なオプションを1つずつすべて手作業で設定する手間を省けます。\n\n以下がそのツールです:\n\n- make menuconfig: コマンドライン ncurses インターフェイス。nconfig が後継です。\n- make nconfig: より新しい、コマンドライン用の ncurses インターフェイス。\n- make xconfig: ユーザーフレンドリーなグラフィカルインターフェイス。依存パッケージとして packagekit-qt5 をインストールする必要があります。簡単に操作でき、各オプションの情報も表示されるので、(特に初心者に) おすすめです。\n- make gconfig: グラフィカルな設定方法。xconfig に似ていますが、GTK を使用します。gtk2、glib2、そして libgladeAUR を必要とします。\n\nカーネルソースディレクトリの中で上記のどれかのコマンドを実行してください。新しい .config ファイルが作成されるか、既存のファイルが上書きされます。任意の設定は全て自動的に有効になりますが、新しい設定オプションは自動的に選択されない場合があります (古いカーネル .config を使用した場合)。\n\n変更を加えたら .config ファイルを保存してください。ソースディレクトリの外にバックアップすると良いでしょう。すべてのオプションを適切に設定するまで、複数回これを繰り返す必要があるかもしれません。\n\n設定がよくわからない場合は、少しずつオプションを変更してコンパイルしてください。ビルドしたカーネルで起動できない場合、ここに必須のコンフィグアイテムのリストが存在します。\n\nライブメディアから lspci -k # を実行すると、使用中のカーネルモジュールの名前のリストが出力されます。一番重要なのは、cgroups サポートを維持しなければならないことです。これは systemd に必要不可欠です。詳細は、Gentoo:Kernel/Gentoo Kernel Configuration Guide、Gentoo:Intel#Kernel (Intel プロセッサ)、Gentoo:Ryzen#Kernel (AMD Ryzen プロセッサ) を参照してください。\n\n"
    },
    {
      "title": "コンパイル",
      "level": 2,
      "content": "- Processor type and features > Processor Family で選択した CONFIG_MK8,CONFIG_MPSC,CONFIG_MCORE2,CONFIG_MATOM,CONFIG_GENERIC_CPU を探してください。\n- call cc-options フラグを -march=native から、Processor Family で選択したものへ変えてください。例: cflags-$(CONFIG_MK8) += $(call cc-option,-march=native)。これは、-march=native でコンパイルする場合におそらく一番良い方法です。\n\nコンパイルにかかる時間は15分程度から1時間以上まで幅広く、設定したカーネルコンフィグやプロセッサの性能によって大きく変わります。カスタムカーネルの .config ファイルを設定したら、ソースディレクトリの中で以下のコマンドを実行するとコンパイルが始まります:\n\n```\n$ make\n```\n\n"
    },
    {
      "title": "モジュールをインストールする",
      "level": 3,
      "content": "カーネルがコンパイルできたら、次はモジュールです。まず、モジュールをビルドしてください:\n\n```\n$ make modules\n```\n\n次に、モジュールをインストールしてください。root として、あるいは root 権限で、以下のコマンドを実行してください:\n\n```\n# make modules_install\n```\n\nこれで、コンパイルされたモジュールが /lib/modules/A.B.C/ へコピーされます。これにより、使用されるカーネル毎にモジュールが分けられるようになっています。\n\n"
    },
    {
      "title": "カーネルを /boot ディレクトリにコピーする",
      "level": 3,
      "content": "カーネルをコンパイルすると、カーネルの圧縮された bzImage (big zImage) が生成されます。生成されない場合、以下を実行する必要があります:\n\n```\nmake bzImage\n```\n\nこのファイルは /boot ディレクトリにコピーして名前を変える必要があります。名前に vmlinuz- という接頭辞を付ければ、好きな名前を付けることができます。以下の例では、コンパイルされ、インストールされた A.B.C カーネルがコピーされ、vmlinuz-linuxAB という名前に変更されます:\n\n```\n# cp -v arch/x86/boot/bzImage /boot/vmlinuz-linuxAB\n```\n\n"
    },
    {
      "title": "初期 RAM ディスクを作成する",
      "level": 3,
      "content": "初期 RAM ディスクが何なのか知らない場合は Wikipedia や mkinitcpio を見てください。\n\n"
    },
    {
      "title": "自動化されたプリセットを用いる方法",
      "level": 4,
      "content": "既存の mkinitcpio プリセットをコピーして変更を加えることで公式カーネルと同じようにカスタムカーネルの initramfs イメージを生成できます。カーネルを再コンパイルする場合などに有用です (例: アップデートする場合など)。以下の例では、標準の Arch カーネルのプリセットファイルをコピーして、上でインストールしたカーネル A.B.C 用に変更を加えます。\n\nまず、既存のプリセットファイルをコピーして、bzImage をコピーしたときに /boot/vmlinuz- の後ろにつけたカスタムカーネルの名前と一致するように名前を変更してください:\n\n```\n# cp /etc/mkinitcpio.d/linux.preset /etc/mkinitcpio.d/linuxAB.preset\n```\n\n次に、ファイルを編集してカスタムカーネル用に変更します。ALL_kver= パラメータも bzImage をコピーしたときに付けたカスタムカーネルの名前と合わせる必要があります:\n\n```\n/etc/mkinitcpio.d/linuxAB.preset\n```\n\n```\n...\nALL_kver=\"/boot/vmlinuz-linuxAB\"\n...\ndefault_image=\"/boot/initramfs-linuxAB.img\"\n...\nfallback_image=\"/boot/initramfs-linuxAB-fallback.img\"\n```\n\n最後に、公式カーネルと同じようにカスタムカーネルの initramfs イメージを生成してください:\n\n```\n# mkinitcpio -p linuxAB\n```\n\n"
    },
    {
      "title": "手動による方法",
      "level": 4,
      "content": "プリセットファイルを使用する以外にも、mkinitcpio を使って手動で initramfs ファイルを生成することもできます。コマンドの構文は以下の通りです:\n\n```\n# mkinitcpio -k kernel_version -g /boot/initramfs-file_name.img\n```\n\n- -k (--kernel kernel_version): initramfs イメージを生成する際に用いるモジュールを指定します。kernel_version は、カスタムカーネルのモジュールディレクトリ (/usr/lib/modules/ 内にあるディレクトリ) の名前と同じにします (カーネルイメージへのパスも使用できます)。\n- -g (--generate file_name): /boot ディレクトリに生成する initramfs ファイルの名前を指定します。上記の命名規則を使うことを推奨します。\n\n例えば、上でインストールした A.B.C カスタムカーネルの場合のコマンドは以下のようになります:\n\n```\n# mkinitcpio -k A.B.C -g /boot/initramfs-linuxAB.img\n```\n\n"
    },
    {
      "title": "System.map をコピーする",
      "level": 3,
      "content": "System.map ファイルは Linux を起動するのに必ずしも必須ではありません。一種の\"電話帳\"みたいなもので、カーネルの特定のビルドの機能が記載されています。System.map にはカーネルのシンボルの一覧 (つまり、関数名や変数名など) とそれぞれのアドレスが含まれます。この \"シンボル名とアドレスの対応表\" を使うのは:\n\n- klogd や ksymoops などの一部プロセス\n- カーネルのクラッシュ中に情報 (つまり、どの関数でクラッシュしたかなど) をスクリーンへ出力するために OOPS ハンドラによって使用されます。\n\n/boot がシンボリックリンクをサポートしているファイルシステム (つまり FAT32 以外のファイルシステム) 上にある場合、System.map を /boot にコピーして、カーネルの名前をコピー先のファイルの名前の後ろに加えてください。それから /boot/System.map から /boot/System.map-linuxAB にシンボリックリンクを作成してください:\n\n```\n# cp System.map /boot/System.map-linuxAB\n# ln -sf /boot/System.map-linuxAB /boot/System.map\n```\n\n以上の全ての手順を完了したら、以下の3つのファイルと1つのシンボリックリンクがあなたの /boot ディレクトリに追加されているはずです:\n\n- カーネル: vmlinuz-linuxAB\n- Initramfs: initramfs-linuxAB.img\n- System Map: System.map-linuxAB\n- System Map のカーネルのシンボリックリンク: System.map (System.map-linuxAB へのシンボリックリンク)\n\n"
    },
    {
      "title": "ブートローダの設定",
      "level": 2,
      "content": "ブートローダの設定ファイルに新しいカーネルのエントリを追加してください。利用可能なブートローダは Arch ブートプロセス#機能比較 を、その他の情報は関連する wiki ページを参照してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- https://cateee.net/lkddb/web-lkddb/ : カーネル設定の文字列とその説明のアルファベット順の包括的なリストがあります。\n\n"
    }
  ]
}