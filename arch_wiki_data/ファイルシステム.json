{
  "title": "ファイルシステム",
  "url": "https://wiki.archlinux.org/title/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- パーティショニング\n- デバイスファイル#lsblk\n- ファイルのパーミッションと属性\n- fsck\n- fstab\n- アプリケーション一覧/ユーティリティ#マウントツール\n- QEMU#raw イメージからパーティションをマウントする\n- udev\n- udisks\n- umask\n- USB ストレージデバイス\n\nWikipedia より:\n\n個々のドライブパーティションに、多くのファイルシステムのなかから1つを設定することができます。ファイルシステムはそれぞれにメリット、デメリット、特徴があります。ここではサポートされているファイルシステムの概要を記述します。より多くの情報を見るには Wikipedia へのリンクを辿って下さい。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ファイルシステムのタイプ 1.1 ジャーナリング 1.2 FUSE ベースのファイルシステム 1.3 スタック可能なファイルシステム 1.4 読み取り専用のファイルシステム 1.5 クラスタ化ファイルシステム 1.6 共有ディスクファイルシステム\n- 2 既存のファイルシステムを特定する\n- 3 ファイルシステムを作成する\n- 4 ファイルシステムのマウント 4.1 マウントしたファイルシステムの一覧表示 4.2 ファイルシステムのアンマウント\n- 5 トラブルシューティング 5.1 \"linux Structure needs cleaning\"\n- 6 参照\n\n- 1.1 ジャーナリング\n- 1.2 FUSE ベースのファイルシステム\n- 1.3 スタック可能なファイルシステム\n- 1.4 読み取り専用のファイルシステム\n- 1.5 クラスタ化ファイルシステム\n- 1.6 共有ディスクファイルシステム\n\n- 4.1 マウントしたファイルシステムの一覧表示\n- 4.2 ファイルシステムのアンマウント\n\n- 5.1 \"linux Structure needs cleaning\"\n\n"
    },
    {
      "title": "ファイルシステムのタイプ",
      "level": 2,
      "content": "一般的な概要については filesystems(5) を、詳細な機能の比較については Wikipedia:Comparison of file systems を参照してください。カーネルによってすでにロードされている、あるいは組み込まれているファイルシステムは、/proc/filesystems にリストアップされています。一方、インストールされているモジュールは ls /lib/modules/$(uname -r)/kernel/fs ですべて見ることができます。\n\nTable content:\nファイルシステム | 作成コマンド | ユーザースペースユーティリティ | Archiso [1] | カーネルのドキュメント [2] | 備考\nBcachefs | bcachefs(8) | bcachefs-tools | Yes | [3] | Linux 6.7 から利用可能 (実験的)。\nBtrfs | mkfs.btrfs(8) | btrfs-progs | Yes | btrfs.html | 安定性に関する状況\nVFAT | mkfs.fat(8) | dosfstools | Yes | vfat.html | Windows 9x のファイルシステム。一般的に、USB フラッシュドライブや SD カードで用いられます。\nexFAT | mkfs.exfat(8) | exfatprogs | Yes |  | Linux 5.4 のネイティブのファイルシステム。[4] 一般的に、USB フラッシュドライブや SD カードで用いられます。\nmkexfatfs(8) | exfat-utils | No | N/A (FUSE ベース) | \nF2FS | mkfs.f2fs(8) | f2fs-tools | Yes | f2fs.html | フラッシュメモリベースのデバイス。縮小することはできません。\next3 | mkfs.ext3(8) | e2fsprogs | Yes | ext3.html | \next4 | mkfs.ext4(8) | e2fsprogs | Yes | ext4.html | \nHFS | mkfs.hfsplus(8) | hfsprogsAUR | No | hfs.html | Classic Mac OS のファイルシステム\nHFS+ | mkfs.hfsplus(8) | hfsprogsAUR | No | hfsplus.html | macOS (8–10.12) のファイルシステム\nJFS | mkfs.jfs(8) | jfsutils | Yes | jfs.html | \nNILFS2 | mkfs.nilfs2(8) | nilfs-utils | Yes | nilfs2.html | 基本的にフラッシュベースのデバイスで用いることを意図しています。xattrs と ACL はサポートされていません。\nNTFS |  |  | Yes | ntfs3.html | Windows NT のファイルシステム。新しいドライバ。Linux 5.15 から利用可能。\nmkfs.ntfs(8) | ntfs-3g | Yes | N/A (FUSE ベース) | 拡張機能付き FUSE ドライバ。\nReiserFS | mkfs.reiserfs(8) | reiserfsprogsAUR | No |  | Linux 5.18 から非推奨となっており、Linux 6.13 で削除されました。\nUDF | mkfs.udf(8) | udftools | Yes | udf.html | ディスクイメージや DVD/ブルーレイ用の ISO/IEC 13346 ファイルシステム。\nXFS | mkfs.xfs(8) | xfsprogs | Yes | xfs.html xfs-delayed-logging-design.html xfs-self-describing-metadata.html | 縮小不可\n\nxfs.html xfs-delayed-logging-design.html xfs-self-describing-metadata.html\n\nTable content:\nファイルシステム | 作成コマンド | カーネルパッチセット | ユーザースペースユーティリティ | 備考\nAPFS | mkapfs(8) | linux-apfs-rw-dkms-gitAUR | apfsprogs-gitAUR | macOS (10.13 およびそれ以降) のファイルシステム。読み取り専用。書き込みサポートは試験的。Fuse バージョンの apfs-fuse-gitAUR も参照。\nReiser4 | mkfs.reiser4(8) |  | reiser4progsAUR | \nZFS |  | zfs-linuxAUR, zfs-dkmsAUR | zfs-utilsAUR | OpenZFS 移植\n\n"
    },
    {
      "title": "ジャーナリング",
      "level": 3,
      "content": "ext3/4、HFS+、JFS、NTFS、ReiserFS、XFS ファイルシステムはジャーナリングを使用します。ジャーナリングは、変更をファイルシステムにコミットする前にログに記録することで、障害に対する耐性を提供します。システムクラッシュや停電が発生した場合、こうしたファイルシステムはより迅速にオンラインに戻り、データが破損する可能性が低くなります。ログ記録はファイルシステム内の専用領域で行われます。\n\next3/4 はデータモードジャーナリングを提供しており、任意でメタデータに加えてデータもログに記録できます。データモードジャーナリングは書き込み操作を2回行うため (まずジャーナルに、次にディスクに)、速度面でペナルティがあります。そのため、データモードジャーナリングはデフォルトで有効化されていません。ファイルシステムの種類と機能を選ぶ際には、システム速度とデータ安全性とのトレードオフについて検討するべきでしょう。\n\n同様に、Reiser4 は設定可能な「トランザクションモデル」を提供しています。wandering logs と呼ばれる特殊なモデルは、ディスクへ2回書き込む必要がありません。write-anywhere モデルは、純粋なコピーオンライト方式です。hybrid と呼ばれる混合方式は、ヒューリスティックにこれら2つのモデルを切り替えます。\n\nReiser4、Btrfs、Bcachefs、ZFS といったコピーオンライト (別名 write-anywhere) ベースのファイルシステムは、設計上完全にアトミックに動作し、メタデータとインラインデータの両方に対してチェックサムを提供します (操作が不完全に行われることはありません。正常に動作しているハードウェア上では、不完全な操作によってデータが破損することはありません)。なので、これらのファイルシステムは、設計上、他のファイルシステムよりもデータ損失が発生しにくく、メタデータを保護するために従来のジャーナルを使用する必要がありません (メタデータが in-place に更新されることはないからです)。Btrfs は依然としてジャーナルのようなログツリーを使用していますが、fdatasync/fsync の高速化のために使用しているにすぎません。\n\nFAT、exFAT、ext2、HFS はジャーナリングもアトミック性も提供していません。これらのファイルシステムは、一時的な使用あるいは古いシステムのためのものであり、信頼できるストレージが必要である場合に使用することは推奨されません。\n\n"
    },
    {
      "title": "FUSE ベースのファイルシステム",
      "level": 3,
      "content": "FUSE を見てください。\n\n"
    },
    {
      "title": "スタック可能なファイルシステム",
      "level": 3,
      "content": "- eCryptfs — Enterprise Cryptographic Filesystem は Linux 用のディスク暗号化ソフトウェアのパッケージです。これは POSIX 準拠のファイルシステムレベルの暗号化レイヤとして実装され、オペレーティングシステムレベルで GnuPG と同様の機能を提供することを目的としています。\n\n- mergerfs — FUSE ベースの union ファイルシステムです。\n\n- mhddfs — FUSE ベースの union ファイルシステムである Multi-HDD FUSE ファイルシステム。\n\n- overlayfs — OverlayFS は Linux 用のファイルシステムサービスで、他のファイルシステムの union マウントを実装しています。\n\n- unionfs-fuse — ユーザースペース Unionfs の実装。\n\n"
    },
    {
      "title": "読み取り専用のファイルシステム",
      "level": 3,
      "content": "- DwarFS — DwarFS は、Linux と Windows 用の高速で高圧縮率の読み取り専用ファイルシステムです。DwarFS は、多かれ少なかれ SquashFS と同じ機能をサポートしていますが、より圧縮に優れており、ハッシュアルゴリズムをカスタム可能です。\n\n- EROFS — Enhanced Read-Only File System は、パフォーマンスの向上とストレージ容量の圧縮を目的とした軽量の読み取り専用ファイルシステムです。\n\n- SquashFS — SquashFS は、読み取り専用の圧縮ファイルシステムです。SquashFS はファイル、inodes、ディレクトリーを圧縮し、さらに大きな圧縮のために最大 1 MiB のブロック・サイズをサポートします。\n\n"
    },
    {
      "title": "クラスタ化ファイルシステム",
      "level": 3,
      "content": "- BeeGFS — 高パフォーマンスコンピューティングのために開発・最適化された並列ファイルシステム。\n\n- Ceph — 優れたパフォーマンス、信頼性、拡張性を実現するように設計された、統合された分散ストレージシステム。\n\n- GlusterFS — 数ペタバイトまで拡張可能なクラスタファイルシステム。\n\n- IPFS — Web を高速化、安全化、およびオープン化するためのピアツーピアハイパーメディアプロトコル。IPFS は HTTP に取って代わり、私たち全員のためにより良いウェブを構築することを目指しています。ブロックを使用してファイルの一部を保存し、各ネットワーク・ノードは関心のあるコンテンツのみを保存し、重複除外、分散、拡張性の高いシステムをユーザーのみに制限 (現在はアルファ版)\n\n- MinIO — MinIO は高パフォーマンスな S3 互換のオブジェクトストレージを提供します。\n\n- MooseFS — MooseFS は、耐障害性で可用性が高い、高性能なスケールアウトネットワーク分散ファイルシステムです。\n\n- OpenAFS — AFS 分散ファイルシステムのオープンソース実装。\n\n- OrangeFS — OrangeFS は、マルチサーバ・ベースのディスク・ストレージに透過的に並列アクセスするために設計されたスケール・アウト・ネットワーク・ファイル・システムです。並列および分散アプリケーション向けに最適化された MPI-IO のサポート。Linux クライアントだけでなく、Windows、Hadoop、WebDAV 用の並列ストレージの使用を簡素化します。POSIX 互換です。バージョン4.6以降のLinux カーネルに含まれます。\n\n- Sheepdog — ボリュームおよびコンテナサービス用の分散オブジェクトストレージシステムで、ディスクとノードをインテリジェントに管理します。\n\n- Tahoe-LAFS — Tahoe Least-Authority File Store は、フリーでオープン、安全、分散、耐障害性、ピアツーピア分散データストアおよび分散ファイルシステムです。\n\n"
    },
    {
      "title": "共有ディスクファイルシステム",
      "level": 3,
      "content": "- GFS2 — GFS2 では、クラスタのすべてのメンバーが同じ共有ブロック・ストレージに直接同時にアクセスできます。\n\n- OCFS2 — Oracle Cluster File System (バージョン2) は、Oracle Corporation によって開発され、GNU General Public License の下でリリースされる共有ディスク・ファイル・システムです。\n\n- VMware VMFS — VMware の VMFS (Virtual Machine File System) は、同社の主力サーバ仮想化スイートである vSphere で使用されているファイルシステムです。\n\n"
    },
    {
      "title": "既存のファイルシステムを特定する",
      "level": 2,
      "content": "lsblk を使って、既存のファイルシステムを特定することができます:\n\n```\n$ lsblk -f\n```\n\n```\nNAME   FSTYPE LABEL     UUID                                 MOUNTPOINT\nsdb\n└─sdb1 vfat   Transcend 4A3C-A9E9\n```\n\n存在する場合、既存のファイルシステムが FSTYPE 列に表示されます。mount されている場合は、MOUNTPOINT 列に表示されます。\n\n"
    },
    {
      "title": "ファイルシステムを作成する",
      "level": 2,
      "content": "ファイルシステムは通常、LVM、RAID、dm-crypt などの論理コンテナ内、パーティション、通常のファイル (Wikipedia:Loop device を参照) に作成されます。このセクションでは、パーティションの場合について説明します。\n\n- 新しいファイルシステムを作成した後、このパーティション上に以前保存されていたデータを復元できる可能性はほとんどありません。保持したいデータのバックアップを作成してください。\n- 特定のパーティションの目的により、ファイルシステムの選択が制限される場合があります。たとえば、 EFI システムパーティション には FAT32 ファイルシステムが含まれている必要があり、 /boot ディレクトリを含むファイルシステムは ブートローダー によってサポートされている必要があります。\n\n続行する前に、ファイルシステムを作成するデバイスを特定し、それがマウントされているかどうかを確認してください。例えば:\n\n```\n$ lsblk -f\n```\n\n```\nNAME   FSTYPE   LABEL       UUID                                 MOUNTPOINT\nsda\n├─sda1                      C4DA-2C4D\n├─sda2 ext4                 5b1564b2-2e2c-452c-bcfa-d1f572ae99f2 /mnt\n└─sda3                      56adc99b-a61e-46af-aab7-a6d07e504652\n```\n\n先に進む前に、マウントされているファイルシステムを アンマウントしなければなりません。上記の例では、既存のファイルシステムは /dev/sda2 にあり、 /mnt にマウントされていますが、マウントを解除する必要があります:\n\n```\n# umount /dev/sda2\n```\n\nマウントされたばかりのファイルシステムを見つける方法は、#マウントしたファイルシステムの一覧表示 を参照してください。\n\n新しいファイルシステムを作成するには、mkfs(8) を使用します。正確なタイプ、および特定のファイルシステムにインストールする可能性のあるユーザースペースユーティリティについては、 #ファイルシステムのタイプ を参照してください。\n\nたとえば、 /dev/sda1 でタイプ ext4 (Linux データパーティションで一般的に使われています) の新しいファイルシステムを作成するには、次のコマンドを実行します:\n\n```\n# mkfs.ext4 /dev/sda1\n```\n\n- mkfs.ext4 の -L フラグを使用して、ファイルシステムラベル を指定できます。e2label を使用して、既存のファイルシステムのラベルを変更できます。\n- ファイルシステムは、特定の制限付きで、作成後に「サイズ変更」できます。たとえば、 XFS ファイルシステムのサイズを増やすことはできますが、減らすことはできません。詳細については、 Wikipedia:ファイルシステムの比較#サイズ変更機能 およびそれぞれのファイルシステムのドキュメントを参照してください。\n\nこれで、新しいファイルシステムを任意のディレクトリにマウントできます。\n\n"
    },
    {
      "title": "ファイルシステムのマウント",
      "level": 2,
      "content": "デバイス(パーティションなど)上にあるファイルシステムを手動でディレクトリにマウントするには、mount(8) を使用します。この例では /dev/sda1 を /mnt にマウントしています。\n\n```\n# mount /dev/sda1 /mnt\n```\n\nこれは /dev/sda1 上のファイルシステムをディレクトリ /mnt にアタッチし、ファイルシステムの内容を見えるようにするものです。この操作の前に /mnt に存在していたデータは、デバイスがアンマウントされるまで不可視状態になります。\n\nfstab には、デバイスが存在する場合に自動的にマウントされる方法に関する情報が含まれています。この動作を変更する方法の詳細については、fstab の記事を参照してください。\n\nデバイスが /etc/fstab で指定されていて、コマンドラインでデバイスかマウントポイントだけが指定された場合、その情報がマウント時に使用されます。例えば、/etc/fstab に /dev/sda1 を /mnt にマウントするという行がある場合、以下は自動的にその場所にデバイスをマウントすることになります。\n\n```\n# mount /dev/sda1\n```\n\nまたは、\n\n```\n# mount /mnt\n```\n\nmount にはいくつかのオプションがあり、その多くは指定されたファイルシステムに依存します。 オプションは以下の方法で変更することができます:\n\n- コマンドラインで mount と共にフラグを使用する\n- fstab を編集する\n- udev ルールを作成する\n- カーネルを自分でコンパイルする\n- ファイルシステム固有のマウントスクリプト (/usr/bin/mount.* にあります) を使用する\n\nより詳しい情報は、これらの関連記事と、興味のあるファイルシステムの記事をご覧下さい。\n\n- ファイルシステムは mount の代わりに systemd-mount でもマウントできます。マウントポイントが指定されていない場合、ファイルシステムは /run/media/system/device_identifier/ にマウントされます。これにより、ファイルシステムをどこにマウントするかを決めることなく、簡単にマウントすることができます。使い方や詳細は systemd-mount(1) を参照してください。\n- 一般ユーザーとしてファイルシステムをマウントする方法については、udisks#使用方法 を見てください。これにより、root 権限や完全なグラフィック環境、udisks を使用するファイルマネージャを用いずにファイルシステムをマウントできるようになります。\n\n"
    },
    {
      "title": "マウントしたファイルシステムの一覧表示",
      "level": 3,
      "content": "マウントされている全てのファイルシステムを一覧表示するには findmnt(8) を使ってください:\n\n```\n$ findmnt\n```\n\nfindmnt は様々な引数を取り、出力をフィルタリングしたり、追加情報を表示したりすることができます。例えば、デバイスやマウントポイントを引数として取り、指定されたものについての情報のみを表示させることができます:\n\n```\n$ findmnt /dev/sda1\n```\n\nfindmnt は /etc/fstab, /etc/mtab, /proc/self/mounts から情報を収集します。\n\n"
    },
    {
      "title": "ファイルシステムのアンマウント",
      "level": 3,
      "content": "ファイルシステムをアンマウントするには umount(8) を使ってください。ファイルシステムがあるデバイス (例:/dev/sda1) かマウントポイント (例:/mnt) のどちらかを指定することが可能です。\n\n```\n# umount /dev/sda1\n```\n\nまたは、\n\n```\n# umount /mnt\n```\n\n"
    },
    {
      "title": "\"linux Structure needs cleaning\"",
      "level": 3,
      "content": "ファイルシステムをアンマウントし、問題のあるボリュームで fsck を実行してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- filesystems(5)\n- systemd-mount(1)\n- Linux によってサポートされているファイルシステムのドキュメント\n- Wikipedia:File systems\n- Wikipedia:Mount (Unix)\n\n"
    }
  ]
}