{
  "title": "Rust (Русский)",
  "url": "https://wiki.archlinux.org/title/Rust_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Rust package guidelines\n\nВикипедия:\n\n"
    },
    {
      "title": "Rust Core Library",
      "level": 3,
      "content": "Rust Core Library — свободная от зависимостей основа стандартной библиотеки Rust. Она напрямую взаимодействует с примитивами LLVM, что позволяет Rust не зависеть от конкретных аппаратных и программных платформ. Именно эта интеграция с LLVM позволяет Rust получить производительность выше чем у эквивалентных приложений на C, скомпилированных с помощью Clang, что делает программы на Rust, разработанные с помощью libcore, более низкоуровневыми, чем на C. Она содержит только типы, не зависящие от платформы, такие как Option, Result и Iterator. Разработчики программ для встраиваемых систем могут отключить использование стандартной библиотеки с помощью #![no_std] и использовать только «безбатареечный» libcore для уменьшения размера скомпилированных программ и повышения производительности. Однако использование #![no_std] ограничивает объём поддержки, которую вы можете получить от сообщества Rust, поскольку большинство библиотек зависят от стандартной библиотеки.\n\n"
    },
    {
      "title": "Rust Standard Library",
      "level": 3,
      "content": "Стандартная библиотека Rust предоставляет удобные абстракции высокого уровня, с помощью которых создаётся большинство переносимых программ на Rust. Например, она содержит типы Vec и String; огромное число методов для примитивов языка; много стандартных макросов; поддержка ввода-вывода и многопоточности; использование кучи (heap) с помощью Box; и многие другие высокоуровневые возможности, не доступные в libcore.\n\n"
    },
    {
      "title": "Цикл выпуска",
      "level": 3,
      "content": "Rust следует шестинедельному циклу выпуска, похожему на цикл выпуска Firefox. С каждым новым выпуском ядро и стандартные библиотеки улучшаются для поддержки большего числа платформ, повышения производительности и стабилизации новых возможностей для использования со стабильной версией Rust.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Есть два варианта установки Rust, один из которых поддерживается Arch Linux, а другой официально поддерживается Rust.\n\n"
    },
    {
      "title": "Из репозитория",
      "level": 3,
      "content": "Для установки последней стабильной версии Rust из официальных репозиториев Arch Linux установите пакет rust. Он установит компилятор rustc и Cargo.\n\nВ AUR также доступна development-версия компилятора. Используйте rust-nightly-binAUR для установки заранее скомпилированных файлов или rust-gitAUR, чтобы собрать компилятор на своей системе.\n\n"
    },
    {
      "title": "С помощью Rustup",
      "level": 3,
      "content": "Официальный и рекомендумемый способ установки Rust для разработки ПО — с помощью инструмента Rustup, написанного на Rust.\n\nПреимуществом использования Rustup вместо обычной установки Rust из репозитория является возможность установки нескольких toolchains (stable, beta, nightly) для нескольких целевых платформ (windows, mac, android) и архитектур (x86, x86_64, arm).\n\n"
    },
    {
      "title": "Официальный установочный скрипт",
      "level": 4,
      "content": "Скачайте скрипт установки командой curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rust.sh, просмотрите его: less ./rust.sh и запустите: ./rust.sh для установки. Этот скрипт вносит изменения в PATH только в настройках оболочки входа. Для применения изменений вам нужно перезайти или выполнить source ~/.cargo/env для обновления PATH в текущей командной оболочке. Для обновления rustup в будущем запускайте rustup self update.\n\nСкрипт устанавливает и активирует инструментарий (toolchain) по умолчанию (тот же, который используется пакетом rust), поэтому нет необходимости устанавливать его вручную, чтобы начать использовать Rust.\n\n"
    },
    {
      "title": "Пакет Arch Linux",
      "level": 4,
      "content": "В официальных репозиториях Arch Linux есть пакет rustup. Обратите внимание, что при установке с помощью этого пакета обновление с помощью rustup self update работать не будет, и для обновления rustup следует обновлять этот пакет с помощью pacman.\n\nПреимущество этого пакета в том, что исполняемые файлы Rust находятся в /usr/bin вместо ~/.cargo/bin, так что менять переменную окружения PATH не требуется.\n\nNote: **не** \n\nДля установки инструментария задайте в rustup интересующую вас версию: stable или nightly.\n\nНапример:\n\n```\n$ rustup default stable\n```\n\n"
    },
    {
      "title": "Использование",
      "level": 4,
      "content": "Вам может потребоваться вручную установить инструментарий, например stable, beta, nightly или 1.58.0. Это также необходимо сделать, если вы хотите использовать/тестировать другой инструментарий.\n\n```\n$ rustup toolchain install toolchain\n```\n\nТеперь вы можете запускать команды Rust, выполняя rustup run toolchain command. Однако, чтобы использовать эти команды напрямую, необходимо активировать инструментарий:\n\n```\n$ rustup default toolchain\n```\n\nПроверим версию Rust с помощью rustc -V :\n\n```\n$ rustc -V\n```\n\n```\nrustc 1.58.0 (02072b482 2022-01-11)\n```\n\n- Rustup не устанавливает некоторые команды Rust, которые есть в пакете rust, такие как rustfmt и rls. Это позволяет сопровождающим Rust поставлять nightly Rust с неработающими rustfmt/rls. Чтобы установить их, запустите rustup component add rustfmt и rustup component add rls соответственно. Это также приостановит обновления nightly, если они сломают rustfmt/rls.\n- Rust не выполняет компоновку самостоятельно, поэтому нужно установить сторонний компоновщик. Вы можете использовать gcc, иначе Rust выдаст error: linker `cc` not found.\n\n"
    },
    {
      "title": "Проверка после установки",
      "level": 3,
      "content": "Давайте убедимся, что Rust установился корректно, написав простую программу:\n\n```\n~/hello.rs\n```\n\n```\nfn main() {\n     println!(\"Hello, World!\");\n }\n```\n\nЗатем скомпилируйте её с помощью rustc, введя это:\n\n```\n$ rustc hello.rs && ./hello\n```\n\n```\nHello, World!\n```\n\n"
    },
    {
      "title": "С помощью rustup",
      "level": 3,
      "content": "Использовать кросс-компиляцию с rustup очень легко. Он поддерживает очень много целевых платформ. Полный их список можно увидеть с помощью команды rustup target list.\n\nНапример, если вы хотите использовать stable Rust для Windows с компилятором GNU, сделайте следующее:\n\n```\n$ rustup toolchain install stable-x86_64-pc-windows-gnu\n```\n\nЭта команда установит только rust и инструменты для вашей целевой платформы, и для кросс-компиляции нужно сделать ещё несколько вещей.\n\n"
    },
    {
      "title": "Windows",
      "level": 3,
      "content": "В этом разделе $ARCH будет целевой архитектурой (x86_64 или i686).\n\n1. Установите пакет mingw-w64-gcc.\n1. Выполните rustup target add $ARCH-pc-windows-gnu чтобы установить стандартную библиотеку Rust для целевой архитектуры.\n1. Подскажите cargo, где искать MinGW-w64 gcc/ar добавлением следующих параметров в ~/.cargo/config (создайте файл, если он отсутствует):\n\n```\n~/.cargo/config\n```\n\n```\n[target.$ARCH-pc-windows-gnu]\nlinker = \"/usr/bin/$ARCH-w64-mingw32-gcc\"\nar = \"/usr/bin/$ARCH-w64-mingw32-ar\"\n```\n\nТеперь вы можете выполнять кросс-компиляцию для Windows, указывая дополнительный аргумент --target $ARCH-pc-windows-gnu при вызове cargo:\n\n```\n$ # Сборка\n$ cargo build --release --target \"$ARCH-pc-windows-gnu\"\n$ # Запуск unit-тестов через wine\n$ cargo test --target \"$ARCH-pc-windows-gnu\"\n```\n\nВ настоящее время сборка исполняемых файлов с использованием MinGW 6 и инструментария, установленного через rustup, сломана. Чтобы исправить это, выполните\n\n```\nfor lib in crt2.o dllcrt2.o libmsvcrt.a; do cp -v /usr/x86_64-w64-mingw32/lib/$lib $HOME/.rustup/toolchains/$CHANNEL-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/; done\n```\n\nгде CHANNEL это канал обновлений (stable, beta или nightly)\n\n"
    },
    {
      "title": "Неофициальные пакеты",
      "level": 3,
      "content": "Неофициальный репозиторий archlinuxcn содержит rust-nightly и стандартную библиотеку Rust для i686, ARM, ARMv7, Windows 32 и 64, и вы можете просто установить то, что вам нужно, и использовать кросс-компиляцию. Тем не менее вам нужно найти ARM toolchain самостоятельно. Для Windows 32bit вам нужно получить libgcc_s_dw2-1.dll (предоставляется пакетом mingw-w64-gcc) для сборки и запуска.\n\n"
    },
    {
      "title": "Cargo",
      "level": 2,
      "content": "Cargo — система сборки и менеджер пакетов для Rust. Он является частью пакета rust. Версия nightly доступна в AUR: rust-nightly-binAUR. Если у вас rustup, то он уже содержит в себе cargo.\n\nCargo помогает работать с зависимостями вашего проекта, скачивая их из своего хранилища или стороннего Git репозитория. Также он позволяет убедиться, что вы всегда будете получать повторяемые сборки. Рекомендуем прочитать официальное руководство.\n\n"
    },
    {
      "title": "Использование",
      "level": 3,
      "content": "Для создания нового проекта с помощью Cargo:\n\n```\n$ cargo new hello_world\n```\n\nЭта команда создаст директорию с файлом Cargo.toml по умолчанию и настроит сборку в исполняемый файл.\n\n```\nCargo.toml\n```\n\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n```\n\n"
    },
    {
      "title": "Оптимизация для текущей платформы",
      "level": 3,
      "content": "Чтобы Cargo всегда компилировал оптимальный код для вашего текущего процессора, добавьте флаг в ~/.cargo/config. Имейте в виду, что полученные двоичные файлы не должны распространяться для использования на других компьютерах и могут перестать работать даже на вашей собственной системе, если вы решите сменить процессор в будущем.\n\nУзнайте, какая целевая платформа используется по умолчанию в вашей установке:\n\n```\n$ rustup toolchain list\n```\n\n```\nstable-x86_64-unknown-linux-gnu (default)\n```\n\nВ данном примере используется stable rust на платформе x86_64-unknown-linux-gnu.\n\nНастройка Cargo для компилирования кода, оптимизированного для текущей платформы:\n\n```\n~/.cargo/config\n```\n\n```\n[target.x86_64-unknown-linux-gnu]\nrustflags = [\"-C\", \"target-cpu=native\"]\n```\n\n"
    },
    {
      "title": "sccache",
      "level": 3,
      "content": "Время компиляции можно сильно сократить, используя sccache (пакет sccache). Он будет хранить локальный кэш артефактов компилятора, избавляя вас от необходимости перекомпилировать код, который не изменился с момента последней компиляции.\n\nЧтобы включить sccache, можно использовать переменную окружения RUSTC_WRAPPER:\n\n```\nexport RUSTC_WRAPPER=sccache\ncargo build\n```\n\nили\n\n```\nRUSTC_WRAPPER=sccache cargo build\n```\n\nТакже можно добавить настройку в ~/.cargo/config:\n\n```\n~/.cargo/config\n```\n\n```\n[build]\nrustc-wrapper = \"sccache\"\n```\n\n"
    },
    {
      "title": "Инструменты",
      "level": 3,
      "content": "Список полезных инструментов можно посмотреть на https://www.rust-lang.org/tools\n\n"
    },
    {
      "title": "RLS",
      "level": 4,
      "content": "RLS реализует Language Server Protocol для Rust, предоставляя IDE, редакторам и другим инструментам информацию о программах на Rust. Он поддерживает 'goto definition', поиск символов, переформатирование и автодополнение кода, а также позволяет осуществлять переименование и рефакторинг.\n\nRLS входит в состав пакета rust. Чтобы установить RLS с помощью rustup:\n\n```\n$ rustup component add rls rust-analysis rust-src\n```\n\n"
    },
    {
      "title": "rust-analyzer",
      "level": 4,
      "content": "rust-analyzer — это экспериментальная реализация Language Server Protocol для Rust, которая призвана заменить RLS.\n\nОна доступна в виде пакета rust-analyzer, а последняя Git-версия доступна как rust-analyzer-gitAUR.\n\nrust-analyzer нуждается в исходном коде стандартной библиотеки. Если его нет, rust-analyzer попытается установить его автоматически с помощью rustup. Чтобы установить исходный код вручную с помощью rustup, выполните следующую команду:\n\n```\n$ rustup component add rust-src\n```\n\n"
    },
    {
      "title": "Racer",
      "level": 4,
      "content": "Racer предоставляет поддержку автодополнения кода для редакторов и IDE. Он был заменён на RLS (который использует Racer в качестве запасного варианта).\n\nДля этого требуется также установить копию исходного кода Rust, которую вы можете получить одним из нескольких способов:\n\n- С помощью rustup: rustup component add rust-src\n- Из AUR: rust-src-gitAUR или rust-nightly-srcAUR[ссылка недействительна: package not found], в этом случае вы должны установить переменную окружения RUST_SRC_PATH.\n\nПосле установки исходного кода вы можете использовать Cargo для установки racer или получить его из репозиториев (rust-racerAUR).\n\n```\n$ cargo +nightly install racer\n```\n\n"
    },
    {
      "title": "Clippy",
      "level": 4,
      "content": "Clippy использует поддержку плагинов компилятора в Nightly-сборках Rust, чтобы обеспечить большое количество дополнительных проверок для обнаружения и предупреждения о более широком разнообразии ошибок и неидиоматическом Rust.\n\nClippy входит в состав пакета rust. Чтобы установить Clippy с помощью Rustup:\n\n```\n$ rustup component add clippy\n```\n\n"
    },
    {
      "title": "Rustfmt",
      "level": 4,
      "content": "Rustfmt — инструмент для форматирования кода Rust в соответствии с официальным руководством по стилю.\n\nRustfmt входит в состав пакета rust. Чтобы установить с помощью Rustup:\n\n```\n$ rustup component add rustfmt\n```\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 4,
      "content": "В IntelliJ IDEA имеется Rust plugin. Этот плагин также работает с CLion. При настройке toolchain используйте rustup для загрузки исходников (rustup component add rust-src), а затем выберите ~/.rustup/toolchains/<your toolchain>/bin в качестве расположения toolchain. При установке Rust из официальных репозиториев Arch Linux выберите /usr/bin в качестве каталога toolchain и /usr/lib/rustlib/src/rust/library/ в качестве каталога, содержащего исходные коды стандартной библиотеки.\n\n"
    },
    {
      "title": "Visual Studio Code",
      "level": 4,
      "content": "В Visual Studio Code поддержка Rust может быть получена через официальное дополнение rust-lang.rls (требуется rustup). Если вы используете rust-analyzer, вместо этого расширения установите matklad.rust-analyzer.\n\n"
    },
    {
      "title": "Vim",
      "level": 4,
      "content": "В Vim поддержка Rust может быть получена через официальный плагин rust.vim, который предоставляет обнаружение файлов, подсветку синтаксиса, форматирование и поддержку плагина проверки синтаксиса Syntastic. Многие механизмы автодополнения имеют поддержку Rust, например coc (через плагин coc.rls) и YouCompleteMe.\n\n"
    },
    {
      "title": "Emacs",
      "level": 4,
      "content": "В Emacs поддержка Rust может быть получена через официальный rust-mode плагин.\n\n"
    },
    {
      "title": "Kate",
      "level": 4,
      "content": "Поддержка Rust в Kate реализуется через Language Server Protocol. По умолчанию используется rust-analyzer; всё, что вам нужно, — это установить его вместе с исходниками Rust.\n\n"
    },
    {
      "title": "GNOME Builder",
      "level": 4,
      "content": "Поддержка Rust в GNOME Builder реализуется через Language Server Protocol. По умолчанию используется rust-analyzer; всё, что вам нужно, — это установить его вместе с исходниками Rust.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Официальный сайт языка программирования Rust (англ.)\n- Документация Rust (англ.)\n- Официальная Книга (англ.)\n- Перевод Книги на русский язык\n- Обзор API стандартной библиотеки (англ.)\n- Rust на примерах (англ.)\n- Rust на примерах (перевод на русский язык)\n- Подборка материалов по изучению Rust\n- Библиотеки (крейты, crates), доступные через Cargo\n- Новостная рассылка This Week in Rust (англ.)\n- Блог языка программирования Rust (англ.)\n- Форум пользователей Rust (англ.)\n- The Rust Internals Forum (англ.)\n- Список библиотек и ресурсов Awesome Rust: A curated list of Rust libraries and resources (англ.)\n- Статья в Википедии\n- Русскоязычный сайт о Rust\n- Русскоязычный форум\n\n"
    }
  ]
}