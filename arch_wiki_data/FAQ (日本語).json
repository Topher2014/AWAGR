{
  "title": "FAQ (日本語)",
  "url": "https://wiki.archlinux.org/title/FAQ_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Arch 用語集\n- Arch User Repository#FAQ\n- 一般的なトラブルシューティング\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 一般 1.1 Arch Linux って何ですか？ 1.2 私は Arch を使うべきではありませんか？ 1.3 なぜ Arch を使いたいですか？ 1.4 Arch はどのアーキテクチャをサポートしていますか？ 1.5 Arch は Linux Foundation の標準ファイルシステム階層 (FHS) に準拠していますか？ 1.6 当方全くの GNU/Linux ビギナーなのですが、Arch を使って大丈夫でしょうか？ 1.7 Arch はどの用途向けに設計されていますか？サーバですか？デスクトップですか？ワークステーションですか？ 1.8 Arch はホント好きなんだけどね．開発チームがXの機能さえ実装してくれればなぁ 1.9 いつ新しいリリースが出るんでしょうか？ 1.10 Arch Linux は堅牢なディストリなのでしょうか？しょっちゅう壊れたりしませんか？ 1.11 Archのレビュー記事がもっと必要だ(宣伝が必要だ) 1.12 Archの開発者がもっと必要だ\n- 2 インストール 2.1 Arch はもっと良いインストーラーを付けるべきだ。たとえば GUI インストーラーとか 2.2 Arch をインストールしたんですが、シェルのログイン画面が表示されてます! どうすれば良いのでしょう？ 2.3 デスクトップ環境やウィンドウマネージャはどれを使えばいいですか？ 2.4 他の「ミニマル」なディストリビューションと比べて Arch のどこがユニークなんですか？\n- 3 システムメンテナンス 3.1 他のOSに比べてインターネットの速度が遅いんだけど、どうして？ 3.2 なんで Arch は RAM を全部使っちゃうわけ？ 3.3 わたしのディスクの空き領域はどこへ行ってしまったの？\n- 4 パッケージ管理 4.1 Xのパッケージにエラーがあったんだけど，どうしたらいいの？ 4.2 Archのパッケージにはもっと適切な命名規則が必要だ。\".pkg.tar.zst\" なんて長すぎるし、ややこしい 4.3 Pacman には他のアプリケーションがパッケージ情報を簡単に参照するためのライブラリが必要だ 4.4 Pacman に X の機能を付けるべきだ！ 4.5 X のパッケージをインストールしたんだけど，どうやって起動するの？ 4.6 公式リポジトリにある共用ライブラリはそれぞれどうして一つのバージョンしか用意されてないんですか？ 4.7 システムの完全アップグレードを実行すると、共有ライブラリの更新は行われるが、それに依存するアプリケーションの更新は行われない場合はどうなりますか? 4.8 リポジトリのカーネルにメジャーアップデートがあったのに、ドライバが最新カーネル用にアップデートされないことはあり得ますか？ 4.9 アップグレードの前にやっておいたほうがいい事はありますか？ 4.10 パッケージのアップデートがリリースされているのに、pacman はシステムは最新だと出力する 4.11 上流のプロジェクト X が新しいバージョンをリリースしています。Arch パッケージとして新しいバージョンにアップデートできるようになるまでにかかる時間は？ 4.12 インストールしているライブラリの古いバージョンが必要なときは、新しいバージョンにシンボリックリンクを貼るだけでいいですか？\n- 5 64ビット 5.1 私のプロセッサが x86_64 に対応しているかどうかを知る方法は？ 5.2 64ビットにする理由は？\n\n- 1.1 Arch Linux って何ですか？\n- 1.2 私は Arch を使うべきではありませんか？\n- 1.3 なぜ Arch を使いたいですか？\n- 1.4 Arch はどのアーキテクチャをサポートしていますか？\n- 1.5 Arch は Linux Foundation の標準ファイルシステム階層 (FHS) に準拠していますか？\n- 1.6 当方全くの GNU/Linux ビギナーなのですが、Arch を使って大丈夫でしょうか？\n- 1.7 Arch はどの用途向けに設計されていますか？サーバですか？デスクトップですか？ワークステーションですか？\n- 1.8 Arch はホント好きなんだけどね．開発チームがXの機能さえ実装してくれればなぁ\n- 1.9 いつ新しいリリースが出るんでしょうか？\n- 1.10 Arch Linux は堅牢なディストリなのでしょうか？しょっちゅう壊れたりしませんか？\n- 1.11 Archのレビュー記事がもっと必要だ(宣伝が必要だ)\n- 1.12 Archの開発者がもっと必要だ\n\n- 2.1 Arch はもっと良いインストーラーを付けるべきだ。たとえば GUI インストーラーとか\n- 2.2 Arch をインストールしたんですが、シェルのログイン画面が表示されてます! どうすれば良いのでしょう？\n- 2.3 デスクトップ環境やウィンドウマネージャはどれを使えばいいですか？\n- 2.4 他の「ミニマル」なディストリビューションと比べて Arch のどこがユニークなんですか？\n\n- 3.1 他のOSに比べてインターネットの速度が遅いんだけど、どうして？\n- 3.2 なんで Arch は RAM を全部使っちゃうわけ？\n- 3.3 わたしのディスクの空き領域はどこへ行ってしまったの？\n\n- 4.1 Xのパッケージにエラーがあったんだけど，どうしたらいいの？\n- 4.2 Archのパッケージにはもっと適切な命名規則が必要だ。\".pkg.tar.zst\" なんて長すぎるし、ややこしい\n- 4.3 Pacman には他のアプリケーションがパッケージ情報を簡単に参照するためのライブラリが必要だ\n- 4.4 Pacman に X の機能を付けるべきだ！\n- 4.5 X のパッケージをインストールしたんだけど，どうやって起動するの？\n- 4.6 公式リポジトリにある共用ライブラリはそれぞれどうして一つのバージョンしか用意されてないんですか？\n- 4.7 システムの完全アップグレードを実行すると、共有ライブラリの更新は行われるが、それに依存するアプリケーションの更新は行われない場合はどうなりますか?\n- 4.8 リポジトリのカーネルにメジャーアップデートがあったのに、ドライバが最新カーネル用にアップデートされないことはあり得ますか？\n- 4.9 アップグレードの前にやっておいたほうがいい事はありますか？\n- 4.10 パッケージのアップデートがリリースされているのに、pacman はシステムは最新だと出力する\n- 4.11 上流のプロジェクト X が新しいバージョンをリリースしています。Arch パッケージとして新しいバージョンにアップデートできるようになるまでにかかる時間は？\n- 4.12 インストールしているライブラリの古いバージョンが必要なときは、新しいバージョンにシンボリックリンクを貼るだけでいいですか？\n\n- 5.1 私のプロセッサが x86_64 に対応しているかどうかを知る方法は？\n- 5.2 64ビットにする理由は？\n\n"
    },
    {
      "title": "Arch Linux って何ですか？",
      "level": 3,
      "content": "Arch Linux を参照してください。\n\n"
    },
    {
      "title": "私は Arch を使うべきではありませんか？",
      "level": 3,
      "content": "以下のような方は Arch を使いたいとは思わないでしょう:\n\n- 'do-it-yourself' な GNU/Linux ディストリビューションを使う能力や時間がない、あるいはそれを求めていない方。\n- x86_64 以外のアーキテクチャのサポートが必要な方。\n- GNU で定義されたフリーウェアのみを提供するディストリビューションを使うことに強いこだわりのある方。\n- オペレーティングシステム自身が構成設定を行うべきであり、\"箱から出してすぐ使える\" べきであり、インストールメディア上でソフトウェアやデスクトップ環境のデフォルト設定が完全になされているべきであるとお考えの方。\n- 最先端で、ローリングリリースな GNU/Linux を求めていない方。\n- 今使っている OS に満足している方。\n\n"
    },
    {
      "title": "なぜ Arch を使いたいですか？",
      "level": 3,
      "content": "Arch は最高 だからです。\n\n"
    },
    {
      "title": "Arch はどのアーキテクチャをサポートしていますか？",
      "level": 3,
      "content": "Arch は x86_64 (別名 amd64) アーキテクチャのみをサポートしています。i686 のサポートは2017年11月に切られました [1]。\n\n非公式 の移植プロジェクトとしては、i686 アーキテクチャ向けの [2] や ARM CPU 向けの [3] などがあり、それぞれ専用のコミュニティを持っています。\n\n"
    },
    {
      "title": "Arch は Linux Foundation の標準ファイルシステム階層 (FHS) に準拠していますか？",
      "level": 3,
      "content": "Arch Linux は systemd サービスマネージャを使用するオペレーティングシステムのファイルシステム階層を遵守しています。ディレクトリの説明については file-hierarchy(7) を見てください。特に Arch では /bin, /sbin, /usr/sbin は /usr/bin のシンボリックリンクに、/lib と /lib64 は /usr/lib のシンボリックリンクになっています。\n\n"
    },
    {
      "title": "当方全くの GNU/Linux ビギナーなのですが、Arch を使って大丈夫でしょうか？",
      "level": 3,
      "content": "もしあなたが初心者で、それでもなお Arch を使おうとしているのであれば、あなたは十分な時間を費やして学ぶことに喜びを覚えるようでなければなりません。また Arch が全く \"Do-It-Yourself\" なディストリビューションとして設計されている、ということも肝に命じておくべきでしょう。システムを組み上げ、それをどのようなものにしていくかをコントロールするのはユーザー自身なのです。\n\n質問をする前にまず自分で調査するようにしてください。Google やフォーラム、そして素晴らしいドキュメントが用意されている Arch Wiki の検索を活用しましょう。そのような情報が使える状態になっているのには理由があります。 途方もない時間がこの貴重な情報を編集するために無償で費やされているのです。\n\nArch 用語集#RTFM や インストールガイド も見てください。\n\n"
    },
    {
      "title": "Arch はどの用途向けに設計されていますか？サーバですか？デスクトップですか？ワークステーションですか？",
      "level": 3,
      "content": "Arch は特定の用途向けに設計されているわけではありません。むしろ、特定の \"ユーザ\" 向けに設計されています。Arch はなんでも自分でやることを楽しみ、各自のニーズに応じたシステムを構築するためにそれをよりよく活用する、やる気のあるユーザを対象にしています。したがって、その目的はユーザの思いのままであり、Arch は事実上あらゆる用途で使用できます。多くの人々が Arch をデスクトップとワークステーション両方で使用しています。そしてもちろん、archlinux.org・aur.archlinux.org とほとんど全ての Arch の インフラストラクチャ は Arch で動いています。\n\n"
    },
    {
      "title": "Arch はホント好きなんだけどね．開発チームがXの機能さえ実装してくれればなぁ",
      "level": 3,
      "content": "どうぞ積極的に参加してください．あなた自身がコードや解決策を提示することで コミュニティに貢献 しましょう．もし，コミュニティや開発チームから認められれば，あなたのコードはマージされるかも知れません．Archコミュニティはコードやツールの提供，シェアによって活性化していきます．\n\n"
    },
    {
      "title": "いつ新しいリリースが出るんでしょうか？",
      "level": 3,
      "content": "Arch Linux におけるリリースは単にインストールおよびレスキュー用のライブ環境で、base メタパッケージとその他いくつかの パッケージが含まれています。リリースは通常各月の前半頃に公開されます。\n\n"
    },
    {
      "title": "Arch Linux は堅牢なディストリなのでしょうか？しょっちゅう壊れたりしませんか？",
      "level": 3,
      "content": "ローリングリリースで構築された個人のシステムの堅牢性に関して、最終的な責任を負うのはユーザー自身です。ユーザーがいつアップグレードするのかを決め、必要な時に必要な変更をマージするのです。もしユーザーがコミュニティに助けを求めれば、救いの手はすぐに差し伸べられることが多いでしょう。この点に関して、Arch が他のディストリビューションから異なっているのは、Arch が本当に \"Do-it-yourself\" なディストロであることでしょう。破損についてクレームをつけるのは見当違いであり、非生産的です。アップストリームでの変更に関して Arch 開発チームは責任を負いかねるからです。\n\n可能な限り安定する Arch Linux システムを構成するための方法やヒントについては、システムメンテナンスを参照してください。\n\n"
    },
    {
      "title": "Archのレビュー記事がもっと必要だ(宣伝が必要だ)",
      "level": 3,
      "content": "現状でもう十分な量のArchについての記事が書かれています．Archの目標は巨大になることではなく、持続的な成長が対象のユーザーベースの間で自然に起きることです。\n\n"
    },
    {
      "title": "Archの開発者がもっと必要だ",
      "level": 3,
      "content": "そうかも知れませんね．もっと柔軟にあなたの時間を使って貢献してください！ フォーラムや，IRC チャンネル，メーリングリストなどに参加すれば，成すべきことがわかるはずです．詳細は コミュニティに貢献 を参照してください。\n\n"
    },
    {
      "title": "Arch はもっと良いインストーラーを付けるべきだ。たとえば GUI インストーラーとか",
      "level": 3,
      "content": "Arch には Arch Installation Framework (AIF) と呼ばれる、テキストベースのユーザーインターフェースを持ったインストーラがありました。最後のメンテナが去った後、arch-install-scripts の推奨により 廃止 されました。 2021年4月1日 から、Arch はインストーラを再度含むようになりました。詳細は archinstall を参照してください。\n\n"
    },
    {
      "title": "Arch をインストールしたんですが、シェルのログイン画面が表示されてます! どうすれば良いのでしょう？",
      "level": 3,
      "content": "一般的な推奨事項を参照してください。\n\n"
    },
    {
      "title": "デスクトップ環境やウィンドウマネージャはどれを使えばいいですか？",
      "level": 3,
      "content": "たくさんありますので、あなたに一番あったものを使えばいいのです。デスクトップ環境やウィンドウマネージャも参照してください。\n\n"
    },
    {
      "title": "他の「ミニマル」なディストリビューションと比べて Arch のどこがユニークなんですか？",
      "level": 3,
      "content": "Arch と他のディストリビューションの比較 を参照してください。\n\n"
    },
    {
      "title": "システムメンテナンス",
      "level": 2,
      "content": "システムメンテナンス も参照してください。\n\n"
    },
    {
      "title": "他のOSに比べてインターネットの速度が遅いんだけど、どうして？",
      "level": 3,
      "content": "ネットワークは正しく設定されていますか？ネットワーク設定のページを参照してください。\n\nまた、Arch ではデフォルトでトラフィックシェーピングが有効になっていないことも注意してださい。従って、(P2P 上か通常のクライアント-サーバー通信かに関わらず)ネットワーク帯域を使い果たすプログラムは、ローカルの他のソフトの通信を妨げ、ひどいラグやタイムアウトのような結果になる可能性があります。 Shorewall や Vuurmuur などのファイアウォールや、 iproute2 の静的なスクリプト(例えば Wondershaper の 派生) によってネットワークレイヤーのシェーピングを行うことができます。\n\n"
    },
    {
      "title": "なんで Arch は RAM を全部使っちゃうわけ？",
      "level": 3,
      "content": "そもそも、使わない RAM は無駄な RAM です。\n\n新米ユーザの方の多くは、Linux カーネルのメモリの扱い方が以前の方法と必ずしも同じにはならないことに気がつきます。RAM 上のデータへのアクセスはディスクに比べ非常に高速なので、カーネルは最近アクセスされたデータをメモリ上にキャッシュします。キャッシュされたデータは、利用可能なメモリを使い果たして、新しいデータがロードされる必要のある時のみクリアされます。\n\nfree コマンドによって違いを見分けることができます:\n\n```\n$ free -h\n```\n\n```\ntotal        used        free      shared  buff/cache   available\nMem:          2.8Gi       1.1Gi       283Mi       224Mi       1.4Gi       1.2Gi\nSwap:         3.0Gi       881Mi       2.1Gi\n```\n\n\"free\" と \"available\" メモリの違いは重要です。上の例において、ラップトップは 2.8GiB の RAM をほとんど使っていて、free なメモリはたった 283MiB しかありません。しかし、そのうち 1.4GiB は \"buff/cache\" です。スワップなしで 1.2GiB の available なメモリが新しいアプリケーションの起動に利用可能です。詳しくは free(1) を参照してください。これらは結果としてパフォーマンスを向上させます！\n\nもしあなたの好奇心が刺激されたなら、こちらの素晴らしい記事も読んでみてください。こちらのウェブサイトでもこの混乱を整理して説明しています: https://www.linuxatemyram.com/ 。\n\n"
    },
    {
      "title": "わたしのディスクの空き領域はどこへ行ってしまったの？",
      "level": 3,
      "content": "その答えはあなたのシステムによって変わります。こちらに優れたユーティリティの一覧がありますので試してみてください。\n\n"
    },
    {
      "title": "パッケージ管理",
      "level": 2,
      "content": "pacman, Pacman ヒント, 公式リポジトリ により多くの答えがあります。\n\n"
    },
    {
      "title": "Xのパッケージにエラーがあったんだけど，どうしたらいいの？",
      "level": 3,
      "content": "まず，そのエラーはそもそもArch開発チームが修正できるものなのかどうかを見極めなければなりません．そうでない場合が往々にしてあります(例えばFirefoxのクラッシュは大抵の場合Mozillaチームのミスです)．これを アップストリーム・エラー と言います．もしArchの問題であるならば以下の手順を参考に対処してください．:\n\n1. フォーラムに情報がないか探してみましょう．誰かが同じ問題について気付いていないかチェックしてください．\n1. 詳細な情報を書いたバグレポートを https://bugs.archlinux.org に投稿してください．\n1. もしお望みならば，フォーラムに質問を投げてみてもよいでしょう．その際，問題の詳細と，あなたが既にバグ・レポートを送った旨を明記してください．それによって同じエラーに関する報告が大量に投稿されるようなケースを回避できます．\n\n"
    },
    {
      "title": "Archのパッケージにはもっと適切な命名規則が必要だ。\".pkg.tar.zst\" なんて長すぎるし、ややこしい",
      "level": 3,
      "content": "これに関しては、Arch のメーリングリスト上で議論されています。.pac のような拡張子を提案する人もいますが、現段階では、パッケージの拡張子を変更する具体的な計画はありません。Arch 開発者の一人である Tobias Kieslich の発言は示唆的です。「事実 package は [圧縮された] tarball ファイルなわけじゃないか! だいたい tar が扱えるアプリケーションなら何だって開くことができるし、覗いて弄ることだってできるんだしさ。もっと言えば、mime-type なんてたいがいのアプリケーションが問題なく自動判別できるだろ？」\n\n"
    },
    {
      "title": "Pacman には他のアプリケーションがパッケージ情報を簡単に参照するためのライブラリが必要だ",
      "level": 3,
      "content": "pacman は libalpm(3) (\"Arch Linux Package Management\" library) のフロントエンドになっています。このライブラリは代替のフロントエンドの開発を可能にしています (例えばGUIフロントエンドのような)。\n\n"
    },
    {
      "title": "Pacman に X の機能を付けるべきだ！",
      "level": 3,
      "content": "そのアイデアにメリットがあると思うのであれば、pacman-dev で議論することができます。既存の機能リクエストがないか https://gitlab.archlinux.org/pacman/pacman/-/issues や https://bugs.archlinux.org/index.php?project=3 も確認してみてください。\n\nもっとも，ある機能をPacmanやArch Linuxに追加するために一番良い方法は，あなた自身がそれを実装することです．そのパッチがオフィシャルに取り込まれるかどうかはわかりませんが，いずれにせよあなたの骨折りは他のユーザーによって吟味され，検討されるでしょう．\n\n"
    },
    {
      "title": "X のパッケージをインストールしたんだけど，どうやって起動するの？",
      "level": 3,
      "content": "あなたが KDE や GNOME のようなデスクトップ環境を導入しているのなら、そのプログラムは自動的にメニューに登録されている筈です。ターミナルから起動しようとしていて、バイナリの名前がわからないというような場合は、次のコマンドで確認してください:\n\n```\n$ pacman -Qlq パッケージ名 | grep /usr/bin/\n```\n\n"
    },
    {
      "title": "公式リポジトリにある共用ライブラリはそれぞれどうして一つのバージョンしか用意されてないんですか？",
      "level": 3,
      "content": "Debian などの一部のディストリビューションは、共用ライブラリパッケージにおいて libfoo1、libfoo2、libfoo3 といったように複数のバージョンを用意しています。この方法では同一のシステム上で異なるバージョンの libfoo ごとにアプリケーションのコンパイルが可能となります。\n\nArch のようなディストリビューションの場合、最新のパッケージされたバージョンのみが公式にサポートされています。過去のソフトウェアをサポートしないことで、パッケージメンテナは最新のバージョンが期待通りに動くことの検証に割く時間をより多くとることができます。共有ライブラリの新しいバージョンがアップストリームからリリースされると、それはすぐにリポジトリに追加され、影響を受けるパッケージは新しいライブラリに合わせてリビルドされます。\n\n"
    },
    {
      "title": "システムの完全アップグレードを実行すると、共有ライブラリの更新は行われるが、それに依存するアプリケーションの更新は行われない場合はどうなりますか?",
      "level": 3,
      "content": "それは起こってはならないシナリオです。公式リポジトリに foobaz というアプリケーションがあり、libbaz という共用ライブラリの新バージョンを使用してビルドされているとして、それは libbaz のアップデートに合わせてアップデートされます。しかしもし、ビルドに失敗した場合は、そのパッケージ foobaz にはバージョン制限のある依存関係 (例: libbaz=1.5) が指定され、libbaz のアップグレードの際に pacman によってコンフリクトを理由に削除されます。\n\nもし foobaz が、あなた自身でビルドした、あるいは AUR からインストールしたパッケージであった場合には、新バージョンの libbaz で foobaz をリビルドしてみてください。ビルドが失敗した場合には foobaz の開発者にそのバグを報告してください。\n\n"
    },
    {
      "title": "リポジトリのカーネルにメジャーアップデートがあったのに、ドライバが最新カーネル用にアップデートされないことはあり得ますか？",
      "level": 3,
      "content": "いいえ、ありえません。例えば 3.5.x から 3.6.x といったカーネルのメジャーアップデートは常にすべてのサポートカーネルドライバのリビルドを伴います。ただし、非サポートパッケージ (例えば AUR のパッケージ) を使用している場合には、最新のカーネルでそれをリビルドしなければトラブルが発生するかもしれません。サポートされていないドライバパッケージは、インストールしているユーザーがアップデートに全ての責任を負います。\n\n"
    },
    {
      "title": "アップグレードの前にやっておいたほうがいい事はありますか？",
      "level": 3,
      "content": "システムメンテナンス#システムのアップグレード セクションに従ってください。\n\n"
    },
    {
      "title": "パッケージのアップデートがリリースされているのに、pacman はシステムは最新だと出力する",
      "level": 3,
      "content": "pacman のミラーはすぐに同期されるわけではありません。アップデートが利用できるようになるまで24時間以上かかることもあります。取り得る選択肢は辛抱強く待つか、別のミラーを使うことだけです。MirrorStatus で最新のミラーを確認できます。\n\n"
    },
    {
      "title": "上流のプロジェクト X が新しいバージョンをリリースしています。Arch パッケージとして新しいバージョンにアップデートできるようになるまでにかかる時間は？",
      "level": 3,
      "content": "パッケージアップデートは準備ができ次第リリースされます。上流リリースがマイナーなバグ修正のみであれば数時間でパッケージがアップデートされることもありますし、メジャーアップデートであれば数週間後となることもあります。上流の新しいバージョンが Arch にリリースされるまでの時間はそのパッケージとパッケージメンテナによって変わります。一部のパッケージは testing リポジトリでしばらくテストされるため、パッケージが更新されるまでの時間が長い傾向にあります。パッケージメンテナは安定版のアップデートをリポジトリで素早く提供できるように尽力しています。公式リポジトリのパッケージが古くなっていることに気づいたら、パッケージウェブサイト から out-of-date フラグを立てて報告してください。\n\n"
    },
    {
      "title": "インストールしているライブラリの古いバージョンが必要なときは、新しいバージョンにシンボリックリンクを貼るだけでいいですか？",
      "level": 3,
      "content": "幸運であれば少しの間それで動くかもしれません。動いたとしても、以下の理由でそれは正しい解決法ではありません:\n\n- ライブラリは意味もなくバージョンを変えません。API/ABI が変更されたり(いくつか削除されたり)することがあり、それが使用に影響するかは単に運次第です。\n- シンボリックリンクはパッケージマネージャによって管理されません。すぐにシステムライブラリのファイルをハックしようとする初心者は、診断・修正が不可能な意図していない変更を加える大きなリスクを持っています。パッケージマネージャはこのような問題から守る手助けをしています。\n- 古いライブラリファイルをファイルシステムにコピーする代替手段もありますが、追跡されない上に忘れられやすく、潜在的なセキュリティのバグが気付かれず、また修正されません。\n\n代わりに、例えば必要なライブラリのバージョンを提供する互換パッケージを使うか、もしくは作ってください。\n\n"
    },
    {
      "title": "私のプロセッサが x86_64 に対応しているかどうかを知る方法は？",
      "level": 3,
      "content": "使っているプロセッサが x86_64 に対応している場合、/proc/cpuinfo の中にlm (Longモード) フラグがあります。例えば以下のコマンドを実行してください:\n\n```\n$ grep -w lm /proc/cpuinfo\n```\n\nWindows 上では、 フリーウェアである CPU-Z を使って、64ビット互換があるかどうか確認できます。AMD の命令セットである AMD64 または Intel の命令セット EM64T は x86_64 のバイナリと互換性があります。\n\n"
    },
    {
      "title": "64ビットにする理由は？",
      "level": 3,
      "content": "多くの状況下で (32ビットに比べて) 高速であり、通常の i686 カーネルでは 物理アドレス拡張 (PAE) が無効化されているために利用できないアドレス空間配置のランダム化 (ASLR) や 位置独立コード (PIC)、NX ビットを使用することによりセキュリティが向上することが挙げられます。もしコンピューターに 4GB 以上のメモリが載っている場合、64ビットの OS のみが全てを活用することができます。\n\n更に、64ビットの拡張をサポートしている新しい x86 CPU に対して、レガシーな32ビットの CPU をプログラマーがサポートしなくなってきているというのもあります。\n\n以上の理由が32ビット環境を避けるべきという我々のアドバイスですが、カーネルやユーザースペース、個々のプログラムなど、64ビットの方が優れているものは他にもたくさんあり、全てをここに書き出す事はできません。\n\n"
    }
  ]
}