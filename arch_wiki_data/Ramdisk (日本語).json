{
  "title": "Ramdisk (日本語)",
  "url": "https://wiki.archlinux.org/title/Ramdisk_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "tmpfs はメモリやスワップパーティションに存在する一時ファイルシステムです。ディレクトリを tmpfs としてマウントすることでファイルへのアクセスを高速化させたり、再起動時に自動的に中身が消去されるようにすることができます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 使用方法\n- 2 サンプル\n- 3 自動マウントの無効化\n- 4 トラブルシューティング 4.1 root で tmpfs のシンボリックリンクを開けない\n- 5 参照\n\n- 4.1 root で tmpfs のシンボリックリンクを開けない\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "tmpfs(5) が使われる主なディレクトリは /tmp, /var/lock, /var/run です。tmpfs を /var/tmp で使ってはいけません。このフォルダは、再起動しても消えない一時ファイルを置くところだからです。\n\nglibc 2.2 以上では tmpfs は POSIX shared memory の /dev/shm にマウントされることになっています。/dev/shm への tmpfs のマウントは systemd によって自動的に行われるため、fstab における手動設定は必要なくなりました。\n\nArch は tmpfs の /run ディレクトリを使っており、/var/run と /var/lock は互換性維持のため単なるシンボリックリンクとして存在しています。また、systemd のデフォルト設定で /tmp で使用されるため、特別な設定が必要ないかぎり fstab にエントリを記述する必要はありません。\n\n一般的に、tmpfs フォルダを使う意味があるのは、読み書き操作を頻繁に実行するような I/O の処理が重い作業やプログラムです。アプリケーションによっては、部分的な (または全ての) データを共有メモリにオフロードすることで体感することができるほどの変化が現れることもあります。例えば、Firefox のプロファイルを RAM に再配置するとパフォーマンスが著しく上昇します。\n\n"
    },
    {
      "title": "サンプル",
      "level": 2,
      "content": "デフォルトでは、tmpfs パーティションの最大容量は合計 RAM の半分に設定されていますが、この値はカスタマイズすることができます。\n\n最大容量を明示的に設定するために、以下の例ではデフォルトの /tmp マウントを上書きして、size マウントオプションを使っています:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /tmp         tmpfs   rw,nodev,nosuid,size=2G          0  0\n```\n\n以下はユーザーに tmpfs マウントを追加する、より高度な例です。ウェブサイトや mysql の一時ファイル、~/.vim/ などで有用です。設定する前にマウントオプションをよく確かめて下さい。悪用を防止するためにできる限りセキュリティを高めるべきです。容量を制限したり、uid と gid のモードを指定すると良いでしょう。詳しくは、#参照セクションのリンクを見て下さい。\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /www/cache    tmpfs  rw,size=1G,nr_inodes=5k,noexec,nodev,nosuid,uid=user,gid=group,mode=1700 0 0\n```\n\n詳細は tmpfs(5) man ページおよび セキュリティ#ファイルシステム に載っています。\n\n変更を適用するには再起動してください。mount -a と実行するだけで変更が即座に適用できるかに思われるかもしれませんが、これではディレクトリ内に存在する既存のファイルにアクセスできなくなってしまいます (特にロックファイルを使用するプログラムを実行している場合は危険です)。ただし、ディレクトリの中身が全て空なのであれば、再起動する代わりに mount -a を実行しても問題ありません (もしくは個別にマウントを実行してもよい)。\n\n変更の適用後、findmnt を使って /proc/mounts を見ることで効果が現れているかどうか確認することができます:\n\n```\n$ findmnt /tmp\n```\n\n```\nTARGET SOURCE FSTYPE OPTIONS\n/tmp   tmpfs  tmpfs  rw,nosuid,nodev,relatime\n```\n\nまた、tmpfs は再起動せずとも一時的にサイズを変更することが可能です。いますぐ巨大なコンパイルを行う必要があるときなどに有用です。その場合、以下を実行します:\n\n```\n# mount -o remount,size=4G,noatime /tmp\n```\n\n"
    },
    {
      "title": "自動マウントの無効化",
      "level": 2,
      "content": "systemd 下では、/etc/fstab にエントリを記述してなくても /tmp は自動的に tmpfs としてマウントされます。自動マウントを無効にするには、tmp.mount systemd ユニットをマスクしてください。\n\nファイルは tmpfs ではなく、ブロックデバイスに保存されるようになります。/tmp の中身は再起動しても消去されないようになるので、問題が起こる可能性があります。前の挙動に戻して再起動で /tmp フォルダが自動的に消去されるようにするには、以下の tmpfiles.d(5) を使ってください:\n\n```\n/etc/tmpfiles.d/tmp.conf\n```\n\n```\n# see tmpfiles.d(5)\n# always enable /tmp folder cleaning\nD! /tmp 1777 root root 0\n\n# remove files in /var/tmp older than 10 days\nD /var/tmp 1777 root root 10d\n\n# namespace mountpoints (PrivateTmp=yes) are excluded from removal\nx /tmp/systemd-private-*\nx /var/tmp/systemd-private-*\nX /tmp/systemd-private-*/tmp\nX /var/tmp/systemd-private-*/tmp\n```\n\n"
    },
    {
      "title": "root で tmpfs のシンボリックリンクを開けない",
      "level": 3,
      "content": "/tmp は tmpfs を使っているので、カレントディレクトリを /tmp に変更してから、ファイルを作成して、同じ /tmp ディレクトリの中にファイルのシンボリックリンクを作成してみて下さい。シンボリックリンクを使って作成したファイルを開こうとすると、パーミッションエラーが表示されるはずです。/tmp には スティッキービット が設定されているためにこうなります。\n\nこの挙動は /proc/sys/fs/protected_symlinks や sysctl で変更できます: sysctl -w fs.protected_symlinks=0。設定を永続化させる方法は Sysctl#設定 を見て下さい。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Linux カーネルドキュメント\n\n"
    }
  ]
}