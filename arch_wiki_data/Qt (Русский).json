{
  "title": "Qt (Русский)",
  "url": "https://wiki.archlinux.org/title/Qt_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- KDE (Русский)\n- Единый вид приложений Qt и GTK\n- GTK (Русский)\n\nQt — кроссплатформенный набор инструментов и виджетов для создания приложений, который использует стандартный язык программирования C++, а также специальный генератор кода (Meta Object Compiler, или moc) вместе с набором макросов, расширяющих возможности языка. Набор предоставляет широкие возможности по разработке приложений. Среди наиболее важных:\n\n- Работа на основных компьютерных платформах и операционных системах, а также на некоторых мобильных платформах.\n- Обширная поддержка возможностей интернационализации.\n- Полнофункциональная библиотека с поддержкой SQL баз данных, парсинга XML, управления потоками, сети и унифицированный кроссплатформенный программный интерфейс (API) для работы с файлами.\n\nНа основе фреймворка Qt развивается сообщество и программное обеспечение KDE. Qt лежит в основе других важных проприетарных и открытых программных проектов, таких как VLC, VirtualBox, Mathematica и многих других.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Qt 6.x и 5.x доступны в официальных репозиториях. Старые версии (4.x и 3.x) есть в AUR. Их можно установить с помощью следующих пакетов:\n\n- Qt 6.x входит в пакет qt6-base, документация — qt6-doc.\n- Qt 5.x входит в пакет qt5-base, документация — qt5-doc.\n- Qt 4.x предоставляется пакетом qt4AUR, документация — qt4-docAUR.\n- Qt 3.x предоставляется пакетом qt3AUR, документация — qt3-docAUR[ссылка недействительна: package not found].\n\n"
    },
    {
      "title": "Выбор набора Qt по умолчанию",
      "level": 2,
      "content": "С помощью qtchooserAUR[ссылка недействительна: package not found], вы можете выбирать, для какой версии Qt будут помещены исполняемые файлы (например, qmake) в /usr/bin. По умолчанию используется Qt 5 (например, qmake-qt5).\n\n"
    },
    {
      "title": "Используя переменные окружения",
      "level": 3,
      "content": "Чтобы выбрать конкретную версию Qt, вы можете создать переменную окружения QT_SELECT: чтобы выбрать Qt n, установите QT_SELECT=n.\n\n"
    },
    {
      "title": "Используя файл конфигурации",
      "level": 3,
      "content": "Вы можете выбрать версию набора Qt по умолчанию, создав символическую ссылку ~/.config/qtchooser/default.conf на один из файлов .conf в каталоге /etc/xdg/qtchooser. Например, чтобы выбрать Qt 4, создайте ссылку на /etc/xdg/qtchooser/4.conf:\n\n```\n$ ln -s /etc/xdg/qtchooser/4.conf ~/.config/qtchooser/default.conf\n```\n\n"
    },
    {
      "title": "Стили в Qt 5",
      "level": 3,
      "content": "Qt 5 выбирает стиль, основываясь на текущей среде рабочего стола:\n\n- В KDE Plasma он использует текущий выбранный стиль Qt. Это можно настроить через Параметры системы (systemsettings), раздел Внешний вид > Оформление приложений.\n- Для Cinnamon, GNOME, MATE, LXDE, Xfce он использует GTK (QGtkStyle).\n- В других средах рабочего стола используется Fusion.\n\nЕсли вы хотите принудительно установить внешний вид и поведение интерфейса приложений Qt 5, установите переменную окружения QT_STYLE_OVERRIDE с названием желаемого стиля. В частности, для GTK пропишите gtk2 (не забудьте установить плагины, требуемые для нужного вам стиля). Приложения Qt 5 также поддерживают опцию -style.\n\nВ состав Qt 5 входят стили Fusion и Windows. Также можно установить дополнительные стили:\n\n- Breeze — Стиль Plasma Desktop.\n\n- Oxygen — Стиль KDE Oxygen.\n\n- Lightly — Форк Breeze, который стремится выглядеть современно и минималистично.\n\n- QtCurve — Гибкая в настройке тема рабочего стола с поддержкой приложений GTK и Qt.\n\n- Adwaita-Qt — Стиль для Qt-приложений, выглядящий как GNOME Shell.\n\n- Qt style plugins — Дополнительные плагины для Qt 5: GTK, Cleanlooks, Motif, Plastique.\n\n- Kvantum — Настраиваемый, основанный на SVG движок тем с множеством встроенных стилей. Также включает в себя имитацию некоторых популярных тем GTK: Adapta, Arc, Ambiance\n\n"
    },
    {
      "title": "Стили в Qt 4",
      "level": 3,
      "content": "Qt 4 пытается имитировать поведение текущей среды рабочего стола, если не столкнётся с какими-либо проблемами или жёстко закодированными настройками.\n\n- В KDE Plasma он использует текущий выбранный стиль Qt. Это можно настроить через Параметры системы (systemsettings), раздел Внешний вид > Оформление приложений.\n- Для Cinnamon, GNOME, Xfce он использует GTK (QGtkStyle).\n- В других средах рабочего стола используется Windows.\n\nДля тех, кто хочет изменить внешний вид и оформление приложений Qt 4, в пакете qt4AUR есть графический инструмент Qt Configuration (qtconfig-qt4). Он предлагает простой интерфейс для настройки внешнего вида приложений Qt 4, в том числе стиля, цветов, шрифтов и некоторых других параметров.\n\nQt хранит все свои настройки в файле /etc/xdg/Trolltech.conf (общесистемный) или ~/.config/Trolltech.conf (пользовательский). В этом файле довольно сложно ориентироваться, так как он содержит много информации, не относящейся к внешнему виду, но для любых изменений вы можете просто добавить в конец файла и таким образом перезаписать все предыдущие значения (убедитесь, что добавляете свои изменения в секцию [Qt]).\n\nНапример, чтобы изменить тему на QtCurve, добавьте:\n\n```\n~/.config/Trolltech.conf\n```\n\n```\n...\n[Qt]\nstyle=QtCurve\n```\n\nВ состав Qt 4 входят стили CDE, Cleanlooks, GTK, Motif, Plastique, Windows. Также можно установить дополнительные стили:\n\n- Breeze — Стиль Plasma Desktop.\n\n- Adwaita-Qt — Стиль для Qt-приложений, выглядящий как GNOME Shell.\n\n"
    },
    {
      "title": "Таблицы стилей Qt",
      "level": 3,
      "content": "Интересным способом модификации внешнего вида приложений Qt является использование таблиц стилей, которые представляют собой обычные CSS-файлы. Используя таблицы стилей, пользователь может изменить внешний вид любого виджета в приложении.\n\nЧтобы запустить приложение, используя указанную таблицу стилей, просто передайте путь к файлу в опции -stylesheet:\n\n```\n$ qt_приложение -stylesheet стиль.qss\n```\n\nДля получения подробной информации о таблицах стилей Qt смотрите официальную документацию или руководство. Пример таблицы стилей вы можете найти на этой странице.\n\n"
    },
    {
      "title": "GTK и Qt",
      "level": 3,
      "content": "Если вы используете одновременно приложения GTK и Qt, их внешний вид может не соответствовать друг другу. Способы получения согласованного внешнего вида описаны в статье Единый вид приложений GTK и Qt.\n\n"
    },
    {
      "title": "Настройка приложений Qt 5 в средах, отличных от KDE Plasma",
      "level": 3,
      "content": "В отличие от Qt 4, Qt 5 не поставляет утилиту qtconfig для настройки шрифтов, значков или стилей. Вместо этого он попытается использовать настройки из запущенной среды рабочего стола. В KDE Plasma или GNOME это работает хорошо, но в других менее популярных средах рабочего стола или оконных менеджерах это может привести к отсутствию значков в приложениях Qt 5. Один из способов решения этой проблемы — подделать информацию о среде рабочего стола, прописав переменную окружения XDG_CURRENT_DESKTOP=KDE или GNOME, а затем использовать соответствующее приложение конфигурации для выбора нужного набора значков.\n\nДругим решением является использование qt5ct, который предоставляет Qt 5 QPA, не зависящий от среды рабочего стола, и утилиту настройки. После установки запустите qt5ct и настройте стили, а затем пропишите переменную окружения QT_QPA_PLATFORMTHEME=qt5ct, чтобы эти настройки стали применяться приложениями Qt. Также можно использовать опцию --platformtheme qt5ct при запуске приложения Qt 5.\n\nqt5ct-kdeAUR имеет более хорошую интеграцию с приложениями KDE, в том числе KDE QML.\n\nЕсли некоторые значки отсутствуют и вы видите такие ошибки:\n\n```\nIcon theme \"oxygen\" not found.\nIcon theme \"oxygen\" not found.\nError: standard icon theme \"oxygen\" not found!\n```\n\nто установите oxygen и oxygen-icons.\n\n"
    },
    {
      "title": "Поддерживаемые платформы",
      "level": 3,
      "content": "Qt поддерживает большинство доступных сегодня платформ, включая даже весьма малоизвестные. Полный список поддерживаемых платформ вы можете найти в статье на Wikipedia.\n\n"
    },
    {
      "title": "Android",
      "level": 4,
      "content": "Прежде всего, вам понадобится установить Android SDK и NDK из AUR или через Android Studio.\n\nДля SDK также нужен OpenJDK. Разным версиям Qt нужны разные версии, подробнее в документации.\n\nДалее вам понадобится Qt 5 для Android. Вы можете установить его из AUR, как описано ниже, или собрать его самостоятельно, инструкции по сборке можно найти на странице в вики Qt.\n\nВ случае проблем посмотрите список известных проблем.\n\n- android-armv7a-eabi-qt5AUR[ссылка недействительна: package not found] - armeabi-v7a\n- android-aarch64-qt5AUR[ссылка недействительна: package not found] - aarch64\n- android-x86-qt5AUR[ссылка недействительна: package not found] - x86\n- android-x86-64-qt5AUR[ссылка недействительна: package not found] - x86_64\n\nВ качестве альтернативы можно использовать официальный установщик Qt.\n\n"
    },
    {
      "title": "Инструменты",
      "level": 3,
      "content": "Список официальных инструментов разработки для Qt:\n\n- Qt Creator — Кроссплатформенная среда разработки, созданная для разработки приложений Qt.\n\n- Qt Linguist — Набор инструментов для упрощения перевода и интернационализации приложений Qt.\n\n- Qt Assistant — Справочная система для чтения документации по Qt.\n\n- Qt Designer — Инструмент для разметки графического интерфейса приложений Qt и создания форм для виджетов.\n\n- Qt Quick Designer — Визуальный редактор файлов QML, поддерживающий режим WYSIWYG. Он позволяет с нуля проектировать и разрабатывать приложения и компоненты Qt Quick.\n\n- qmlscene — Инструмент для загрузки документов QML, облегчающий разработку и отладку приложений QML.\n\n- qmake — Средство автоматизации процесса сборки приложений Qt на различных платформах, похожее на cmake, но с меньшим количеством опций и ориентированное на приложения Qt.\n\n- uic — Генератор кода C++ на основе .ui-файлов.\n\n- rcc — Инструмент для упаковки ресурсов (например, изображений) в приложение при сборке. По сути генерирует код на C++, содержащий данные, указанные в файле ресурсов (.qrc).\n\n- moc — Препроцессор исходных файлов, обрабатывающий расширения Qt для C++ (например, директивы механизма сигналов и слотов, RTTI, аннотации).\n\n"
    },
    {
      "title": "Другие языки программирования",
      "level": 3,
      "content": "Qt имеет привязки ко многим популярным языкам программирования. Полный список поддерживаемых языков вы можете найти на странице https://wiki.qt.io/Language_Bindings\n\nПриведенные ниже примеры отображают окно с сообщением 'Hello world!'.\n\n"
    },
    {
      "title": "C++",
      "level": 4,
      "content": "- Пакет: qt5-base\n- Сайт: https://www.qt.io/developers/\n- Команда сборки: g++ $(pkg-config --cflags --libs Qt 5Widgets) -fPIC -o hello hello.cpp\n- Команда запуска: ./hello\n\n```\nhello.cpp\n```\n\n```\n#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char **argv)\n{\n    QApplication app(argc, argv);\n    QLabel hello(\"Hello world!\");\n\n    hello.show();\n    return app.exec();\n}\n```\n\n"
    },
    {
      "title": "QML",
      "level": 4,
      "content": "- Пакет: qt5-declarative.\n- Сайт: https://doc.qt.io/qt-5/qtquick-qmlscene.html\n- Команда запуска: qmlscene hello.qml\n\n```\nhello.qml\n```\n\n```\nimport QtQuick 2.3\n\nRectangle {\n    id: page\n    width: 400; height: 100\n    color: \"lightgray\"\n\n    Text {\n        id: helloText\n        text: \"Hello world!\"\n        anchors.horizontalCenter: page.horizontalCenter\n        anchors.verticalCenter: page.verticalCenter\n        font.pointSize: 24; font.bold: true\n    }\n}\n```\n\n"
    },
    {
      "title": "Python (PyQt)",
      "level": 4,
      "content": "- Пакет: python-pyqt5 — привязки Python 3.x для Qt 5\n- Сайт: https://riverbankcomputing.com/software/pyqt/intro\n- Команда запуска: python hello-pyqt.py\n\n```\nhello-pyqt.py\n```\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QLabel\n\napp = QApplication(sys.argv)\nlabel = QLabel(\"Hello world!\")\n\nlabel.show()\nsys.exit(app.exec_())\n```\n\n"
    },
    {
      "title": "Python (PySide2)",
      "level": 4,
      "content": "- Пакет: pyside2AUR\n- Сайт: https://wiki.qt.io/Qt_for_Python\n- Команда запуска: python hello-pyside2.py\n\n```\nhello-pyside2.py\n```\n\n```\nimport sys\nfrom PySide2.QtWidgets import QApplication, QLabel\n\napp = QApplication(sys.argv)\nlabel = QLabel(\"Hello world!\")\n\nlabel.show()\nsys.exit(app.exec_())\n```\n\n"
    },
    {
      "title": "C#",
      "level": 4,
      "content": "Смотрите QtSharp.\n\n"
    },
    {
      "title": "Настройка журнала Qt",
      "level": 3,
      "content": "При использовании KDE и/или любой другой среды рабочего стола на основе Qt в журнал systemd может записываться много отладочной информации.\n\nИзменить поведение можно с помощью переменной окружения QT_LOGGING_RULES. Например, чтобы полностью отключить запись в журнал:\n\n```\n/etc/environment\n```\n\n```\nQT_LOGGING_RULES='*=false'\n```\n\nЧтобы отключить только отладочные записи, используйте QT_LOGGING_RULES=\"*.debug=false\".\n\n"
    },
    {
      "title": "Не применяется тема значков",
      "level": 3,
      "content": "Начиная с Qt 5.1, поддержка SVG переместилась в модуль. Поскольку qt5-base не зависит от qt5-svg, может случиться так, что qt5-base установлен, а qt5-svg нет. Так как SVG по умолчанию не поддерживается, значки молча пропускаются, и может показаться, что тема иконок не используется. Явная установка qt5-svg решает проблему.\n\n"
    },
    {
      "title": "Не применяется тема для приложений, запущенных от имени root",
      "level": 3,
      "content": "Поскольку файл темы пользователя ($XDG_CONFIG_HOME/Trolltech.conf) не читается другими аккаунтами, выбранная тема не будет применяться к приложениям X, запущенным от имени root. Возможные решения:\n\n- Создать символические ссылки, например # ln -s /home/пользователь/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n- Настроить тему в общесистемном файле: /etc/xdg/Trolltech.conf\n- Настроить тему пользователя root\n\n```\n# ln -s /home/пользователь/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n```\n\n"
    },
    {
      "title": "Не учитывается стиль Qt 4",
      "level": 3,
      "content": "Если чистые приложения Qt 4 (не KDE) не придерживаются выбранного вами стиля Qt 4, то вам, вероятно, придётся указать Qt 4, как найти стили KDE (Oxygen, Phase и т.д.). Вам просто нужно установить переменную окружения QT_PLUGIN_PATH. Например:\n\n```\nQT_PLUGIN_PATH=$HOME/.kde4/lib/kde4/plugins/:/usr/lib/kde4/plugins/\n```\n\nПосле этого qtconfig-qt4 сможет найти ваши стили KDE, и всё снова будет выглядеть красиво!\n\nТакже можно создать символическую ссылку из каталога стилей QT4 в каталог стилей KDE4:\n\n```\n# ln -s /usr/lib/{kde,qt}4/plugins/styles/название_темы\n```\n\n"
    },
    {
      "title": "Все приложения Qt 5 перестали запускаться после обновления Qt 5",
      "level": 3,
      "content": "Если вы видите такую ошибку:\n\n```\nQt FATAL: Cannot mix incompatible Qt library (version 0x50900) with this library (version 0x50901)\n```\n\nто, скорее всего, вы используете стороннюю платформу тем Qt 5 или плагин стиля, который не был перекомпилирован под последнюю версию Qt 5. Они обычно используют приватные заголовки Qt, что означает, что они зависят от точной версии Qt, а не только от совпадающего soname. Выясните, какую тему/стиль вы используете, проверив переменные окружения QT_STYLE_OVERRIDE и QT_QPA_PLATFORMTHEME, и пересоберите соответствующий пакет AUR.\n\n"
    },
    {
      "title": "QXcbConnection: XCB error: 2 (BadValue)",
      "level": 3,
      "content": "Создайте следующий файл [1]:\n\n```\n/etc/xdg/QtProject/qtlogging.ini\n```\n\n```\n[Rules]\nqt.qpa.xcb.xcberror=false\n```\n\n"
    },
    {
      "title": "Неправильное выравнивание или масштабирование графики",
      "level": 3,
      "content": "Смотрите HiDPI (Русский)#Qt 5.\n\n"
    },
    {
      "title": "Мёртвые клавиши не работают в приложениях Qt",
      "level": 3,
      "content": "Если вы настроили мёртвые клавиши (dead keys) и они работают в приложениях GTK, но не в KDE или приложениях Qt — возможно, у вас не загружен правильный файл compose в сеансе Xorg.\n\nДля проверки:\n\n1. запустите Qt-приложение с включенным правилом логирования qt.xkb.compose.debug, пример запуска qtqr: QT_LOGGING_RULES=qt.xkb.compose.debug=true qtqr\n1. затем попробуйте написать символ с использованием мёртвой клавиши, например <dead_circumflex> <e> для ввода ê (LATIN SMALL LETTER E WITH CIRCUMFLEX)\n1. если появилась ошибка qt.xkb.compose: failed to create compose table, то, вероятно, проблема именно в этом.\n\nДля решения сначала определите свою локаль. Затем, если ваша локаль не имеет собственной папки в /usr/share/X11/locale/, например fr_FR.UTF-8, найдите её в файле compose.dir, чтобы найти соответствующий файл compose (например en_US.UTF-8/Compose):\n\n```\n$ grep fr_FR.UTF-8 /usr/share/X11/locale/compose.dir\n```\n\n```\nen_US.UTF-8/Compose             fr_FR.UTF-8\nen_US.UTF-8/Compose:            fr_FR.UTF-8\n```\n\nЗатем создайте или отредактируйте файл ~/.XCompose для включения этого файла:\n\n```\n~/.XCompose\n```\n\n```\ninclude \"%S/en_US.UTF-8/Compose\"\n```\n\nПосле перезапуска Qt-приложения с правилом логирования QT_LOGGING_RULES=qt.xkb.compose.debug=true. ошибка qt.xkb.compose: failed to create compose table должна пропасть.\n\n"
    },
    {
      "title": "Диалог выбора файла работает очень медленно и приводит к краху приложения",
      "level": 3,
      "content": "Это могло случиться из-за заполнения файла ~/.config/QtProject.conf сотнями мегабайт мусора: удалите его. [2][3]\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Официальный сайт\n- Документация Qt\n- Planet Qt\n\n"
    }
  ]
}