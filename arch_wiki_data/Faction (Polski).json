{
  "title": "Faction (Polski)",
  "url": "https://wiki.archlinux.org/title/Faction_(Polski)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Faction to biblioteka C do tworzenia oprogramowania w oparciu o testy.\n\n"
    },
    {
      "title": "Instalacja",
      "level": 2,
      "content": "Zainstaluj pakiet libfactionAUR.\n\n"
    },
    {
      "title": "Użycie",
      "level": 2,
      "content": "Biblioteka udostępnia kilka makr C, aby przyspieszyć pisanie testów.\n\n- FI reprezentuje inicjalizację Faction (Faction Initialization)\n- FT oznacza test Faction (Faction Test)\n- FC oznacza zamknięcie Faction (Faction Close)\n\nPrzy użyciu makra FT wymagane są trzy pola.\n\n- AUTHORS() pobiera oddzieloną przecinkami listę nazwisk autorów otoczonych podwójnymi cudzysłowami.\n- SPEC() przyjmuje pojedynczy opis specyfikacji testu otoczony podwójnym cudzysłowem\n- Wyrażenie logiczne C (tak jak przy użyciu makr C assert)\n\nKonwencja nakazuje, aby testy Faction były pisane na dole pliku źródłowego zawierającego kod, który będzie testowany. Testy powinny być otoczone osłoną makra FACTION (patrz poniższy przykład), aby można je było włączyć/wyłączyć w czasie kompilacji. Kompilatory języka C, takie jak GNU C Compiler (GCC), oferują możliwość włączenia makr w wierszu poleceń (np. flaga -D).\n\n"
    },
    {
      "title": "Przykład",
      "level": 2,
      "content": "```\n/* To jest funkcja do przetestowania */\nint\nincrement(int input)\n{\n   return (input + 1);\n}\n\n#ifdef FACTION\n#include <faction.h>\n#include <limits.h>\nFI\n\n  FT(\n    AUTHORS( \"timetoplatypus\" ),\n    SPEC( \"increment() zwraca 1 po podaniu 0\" ),\n    increment(0) == 1\n  );\n\n  FT(\n    AUTHORS( \"timetoplatypus\" ),\n    SPEC( \"increment() zwraca 0 po podaniu największej wartości całkowitej\" ),\n    increment(INT_MAX) == 0\n  );\n\nFC\n#endif\n```\n\nMożna to skompilować za pomocą gcc nazwa_pliku.c -D FACTION.\n\n"
    },
    {
      "title": "Tryby",
      "level": 2,
      "content": "Istnieją dwa tryby, w których Faction może się kompilować: minimalnym i rozszerzonym.\n\nPowyższy przykład kompiluje Faction w trybie minimalnym. Minimalna kompilacja ma dokładnie trzy zależności biblioteczne: stdlib, stdio i getopt. Rozszerzona kompilacja ma dodatkowe zależności, w tym niektóre funkcje, które są dostępne tylko poprzez makro GNU feature test.\n\nTak więc, aby skompilować w trybie rozszerzonym, wystarczy zdefiniować makro GNU feature test na początku pliku. Na przykład, poprzedni przykład zmodyfikowany do kompilacji w trybie rozszerzonym wyglądałby następująco:\n\n```\n#ifdef FACTION\n#define _GNU_SOURCE\n#endif\n```\n\n```\n/* To jest funkcja do przetestowania */\nincrement(int input)\n{\n  return (input + 1);\n}\n\n#ifdef FACTION\n#include <faction.h>\n#include <limits.h>\nFI\n\n  FT(\n    AUTHORS( \"timetoplatypus\" ),\n    SPEC( \"increment() zwraca 1 po podaniu 0\" ),\n    increment(0) == 1\n  );\n\n  FT(\n    AUTHORS( \"timetoplatypus\" ),\n    SPEC( \"increment() zwraca 0 po podaniu największej wartości całkowitej\" ),\n    increment(INT_MAX) == 0\n  );\n\nFC\n#endif\n```\n\n"
    },
    {
      "title": "Funkcje trybu rozszerzonego",
      "level": 3,
      "content": "W trybie rozszerzonym,\n\n- dane wyjściowe mogą być opcjonalnie kopiowane do pliku dziennika określonego przez użytkownika przy użyciu flagi -l w czasie wykonywania.\n- Tabela wyników będzie dynamicznie dostosowywana do szerokości używanego terminala. W przeciwnym razie domyślnie przyjmuje szerokość 78 znaków.\n\n"
    },
    {
      "title": "Zobacz także",
      "level": 2,
      "content": "- Strona domowa Faction\n\n"
    }
  ]
}