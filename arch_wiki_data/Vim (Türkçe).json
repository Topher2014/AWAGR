{
  "title": "Vim (Türkçe)",
  "url": "https://wiki.archlinux.org/title/Vim_(T%C3%BCrk%C3%A7e)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "İlgili makaleler\n\n- Neovim\n- Vis\n\nVim bir terminal metin düzenleyicisidir. Sözdizimi vurgulama, kapsamlı bir yardım sistemi, yerel komut dosyası oluşturma (Vim script), metin seçimi için görsel bir mod, dosyaların karşılaştırılması (vimdiff(1)) , rview(1) ve rvim(1) gibi kısıtlı yeteneklere sahip araçlar dahil olmak üzere ek özelliklere sahip vi'nin genişletilmiş bir sürümüdür.\n\n"
    },
    {
      "title": "Kurulum",
      "level": 2,
      "content": "Aşağıdaki paketlerden birini kurun:\n\n- vim - Python, Lua, Ruby ve Perl yorumlayıcı desteği ile ancak GTK/X desteği olmadan.\n- gvim - Bu da GTK/X desteği ile yukarıdaki vim paketinin aynısını sağlar.\n\n- vim paketi Xorg desteği olmadan oluşturulmuştur; özellikle +clipboard özelliği eksiktir, bu nedenle Vim birincil ve pano seçim arabellekleri ile çalışamayacaktır. gvim paketi ayrıca +clipboard özelliği ile Vimin CLI sürümünü sağlar.\n- Resmi olmayan herecura deposu da bir dizi Vim/gVim varyantı sağlar: vim-cli, vim-gvim-common, vim-gvim-gtk3, vim-rt ve vim-tiny.\n\n"
    },
    {
      "title": "Kullanım",
      "level": 2,
      "content": "Vim' in nasıl kullanılacağına ilişkin temel bir genel bakış için, vimtutor (terminal sürümü için) veya gvimtutor (grafik sürümü için) çalıştırarak Vim öğreticisini izleyin.\n\nVim :h konu komutu ile erişilebilen geniş bir yardım sistemi içerir. Konular komutları, yapılandırma seçeneklerini, tuş bağlamalarını, eklentileri vb. içerir. Yardım sistemi hakkında bilgi almak ve konular arasında geçiş yapmak için :h komutunu (herhangi bir konu olmadan) kullanın.\n\n"
    },
    {
      "title": "Konfigürasyon",
      "level": 2,
      "content": "Vim' in kullanıcıya özel yapılandırma dosyası ev dizininde bulunur: ~/.vimrc ve geçerli kullanıcının Vim dosyaları ~/.vim/ içinde bulunur. Global yapılandırma dosyası /etc/vimrc adresinde bulunur. defaults.vim ve archlinux.vim gibi global Vim dosyaları /usr/share/vim/ içinde bulunur.\n\n9.1.0327 sürümünden itibaren Vim freedesktop XDG Temel Dizin Spesifikasyonu'nu benimser: bu, yapılandırma dosyalarınızı artık ~/.config/vim/ altına yerleştirebileceğiniz anlamına gelir, böylece Vim ev dizininizi kirletmeyi bırakacaktır.\n\ngVim için, kullanıcıya özel yapılandırma dosyası ~/.gvimrc adresinde ve global yapılandırma dosyası /etc/gvimrc adresinde bulunur.\n\n- Sözdizimi vurgulama gibi yaygın olarak beklenen davranışlar defaults.vim içinde etkinleştirilir ve ~/.vimrc olmadığında yüklenir. defaults.vim dosyasının yüklenmesini tamamen devre dışı bırakmak için /etc/vimrc dosyasına let skip_defaults_vim=1 ekleyin. [1]. Alternatif olarak, ~/.vimrc mevcut olduğunda bile defaults.vim'i etkinleştirmek için, vim'de :h defaults'a bakın.\n- gVim hem Vim' in hem de gVim' in yapılandırma dosyasını yüklerken, Vim sadece Vim' in yapılandırma dosyasını yükler.\n\n"
    },
    {
      "title": "Kopyalama Panosu",
      "level": 3,
      "content": ":yank veya :put gibi Vim komutları normalde “” isimsiz kayıt ile çalışır. Eğer +clipboard özelliği mevcutsa ve değeri unnamed içeriyorsa, normalde isimsiz yazmaca gidecek olan Vim yank, silme, değiştirme ve koyma işlemleri bunun yerine X'teki PRIMARY arabelleği olan \"* pano yazmacını kullanacaktır.\n\nVarsayılan kaydı değiştirmek için, :set clipboard=unnamedplus yerine \"+ kaydını kullanabilirsiniz. \"+ pano kaydı X'teki CLIPBOARD arabelleğine karşılık gelir. clipboard seçeneğinin virgülle ayrılmış bir değere ayarlanabileceğine dikkat edilmelidir. Eğer :set clipboard=unnamedplus,unnamed yaparsanız, çekme işlemleri çekilen metni “+ yazmacına ek olarak ”* yazmacına da kopyalayacaktır (ancak, silme, değiştirme ve koyma işlemleri hala sadece \"+ yazmacında çalışacaktır).\n\nDaha fazla bilgi için bkz :help 'clipboard'. clipboard özelliği için ayarlanabilecek başka değerler de vardır. Bu özellik için ayarlanabilecek ilk geçerli değerin yardım konusuna yönlendirmek için :help clipboard-unnamed kullanabilirsiniz, ardından diğer tüm geçerli değerler için yardım konusuna yönlendirilirsiniz.\n\n- Kopyalama ve yapıştırma işlemleri için özel kısayollar oluşturulabilir. Örneğin Ctrl+c, Ctrl+v ve Ctrl+x bağlamak için [2] adresine bakın.\n- Vim çıktığında X panosu temizlenir. Vim seçimini X panosunda kalıcı hale getirmek için bir pano yöneticisi'ne ihtiyacınız vardır. Alternatif olarak, autocmd VimLeave * call system(\"echo -n $'” . escape(getreg(), “'”) . “' | xsel --input --clipboard\") öğesini .vimrc dosyanıza ekleyin. (xsel paketini gerektirir).\n\n"
    },
    {
      "title": "Sözdizimi vurgulama",
      "level": 3,
      "content": "Birçok programlama dili için sözdizimi vurgulamayı etkinleştirmek için:\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "Girintileme",
      "level": 3,
      "content": "Dosya türüne göre otomatik girintileme kurallarını etkinleştirir. Yani, hangi dosya türü üzerinde çalışıyorsan, o dosya türüne özgü girintileme kurallarını uygular:\n\n```\n:filetype indent on\n```\n\n"
    },
    {
      "title": "Görsel sargı",
      "level": 3,
      "content": "Varsayılan olarak wrap seçeneği açıktır, bu da Vim' e pencere genişliğinden daha uzun satırları sarmasını söyler, böylece satırın geri kalanı bir sonraki satırda görüntülenir. wrap seçeneği sadece metnin nasıl görüntüleneceğini etkiler, metnin kendisi değiştirilmez.\n\nSarma normalde, bir kelimenin ortasında olsa bile, pencereye uyan son karakterden sonra gerçekleşir. Daha akıllı kaydırma linebreak seçeneği ile kontrol edilebilir. Bu seçenek set linebreak ile etkinleştirildiğinde, breakat dize seçeneğinde listelenen ve varsayılan olarak bir boşluk ve bazı noktalama işaretleri içeren karakterlerden sonra kaydırma gerçekleşir (bkz. :help breakat).\n\nSarılmış satırlar normalde herhangi bir girintiye bakılmaksızın bir sonraki satırın başında görüntülenir. breakindent seçeneği, Vim' e uzun satırları sararken girintiyi dikkate almasını söyler, böylece sarılan satırlar daha önce görüntülenen satırla aynı girintiyi korur. ic|breakindent}} seçeneğinin davranışı breakindentopt seçeneği ile ince ayarlanabilir, örneğin Python dosyaları için sarılan satırı dört boşluk daha sağa kaydırmak için (ayrıntılar için :help breakindentopt'a bakın):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "Fareyi kullanmak",
      "level": 3,
      "content": "Vim fareyi kullanma yeteneğine sahiptir, ancak yalnızca belirli terminaller için çalışır:\n\n- xterm/urxvttabanlı terminal emülatörleri\n- gpm ile Linux konsolu (ayrıntılar için Konsol Fare Desteği bölümüne bakın)\n- PuTTY\n\nBu özelliği etkinleştirmek için ~/.vimrc içine bu satırı ekleyin:\n\n```\nset mouse=a\n```\n\nmouse=a seçeneği defaults.vim içinde ayarlanmıştır.\n\nTabii, işte metnin Türkçe çevirisi:\n\n"
    },
    {
      "title": "Ok tuşları ile satır sonlarına geçiş",
      "level": 3,
      "content": "Varsayılan olarak, bir satırın başında Left tuşuna basmak veya bir satırın sonunda Right tuşuna basmak, imlecin bir önceki veya sonraki satıra geçmesine izin vermez.\n\nVarsayılan davranış, set whichwrap=b,s,<,>,[,] ifadesini ~/.vimrc dosyanıza ekleyerek değiştirilebilir.\n\n"
    },
    {
      "title": "Dosyaları birleştirme",
      "level": 2,
      "content": "Vim, iki veya daha fazla dosya arasındaki farkları gösteren ve bunları rahatça birleştirmeye yardımcı olan bir diff editörü içerir. Diff editörünü çalıştırmak için vimdiff kullanın — sadece birkaç dosya belirtin: vimdiff file1 file2. İşte vimdiff-e özgü komutlar listesi.\n\nTable content:\nEylem | Kısayol\nsonraki değişiklik | ]c\nönceki değişiklik | [c\nfark al | do\nfark ver | dp\nkatmanı aç | zo\nkatmanı kapat | zc\ndosyaları yeniden tara | :diffupdate\n\n"
    },
    {
      "title": "Satır numaraları",
      "level": 3,
      "content": "Satır numarası sütununu göstermek için :set number kullanın. Varsayılan olarak mutlak satır numaraları gösterilir, göreli numaralar :set relativenumber ile etkinleştirilebilir. Her ikisini ayarlamak, karma satır numaraları sağlar—mevcut satır mutlakken, diğerleri göreli olur.\n\nBelirli bir satıra atlamak için :satır numarası veya satır numarasıgg kullanılabilir. Atlamalar bir atlama listesinde kaydedilir, detaylar için :h jump-motions bakın.\n\n"
    },
    {
      "title": "Yazım denetimi",
      "level": 3,
      "content": "Vim, yazım denetimi yapabilme yeteneğine sahiptir, etkinleştirmek için:\n\n```\nset spell\n```\n\nVarsayılan olarak yalnızca İngilizce dil sözlükleri yüklüdür (/usr/share/vim/vim82/spell/ içinde). Daha fazla sözlük, resmi depolarda vim-spell aramasıyla bulunabilir. Ek sözlükler, Vim'in FTP arşivi[dead link 2025-01-22 ⓘ] içinde de bulunabilir. Ek sözlükler ~/.vim/spell/ klasörüne yerleştirilebilir ve :setlocal spell spelllang=en_us komutuyla etkinleştirilebilir (en_us yerine gerekli sözlüğün adını yazın).\n\nTable content:\nEylem | Kısayol\nsonraki yazım | ]s\nönceki yazım | [s\nyazım önerileri | z=\nyazım doğru, ekle | zg\nyazım doğru, oturum | zG\nyazım yanlış, ekle | zw\nyazım yanlış, oturum | zW\ndosyada tüm yazım tekrarla | :spellr\n\nNote: **tex** \n\n- İki dilde (örneğin İngilizce ve Almanca) yazım denetimi etkinleştirmek için set spelllang=en,de ifadesini ~/.vimrc veya /etc/vimrc dosyanıza ekleyin ve sonra Vimi yeniden başlatın.\n- Yazım denetimini belirli dosya türleri için (örneğin .txt) etkinleştirmek için FileType eklentisini ve dosya türü tespiti için özel bir kural kullanabilirsiniz. txt ile biten herhangi bir dosya için yazım denetimini etkinleştirmek üzere /usr/share/vim/vimfiles/ftdetect/plaintext.vim dosyasını oluşturun ve bu dosyaya autocmd BufRead,BufNewFile *.txt set filetype=plaintext satırını ekleyin. Ardından, autocmd FileType plaintext setlocal spell spelllang=en_us satırını ~/.vimrc veya /etc/vimrc dosyanıza ekleyin ve Vimi yeniden başlatın. Alternatif olarak, sadece autocmd BufRead,BufNewFile *.txt setlocal spell satırını ~/.vimrc veya /etc/vimrc dosyanıza ekleyip Vimi yeniden başlatabilirsiniz. Bu satırı (özellikle *.txt) yazım denetimi için hedef dosya türlerini içerecek şekilde düzenlemeyi unutmayın.\n- Sadece LaTeX (veya TeX) belgeleri için yazım denetimini etkinleştirmek için autocmd FileType tex setlocal spell spelllang=en_us ifadesini ~/.vimrc veya /etc/vimrc dosyanıza ekleyin ve Vimi yeniden başlatın.\n\n"
    },
    {
      "title": "Çalışma durumunu kaydetme",
      "level": 3,
      "content": "Normalde, vim'den çıkarken açılmış dosyalar, komut satırı geçmişi, kopyalanmış metin gibi tüm gereksiz bilgiler yok edilir. Bu bilgilerin korunması aşağıdaki yöntemlerle yapılandırılabilir.\n\n"
    },
    {
      "title": "viminfo dosyaları",
      "level": 4,
      "content": "viminfo dosyası, komut satırı geçmişini, arama dizgisi geçmişini, giriş satırı geçmişini, kayıtların içeriğini, dosyalar için işaretleri, dosyalar içindeki konum işaretlerini, son arama/değiştirme desenini (oturum içindeki arama modunda n ve & ile kullanılacak), tampon listesini ve tanımladığınız herhangi bir global değişkeni saklamak için kullanılabilir. viminfo modunun kullanılabilir olması için, yüklediğiniz vim sürümünün +viminfo özelliği ile derlenmiş olması gerekir.\n\nviminfo dosyanızda nelerin saklanacağını yapılandırmak için, ~/.vimrc dosyanıza (örneğin) aşağıdakini ekleyin:\n\n```\nset viminfo='10,<100,:100,%,n~/.vim/.viminfo\n```\n\nBurada her parametre bir tanımlayıcı ile başlar:\n\n```\n'q  : q, hatırlanan düzenlenmiş dosya sayısı\n<m  : m, her kayıt için kaydedilen satır sayısı\n:p  : p, hatırlanan komut satırı sayısı\n%   : tampon listesini kaydeder ve geri yükler\nn...: viminfo dosyalarının tam yolu (bu \"n\" bir literal olarak belirtilmiştir)\n```\n\nMevcut bir viminfo dosyasının, mevcut oturum bilgileriyle güncellenirken nasıl değiştirildiğine dair ayrıntılar için resmi viminfo dokümanına bakın. İşte metnin Türkçe çevirisi:\n\n"
    },
    {
      "title": "Oturum dosyaları",
      "level": 4,
      "content": "Oturum dosyaları, belirli oturumların durumunu zaman içinde kaydetmek için kullanılabilir. Her oturum veya proje için ayrı bir oturum dosyası kullanılabilir. Bu özelliğin kullanılabilir olması için yüklediğiniz vim sürümünün +mksession özelliği ile derlenmiş olması gerekir.\n\nBir oturum içinde, :mksession[!] [my_session_name.vim] mevcut dizine bir vim scripti yazacaktır; dosya adı sağlamazsanız varsayılan olarak Session.vim kullanılır. İsteğe bağlı ! ile aynı ad ve yol altında mevcut bir oturum dosyası üzerine yazılabilir.\n\nBir Vim oturumu, terminalden Vim başlatıldığında:\n\n```\n$ vim -S [my_session_name.vim]\n```\n\nya da zaten açık olan bir oturum tamponunda Vim komutunu çalıştırarak:\n\n```\n:source my_session_name.vim\n```\n\nyeniden yüklenebilir.\n\nNelerin kaydedildiği ve oturum dosyası seçenekleri hakkında daha fazla detay için Vim belgelerine bakabilirsiniz. Örnekler için buraya göz atabilirsiniz.\n\n"
    },
    {
      "title": "İmleci konumunu kaydetme",
      "level": 4,
      "content": "Vim wiki'de Önceki düzenleme oturumundaki dosya konumuna imleci geri yükleme konusuna bakın.\n\n"
    },
    {
      "title": "vi komutunu Vim ile değiştirme",
      "level": 3,
      "content": "vi için vim alias'ı oluşturun.\n\nAlternatif olarak, sudo vi yazıp vim almak isterseniz, vi-vim-symlinkAUR paketini yükleyin; bu, vi'yi kaldırıp yerine vim'e bir symlink oluşturacaktır. Bu symlink'i kendiniz de oluşturabilir ve /usr/bin'den daha üst bir konuma yerleştirerek önceliğini artırabilirsiniz.\n\n"
    },
    {
      "title": "DOS/Windows satır sonları",
      "level": 3,
      "content": "Her satırın sonunda bir ^M varsa, bu, MS-DOS veya Windows'ta oluşturulmuş bir metin dosyasını düzenlediğiniz anlamına gelir. Linux'ta satır sonu için yalnızca bir satır besleme karakteri (LF) kullanılırken, Windows/MS DOS sistemlerinde hem bir satır sonu (LF) hem de bir karaker dönüşü (CR) kullanılır. Bu karakter dönüşleri ^M olarak görüntülenir.\n\nBir dosyadan tüm karakter dönüşlerini kaldırmak için:\n\n```\n:%s/^M//g\n```\n\nNot: ^ bir kontrol harfidir. Kontrol dizisini girmek için Ctrl+v,Ctrl+m tuşlarına basın.\n\nAlternatif olarak, dos2unix paketini yükleyip dos2unix dosya komutunu çalıştırarak dosyayı düzeltebilirsiniz.\n\n"
    },
    {
      "title": "gVim penceresinin altında boş alan",
      "level": 3,
      "content": "Pencere boyut ipuçlarını göz ardı edecek şekilde yapılandırılmış bir pencere yöneticisi kullanıldığında, gVim işlevsiz alanı GTK tema arka plan rengi ile dolduracaktır.\n\nÇözüm, gVim'in pencerenin alt kısmında ne kadar alan ayıracağını ayarlamaktır. ~/.vimrc dosyanıza aşağıdaki satırı ekleyin:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Vim bir sayfa olarak",
      "level": 3,
      "content": "Scriptler Vim'in terminal pager olarak kullanılmasını sağlar, bu da renk şemaları gibi çeşitli vim özelliklerinden faydalanma imkanı sunar. Varsayılan sayfa aygıtını değiştirmek için PAGER ortam değişkenini export edin.\n\nVim, /usr/share/vim/vim91/macros/less.sh scripti ile birlikte gelir; bunun için bir alias oluşturabilirsiniz. Bu scriptin less(1) § OPTIONS'da belirtilen herhangi bir komut satırı bayrağını desteklemediğini unutmayın.\n\nAlternatif olarak, vimpager Vim scripti de mevcuttur. Tüm komut satırı bayraklarının desteklenmediğini unutmayın; desteklenen bayrakların listesi GitHub'da mevcuttur.\n\nBir sayfa ile bir editör arasında bir orta yol, [g]vim -R'dir (gvim -R gview ile eşdeğerdir). Bu, editörün dosyaları readonly modda açmasına neden olur. Dosyaları değiştirmeyen tüm editör özellikleri normal şekilde kullanılabilir. Aslında, readonly modu açıkça geçersiz kılınabilir.\n\n"
    },
    {
      "title": "Arama sonuçlarını vurgulama",
      "level": 3,
      "content": "Arama sırasında eşleşecek ilk dizgiyi vurgulamak için, ~/.vimrc dosyanıza aşağıdaki satırı ekleyin:\n\n```\nset incsearch\n```\n\nArama tamamlandıktan sonra tüm eşleşen dizgileri vurgulamak için ise aşağıdaki satırı ekleyin:\n\n```\nset hlsearch\n```\n\n- hlsearch ayarı, tüm eşleşmeleri vurgulu tutar. Bu davranış istenmeyebilir, bu yüzden bir sonraki aramaya kadar vurgulamayı geçici olarak devre dışı bırakmak için :nohlsearch komutunu çalıştırın. Bu komutu sıkça çalıştırıyorsanız, bir tuşa bağlamayı düşünün.\n- Bu davranış, s veya g gibi diğer komutlarla birlikte regex eşleştirirken de gözlemlenecektir.\n\n"
    },
    {
      "title": "XDG Temel Dizin spesifikasyonu için geçici çözüm",
      "level": 3,
      "content": "7.3.1178 tarihinden itibaren Vim, ~/.vimrc bulunmadığında ~/.vim/vimrc dosyasını arayacaktır.\n\n```\n\"$XDG_CONFIG_HOME\"/vim/vimrc\n```\n\n```\nset runtimepath^=$XDG_CONFIG_HOME/vim\nset runtimepath+=$XDG_DATA_HOME/vim\nset runtimepath+=$XDG_CONFIG_HOME/vim/after\n\nset packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim\nset packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after\n\nlet g:netrw_home = $XDG_DATA_HOME.\"/vim\"\ncall mkdir($XDG_DATA_HOME.\"/vim/spell\", 'p')\n\nset backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')\nset directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')\nset undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')\nset viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')\n\nif !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif\n```\n\n```\n~/.profile\n```\n\n```\nexport GVIMINIT='let $MYGVIMRC=\"$XDG_CONFIG_HOME/vim/gvimrc\" | source $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC=\"$XDG_CONFIG_HOME/vim/vimrc\" | source $MYVIMRC'\n```\n\n[G]VIMINIT ortam değişkeni Neovim'i de etkiler. Vim ve Neovim için ayrı yapılandırmalar isteniyorsa, aşağıdakiler daha iyi bir seçim olacaktır:\n\n```\nexport GVIMINIT='let $MYGVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/gvimrc\" : \"$XDG_CONFIG_HOME/nvim/init.gvim\" | so $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/vimrc\" : \"$XDG\n```\n\n"
    }
  ]
}