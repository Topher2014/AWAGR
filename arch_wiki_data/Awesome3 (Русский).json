{
  "title": "Awesome3 (Русский)",
  "url": "https://wiki.archlinux.org/title/Awesome3_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Оконный менеджер\n- Сравнение тайловых оконных менеджеров\n- Среда рабочего стола\n- Экранный менеджер\n- Функциональность файлового менеджера\n- Меню Xdg\n\nС официального сайта:\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет awesome. Разрабатываемая версия доступна в пакете awesome-gitAUR, считается нестабильной и может иметь отличия в API настроек.\n\n"
    },
    {
      "title": "Запуск",
      "level": 2,
      "content": "Запустите awesome с помощью xinit. Для того, чтобы использовать входящий в комплект файл xsession, смотрите статью Экранный менеджер.\n\n"
    },
    {
      "title": "GNOME",
      "level": 3,
      "content": "Вы можете настроить GNOME использовать awesome как визуальный интерфейс, но держать GNOME работющем в фоновом режиме. Смотрите awesome-gnomeAUR.\n\n"
    },
    {
      "title": "XFCE",
      "level": 3,
      "content": "Смотрите Xfce (Русский)#Использовать сторонний оконный менеджер.\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Файл конфигурации на основе языка программирования lua находится в ~/.config/awesome/rc.lua.\n\n"
    },
    {
      "title": "Создание файла настроек",
      "level": 3,
      "content": "Во-первых, создайте новый каталог, необходимый в следующем шаге:\n\n```\n$ mkdir -p ~/.config/awesome/\n```\n\nAwesome попытается использовать настройки, которые содержится в файле ~/.config/awesome/rc.lua. Он не создается автоматически, поэтому скопируйте шаблон:\n\n```\n$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome/\n```\n\nСинтаксис файла настроек часто изменяется при обновлении awesome. Поэтому повторите эту команду, если с awesome произошло что-то непонятное или же вы хотите изменить настройки.\n\nДополнительная информация о настройке доступна в разделе Configuration в документации awesome.\n\n"
    },
    {
      "title": "Примеры",
      "level": 4,
      "content": "Отличные примеры файлов rc.lua можно найти по следующим ссылкам:\n\n- Тема со скриншотами Awesome\n- Настройки Awesome от Setkeh\n- User configuration that supports different themes, including a status bar\n- Awesome configuration with two modern themes\n\n"
    },
    {
      "title": "Расширения",
      "level": 3,
      "content": "Несколько расширений, доступных для awesome:\n\nTable content:\nРасширение | Функциональность | Версия\nRevelation | Поверхностный просмотр всех открытых клиентов | Awesome 3.5+\nShifty | Динамические тэги | Awesome 3.5\nNaughty | Всплывающие уведомления | Awesome 3.5+\nVicious Obvious Bashets | Дополнительные виджеты | Awesome 3.5\n\n- Revelation\n\n- Shifty\n\n- Naughty\n\n- Vicious\n- Obvious\n- Bashets\n\n"
    },
    {
      "title": "Автозапуск программ",
      "level": 3,
      "content": "Для использования XDG Autostart установите xorg-xrdb и dex и добавьте следующие строки в файл ~/.config/awesome/rc.lua:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\n    'if (xrdb -query | grep -q \"^awesome\\\\.started:\\\\s*true$\"); then exit; fi;' ..\n    'xrdb -merge <<< \"awesome.started:true\";' ..\n    -- list each of your autostart commands, followed by ; inside single quotes, followed by ..\n    'dex --environment Awesome --autostart --search-paths \"${XDG_CONFIG_HOME:-$HOME/.config}/autostart:${XDG_CONFIG_DIRS:-/etc/xdg}/autostart\";'\n    )\n```\n\nДля демонов без трея можно использовать systemd-юниты с целью autostart.target, что более функционально, так как они могут быть настроены так, чтобы продолжали работать даже после непредвиденной остановки.\n\nНаконец, возможно создать скрипт autorun.sh со следующим содержимым:\n\n```\n~/.config/awesome/autorun.sh\n```\n\n```\n#!/bin/sh\n\nrun() {\n  if ! pgrep -f \"$1\" ;\n  then\n    \"$@\"&\n  fi\n}\n```\n\nНе забудьте сделать его исполняемым.\n\nДля добавления программ автозапуск просто добавляйте строки вида run \"программа [аргументы]\" в файл autorun.sh. Функция run ищет указанную программу среди запущенных процессов и запускает её, только если ничего не нашлось. Проверьте корректность файла, попробовав запустить его напрямую:\n\n```\n$ ~/.config/awesome/autorun.sh\n```\n\nИ, если всё хорошо, пропишите его в файле настроек:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\"~/.config/awesome/autorun.sh\")\n```\n\n"
    },
    {
      "title": "Выбор раскладки клавиатуры",
      "level": 3,
      "content": "Есть несколько способов изменения раскладки клавиатуры.\n\n"
    },
    {
      "title": "С помощью setxkbmap",
      "level": 4,
      "content": "В стандартных настройках awesome уже активирован виджет раскладки.\n\nЧтобы временно добавить несколько доступных раскладок, выполните\n\n```\n$ setxkbmap -layout \"us,ru\"\n```\n\nКлик по виджету будет переключать раскладку. Если вы хотите переключать раскладки с помощью клавиатуры, к команде можно добавить, например, -option \"grp:alt_shift_toggle\" для переключения с помощью Shift+Alt. То есть полная команда будет выглядеть так:\n\n```\n$ setxkbmap -layout \"us,ru\" -option \"grp:alt_shift_toggle\"\n```\n\nПример для добавления фонетической русской раскладки:\n\n```\n$ setxkbmap -model pc105 -option \"grp:shifts_toggle,compose:sclk\" \"us,ru(phonetic_YAZHERTY)\"\n```\n\nгде\n\n- в качестве клавиши Compose используется Scroll Lock, а переключение раскладки настроено на Left Shift + Right Shift;\n- используется клавиатура со 105 клавишами.\n\nЧтобы сделать изменения постоянными, добавьте команду в автозапуск. Например, если вы используете LightDM, можно добавить команду в файл .xprofile.\n\n"
    },
    {
      "title": "С помощью rc.lua",
      "level": 4,
      "content": "Начиная с версии 4, в awesome можно настроить переключение раскладок. Для переключения раскладки с помощью Shift+Alt добавьте следующие две строки в globalkeys:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\n-- {{{ Key bindings\nglobalkeys = gears.table.join(\n    -- ...\n    awful.key({ \"Shift\" }, \"Alt_L\", function () mykeyboardlayout.next_layout(); end),\n    awful.key({ \"Mod1\" }, \"Shift_L\", function () mykeyboardlayout.next_layout(); end)\n)\n```\n\nНеобходимо заранее настроить несколько раскладок, например, с помощью setxkbmap или в файлах настроек X.\n\nКоманду для добавления раскладок можно добавить в #Автозапуск программ.\n\n"
    },
    {
      "title": "С помощью Xorg",
      "level": 4,
      "content": "Смотрите статью Конфигурация клавиатуры в Xorg.\n\n"
    },
    {
      "title": "Темы оформления",
      "level": 3,
      "content": "Beautiful — это библиотека Lua, которая позволяет вам задавать темы оформления для awesome из внешних файлов. С её помощью весьма легко изменить «на лету» цвета или обои awesome без внесения изменений в файл rc.lua.\n\nТема по-умолчанию содержится в /usr/share/awesome/themes/default. Скопируйте её ~/.config/awesome/themes/default и измените theme_path в rc.lua.\n\n```\n-- beautiful.init(gears.filesystem.get_configuration_dir() .. \"/themes/default/theme.lua\")\nlocal theme_path = string.format(\"%s/.config/awesome/themes/%s/theme.lua\", os.getenv(\"HOME\"), \"default\")\nbeautiful.init(theme_path)\n```\n\nМожно скопировать другие темы и заменить «default» на, например, «sky», «gtk», «zenburn» и т.д. — локальные копии тем легко изучать, изменять и тестировать. Смотрите [1] для информации о дополнительных параметрах тем. Например, чтобы добавить промежуток между окнами, добавьте\n\n```\nbeautiful.useless_gap = 5\n```\n\nв файл rc.lua.\n\n"
    },
    {
      "title": "Обои рабочего стола",
      "level": 4,
      "content": "Beautiful может обрабатывать ваши обои, поэтому вам не нужно устанавливать их в ваших файлах .xinitrc или .xsession. Это позволяет иметь конкретные обои для каждой темы.\n\nЕсть два способа установить обои:\n\n- в вашей копии файла theme.lua: -- абсолютный путь theme.wallpaper = \"/путь/к/фону.png\" -- относительно вашего каталога themes theme.wallpaper = theme_path .. \"путь/к/фону.png\"\n- или в файле настроек rc.lua, где-нибудь между beautiful.init и local function set_wallpaper: -- абсолютный путь beautiful.wallpaper = \"/путь/к/фону.png\" -- относительно каталога настроек beautiful.wallpaper = awful.util.get_configuration_dir() .. \"путь/к/фону.png\"\n\n```\n-- абсолютный путь\ntheme.wallpaper = \"/путь/к/фону.png\"\n\n-- относительно вашего каталога themes\ntheme.wallpaper = theme_path .. \"путь/к/фону.png\"\n```\n\n```\n-- абсолютный путь\nbeautiful.wallpaper = \"/путь/к/фону.png\"\n\n-- относительно каталога настроек\nbeautiful.wallpaper = awful.util.get_configuration_dir() .. \"путь/к/фону.png\"\n```\n\nМожно выбирать случайные обои с помощью такого скрипта: [2] — добавьте его в rc.lua, обновив настройки под ваши нужды. Модификация скрипта, которая умеет сама считывать список файлов из указанного каталога: [3].\n\n"
    },
    {
      "title": "Скрыть / показать wibox",
      "level": 3,
      "content": "Чтобы привязать комбинацию Modkey + b для показа/скрытия строки состояния на активном рабочем столе (как в awesome 2.3), добавьте в ваш globalkeys в rc.lua:\n\n```\nawful.key({ modkey }, \"b\",\n          function ()\n              myscreen = awful.screen.focused()\n              myscreen.mywibox.visible = not myscreen.mywibox.visible\n          end,\n          {description = \"toggle statusbar\"}\n),\n```\n\nПоказывать wibox (или выполнять другие действия) только при нажатой Mod-клавише невозможно из awesome, но есть python-скрипт для этого: autohidewibox.\n\n"
    },
    {
      "title": "Скриншот (снимок экрана)",
      "level": 3,
      "content": "Смотрите статью Keyboard input (Русский) для правильного назначения кнопки PrtSc. Затем установите какую-нибудь программу для создания скриншотов например scrot.\n\nДобавьте в массив globalkeys:\n\n```\nawful.key({ }, \"Print\", function () awful.util.spawn(\"scrot -e 'mv $f ~/screenshots/ 2>/dev/null'\", false) end),\n```\n\nЭта функция сохраняет скриншоты внутри ~/screenshots/, измените путь/папку при необходимости.\n\n"
    },
    {
      "title": "Удаление пробелов окна",
      "level": 3,
      "content": "Начиная с версии awesome 3.4, можно удалить небольшие зазоры между окнами; в awful.rules.rules таблице есть раздел properties, добавьте к нему\n\n```\nsize_hints_honor = false\n```\n\n"
    },
    {
      "title": "Прозрачность",
      "level": 3,
      "content": "Смотрите Xorg (Русский)#Композит.\n\nВ awesome 3.5, прозрачность окна можно установить динамически с помощью сигналов . Например, rc.lua будет содержать следующее:\n\n```\nclient.connect_signal(\"focus\", function(c)\n                              c.border_color = beautiful.border_focus\n                              c.opacity = 1\n                           end)\nclient.connect_signal(\"unfocus\", function(c)\n                                c.border_color = beautiful.border_normal\n                                c.opacity = 0.7\n                             end)\n```\n\n"
    },
    {
      "title": "wibox'ы",
      "level": 4,
      "content": "В awesome есть встроенная поддержка псевдо-прозрачности. Чтобы задействовать её, добавьте 2 шестнадцатеричные цифры к цветам в вашем файле темы (например, ~/.config/awesome/themes/default/theme.lua, который, как правило, копия /usr/share/awesome/themes/default/theme.lua) как показано здесь:\n\n```\ntheme.bg_normal = \"#000000AA\"\n```\n\nгде \"AA\" это значение прозрачности.\n\nЧтобы менять прозрачность текущего окна, нажатием Modkey + PgUp/PgDown, можно установить transset-dfAUR и внести следующие изменения в вашем rc.lua:\n\n```\nglobalkeys = gears.table.join(\n    -- Ваше сочетание клавиш\n    [...]\n    awful.key({ modkey }, \"Next\", function (c)\n        awful.util.spawn(\"transset-df --actual --inc 0.1\")\n    end),\n    awful.key({ modkey }, \"Prior\", function (c)\n        awful.util.spawn(\"transset-df --actual --dec 0.1\")\n    end),\n    -- Другое ваше сочетание клавиш\n    [...]\n)\n```\n\n"
    },
    {
      "title": "Промежуток между виджетами",
      "level": 3,
      "content": "Стандартный файл rc.lua размещает в wibox'е виджеты, в том числе значок раскладки клавиатуры и часы, с очень маленьким промежутком между ними. Его можно увеличить с помощью свойства spacing:\n\n```\n{ -- Right widgets\n       layout = wibox.layout.fixed.horizontal,\n       spacing = 10,\n       mykeyboardlayout,\n       ...\n```\n\n"
    },
    {
      "title": "ImageMagick",
      "level": 3,
      "content": "You may have problems if you set your wallpaper with imagemagick's display command. It does not work well with xcompmgr. Please note that awsetbg may be using display if it does not have any other options. Installing habak, feh, hsetroot or whatever should fix the problem (grep -A 1 wpsetters /usr/bin/awsetbg to see your options).\n\n"
    },
    {
      "title": "Передача информации виджетам при помощи awesome-client",
      "level": 3,
      "content": "Вы можете легко передать текст виджету. Для этого создайте новый виджет:\n\n```\nmywidget = widget({ type = \"textbox\", name = \"mywidget\" })\nmywidget.text = \"initial text\"\n```\n\nДля обновления текста из внешнего источника, используйте awesome-client:\n\n```\necho -e 'mywidget.text = \"new text\"' | awesome-client\n```\n\nНе забудьте добавить виджет в раздел wibox Вашего файла настроек.\n\n"
    },
    {
      "title": "Использование другой панели с awesome",
      "level": 3,
      "content": "Если вам нравится в awesome все, кроме того, как выглядит стандартная панель, то вы можете установить другую, например xfce4-panel.\n\nЗатем добавьте его в секцию autorun вашего rc.lua. Вы можете также закомментировать секцию, которая создает wibox'ы для каждого экрана (начиная с mywibox[s] = awful.wibox({ position = \"top\", screen = s })) но это не так необходимо. Не забудьте проверить ваш rc.lua на наличие ошибок, введя:\n\n```\n$ awesome -k rc.lua\n```\n\nВы должны также изменить modkey+R данное сочетание клавиш, чтобы запустить другое приложение запуска вместо встроенного в awesome. Для примеров смотрите List of applications/Other#Application launchers. Не забудьте добавить:\n\n```\nproperties = { floating = true } },\n    { rule = { instance = \"$ваше_запускаемое_приложение\" },\n```\n\nв ваш rc.lua.\n\n"
    },
    {
      "title": "Каталоги приложений в строке меню",
      "level": 3,
      "content": "awesome содержит menubar. По умолчанию при нажатии Mod+p откроется похожее на dmenu меню приложений в верхней части экрана. Оно ищет файлы .desktop в каталогах $XDG_DATA_DIRS/applications/ и $XDG_DATA_HOME/applications/.\n\nЧтобы добавить или заменить эти каталоги, можно изменить menubar.menu_gen.all_menu_dirs:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\ntable.insert(menubar.menu_gen.all_menu_dirs, \"/path/to/custom/applications/\")\n```\n\nСтоит отметить, что файлы .desktop перечитываются каждый раз при запуске awesome, тем самым замедляя запуск. Если вы запускаете программы другим способом, то меню можно отключить в rc.lua путём удаления local menubar = require(\"menubar\") и других упоминаний переменной menubar.\n\n"
    },
    {
      "title": "Всплывающие меню",
      "level": 3,
      "content": "Существует простое меню в awesome 3, - упрощённое пользовательское меню. [4] Если вы хотите меню freedesktop.org, смотрите тут awesome-freedesktop.\n\nЕсли вы предпочитаете видеть более традиционное меню приложений, когда вы щёлкаете по иконке Awesome или делаете щелчок правой кнопкой мышки по пустому участку рабочего стола, вы можете воспользоваться инструкциями, приведёнными в статье Xdg-menu (Русский)#Awesome. Однако это меню не обновляется при добавлении или удалении программ. Поэтому не забывайте выполнять команду для обновления вашего меню. Она может выглядеть примерно так:\n\n```\nxdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "Заголовки окон",
      "level": 3,
      "content": "Включить заголовки окон в awesome легко, просто установите в файле настроек переменную titlebars_enabled в true (в разделе Rules):\n\n```\n{ rule_any = {type = { \"normal\", \"dialog\" }\n     }, properties = { titlebars_enabled = true }\n   },\n```\n\nТем не менее, вы можете захотеть иметь возможность включения или отключения заголовков окон. Для этого вы можете добавить сочетание клавиш в clientkeys:\n\n```\n-- working toggle titlebar\n   awful.key({ modkey, \"Control\" }, \"t\", function (c) awful.titlebar.toggle(c)         end,\n             {description = \"Show/Hide Titlebars\", group=\"client\"}),\n```\n\nЕсли вы хотите по умолчанию скрыть заголовки окон, выполните эту функцию сразу после создания заголовка окна (в обработчике сигнала \"manage\"):\n\n```\nawful.titlebar.hide(c)\n```\n\n"
    },
    {
      "title": "Уведомление о состоянии батареи",
      "level": 3,
      "content": "Этот пост в блоге содержит пример скрипта для rc.lua, показывающего простое уведомление о состоянии батареи. Заметьте, что для него требуется модуль naughty для уведомлений (установлен по умолчанию в версии 3.5). Ещё примеры есть на сайте awesome.\n\n"
    },
    {
      "title": "Мультимедийные клавиши",
      "level": 3,
      "content": "Можно управлять громкостью и статусом воспроизведения с клавиатуры с помощью amixer (пакет alsa-utils) и playerctl. Назначьте выполнение этих команд на соответствующие мультимедийные клавиши:\n\n```\n-- Volume Keys\n   awful.key({}, \"XF86AudioLowerVolume\", function ()\n     awful.util.spawn(\"amixer -q -D pulse sset Master 5%-\", false) end),\n   awful.key({}, \"XF86AudioRaiseVolume\", function ()\n     awful.util.spawn(\"amixer -q -D pulse sset Master 5%+\", false) end),\n   awful.key({}, \"XF86AudioMute\", function ()\n     awful.util.spawn(\"amixer -D pulse set Master 1+ toggle\", false) end),\n   -- Media Keys\n   awful.key({}, \"XF86AudioPlay\", function()\n     awful.util.spawn(\"playerctl play-pause\", false) end),\n   awful.key({}, \"XF86AudioNext\", function()\n     awful.util.spawn(\"playerctl next\", false) end),\n   awful.key({}, \"XF86AudioPrev\", function()\n     awful.util.spawn(\"playerctl previous\", false) end),\n```\n\n"
    },
    {
      "title": "Экранная клавиатура Steam",
      "level": 3,
      "content": "Экранная клавиатура Steam, активируемая с помощью Steam Controller, может зависнуть после попытки ввести один символ. Это происходит потому, что окно, которое должно получить ввод, должно иметь фокус, и клавиатура будет ждать, пока этот ввод не будет успешно отправлен. Ручное переключение фокуса на другое окно отправит ввод на него, и клавиатура отвиснет до следующей попытки ввода символа.\n\nХитрость заключается в том, чтобы предотвратить получение фокуса клавиатурой. Добавьте следующий сигнал в вашу конфигурацию (или объедините с существующим сигналом focus):\n\n```\nclient.connect_signal(\"focus\", function(c)\n    if awful.rules.match(c, { name = \"^Steam Keyboard$\" }) then\n        awful.client.focus.history.previous()\n    end\nend)\n```\n\nЭто будет возвращать фокус предыдущему окну каждый раз, когда фокус переходит на клавиатуру. Поскольку ввод на клавиатуре обрабатывается клиентом Steam и потому не требует фокуса, ввод текста теперь будет работать правильно.\n\n"
    },
    {
      "title": "Отладка rc.lua",
      "level": 3,
      "content": "Xephyr позволяет запускать X, вложенный в окно клиента другого Х. Это позволяет проверять работоспособность rc.lua, не нарушая работу текущего сеанса. Начните с копирования rc.lua в новый файл (например rc.lua.new), и изменяйте его по мере необходимости. Затем запустите новый экземпляр awesome в Xephyr, передав ему путь к файлу настроек rc.lua.new:\n\n```\n$ Xephyr :1 -ac -br -noreset -screen 1152x720 &\n$ DISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new\n```\n\nПреимущество такого способа заключается в том, что вы не нарушите работу текущего рабочего стола awesome, избежите потенциальный сбой приложений X и потерю работоспособности. После завершения настройки и тестирования скопируйте rc.lua.new в rc.lua и перезапустите awesome.\n\n"
    },
    {
      "title": "Автоматический перезапуск",
      "level": 3,
      "content": "В дополнение к вышеописанному, вы можете использовать inotify-tools для автоматического перезапуска сеанса Awesome, находящегося внутри Xephyr при изменении любого файла настроек в директории ~/.config/awesome:\n\n```\n#!/usr/bin/env bash\n\nXephyr :1 -ac -br -noreset -screen 1920x1080 -dpi 96 &\nsleep 1\nDISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new &\ninstance=$!\n\nwhile inotifywait -r -e close_write ~/.config/awesome; do\n\tkill -s SIGHUP $instance\ndone\n```\n\n"
    },
    {
      "title": "awmtt",
      "level": 4,
      "content": "awmttAUR (Awesome WM Testing Tool — Утилита тестирования Awesome WM) — простой скрипт-обёртка над Xephyr. По умолчанию он будет использовать ~/.config/awesome/rc.lua.test. Если он не может найти тестовый файл, он будет использовать ваш фактический rc.lua. Вы также можете указать местоположение файла настроек, который вы хотите проверить:\n\n```\n$ awmtt start -C ~/.config/awesome/rc.lua.new\n```\n\nКогда вы закончите тестирование, закройте окно:\n\n```\n$ awmtt stop\n```\n\nИли сразу смотрите изменения, которые вы делаете в файл настроек с помощью следующей команды:\n\n```\n$ awmtt restart\n```\n\n"
    },
    {
      "title": "aawmtt",
      "level": 4,
      "content": "aawmttAUR (Another Awesome WM Testing Tool — Другая утилита для тестирования Awesome WM) — ещё одна реализация awmttAUR с перезапуском на лету по умолчанию.\n\nОна такая же awmtt-ng, но включает в себя несколько исправлений для механизма поиска дисплеев в Xorg, который не работает на некоторых машинах в случае с awmtt-ng.\n\nВ отличие от awmtt, эта реализация не пытается сначала запустить тестируемый файл, а запускает файл настроек по умолчанию.\n\nЧтобы открыть окно Xephyr с загруженным Awesome, просто запустите команду:\n\n```\n$ aawmtt\n```\n\nТеперь вывод из Awesome будет происходить в ваш терминал, и после изменения любых файлов в папке настроек, Awesome wm будет перезапущен.\n\nВ случае если вы хотите поменять директорию, где будет отслеживаться изменение файлов, или путь к файлу настроек, запустите команду:\n\n```\n$ aawmtt --config \"location_of_config_file\" --watch \"directory_to_watch_for_changes\"\n```\n\nПо умолчанию директория, в которой отслеживаются изменения, это родительская директория к вашему файлу настроек, то есть ~/.config/awesome.\n\n"
    },
    {
      "title": "Файл журналов",
      "level": 3,
      "content": "Если вы используете LightDM, awesome будет записывать ошибки в `$HOME/.xsession-errors`. Если вы используете .xinitrc для запуска awesome, смотрите вопрос «Where are logs, error messages or something?» на странице FAQ.\n\n"
    },
    {
      "title": "Клавиша Mod4",
      "level": 3,
      "content": "Awesome рекомендует переназначить mod4, которой по умолчанию является клавиша Super («Windows»). Если по какой-то причине она не распознаётся как mod4, используйте xmodmap чтобы узнать её. Для того чтобы изменить назначение, воспользуйтесь xev, чтобы найти код клавиши и имя клавиши для сопоставления. Затем добавьте нечто похожее в ~/.xinitrc\n\n```\nxmodmap -e \"keycode 115 = Super_L\" -e \"add mod4 = Super_L\"\nexec awesome\n```\n\nВ этом случае проблемой является то, что иногда xorg распознаёт код клавиши 115 неправильно, как клавишу 'Select'. Приведенная выше команда явно перераспределяет код ключа 115 на корректную клавишу 'Super_L'.\n\nДля того, чтобы переназначить mod4 с помощью setxkbmap (конфликтует с xmodmap) смотрите:\n\n```\ntail -50 /usr/share/X11/xkb/rules/evdev\n```\n\nДля установки клавиши caps lock как mod4 добавьте следующую строку в ~/.xinitrc:\n\n```\nsetxkbmap -option caps:hyper\n```\n\n"
    },
    {
      "title": "Исправление для Java приложений (серый интерфейс)",
      "level": 3,
      "content": "Смотрите Java (Русский)#Ошибки отрисовки приложений Java и [5].\n\n"
    },
    {
      "title": "Eclipse: невозможно изменить размер/переместить главное окно",
      "level": 3,
      "content": "Если главное окно \"прилипло\" и вы не можете переместить его или изменить размер (используя mod4 + левую/правую клавишу мыши) отредактируйте workbench.xml и установите fullscreen/maximized в значение false (если оно установлено), уменьшите цифру ширины и высоты на меньшую, чем размер одного вашего экрана рабочего стола.\n\nworkbench.xml можно найти в eclipse_workspace/.metadata/.plugins/org.eclipse.ui.workbench/. Отредактируйте строку:\n\n```\n<window height=\"xx\" maximized=\"true\" width=\"xx\" x=\"xx\" y=\"xx\"\n```\n\n"
    },
    {
      "title": "Netbeans: автозавершение кода отображается на неправильном экране",
      "level": 3,
      "content": "Если у вас два дисплея и вы используете автозавершение кода (Ctrl + Space) в Netbeans, оно может отображаться на неправильном экране. Может помочь это:\n\n```\n.config/awesome/rc.lua\n```\n\n```\nawful.rules.rules = {\n        ...\n\t{\n\t\trule_matches = { -- Исправление Netbeans\n\t\t\tclass = {\n\t\t\t\t\"sun-awt-X11-XWindowPeer\", \"NetBeans IDE 8.2\"\n\t\t\t},\n\t\t\tname = {\n\t\t\t\t\"win1\"\n\t\t\t}\n\t\t}, properties = { screen = 1 } -- даже если здесь экран 1, это всё равно работает и на втором экране (непонятно почему).\n\t},\n        ...\n\n}\n```\n\n"
    },
    {
      "title": "scrot: не получается сделать скриншот с выделением мышью с помощью сочетаний клавиш",
      "level": 3,
      "content": "При использовании scrot могут возникнуть проблемы с назначением сочетания клавиш для создания снимка области экрана с выделением мышью (scrot -s). Чтобы решить эту проблему, добавьте следующую строку в ваш rc.lua:\n\n```\nawful.key( { modkey,\t }, клавиша, nil, function () awful.spawn(\"scrot -s\") end)\n```\n\nОбратите внимание, что в функцию awful.key в аргумент press передаётся nil. Вместо этого функция-обработчик, которая запускает scrot, передаётся в аргумент release.\n\n"
    },
    {
      "title": "YouTube: полноэкранный режим показывает как в фоновом режиме",
      "level": 3,
      "content": "Если видео с YouTube появляется под вашим браузером в полноэкранном режиме, или скрывается под панелью управления, то добавьте в rc.lua\n\n```\n{ rule = { instance = \"plugin-container\" },\n  properties = { floating = true } },\n```\n\nДля Chromium\n\n```\n{ rule = { instance = \"exe\" },\n  properties = { floating = true } },\n```\n\nили:\n\n```\n{ rule = { role = \"_NET_WM_STATE_FULLSCREEN\" },\n  properties = { floating = true } },\n```\n\nСмотрите [6].\n\n"
    },
    {
      "title": "Запретить колесу прокрутки мыши менять теги",
      "level": 3,
      "content": "В вашем rc.lua измените раздел Mouse Bindings на следующий:\n\n```\n-- {{{ Mouse bindings\nroot.buttons(gears.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end)\n))\n-- }}}\n```\n\n"
    },
    {
      "title": "Xdg-menu генерирует дублирующиеся пункты меню",
      "level": 3,
      "content": "Xdg-menu будет генерировать дубликаты пунктов меню, если вы копируете файлы .desktop из /usr/share/applications в ~/.local/share/applications, даже если предпочтительнее просто использовать пользовательские файлы вместо оригинальных, чтобы, например, задать другую тему для конкретного приложения. Одним из решений является фильтрация сгенерированного вывода через awk для удаления пунктов с именем, идентичным предыдущему пункту.\n\n```\nxdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu | awk -F, '{if (a!=$1) print $a; a=$1}' >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "Некоторые сочетания клавиш не работают в Xfce4",
      "level": 3,
      "content": "Возможно, есть пересечения в используемых сочетаниях клавиш между Xfce4 и awesome. Откройте настройки:\n\n```\n$ xfce4-keyboard-settings\n```\n\nи посмотрите, нет ли там пересечений с сочетаниями клавиш awesome, в частности с mod-клавишей (обычно Super_L).\n\n"
    },
    {
      "title": "Утечки памяти",
      "level": 3,
      "content": "Некоторые пользователи сталкиваются с утечкой памяти даже при отсутствии активности. При использовании большого количества виджетов утечка может происходить со скоростью до 5 МБ/мин. Чтобы уменьшить потребление памяти, можно выполнять более частую сборку мусора, добавив следующее в ~/.config/awesome/rc.lua:\n\n```\n-- Регулярный запуск сборщика мусора для предотвращения утечки памяти\ngears.timer {\n       timeout = 30,\n       autostart = true,\n       callback = function() collectgarbage() end\n}\n```\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- https://archlinux.org.ru/forum/topic/11748/ - Анатомия awesome\n- https://archlinux.org.ru/forum/topic/15184/ - Установка Awesome 3.5.6 и доведение его до рабочего состояния\n- https://awesomewm.org/apidoc/documentation/90-FAQ.md.html - ЧаВо\n- https://www.lua.org/pil/ - Программирование на Lua\n- https://awesomewm.org/ - Официальный сайт awesome\n- https://bbs.archlinux.org/viewtopic.php?id=88926 - поделитесь своим awesome!\n- https://help.ubuntu.ru/wiki/awesome - Отличная русскоязычная документация\n\n"
    }
  ]
}