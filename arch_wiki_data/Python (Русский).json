{
  "title": "Python (Русский)",
  "url": "https://wiki.archlinux.org/title/Python_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Python package guidelines (Русский)\n- Виртуальное окружение\n- mod_wsgi\n- Django (Русский)\n- List of applications/Utilities#Python IDEs\n\nИз What is Python?:\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет python.\n\n"
    },
    {
      "title": "Другие версии",
      "level": 3,
      "content": "Старые и будущие версии Python доступны в AUR и могут быть полезны, если вас одолевает историческое любопытство, если старые приложения не запускаются на более новых версиях или если вам необходимо протестировать программы на возможность работы в дистрибутивах со старыми версиями интерпретатора:\n\n- Python 3.13: python313AUR[ссылка недействительна: package not found] (предварительная версия)\n- Python 3.11: python311AUR\n- Python 3.10: python310AUR\n- Python 3.9: python39AUR\n- Python 3.8: python38AUR\n- Python 3.7: python37AUR (не поддерживается)\n- Python 3.6: python36AUR (не поддерживается)\n- Python 2.7: python2AUR (не поддерживается)\n\nКаждый из этих пакетов устанавливает отдельный исполняемый файл, содержащий в своём имени номер версии, например python3.8 для Python 3.8, что позволяет устанавливать несколько версий одновременно. Также можно использовать pyenv для лёгкой установки разных версий Python и переключения между ними.\n\nДополнительные модули/библиотеки для старых версий Python можно найти в AUR по слову python<версия_без_точки>. Например, введите python38 для поиска модулей версии 3.8.\n\nТакже можно скачать исходный код любой версии на странице https://www.python.org/downloads/.\n\n"
    },
    {
      "title": "Альтернативные реализации",
      "level": 3,
      "content": "Пакет python предоставляет CPython, стандартную реализацию Python, но существуют и другие реализации. Они обычно основаны на более старых версиях Python и лишь частично совместимы с CPython.\n\nДоступные в Arch Linux реализации:\n\n- PyPy — Реализация Python, написанная на Python. Улучшенная производительность и использование памяти по сравнению с CPython.\n\n- Jython — Реализация языка Python на Java. Используется для встраивания Python-скриптов в программы на Java или использования библиотек Java в программах на Python.\n\n- micropython — Python для микроконтроллеров. Включает небольшое подмножество стандартной библиотеки Python; оптимизирован под запуск на микроконтроллерах в ограниченном окружении.\n\n- IronPython — Реализация языка программирования Python, которая плотно интегрирована с .NET. Может использовать библиотеки .NET и позволяет .NET-программам использовать библиотеки Python.\n\nСуществуют и другие реализации. Некоторые из них, вроде Stackless, Pyston[устаревшая ссылка 2025-03-15 ⓘ] и Cinder, используются внутри больших технологических компаний. Другие имели некоторое значение в прошлом, но больше не поддерживаются из-за улучшений более популярных реализаций.\n\n"
    },
    {
      "title": "Альтернативные оболочки",
      "level": 3,
      "content": "Пакет python включает интерактивную оболочку/REPL Python, которая запускается командой python. Доступны также следующие оболочки:\n\n- bpython — Приятный интерфейс для интерпретатора Python.\n\n- IPython — Мощная интерактивная оболочка Python.\n\n- Jupyter — Сетевое приложение на основе IPython.\n\n- ptpython — Продвинутый Python REPL, собранный с prompt-toolkit.\n\n"
    },
    {
      "title": "Управление пакетами",
      "level": 2,
      "content": "Существует целый ряд способов установить пакет Python в Arch Linux:\n\n- Официальные репозитории и AUR — большое количество популярных пакетов доступно в репозиториях Arch. Это предпочтительный вариант установки системных пакетов.\n- pip(1) — Официальный установщик пакетов для Python, который можно использовать для установки пакетов из Python Package Index и других индексов. Arch Linux не позволяет использовать pip для установки общесистемых пакетов (для этого используйте pacman), но можно устанавливать пакеты в домашний каталог пользователя.\n\n- pipx — Связан с pip, но создаёт у запускающего его пользователя изолированную среду для каждого приложения и связанных с ним пакетов, предотвращая конфликты с системными пакетами. Ориентирован на пакеты, которые могут быть запущены из командной строки непосредственно как приложения. Вы можете использовать pipx для установки пакетов из Python Package Index и других источников.\n\n- Poetry — Инструмент для управления зависимости и создания Python-пакетов. Он управляет виртуальными окружениями, сборкой и распространением пакетов в Python Package Index, благодаря чему может выступать в качестве альтернативы pip и другим инструментам.\n\n- Anaconda — Открытая система управления пакетами и окружением, изначально созданная для программ Python. С помощью Conda можно устанавливать пакеты из репозиториев Anaconda.\n\n- Miniconda — Легковесная альтернатива для Anaconda, которая устанавливает пакетный менеджер, но не устанавливает пакеты для научных вычислений по умолчанию.\n\nПри установке пакетов с помощью pip рекомендуется использовать виртуальное окружение, чтобы не возникало конфликтов с системными пакетами из каталога /usr. В качестве альтернативы можно устанавливать пакеты командой pip install --user, которая устанавливает пакеты для пользователя, а не в системный каталог /usr. Некоторые инструменты (например, pipx или poetry) предоставляют удобные способы управления виртуальными окружениями.\n\nСмотрите Python Packaging User Guide на предмет лучших практик по управлению пакетами.\n\nИсторически использовалась команда easy_install (часть python-setuptools) для установки пакетов, распространяемых как Eggs. easy_install и Eggs были заменены на pip и Wheels. Подробнее смотрите pip vs easy_install и Package Formats.\n\n"
    },
    {
      "title": "Привязки к графическим библиотекам",
      "level": 2,
      "content": "Доступны следующие привязки к библиотекам графических элементов:\n\n- Tkinter — Стандартный интерфейс Python к набору графических инструментов Tk.\n\n- Qt for Python (PySide2) — Официальные привязки Python к Qt5.\n\n- Qt for Python (PySide6) — Официальные привязки Python к Qt6.\n\n- pyQt — Набор привязок Python к Qt.\n\n- PyGObject — Привязки Python для библиотек на основе GObject вроде GTK, GStreamer, WebKitGTK, GLib и GIO.\n\n- wxPython — Кроссплатформенный набор GUI-инструментов для Python, который выступает в роли обёртки для wxWidgets.\n\nДля использования этих привязок в Python, скорее всего, потребуется доустановить соответствующие наборы библиотек (например, для использования Tkinter нужно установить tk).\n\n"
    },
    {
      "title": "Виртуальное окружение",
      "level": 3,
      "content": "Python предоставляет инструменты для создания изолированных виртуальных окружений (virtual environments), в которых можно устанавливать пакеты, не влияя ни на другие виртуальные окружения, ни на системные пакеты Python. Виртуальное окружение позволяет запускать приложения в различных версиях Python на одной и той же системе.\n\nПодробности смотрите в статье Python (Русский)/Virtual environment (Русский).\n\n"
    },
    {
      "title": "Автодополнение в оболочке Python",
      "level": 3,
      "content": "Автодополнение по клавише Tab включено в интерактивной оболочке по умолчанию. Учтите, что дополнение readline работает только для строк в глобальном пространстве имён. Пакет python-jedi расширяет возможности автодополнения [1].\n\n"
    },
    {
      "title": "Module not found после перехода на новую версию Python",
      "level": 3,
      "content": "После обновления пакета python до новой минорной версии (например, с 3.10 на 3.11) некоторые Python-приложения могут начать выдавать ошибку No module named имя_модуля.\n\nЭто происходит, когда зависимость недоступна или не установлена для текущей версии Python. Пакеты Python устанавливаются в каталог site-packages конкретной версии (общесистемный /usr/lib/pythonX.Y/site-packages/ или пользовательский ~/.local/lib/pythonX.Y/site-packages/, где X.Y — версия, например 3.11). Поэтому каждый раз при переходе на новую минорную версию Python-пакеты, собранные для предыдущей версии Python, должны быть пересобраны для новой версии.\n\nПакеты из официальных репозиториев обновляются одновременно с Python, однако пакеты из сторонних источников, например из AUR, пользователь должен обновить самостоятельно. Смотрите Пользовательский репозиторий Arch#Обновление пакетов и Часто задаваемые вопросы#Что если я запущу полное обновление и обновится только библиотека, но не приложение, которое от нее зависит?\n\n"
    },
    {
      "title": "Официальные ресурсы",
      "level": 3,
      "content": "- Официальная документация (для автономного доступа можно установить её с помощью пакета python-docs)\n- Официальное руководство\n\n"
    },
    {
      "title": "Сторонние ресурсы",
      "level": 3,
      "content": "- Automate the Boring Stuff with Python — книга Creative Commons\n- Awesome Python — обновляемый список ресурсов о Python\n- A Byte of Python — книга Creative Commons\n- Cracking Codes With Python — бесплатная онлайн-книга\n- Crash into Python — бесплатное руководство\n- Python Debugging With Pdb — руководство по использованию pdb, отладчика Python\n- Dive Into Python — книга Creative Commons\n- Fluent Python — коммерческая книга\n- Introducing Python — коммерческая книга\n- Invent Your Own Computer Games with Python — бесплатная онлайн-книга\n- Learn Python — бесплатное интерактивное руководство\n- Learn Python the Hard Way — коммерческая книга\n- Pythonspot Python Tutorials — бесплатные онлайн-руководства\n- Think Python — книга Creative Commons\n\n"
    }
  ]
}