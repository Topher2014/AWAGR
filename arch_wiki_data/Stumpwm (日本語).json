{
  "title": "Stumpwm (日本語)",
  "url": "https://wiki.archlinux.org/title/Stumpwm_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "StumpWM は全てが Common Lisp で書かれた、タイル型のフルスクリーンウィンドウマネージャです。カルト的な人気がある Ratpoison ウィンドウマネージャの後継として (\"GNU Screen to the power of X\")、StumpWM には common lisp の完全な柔軟性・ハッカビリティがあり、たとえ動作中であってもウィンドウマネージャのソースを変更することが可能です。\n\nStumpWM のホームページ より:\n\n実際に動作しているところを見たいですか？StumpWM ユーザーが動画 を作成しています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 SBCL を使う (推奨、高速) 1.1.1 Quicklisp を使う (推奨) 1.1.2 AUR を使う 1.2 Clisp を使う\n- 2 ドキュメントとサポート\n- 3 設定\n- 4 トラブルシューティング\n\n- 1.1 SBCL を使う (推奨、高速) 1.1.1 Quicklisp を使う (推奨) 1.1.2 AUR を使う\n- 1.2 Clisp を使う\n\n- 1.1.1 Quicklisp を使う (推奨)\n- 1.1.2 AUR を使う\n\n"
    },
    {
      "title": "Quicklisp を使う (推奨)",
      "level": 4,
      "content": "1. SBCL をインストール pacman -S sbcl\n1. Quicklisp ウェブサイト で Quicklisp を入手 curl -O http://beta.quicklisp.org/quicklisp.lisp\n1. SBCL で Quicklisp をロード sbcl --load quicklisp.lisp\n1. Quicklisp をインストール (quicklisp-quickstart:install) or (quicklisp-quickstart:install :path \"path/of/your/choice\")\n1. Quicklisp を SBCL init ファイルに追加 (ql:add-to-init-file)\n1. Quicklisp のアップデートを確認 (ダウンロードしたばかりなら必要ありません) (ql:update-client)\n1. Quicklisp 上のアップデートを確認 (ql:update-all-dists)\n1. CLX と CL-PPCRE をインストール (ql:quickload \"clx\") (ql:quickload \"cl-ppcre\")\n1. (quit) で SBCL を終了\n1. StumpWM の git バージョンを入手 git clone https://github.com/stumpwm/stumpwm.git\n1. stumpwm フォルダに入れてコンパイルを開始 cd stumpwm && ./autogen.sh && ./configure && make \"Component STUMPWM not found\" というエラーが発生する場合は次を試して下さい: env CL_SOURCE_REGISTRY=$PWD: sbcl --load make-image.lisp\n1. 任意で root で \"make install\" を実行できます。 \"Don't know how to REQUIRE STUMPWM\" というエラーが発生する場合は次を試して下さい: env CL_SOURCE_REGISTRY=$PWD: make install\n1. StumpWM バイナリのパスを .xinit に記述してお楽しみ下さい！ :)\n\n- pacman -S sbcl\n\n- curl -O http://beta.quicklisp.org/quicklisp.lisp\n\n- sbcl --load quicklisp.lisp\n\n- (quicklisp-quickstart:install) or (quicklisp-quickstart:install :path \"path/of/your/choice\")\n\n- (ql:add-to-init-file)\n\n- (ql:update-client)\n\n- (ql:update-all-dists)\n\n- (ql:quickload \"clx\")\n- (ql:quickload \"cl-ppcre\")\n\n- git clone https://github.com/stumpwm/stumpwm.git\n\n- cd stumpwm && ./autogen.sh && ./configure && make\n- \"Component STUMPWM not found\" というエラーが発生する場合は次を試して下さい:\n- env CL_SOURCE_REGISTRY=$PWD: sbcl --load make-image.lisp\n\n- \"Don't know how to REQUIRE STUMPWM\" というエラーが発生する場合は次を試して下さい:\n- env CL_SOURCE_REGISTRY=$PWD: make install\n\n任意: リアルタイムハッキングのための slime/swank をインストール:\n\n1. swank server をインストール (ql:quickload \"swank\")\n1. slime-helper をインストール (ql:quickload \"quicklisp-slime-helper\")\n1. 以下を dot-emacs に貼り付け (load (expand-file-name \"/path/to/slime-helper.el\")) (setq inferior-lisp-program \"sbcl\")\n1. 以下を .stumpwmrc に記述、または stumpwm-session で eval (require 'swank) (swank:create-server)\n1. 次のコマンドで Emacs/Slime を stumpwm-session に接続 M-x slime-connect\n\n- (ql:quickload \"swank\")\n\n- (ql:quickload \"quicklisp-slime-helper\")\n\n- (load (expand-file-name \"/path/to/slime-helper.el\"))\n- (setq inferior-lisp-program \"sbcl\")\n\n- (require 'swank)\n- (swank:create-server)\n\n- M-x slime-connect\n\n"
    },
    {
      "title": "AUR を使う",
      "level": 4,
      "content": "1. SBCL をインストール pacman -S sbcl\n1. AUR から clxAUR[リンク切れ: アーカイブ: aur-mirror] をインストール この PKGBUILD を使いたくない場合は、asdf-install を使って clx をインストールすることもできます。\n1. cl-ppcreAUR をインストール 同じく、PKGBUILD を使いたくない場合は、asdf-install でインストールできます。\n1. git をインストール pacman -S git\n1. AUR から stumpwm-gitAUR をインストール または、ホームページ にあるように、git リポジトリから直接チェックアウトすることもできます。StumpWM wiki を読んでコンパイルしてください。\n\n- pacman -S sbcl\n\n- この PKGBUILD を使いたくない場合は、asdf-install を使って clx をインストールすることもできます。\n\n- 同じく、PKGBUILD を使いたくない場合は、asdf-install でインストールできます。\n\n- pacman -S git\n\n- または、ホームページ にあるように、git リポジトリから直接チェックアウトすることもできます。StumpWM wiki を読んでコンパイルしてください。\n\n"
    },
    {
      "title": "Clisp を使う",
      "level": 3,
      "content": "1. makepkg のインストールの依存関係を満たすように以下の順番でパッケージを AUR から入手・作成 (makepkg -s): clisp-new-clxAUR cl-asdfAUR[リンク切れ: アーカイブ: aur-mirror] cl-ppcreAUR. To get this to install, I had to comment out the dependency line in the PKGBUILD. stumpwm-gitAUR。または最新のバージョンをウェブサイトからダウンロードしてインストールの指示に従って下さい。実行可能ファイルは home ディレクトリツリーに置くことができます。\n1. それぞれのパッケージを順番通りにインストール (sudo pacman -U name.pkg.tar.gz)。\n1. AUR からダウンロード・インストールする方法の詳細は Makepkg を参照 (パッケージのコンパイル・作成とインストール)。\n\n- clisp-new-clxAUR\n- cl-asdfAUR[リンク切れ: アーカイブ: aur-mirror]\n- cl-ppcreAUR. To get this to install, I had to comment out the dependency line in the PKGBUILD.\n- stumpwm-gitAUR。または最新のバージョンをウェブサイトからダウンロードしてインストールの指示に従って下さい。実行可能ファイルは home ディレクトリツリーに置くことができます。\n\nまた、問題が発生した場合はこの投稿も見て下さい。\n\n"
    },
    {
      "title": "ドキュメントとサポート",
      "level": 2,
      "content": "手動で StumpWM をインストールしてソースに手を入れられてない場合、TeXInfo マニュアルがあります。\n\nその他に wiki, Freenode の IRC チャンネル (#stumpwm), メーリングリストも存在します。もちろん、プロジェクトのウェブサイト も参照してください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": ".stumpwmrc の様々な便利な設定が wiki に載っています。\n\nあなたが emacs ユーザーであるならば、StumpWM ソースの contrib/ ディレクトリに StumpWM ファイル編集用の emacs マイナーモードがあります (stumpish プログラムのインターフェイスにもなります、詳しくは下記参照)。clisp を使っている場合、このファイルは /usr/share/stumpwm/ にもあります。\n\nstumpish は STUMP ウィンドウマネージャインタラクティブシェルです。ターミナルから (もしくは emacs モードを使って) 楽に、実行中の StumpWM と対話することができるプログラムになります。StumpWM ソースの contrib/ ディレクトリに存在します。clisp を使っている場合、このファイルは /usr/bin/ にもあります。\n\n"
    },
    {
      "title": "トラブルシューティング",
      "level": 2,
      "content": "- マルチモニターの設定で問題が起こる場合は、おそらく 'xorg-xdpyinfo' パッケージをインストールする必要があります。\n\n- stumpwm を起動できず、以下が出力される場合:\n\n```\ndebugger invoked on a SB-INT:SIMPLE-PARSE-ERROR in thread\n       #:\n       no non-whitespace characters in string \"\".\n       Type HELP for debugger help, or (SB-EXT:QUIT) to exit from SBCL.\n       (no restarts: If you did not do this on purpose, please report it as a bug.)\n       (PARSE-INTEGER \"\" :START 0 :END NIL :RADIX 10 :JUNK-ALLOWED NIL)\n```\n\nREPL では、ホームディレクトリの .Xauthority を削除することで解決できます。github の issue も参照してください。\n\n"
    }
  ]
}