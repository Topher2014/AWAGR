{
  "title": "Kernel (Русский)/Traditional compilation (Русский)",
  "url": "https://wiki.archlinux.org/title/Kernel_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)/Traditional_compilation_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "В статье представлена краткая инструкция по сборке собственного ядра из исходников kernel.org. Данный метод является традиционным и общим для всех дистрибутивов. В зависимости от вашего опыта, компиляция из исходников может показаться несколько более сложной в сравнении с использованием системы сборки. Инструменты Arch Build System разрабатывались как раз с целью сделать многократно повторяющиеся задачи по компиляции более удобными и безопасными.\n\n"
    },
    {
      "title": "Подготовка",
      "level": 2,
      "content": "Для подготовки ядра не требуется ни root-аккаунт, ни root-привилегии (например, через sudo).\n\n"
    },
    {
      "title": "Установка пакетов",
      "level": 3,
      "content": "Установите группу пакетов base-devel с набором необходимых инструментов вроде make и gcc. Также рекомендуется установить пакеты, указанные в стандартном PKGBUILD ядра Arch Linux: xmlto, kmod, inetutils, bc, libelf, git, cpio, perl, tar, xz.\n\n"
    },
    {
      "title": "Создание каталога сборки",
      "level": 3,
      "content": "Рекомендуется создать отдельный каталог для сборки вашего ядра. В этом примере будет использоваться каталог kernelbuild в домашнем каталоге:\n\n```\n$ mkdir ~/kernelbuild\n```\n\n"
    },
    {
      "title": "Загрузка исходников",
      "level": 3,
      "content": "Выберите версию ядра и загрузите файлы с исходным кодом с сайта https://www.kernel.org. Они будут иметь вид сжатого tar-архива (суффикс tar.xz).\n\nЗагрузить можно просто через браузер (правый клик по ссылке с tar.xz и выбрать Save Link As...) или любой другой программой, с графическим интерфейсом или интерфейсом командной строки, работающей через HTTP, TFTP, Rsync или Git.\n\nНапример, так выглядит загрузка ядра версии 4.8.6 в каталог ~/kernelbuild утилитой wget:\n\n```\n$ cd ~/kernelbuild\n$ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz\n```\n\nТакже стоит проверить корректность загрузки. Скачайте файл подписи, с его помощью добудьте отпечаток (fingerprint) ключа, а с помощью отпечатка получите сам ключ:\n\n```\n$ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.sign\n$ gpg --list-packets linux-4.8.6.tar.sign\n$ gpg --recv-keys <отпечаток_из_предыдущего_шага>\n```\n\nОбратите внимание, что подпись создаётся для tar-архива (суффикс .tar), а не для сжатого файла .tar.xz, который был загружен. Необходимо выполнить декомпрессию, но без извлечения архива. Для этого потребуется xz:\n\n```\n$ unxz linux-4.8.6.tar.xz\n$ gpg --verify linux-4.8.6.tar.sign linux-4.8.6.tar\n```\n\nК последующим шагам нельзя переходить, если вы не получили вывод в виде \"Good signature\".\n\nЕсли wget запускался не из каталога сборки, переместите в него скачанный архив:\n\n```\n$ mv /путь/к/linux-4.8.6.tar.xz ~/kernelbuild/\n```\n\n"
    },
    {
      "title": "Распаковка исходников",
      "level": 3,
      "content": "Распакуйте архив ядра в каталоге сборки:\n\n```\n$ tar -xvf linux-4.8.6.tar\n```\n\nДля завершения приготовлений убедитесь, что дерево файлов ядра абсолютно чистое; не стоит полагаться на то, что что оно будет таковым после распаковки. Перейдите в новый каталог с исходниками и выполните команду make mrproper:\n\n```\n$ cd linux-4.8.6/\n$ make mrproper\n```\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Это наиболее важный шаг в процессе \"подгонки\" ядра под точные характеристики вашего компьютера. Настройки ядра, включая используемые модули, задаются в файле .config.\n\nЕсли правильно выбрать параметры в файле .config, то производительность вашего ядра и компьютера значительно вырастет.\n\n"
    },
    {
      "title": "Конфигурация ядра",
      "level": 3,
      "content": "Существует два способа создать конфигурацию:\n\n- A. Использовать стандартные настройки Arch для официального ядра (рекомендуется).\n- B. Сгенерировать файл с настройками ядра, работающего в данный момент (например, если вы желаете подкорректировать текущие настройки).\n\n"
    },
    {
      "title": "A. Стандартная конфигурация Arch",
      "level": 4,
      "content": "Этот метод предполагает создание нового файла .config на основе настроек стандартного ядра Arch. Если на вашей машине работает стандартное ядро, выполните следующую команду в каталоге с исходниками нового ядра:\n\n```\n$ zcat /proc/config.gz > .config\n```\n\nВ противном случае стандартную конфигурацию можно взять в официальном пакете ядра Arch Linux.\n\n"
    },
    {
      "title": "B. Сгенерированная конфигурация",
      "level": 4,
      "content": "- Подключите все устройства, которые собираетесь использовать на этой системе в будущем.\n- modprobed-db ведёт список ВСЕХ модулей, которые когда-либо появлялись в системе. С его помощью можно настроить localmodconfig для установки всех модулей, использовавшихся ранее, в том числе и отсутствующих в системе в данный момент.\n\nС ядра 2.6.32 команда localmodconfig создаёт файл .config для нового ядра, отключив все опции, которые не заданы в работающем здесь и сейчас ядре. Другими словами, включены будут только опции, включённые в данный момент.\n\nХотя данный минималистичный подход позволяет создать высокоэффективную конфигурацию, подогнанную конкретно под вашу систему, есть ряд недостатков, таких как потенциальная неспособность ядра поддерживать более новое аппаратное обеспечение, периферийные устройства и другие особенности.\n\n```\n$ make localmodconfig\n```\n\n"
    },
    {
      "title": "Продвинутая конфигурация",
      "level": 3,
      "content": "Существует ряд инструментов для тонкой настройки конфигурации ядра, которые можно использовать вместо многочасовой ручной настройки каждой возможной при компиляции опции.\n\nИнструменты:\n\n- make menuconfig: утилита командной строки с интерфейсом ncurses; была заменена nconfig.\n- make nconfig: новый инструмент командной строки с ncurses-интерфейсом.\n- make xconfig: более дружелюбный к пользвателю графический интерфейс, которому требуется пакет packagekit-qt5 в качестве зависимости. Это рекомендуемый метод — особенно для неопытных пользователей — поскольку в нём упрощена навигация, а также выводится справочная информация о каждой опции.\n- make gconfig: графический настройщик, похожий на xconfig, но использующий gtk.\n\nВыбранную программу необходимо запустить внутри каталога с исходниками ядра. Все они создают новый .config либо перезаписывают существующий. Все опциональные настройки будут автоматически включены, но новые опции (т.е. отсутствовавшие в .config старого ядра) могут не включиться.\n\nПосле внесения всех необходимых изменений сохраните файл .config. Имеет смысл также сделать резервную копию этого файла вне каталога с исходниками. Возможно, придётся повторить процесс несколько раз, прежде чем результат вас устроит.\n\nЕсли испытываете сомнения, изменяйте по несколько опций между компиляциями. Если вы не можете загрузиться с новым ядром, изучите список необходимых пунктов конфигурации здесь.\n\nКоманда $ lspci -k # в liveCD-окружении выведет список используемых модулей ядра. Важно также не забыть обеспечить поддержку cgroups. Это необходимо для systemd.\n\n"
    },
    {
      "title": "Компиляция",
      "level": 2,
      "content": "- В параметре Processor type and features > Processor Family выберите архитектуру среди значений: CONFIG_MK8,CONFIG_MPSC,CONFIG_MCORE2,CONFIG_MATOM,CONFIG_GENERIC_CPU.\n- Измените флаг call cc-options со значения -march=native на то, которое вы выбрали в параметре Processor Family, например: cflags-$(CONFIG_MK8) += $(call cc-option,-march=native). Это, возможно, лучший работающий способ копиляции с -march=native.\n- Примечание: для 32-битных ядер необходимо аналогичным образом отредактировать файл arch/x86/Makefile_32.cpu и так же задать -march=native для вашего процессора.\n\nВремя компиляции может варьироваться от небольшого (~15 минут) до значительного (более часа) в зависимости от настроек ядра и мощности процессора. После задания всех необходимых настроек нового ядра в файле .config, выполните в каталоге с исходниками следующую команду:\n\n```\n$ make\n```\n\n"
    },
    {
      "title": "Установка модулей",
      "level": 3,
      "content": "После того, как ядро скомпилировано, то же самое необходимо сделать с модулями. Сначала соберите модули:\n\n```\n$ make modules\n```\n\nЗатем установите их:\n\n```\n# make modules_install\n```\n\nЭта команда скопирует откомпилированные модули в каталог /lib/modules/<версия_ядра>-<версия_конфигурации>. Например, для ядра версии 4.8 они будут скопированы в /lib/modules/4.8.6-ARCH. Это позволяет хранить модули разных ядер в отдельных каталогах.\n\n"
    },
    {
      "title": "Копирование ядра в каталог /boot",
      "level": 3,
      "content": "В результате компиляции ядра создаётся bzImage (big zImage, \"большой сжатый образ\") этого ядра, который необходимо скопировать в каталог /boot и переименовать. Имя должно начинаться с vmlinuz-, окончание можно выбрать любое. В примерах ниже установленное и скомпилированное ядро версии 4.8 копируется и переименуется в vmlinuz-linux48:\n\n- 32-битное (i686) ядро:\n\n```\n# cp -v arch/x86/boot/bzImage /boot/vmlinuz-linux48\n```\n\n- 64-битное (x86_64) ядро:\n\n```\n# cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-linux48\n```\n\n"
    },
    {
      "title": "Создание начального RAM-диска",
      "level": 3,
      "content": "Если вы не знаете, что такое создание начального RAM-диска, изучите статьи initrd и mkinitcpio.\n\n"
    },
    {
      "title": "Автоматизированный метод",
      "level": 4,
      "content": "Чтобы initramfs для нового ядра был сгенерирован аналогично официальному ядру, можно скопировать и модифицировать существующий mkinitcpio preset. Это удобно при перекомпиляции ядра (например, после обновления). В примере ниже файл предустановок (preset file) стокового ядра Arch копируется и модифицируется под ядро версии 4.8, установленное выше.\n\nСначала скопируйте существующий preset-файл, переименовав его с использованием суффикса из /boot/vmlinuz- (в нашем случае — linux48):\n\n```\n# cp /etc/mkinitcpio.d/linux.preset /etc/mkinitcpio.d/linux48.preset\n```\n\nЗатем отредактируйте файл под новое ядро. В параметре ALL_kver= необходимо указать имя нового ядра, выбранное при копировании bzImage:\n\n```\n/etc/mkinitcpio.d/linux48.preset\n```\n\n```\n...\nALL_kver=\"/boot/vmlinuz-linux48\"\n...\ndefault_image=\"/boot/initramfs-linux48.img\"\n...\nfallback_image=\"/boot/initramfs-linux48-fallback.img\"\n```\n\nНаконец, сгенерируйте initramfs-образ для нового ядра:\n\n```\n# mkinitcpio -p linux48\n```\n\n"
    },
    {
      "title": "Ручной метод",
      "level": 4,
      "content": "Вместо использования файла с предустановками можно сгенерировать initramfs-файл вручную посредством mkinitcpio:\n\n```\n# mkinitcpio -k <версия_ядра> -g /boot/initramfs-<имя_файла>.img\n```\n\n- -k (--kernel <версия_ядра>): указывает модули, которые будут использованы при генерации образа. Имя <версия_ядра> совпадает с именем каталога с исходниками нового ядра (и каталога с модулями для него, расположенного в /usr/lib/modules/).\n- -g (--generate <имя_файла>): указывается имя initramfs-файла, который будет создан в каталоге /boot. Ещё раз — рекомендуется использовать стандартную схему именования, упомянутую выше.\n\nНапример, команда для ядра версии 4.8:\n\n```\n# mkinitcpio -k linux-4.8.6 -g /boot/initramfs-linux48.img\n```\n\n"
    },
    {
      "title": "Копирование System.map",
      "level": 3,
      "content": "Файл System.map не требуется для загрузки Linux. Это что-то вроде \"телефонной книги\" со списком функций для конкретной сборки ядра. System.map содержит список символов ядра (т.е. имён функций, переменных и т.п.) и соответсвующих им адресов. Это отображение имён символов на адреса используется:\n\n- Некоторыми процессами вроде klogd, ksymoops и т.д.\n- Обработчиком OOPS, когда во время падения ядра на экран выводится информация (например, о том, какая именно функция вызывала падение).\n\nЕсли ваш каталог /boot использует файловую систему с поддержкой символических ссылок (т.е. не FAT32), скопируйте System.map в /boot, добавив название ядра к итоговому файлу. Затем создайте символическую ссылку /boot/System.map на /boot/System.map-<название_ядра>:\n\n```\n# cp System.map /boot/System.map-<название_ядра>\n# ln -sf /boot/System.map-<название_ядра> /boot/System.map\n```\n\nВ итоге в /boot должно быть 3 файла и 1 символическая ссылка (не считая любых других файлов, находившихся там до этого):\n\n- Ядро: vmlinuz-<название_ядра>\n- Initramfs: Initramfs-<название_ядра>.img\n- System Map: System.map-<название_ядра>\n- Символическая ссылка на System Map.\n\n"
    },
    {
      "title": "Настройка загрузчика",
      "level": 2,
      "content": "Добавьте в файл настроек загрузчика пункт с новым ядром. В статье Процесс загрузки Arch#Сравнение возможностей приведено сравнение доступных загрузчиков; также изучите соответствующие статьи.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- https://cateee.net/lkddb/web-lkddb/ — подробный отсортированный список строк конфигурации ядра и с пояснениями.\n\n"
    }
  ]
}