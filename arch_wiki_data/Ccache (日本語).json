{
  "title": "Ccache (日本語)",
  "url": "https://wiki.archlinux.org/title/Ccache_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Makepkg\n- Distcc\n\nccache は、コンパイルされたバイナリをディスクに保存し、同じコードの最終的な再コンパイルを高速化するためにそれらを提供するコンパイラ ラッパーです。初めてプログラムをコンパイルするのに数秒長くかかる場合がありますが、適切なコンパイルは行われず、以前に保存されたバイナリを参照するだけなので、その後のコンパイルははるかに高速になります。 ccache は GCC および Clang と互換性があります。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 makepkg で ccache を有効にする 2.2 コマンドラインで有効にする 2.3 colorgcc で有効にする\n- 3 その他 3.1 Sloppiness 3.2 キャッシュディレクトリを変更する 3.3 最大キャッシュ容量の設定 3.4 環境変数でキャッシュを無効化 3.5 CLI 3.6 makechrootpkg\n- 4 注意点\n- 5 参照\n\n- 2.1 makepkg で ccache を有効にする\n- 2.2 コマンドラインで有効にする\n- 2.3 colorgcc で有効にする\n\n- 3.1 Sloppiness\n- 3.2 キャッシュディレクトリを変更する\n- 3.3 最大キャッシュ容量の設定\n- 3.4 環境変数でキャッシュを無効化\n- 3.5 CLI\n- 3.6 makechrootpkg\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "ccache パッケージをインストールしてください。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "設定ファイルを使うことでデフォルトの挙動を上書きできます。設定の優先順位は以下の通りです (優先順位の高いものから並べています):\n\n1. 環境変数\n1. ユーザー個別の設定ファイル ($HOME/.ccache/ccache.conf)\n1. 全ユーザー共通の設定ファイル (/etc/ccache.conf)\n\n詳細は、ccache(1) を参照してください。\n\n"
    },
    {
      "title": "makepkg で ccache を有効にする",
      "level": 3,
      "content": "makepkg の使用時に ccache を有効にするには /etc/makepkg.conf を編集して下さい。BUILDENV の中の ccache の前のエクスクラメーションマークを除去すれば有効になります。例:\n\n```\n/etc/makepkg.conf\n```\n\n```\nBUILDENV=(!distcc color ccache check !sign)\n```\n\n"
    },
    {
      "title": "コマンドラインで有効にする",
      "level": 3,
      "content": "パッケージを作成するのではなく、コマンドラインからコードをコンパイルするとき、ccache を使うことでコンパイル速度を向上させることができます。\n\nそのためには、各コンパイルコマンドの前に ccache を付けます。\n\n```\n$ ccache cc hello_world.c\n```\n\nまたは、コンパイラへのパスの前に ccache のバイナリを含むように $PATH を変更します：\n\n```\n$ export PATH=\"/usr/lib/ccache/bin/:$PATH\"\n```\n\nこの行を定期的に使用するために環境変数として設定することをお勧めします。\n\n"
    },
    {
      "title": "colorgcc で有効にする",
      "level": 3,
      "content": "colorgcc もコンパイララッパーなので、正しい順番でラッパーが呼ばれるように注意する必要があります。\n\n```\nexport PATH=\"/usr/lib/colorgcc/bin/:$PATH\"    # As per usual colorgcc installation, leave unchanged (don't add ccache)\nexport CCACHE_PATH=\"/usr/bin\"                 # Tell ccache to only use compilers here\n```\n\nそして本当のコンパイラの代わりに ccache を呼び出すように colorgcc を設定してください。/etc/colorgcc/colorgccrc を編集し /usr/bin のパスを /usr/lib/ccache/bin にある全てのコンパイラに対応するように /usr/lib/ccache/bin のパスに変更します:\n\n```\n/etc/colorgcc/colorgccrc\n```\n\n```\ng++: /usr/lib/ccache/bin/g++\ngcc: /usr/lib/ccache/bin/gcc\nc++: /usr/lib/ccache/bin/g++\ncc: /usr/lib/ccache/bin/cc\ng77:/usr/bin/g77\nf77:/usr/bin/g77\ngcj:/usr/bin/gcj\n```\n\n新しいバージョンの ccache では、GCC_COLORS が設定されている場合、GCC については常に色を有効にします。Clang についてはデフォルトで色が有効です。出力が TTY でない場合、ccache はコンパイラに色を生成させ、キャッシュに保存しますが、出力からは色を取り除きます。-fdiagnostics-color の統一に関するいくつかの問題が残っています。\n\n"
    },
    {
      "title": "Sloppiness",
      "level": 3,
      "content": "ccache はデフォルトで、誤検知と、一部のプロジェクトでは実際の検知の両方を最小限に抑える非常に保守的な比較を使用します。一部の比較は役に立たないとみなされるため、変更できます。\n\n```\n$ ccache --set-config=sloppiness=locale,time_macros\n```\n\nこれは、ccache に __FILE__ および時間関連のマクロを無視するように指示します。これらのマクロは通常、キャッシュを無効にし、再現性のあるビルドでは有害であると考えられます。ロケールの違いも無視されます。ccache がこれを考慮するのは、主に診断メッセージの言語を決定するためです。\n\nCCACHE_SLOPPINESS 環境変数をエクスポートして、既存の sloppiness 設定をオーバーライドできます。\n\nまた、ccache は、デフォルトで各ビルドに使用されている現在のディレクトリをキャッシュします。これは、呼び出されるたびに新しいランダムな一時ディレクトリを使用するビルドパイプラインのキャッシュミスを意味します。ccache マニュアルの Compiling in different directories セクションを参照してください。\n\n"
    },
    {
      "title": "キャッシュディレクトリを変更する",
      "level": 3,
      "content": "デフォルトの ~/.ccache ディレクトリから、SSD や RAM ディスクなどの高速にアクセス可能な場所にキャッシュディレクトリを移動することができます。\n\nキャッシュの位置を変更するには (現在のシェルでのみ有効):\n\n```\n$ export CCACHE_DIR=/ramdisk/ccache\n```\n\nあるいは永続的に位置を変更するには:\n\n```\n/home/user/.ccache/ccache.conf\n```\n\n```\ncache_dir = /ramdisk/ccache\n```\n\n"
    },
    {
      "title": "最大キャッシュ容量の設定",
      "level": 3,
      "content": "デフォルトでは5ギガバイトとなっていますが、多くしたり少なくしたりすることができます:\n\n```\n$ ccache --set-config=max_size=2.0G\n```\n\n"
    },
    {
      "title": "環境変数でキャッシュを無効化",
      "level": 3,
      "content": "現在のシェルでのみ CCache を無効化したい場合、以下を設定:\n\n```\n$ export CCACHE_DISABLE=1\n```\n\n"
    },
    {
      "title": "CLI",
      "level": 3,
      "content": "ccache のコマンドラインユーティリティを使うことで以下の操作ができます。\n\n統計を表示する:\n\n```\n$ ccache -s\n```\n\nキャッシュを完全に削除する:\n\n```\n$ ccache -C\n```\n\n"
    },
    {
      "title": "makechrootpkg",
      "level": 3,
      "content": "makechrootpkg で ccache を使うこともできます。makechrootpkg の -d オプションを使うことで通常の環境から chroot にキャッシュディレクトリをバインドすることが可能です:\n\n```\n$ mkdir /path/of/chroot/ccache\n$ makechrootpkg -d /path/to/cache/:/ccache -r /path/of/chroot -- CCACHE_DIR=/ccache\n```\n\n上記で説明しているように chroot でも ccache が使われるように設定してください。\n\n"
    },
    {
      "title": "注意点",
      "level": 2,
      "content": "ccache は完全に同一のソースをコンパイルする際にのみ効果的です（より正確には、プリプロセスされたソースに対してです）。\n\nGentoo Linux コミュニティでは、ソースベースのディストリビューションであるため、ccache はプラセボ効果やコンパイル失敗（望ましくない残留オブジェクトによる）などで悪名高いです。Gentoo では、コンパイル失敗を報告する前に ccache をオフにすることが要求されます。Gentoo:Handbook:Parts/Working/Features#Caching compilation objects および Diego Pettenò（元 Gentoo 開発者）による \"Debunking ccache myths\" と題されたブログ投稿 the blog post を参照してください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- ccache マニュアル\n\n"
    }
  ]
}