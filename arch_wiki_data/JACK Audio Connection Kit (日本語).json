{
  "title": "JACK Audio Connection Kit (日本語)",
  "url": "https://wiki.archlinux.org/title/JACK_Audio_Connection_Kit_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- プロオーディオ\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール 1.1 JACK2 1.2 JACK 1.3 GUI\n- 2 基本設定 2.1 概要 2.2 シェルを使った設定の例 2.2.1 シェルを使った設定の例の概要 2.3 GUI を使った設定の例 2.4 別の GUI ベースのセットアップ 2.5 ALSA を使って再生する 2.6 gstreamer 2.7 PulseAudio 2.8 Firewire 2.9 ネットワーク / リモートオーディオ\n- 3 MIDI\n- 4 トラブルシューティング 4.1 起動時に \"Cannot lock down memory area (Cannot allocate memory)\" というメッセージが表示される 4.2 jack2-dbus と qjackctl のエラー 4.3 ログに \"ALSA: cannot set channel count to 1 for capture\" エラー 4.4 クラックノイズ・ポップノイズが音に混じる 4.5 特定のアプリケーションの問題 4.5.1 VLC - JACK を起動した後に音が鳴らない\n- 5 参照\n\n- 1.1 JACK2\n- 1.2 JACK\n- 1.3 GUI\n\n- 2.1 概要\n- 2.2 シェルを使った設定の例 2.2.1 シェルを使った設定の例の概要\n- 2.3 GUI を使った設定の例\n- 2.4 別の GUI ベースのセットアップ\n- 2.5 ALSA を使って再生する\n- 2.6 gstreamer\n- 2.7 PulseAudio\n- 2.8 Firewire\n- 2.9 ネットワーク / リモートオーディオ\n\n- 2.2.1 シェルを使った設定の例の概要\n\n- 4.1 起動時に \"Cannot lock down memory area (Cannot allocate memory)\" というメッセージが表示される\n- 4.2 jack2-dbus と qjackctl のエラー\n- 4.3 ログに \"ALSA: cannot set channel count to 1 for capture\" エラー\n- 4.4 クラックノイズ・ポップノイズが音に混じる\n- 4.5 特定のアプリケーションの問題 4.5.1 VLC - JACK を起動した後に音が鳴らない\n\n- 4.5.1 VLC - JACK を起動した後に音が鳴らない\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "JACK を動かすには、/etc/security/limits.d/99-audio.conf で ulimit を高く定義 (音声をリアルタイム処理するのに必須) できるようにユーザーを audio グループに追加する必要があります。\n\nJACK の実装は2つあります。違いについては この比較 を見て下さい。簡単に説明すると、Jack 1 と Jack 2 はどちらも同じプロトコルの実装です。Jack 1 でコンパイルされたプログラムは特に修正を加えなくても Jack 2 で動作します (逆もしかり)。\n\n"
    },
    {
      "title": "JACK2",
      "level": 3,
      "content": "JACK2 はマルチプロセッサハードウェア向けに書きなおされています。jack2 パッケージでインストールしてください。環境が64ビットで JACK が必要な32ビットのアプリケーションを動かす必要がある場合は、multilib リポジトリから lib32-jack2 もインストールしてください。jack_controll コマンド を使用するには、python-dbus パッケージもインストールします。\n\n"
    },
    {
      "title": "JACK",
      "level": 3,
      "content": "また、jack パッケージでインストールできる、旧式の JACK も存在します。環境が64ビットで JACK が必要な32ビットのアプリケーションを動かす必要がある場合は、multilib リポジトリから lib32-jack もインストールしてください。\n\n"
    },
    {
      "title": "GUI",
      "level": 3,
      "content": "- Cadence — オーディオプロダクション向けの便利なツールのセット。システムチェックや JACK の管理、他のツールの呼び出しなどの設定を行います。\n\n- Patchage — JACK と ALSA ベースのオーディオ・MIDI 環境向けのモジュール式パッチベイ。\n\n- PatchMatrix — マトリックス方式の JACK パッチベイ。\n\n- QjackCtl — JACK サウンドサーバーデーモンを制御するシンプルな Qt アプリケーション。\n\n"
    },
    {
      "title": "概要",
      "level": 3,
      "content": "ハードウェアやアプリケーションの適切な設定は様々な要因によって決まります。JACK を使用する場合、サウンドカードと CPU が遅延に強い影響を与えます。\n\nメインライン Linux カーネルはリアルタイムスケジューリングをサポートしているため、カーネルにパッチを適用することは必ずしも必須ではありません。linux-rtAUR パッケージは遅延をさらに少なくするためのパッチが複数適用されています。\n\n"
    },
    {
      "title": "シェルを使った設定の例",
      "level": 3,
      "content": "JACK2 は 実行可能ファイル jackd から直接起動することも、D-Busベースの jack_control バイナリで制御することもできます。 jack_control を使用すると、シェルスクリプトを介して、JACK2 を簡単に起動および設定できます。Jack_control を使用するには、python-dbus パッケージをインストールする必要があることに注意してください。\n\nシェルスクリプトを作成して X のログイン時に起動するようにできます:\n\n```\nstart_jack.sh\n```\n\n```\n#!/bin/bash\n\njack_control start\njack_control ds alsa\njack_control dps device hw:HD2\njack_control dps rate 48000\njack_control dps nperiods 2\njack_control dps period 64\nsleep 10\na2jmidid -e &\nsleep 10\nqjackctl &\n```\n\nこれにより、他のプログラムが利用できる動作中のJACKインスタンスを開始します。各行の詳細は次のとおりです。最適な設定を探す際には、D-Bus を使わないバージョンの JACK2 で QJackCtl の GUI を使って色々と試すと良いでしょう。\n\n"
    },
    {
      "title": "シェルを使った設定の例の概要",
      "level": 4,
      "content": "```\njack_control start\n```\n\nJACK を起動します (起動していない場合)。\n\n```\njack_control ds alsa\n```\n\nALSA ドライバーを使うように JACK を設定します。\n\n```\njack_control dps device hw:HD2\n```\n\nHD2 という名前の ALSA 対応のサウンドカードを使うように JACK を設定します。cat /proc/asound/cards で名前を見つけることができます。ALSA チュートリアルやデフォルト設定ではカードの番号を使っていますが、外部 MIDI デバイスを使うときに混乱のもとになるので、名前を使うほうが楽です。\n\n```\njack_control dps rate 48000\n```\n\n48000 khz サンプリングを使うように JACK を設定します。このハードではこれで上手く動きます。カードによっては 44100 だったり、もっと高い数値を使ったりします。数値を上げれば上げるだけ、レイテンシが少なくなりますが、カードや CPU を良い物にする必要があり、ソフトウェアもサポートしている必要があります。\n\n```\njack_control dps nperiods 2\n```\n\n2周期を使うように JACK を設定します。マザーボード, PCI, PCI-X などでは2が適切で USB には3が適切です。\n\n```\njack_control dps period 64\n```\n\n1フレームあたり64周期を使うように JACK を設定します。低いほうが遅延が少なくなりますが、このスクリプトの設定では 2.67 ms の遅延になり、ある程度低いわりにはこの例で使うハードウェアにあまり負担をかけません。USB サウンドシステムを使う場合は32にすると良いでしょう。リアルタイムシンセサイズや FX には 3-4 ms 以下なら問題ありません。人間が認識できる限界は 5ms です。CPU に負担をかけずに 1 ms の遅延を処理できる高級なハードウェアもありますが、必ずしも必須とは限りません。QjackCtl は負担を知らせてくれます。負担がない（クライアントが動いていない）とき、最大でも 3-5% の CPU 使用量で、xruns がないとできない場合は (赤い数字はシステムが要求に答えられていないことを示しています)、ハードウェアを良くする必要があります。\n\n```\nsleep 10\n```\n\n利用できるようになるまで待って下さい。\n\n```\na2jmidid -e &\n```\n\nALSA-to-JACK MIDI ブリッジを起動します。JACK ではなく ALSA を使って MIDI 入力を受け取るアプリケーションのミキシングに使えます。\n\n```\nsleep 10\n```\n\n利用できるようになるまで待って下さい。\n\n```\nqjackctl &\n```\n\nQjackCtl をロードします。システムトレイに GUI の設定が表示されます。D-Bus によって起動した JACK セッションをスムーズに拾うはずです。手動で起動した JACK アプリケーション間のパッチベイ・接続を管理します。パッチベイは手動の GUI を使って設定しますが、パッチベイの設定済み接続は QjackCtl によってアプリが起動したときに自動で作成されます。\n\n"
    },
    {
      "title": "GUI を使った設定の例",
      "level": 3,
      "content": "以下は GUI を使って JACK を設定・管理する例です:\n\n- python2-dbus をインストールしてください。\n- qjackctl をインストールして、ブート時に起動するように GUI のウィンドウ・デスクトップシステムを設定してください。\n- QjackCtl が以下のようになっているか確認してください: D-Bus インターフェイスを使用する ブート時に起動する 設定をデフォルトの場所に保存する アプリケーションの起動時に JACK オーディオサーバーを起動する システムトレイアイコンを有効にする システムトレイに最小化された状態で起動する\n- 再起動してください。\n- ログインした後、システムトレイに QjackCtl が表示されるはずです。左クリックしてください。\n- QjackCtl GUI で遅延を少なくするように設定を行ってください。遅延に影響を与えるのは Frame Size, Frame Buffer, Bitrate の設定です。フレームサイズを大きくしたり、フレームバッファを少なくしたり、ビットレートの設定を高くすれば遅延が小さくなりますが、サウンドカードや CPU の負担が大きくなります。ライブ音声生成や何らかのフィルタを通すときは遅延を 5ms 以下に抑える必要があります。そうしないとプレイヤーと聞こえてくる音の遅延がはっきりとわかるくらいになっていまいます。\n\n- D-Bus インターフェイスを使用する\n- ブート時に起動する\n- 設定をデフォルトの場所に保存する\n- アプリケーションの起動時に JACK オーディオサーバーを起動する\n- システムトレイアイコンを有効にする\n- システムトレイに最小化された状態で起動する\n\n"
    },
    {
      "title": "別の GUI ベースのセットアップ",
      "level": 3,
      "content": "要求の厳しいタスクに JACK を使用している場合でも、 QjackCtl を使用しているときにだけ、 QjackCtl で実行中の pulseaudio セッションを中断することができます。未使用の設定で、 \"Settings\" > \"Advanced\" サブメニューの \"Server prefix\" オプションを次のように変更します。\n\n```\npasuspender -- jackd\n```\n\nQjackCtl を閉じると、 pulseaudio セッションは正常に再開します。ヒントは こちら にあります。\n\n"
    },
    {
      "title": "ALSA を使って再生する",
      "level": 3,
      "content": "ジャックの実行中に alsa プログラムを再生できるようにするには、 alsa-plugins} を使用して alsa のジャックプラグインをインストールする必要があります。\n\n単純な2チャンネル設定の場合は、/etc/asound.conf (システム全体の設定) を編集 (または作成) して有効にし、以下の行を追加します。\n\n```\n# convert alsa API over jack API\n# use it with\n# % aplay foo.wav\n\n# use this as default\npcm.!default {\n    type plug\n    slave.pcm \"jack\"\n    hint.description \"Jack Audio\"\n}\n```\n\n出力/入力チャネルの数が異なる場合、または最初の2つのチャネルがオーディオのルーティング先ではない場合は、 /etc/alsa/conf.d/50-jack.conf に用意されている定義済みの jack pcm ソースを使用することはできません。\n\n```\n# the first jack port goes to an output we do not use and there are no recording devices\npcm.!jack {\n   type jack\n       playback_ports {\n           0 system:playback_2\n           1 system:playback_3\n       }\n}\n\npcm.!default {\n    type plug\n    slave.pcm \"jack\"\n    hint.description \"Jack Audio\"\n}\n```\n\nパソコンなどを再起動する必要はありません。 alsa の設定ファイルを編集して、 jack を起動して下さい。\n\nuser として起動することを忘れないでください。ユーザーX として jackd-d alsa で起動した場合、ユーザーYに対しては機能しません。\n\nALSA ループバックデバイス (より複雑ですが、おそらくより堅牢) を使用する別のアプローチは、 この記事 で説明されています。\n\n"
    },
    {
      "title": "gstreamer",
      "level": 3,
      "content": "gstreamer で JACK を使うには gst-plugins-good パッケージが必要です。JACK のサポートを追加するプラグインが含まれています。\n\n適当な GNOME アプリケーションの設定マネージャを使用してください (gconf2, gconf-editor, gstreamer-properties など)。\n\n以下のパラメータの値を:\n\n```\n/system/gstreamer/0.12/audio/default/musicaudiosink\n/system/gstreamer/0.12/audio/default/audiosink\n```\n\n以下のように変更してください:\n\n```\njackaudiosink buffer-time=2000000\n```\n\nバッファ時間の値はあまり重要ではありませんが、高い値にすることで音が割れにくくなります。\n\n参照: http://jackaudio.org/faq/gstreamer_via_jack.html\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "pulseaudio をインストールしたままにしたい場合 (gnome-settings-daemon など他のパッケージによって必要なときなど)、PulseAudio が X と一緒に自動で起動して JACK を乗っ取ってしまうのを防ぐ必要があります。\n\n/etc/pulse/client.conf を編集して \"autospawn\" をアンコメントして \"no\" に設定してください:\n\n```\n;autospawn = yes\nautospawn = no\n```\n\nJACK と PulseAudio 両方で再生したい場合、次を参照: PulseAudio/サンプル#PulseAudio と JACK\n\n"
    },
    {
      "title": "Firewire",
      "level": 3,
      "content": "ALSA が firewire デバイスを触らないように、firewire に関連するカーネルモジュールは全てブラックリスト化してください。また、PulseAudio も firewire が使えなくなります。以下のファイルを作成:\n\n```\n/etc/modprobe.d/alsa-no-jack.conf\n```\n\n```\nblacklist snd-fireworks\nblacklist snd-bebob\nblacklist snd-oxfw\nblacklist snd-dice\nblacklist snd-firewire-digi00x\nblacklist snd-firewire-tascam\nblacklist snd-firewire-lib\nblacklist snd-firewire-transceiver\nblacklist snd-fireface\nblacklist snd-firewire-motu\n```\n\nモジュールのリストは Alsa Firewire Improve Repository に書かれているのが最新です。\n\nロードした firewire モジュールをアンロードするか再起動してください。\n\n"
    },
    {
      "title": "ネットワーク / リモートオーディオ",
      "level": 3,
      "content": "JACK は、ネットワーク経由で マスター マシンにオーディオデータを送信するように設定できます。このマシンは、オーディオを物理デバイスに出力します。これは、追加のケーブルやハードウェアミキサーを必要とせずに、多数の スレーブ コンピューターからのオーディオをミキシングし、オーディオパスを可能な限りデジタルに保つ場合に便利です (デジタル入力を備えたハードウェアミキサーは非常に稀です)\n\n構成は非常に単純ですが、マルチキャスト・トラフィックをサポートするネットワーク (つまり、管理対象ネットワークスイッチで IGMP スヌーピングを有効にする必要があります) が必要で、プロトコルはバージョン間で相互運用できないため、すべてのマシンで同じ JACK メジャー・バージョン (JACK1 または JACK2) が実行されている必要があります。JACK2 の場合は、netmanager モジュールをロードする必要があります。\n\n```\nmaster$ jack_load netmanager -i -c\n```\n\n-i-c オプションは、着信接続をデフォルトのオーディオデバイスに自動的にマッピングするようにネットマネージャに指示します。これがないと、各着信接続を各接続に手動でマッピングする必要があります。代わりに -i-h を使用して、使用可能なすべてのオプションを表示できます。ただし、オプションは jackd サーバ出力に出力されるため、 jack_load コマンドでは何も表示されません。\n\nクライアントでは、JACK をネットワーク・モードで起動する必要があります。\n\n```\nslave$ jackd -d net\n```\n\n2台のマシンが接続され、マスター上に新しいオーディオソースが表示されます。\n\n```\nmaster$ jack_lsp\nsystem:playback_1\nsystem:playback_2\nremotehost:from_slave_1\nremotehost:from_slave_2\n```\n\n上記のように -c オプションを jack_load に渡すと、リモートシステムはオーディオを再生できるようになります。\n\n"
    },
    {
      "title": "MIDI",
      "level": 2,
      "content": "JACK は1つのサウンドカードと、(USB などで接続された) 任意の数の MIDI デバイスを扱うことができます。 JACK を起動して、MIDI キーボードやシンセサイザーやその他のピュア MIDI デバイスを使用したい場合、適当なサウンドカードを使って JACK を起動する必要があります (PCM 音源を入出力するサウンドカード)。 そうすればすぐに、MIDI デバイスを接続して QjackCtl (qjackctl) などで接続ボタンをクリックすれば、(ドライバーによって) JACK-MIDI か ALSA-MIDI の下にデバイスが表示されます。\n\nJACK-MIDI の場合、QjackCtl の Setup > Settings で MIDI Driver を seq または raw に設定してください。これで MIDI デバイスが MIDI タブに表示されるはずです。また、Setup > Display > Enable client/port aliases と Enable client/port aliases editing (rename) を有効にすれば、クライアントの名前を (共通の \"midi_capture_1\" という名前から意味のある名前に) 変更することができます\n\nALSA-MIDI の場合、QjackCtl の Setup > Misc で Enable ALSA Sequencer support をオンにしてください。これで QjackCtl の Connect ウィンドウに ALSA タブが追加され MIDI コントローラーがそこに表示されます。\n\nALSA-MIDI を JACK-MIDI にブリッジするには、a2jmidid (a2jmidid) を使って下さい。次のコマンドは全ての ALSA MIDI ポートを JACK MIDI ポートに伝えます:\n\n```\n$ a2jmidid -e\n```\n\nQjackCtl では MIDI タブに \"a2j\" クライアントとして表示されます。 QjackCtl の Setup > Options > Execute script after Startup に追加することで a2jmidid を自動で起動させることが可能です: /usr/bin/a2jmidid -e &\n\n- Q: JACK-MIDI と ALSA-MIDI の違いは何ですか？\n- A: 前者は MIDI イベント処理のタイミングとサンプルの正確性が良くなっています。後者を置き換えることもできますが、今のところ共存しています。\n\nM-Audio MIDI キーボードをインストールするには、ファームウェアパッケージ midisport-firmwareAUR が必要になります。また、snd_usb_audio モジュールを使えるようにしてください。 個別の USB MIDI デバイスに関する情報は http://alsa.opensrc.org/USBMidiDevices を見て下さい。\n\n"
    },
    {
      "title": "起動時に \"Cannot lock down memory area (Cannot allocate memory)\" というメッセージが表示される",
      "level": 3,
      "content": "リアルタイムプロセス管理#PAM の設定を見て下さい。そしてユーザーが audio グループに属していることを確認してください。\n\n"
    },
    {
      "title": "jack2-dbus と qjackctl のエラー",
      "level": 3,
      "content": "(jack2-dbus パッケージをインストールしていて) qjackctl の start ボタンを押すと \"Cannot allocate memory\" や \"Cannot connect to server socket err = No such file or directory\" などのエラーが発生する場合 ~/.jackdrc, ~/.config/jack/conf.xml, ~/.config/rncbc.org/QjackCtl.conf を削除してください。jackdbus を終了し、初めから再起動してください。\n\n(Thanks to nedko)\n\n以下も試して下さい:\n\n```\n$ fuser /dev/snd/*\n```\n\nPID で確認するには:\n\n```\n$ ps ax | grep [PID here]\n```\n\n上記のコマンドで衝突しているプログラムが表示されることがあります。\n\n"
    },
    {
      "title": "ログに \"ALSA: cannot set channel count to 1 for capture\" エラー",
      "level": 3,
      "content": "ALSA の入出力チャンネルを 1 から 2 に変更してください。\n\n"
    },
    {
      "title": "クラックノイズ・ポップノイズが音に混じる",
      "level": 3,
      "content": "あなたの JACK の設定を処理するには CPU やサウンドカードの能力が不足しています。ノイズが止むまでビットレートやフレームサイズを下げるか、フレーム間隔を少しずつ上げてみてください。\n\n"
    },
    {
      "title": "VLC - JACK を起動した後に音が鳴らない",
      "level": 4,
      "content": "VLC を起動して以下のメニューオプションを変更してください:\n\n- ツール > 設定\n- 設定の表示: 全て\n- オーディオ > 出力モジュール > オーディオ出力モジュール: JACK オーディオ出力\n- オーディオ > 出力モジュール > JACK: 書き込み可能なクライアントに自動的に接続 (有効にする)\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- JACK 1 と JACK2 の違い\n- JACK FAQ\n\n"
    }
  ]
}