{
  "title": "Dm-crypt (Polski)/Encrypting an entire system (Polski)",
  "url": "https://wiki.archlinux.org/title/Dm-crypt_(Polski)/Encrypting_an_entire_system_(Polski)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Poniżej przedstawiono przykłady typowych scenariuszy pełnego szyfrowania systemu z dm-crypt. Wyjaśniają wszystkie adaptacje, które należy wykonać w normalnej procedurze instalacji. Wszystkie niezbędne narzędzia znajdują się na installation image.\n\n"
    },
    {
      "title": "Przegląd",
      "level": 2,
      "content": "Zabezpieczenie głównego systemu plików to miejsce, w którym dm-crypt wyróżnia się pod względem cech, wydajności i wydajności. W przeciwieństwie do selektywnego szyfrowania systemów plików użytkownika innego niż root, zaszyfrowany system plików root może ukrywać informacje, takie jak zainstalowane programy, nazwy użytkowników wszystkich kont i popularne wektory wycieku danych, takie jak locate i /var/log/. Co więcej, zaszyfrowany system plików root sprawia, że manipulowanie systemem jest o wiele trudniejsze, ponieważ wszystko oprócz programu boot loader i jądra jest szyfrowane.\n\nWszystkie scenariusze zilustrowane poniżej dzielą te zalety, inne ich wady i zalety, które je różnicują:\n\nTable content:\nScenariusze | Zalety | Wady\n#Prosty układ partycji z LUKS pokazuje podstawową i prostą konfigurację dla w pełni zaszyfrowanego rootu LUKS. | Proste partycjonowanie i konfiguracja | Nieelastyczny; miejsce na dysku do zaszyfrowania musi zostać wstępnie przydzielone\n#LVM na LUKS osiąga elastyczność partycjonowania za pomocą LVM w pojedynczej zaszyfrowanej partycji LUKS. | Proste partycjonowanie ze znajomością LVM Tylko jeden klucz wymagany do odblokowania wszystkich woluminów (np. Łatwe przywrócenie ustawień z dysku) Układ woluminów nie jest przezroczysty po zablokowaniu Najłatwiejsza metoda na to suspension to disk | LVM dodaje dodatkową warstwę odwzorowania i hook Mniej przydatne, jeśli pojedyncza objętość powinna otrzymać oddzielny klucz\n#LUKS na LVM używa dm-crypt tylko po skonfigurowaniu LVM. | LVM może służyć do przechowywania zaszyfrowanych woluminów na wielu dyskach Łatwe połączenie nie-szyfrowanych grup woluminów | Złożony; Zmiana woluminów wymaga również zmiany mapperów szyfrowania Woluminy wymagają indywidualnych kluczy Układ LVM jest przezroczysty po zablokowaniu\n#LUKS na programowym RAID używa dm-crypt tylko po skonfigurowaniu RAID. | Analogiczny do LUKS na LVM | Analogiczny do LUKS na LVM\n#Zwykły dm-crypt używa trybu zwykłego dm-crypt, tj. bez nagłówka LUKS i jego opcji dla wielu kluczy. W tym scenariuszu są również używane urządzenia USB /boot i pamięć kluczy, która może być zastosowana do innych scenariuszy. | Odporność danych dla przypadków, w których nagłówek LUKS może być uszkodzony Pozwala Full Disk Encryption Pomaga w rozwiązywaniu problemów z dyskami SSD | Dbałość o wszystkie parametry szyfrowania jest wymagana Pojedynczy klucz szyfrowania i brak opcji zmiany\n#Szyfrowana partycja rozruchowa (GRUB) pokazuje, jak zaszyfrować partycję rozruchową za pomocą programu ładującego GRUB. W tym scenariuszu używana jest również partycja ESP, którą można zastosować do innych scenariuszy. | Te same korzyści, co scenariusz, na którym opiera się instalacja (LVM na LUKS dla tego konkretnego przykładu) Mniej danych pozostaje niezaszyfrowanych, tzn. Program ładujący i partycja ESP, jeśli są obecne | Te same wady, co scenariusz, na którym opiera się instalacja (LVM na LUKS dla tego konkretnego przykładu) Bardziej skomplikowana konfiguracja Nie obsługiwane przez inne bootloadery\n#Btrfs subvolumes with swap pokazuje, jak zaszyfrować Btrfs system, w tym /boot katalog, również dodając partycję do swap, na sprzęcie UEFI. | Podobne zalety jak #Szyfrowana partycja rozruchowa (GRUB) Dostępność funkcji Btrfs | Podobne wady jak #Szyfrowana partycja rozruchowa (GRUB)\n\npokazuje podstawową i prostą konfigurację dla w pełni zaszyfrowanego rootu LUKS.\n\n- Proste partycjonowanie i konfiguracja\n\n- Nieelastyczny; miejsce na dysku do zaszyfrowania musi zostać wstępnie przydzielone\n\nosiąga elastyczność partycjonowania za pomocą LVM w pojedynczej zaszyfrowanej partycji LUKS.\n\n- Proste partycjonowanie ze znajomością LVM\n- Tylko jeden klucz wymagany do odblokowania wszystkich woluminów (np. Łatwe przywrócenie ustawień z dysku)\n- Układ woluminów nie jest przezroczysty po zablokowaniu\n- Najłatwiejsza metoda na to suspension to disk\n\n- LVM dodaje dodatkową warstwę odwzorowania i hook\n- Mniej przydatne, jeśli pojedyncza objętość powinna otrzymać oddzielny klucz\n\nużywa dm-crypt tylko po skonfigurowaniu LVM.\n\n- LVM może służyć do przechowywania zaszyfrowanych woluminów na wielu dyskach\n- Łatwe połączenie nie-szyfrowanych grup woluminów\n\n- Złożony; Zmiana woluminów wymaga również zmiany mapperów szyfrowania\n- Woluminy wymagają indywidualnych kluczy\n- Układ LVM jest przezroczysty po zablokowaniu\n\nużywa dm-crypt tylko po skonfigurowaniu RAID.\n\n- Analogiczny do LUKS na LVM\n\n- Analogiczny do LUKS na LVM\n\nużywa trybu zwykłego dm-crypt, tj. bez nagłówka LUKS i jego opcji dla wielu kluczy. W tym scenariuszu są również używane urządzenia USB /boot i pamięć kluczy, która może być zastosowana do innych scenariuszy.\n\n- Odporność danych dla przypadków, w których nagłówek LUKS może być uszkodzony\n- Pozwala Full Disk Encryption\n- Pomaga w rozwiązywaniu problemów z dyskami SSD\n\n- Dbałość o wszystkie parametry szyfrowania jest wymagana\n- Pojedynczy klucz szyfrowania i brak opcji zmiany\n\npokazuje, jak zaszyfrować partycję rozruchową za pomocą programu ładującego GRUB. W tym scenariuszu używana jest również partycja ESP, którą można zastosować do innych scenariuszy.\n\n- Te same korzyści, co scenariusz, na którym opiera się instalacja (LVM na LUKS dla tego konkretnego przykładu)\n- Mniej danych pozostaje niezaszyfrowanych, tzn. Program ładujący i partycja ESP, jeśli są obecne\n\n- Te same wady, co scenariusz, na którym opiera się instalacja (LVM na LUKS dla tego konkretnego przykładu)\n- Bardziej skomplikowana konfiguracja\n- Nie obsługiwane przez inne bootloadery\n\npokazuje, jak zaszyfrować Btrfs system, w tym /boot katalog, również dodając partycję do swap, na sprzęcie UEFI.\n\n- Podobne zalety jak #Szyfrowana partycja rozruchowa (GRUB)\n- Dostępność funkcji Btrfs\n\n- Podobne wady jak #Szyfrowana partycja rozruchowa (GRUB)\n\nChociaż wszystkie powyższe scenariusze zapewniają o wiele większą ochronę przed zagrożeniami zewnętrznymi niż zaszyfrowane systemy plików wtórnych, mają również wspólną wadę: każdy użytkownik posiadający klucz szyfrujący jest w stanie odszyfrować cały dysk, a zatem może uzyskać dostęp do danych innych użytkowników. Jeśli jest to niepokojące, możliwe jest użycie kombinacji narzędzia blokowego i ułożonego w stos szyfrowania systemu plików i czerpania korzyści z obu. Zobacz Disk encryption, aby zaplanować z wyprzedzeniem.\n\nZobacz dm-crypt (Polski)/Drive preparation (Polski)#Partycjonowanie ogólny przegląd strategii partycjonowania używanych w scenariuszach.\n\nInnym obszarem, który należy rozważyć, jest skonfigurowanie zaszyfrowanej partycji wymiany i jakiego rodzaju. Zobacz dm-crypt (Polski)/Swap encryption (Polski) dla alternatywy.\n\nJeśli spodziewasz się chronić dane systemu nie tylko przed kradzieżą fizyczną, ale także przed koniecznością zabezpieczenia przed logicznym manipulowaniem, zobacz dm-crypt (Polski)/Specialties (Polski)#Zabezpieczanie niezaszyfrowanej partycji rozruchowej dla dalszych możliwości po wykonaniu jednego ze scenariuszy.\n\n"
    },
    {
      "title": "Prosty układ partycji z LUKS",
      "level": 2,
      "content": "Ten przykład obejmuje pełne szyfrowanie systemu za pomocą \"dmcrypt\" + LUKS w prostym układzie partycji:\n\n```\n+--------------------+--------------------------+--------------------------+\n|Boot partition      |LUKS encrypted system     |Optional free space       |\n|                    |partition                 |for additional partitions |\n|/dev/sdaY           |/dev/sdaX                 |or swap to be setup later |\n+--------------------+--------------------------+--------------------------+\n```\n\nPierwsze kroki można wykonać bezpośrednio po uruchomieniu obrazu instalacyjnego Arch Linux.\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Przed utworzeniem jakichkolwiek partycji powinieneś wiedzieć o znaczeniu i metodach bezpiecznego usuwania dysku, opisanych w dm-crypt (Polski)/Drive preparation (Polski).\n\nNastępnie utwórz potrzebne partycje, przynajmniej jedną dla / (e.g. /dev/sdaX) i /boot (/dev/sdaY). Zobacz Partitioning.\n\n"
    },
    {
      "title": "Preparing non-boot partitions",
      "level": 3,
      "content": "Następujące polecenia tworzą i montują zaszyfrowaną partycję root. Odpowiadają one procedurze opisanej szczegółowo w dm-crypt (Polski)/Encrypting a non-root file system (Polski)#Partycja (which, despite the title, can be applied to root partitions, as long as mkinitcpio and the boot loader are correctly configured). If you want to use particular non-default encryption options (e.g. cipher, key length), see the encryption options before executing the first command:\n\n(który, pomimo tytułu, może być zastosowany do partycji root, o ile mkinitcpio i program ładujący są poprawnie skonfigurowane). Jeśli chcesz użyć określonych, innych niż domyślne opcji szyfrowania (np. Szyfr, długość klucza), zobacz opcje szyfrowania przed wykonaniem pierwszego polecenia:\n\n```\n# cryptsetup -y -v luksFormat /dev/sdaX\n# cryptsetup open /dev/sdaX cryptroot\n# mkfs.ext4 /dev/mapper/cryptroot\n# mount /dev/mapper/cryptroot /mnt\n```\n\nSprawdź, czy mapowanie działa zgodnie z przeznaczeniem:\n\n```\n# umount /mnt\n# cryptsetup close cryptroot\n# cryptsetup open /dev/sdaX cryptroot\n# mount /dev/mapper/cryptroot /mnt\n```\n\nJeśli utworzyłeś oddzielne partycje (e.g. /home), kroki te muszą zostać dostosowane i powtórzone dla nich wszystkich, z wyjątkiem /boot. Zobacz dm-crypt (Polski)/Encrypting a non-root file system (Polski)#Automatyczne odblokowywanie i montowanie, jak radzić sobie z dodatkowymi partycjami podczas startu.\n\nZauważ, że każde urządzenie blokowe wymaga własnego hasła. Może to być niewygodne, ponieważ skutkuje oddzielnym hasłem, które należy wprowadzić podczas rozruchu. Alternatywą jest użycie pliku klucza przechowywanego w partycji systemowej, aby odblokować oddzielną partycję za pośrednictwem crypttab. zobacz dm-crypt (Polski)/Device encryption (Polski)#Używanie LUKS do formatowania partycji za pomocą pliku kluczy po instrukcje.\n\n"
    },
    {
      "title": "Przygotowanie partycji rozruchowej",
      "level": 3,
      "content": "To, co musisz skonfigurować, to nieszyfrowana partycja rozruchowa, która jest potrzebna dla zaszyfrowanego katalogu głównego. Dla standardowej partycji MBR / non-EFI / boot, na przykład wykonaj:\n\n```\n# mkfs.ext4 /dev/sdaY\n# mkdir /mnt/boot\n# mount /dev/sdaY /mnt/boot\n```\n\n"
    },
    {
      "title": "Mounting the devices",
      "level": 3,
      "content": "At Installation guide (Polski)#Montowanie systemu plików you will have to mount the mapped devices, not the actual partitions. Of course /boot, which is not encrypted, will still have to be mounted directly.\n\nAfterwards continue with the installation procedure up to the mkinitcpio step.\n\nW Przewodniku instalacji # Zainstaluj systemy plików, w których będziesz musiał zamontować odwzorowane urządzenia, a nie rzeczywiste partycje. Oczywiście / boot, który nie jest szyfrowany, będzie musiał być montowany bezpośrednio.\n\nNastępnie kontynuuj procedurę instalacji aż do kroku mkinitcpio.\n\n"
    },
    {
      "title": "Konfigurowanie mkinitcpio",
      "level": 3,
      "content": "Dodaj keyboard, keymap i encrypt haki do mkinitcpio.conf. Jeśli domyślna mapa klawiszy US jest dla Ciebie w porządku, możesz pominąć keymap hak.\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... keyboard keymap block encrypt ... filesystems ...)\n```\n\nDepending on which other hooks are used, the order may be relevant. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Konfiguracja programu rozruchowego",
      "level": 3,
      "content": "Aby odblokować zaszyfrowaną partycję root przy starcie, program ładujący musi ustawić następujące parametry boot loadera:\n\n```\ncryptdevice=UUID=<device-UUID>:cryptroot root=/dev/mapper/cryptroot\n```\n\nZobacz dm-crypt/System configuration#Kernel parameters po szczegóły..\n\nThe <device-UUID> refers to the UUID of /dev/sdaX. See Persistent block device naming for details.\n\n"
    },
    {
      "title": "LVM na LUKS",
      "level": 2,
      "content": "Prostą metodą jest ustawienie LVM na górze zaszyfrowanej partycji zamiast na odwrót. Technicznie LVM jest skonfigurowany w jednym dużym szyfrowanym systemie blokowym. W związku z tym LVM nie jest przezroczysta, dopóki urządzenie blokujące nie zostanie odblokowane, a podstawowa struktura woluminu zostanie odblokowana i zamontowana podczas rozruchu.\n\nUkład dysku w tym przykładzie to:\n\n```\n+-----------------------------------------------------------------------+ +----------------+\n| Logical volume1       | Logical volume2       | Logical volume3       | |                |\n|/dev/mapper/MyVol-swap |/dev/mapper/MyVol-root |/dev/mapper/MyVol-home | | Boot partition |\n|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | (may be on     |\n|                                                                       | | other device)  |\n|                        LUKS encrypted partition                       | |                |\n|                          /dev/sdaX                                    | | /dev/sdbY      |\n+-----------------------------------------------------------------------+ +----------------+\n```\n\n- Instrukcje na dm-crypt (Polski)/Specialties (Polski)#Szyfrowany system za pomocą oddzielnego nagłówka LUKS użyj tej konfiguracji z odłączonym nagłówkiem LUKS na urządzeniu USB, aby uzyskać z nim dwuetapowe uwierzytelnienie.\n- Instrukcje na Pavel Kogan's blog pokaż, jak zaszyfrować /boot partycji, zachowując ją na głównej partycji LUKS podczas korzystania z GRUB-a.\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Przed utworzeniem jakichkolwiek partycji powinieneś powinnaś wiedzieć o znaczeniu i metodach bezpiecznego usuwania dysku, opisanych w dm-crypt (Polski)/Drive preparation (Polski).\n\nKorzystając z bootloadera GRUB razem z GPT, utwórz partycję rozruchową systemu BIOS, jak wyjaśniono w GRUB#BIOS systems.\n\nUtwórz partycję do zamontowania w /boot typu 8300 o wielkości 100 MB lub większej.\n\nUtwórz partycję typu 8E00, która później będzie zawierała zaszyfrowany kontener.\n\nUtwórz zaszyfrowany kontener LUKS na partycji \"systemowej\". Wprowadź dwukrotnie wybrane hasło.\n\n```\n# cryptsetup luksFormat /dev/sdaX\n```\n\nAby uzyskać więcej informacji o dostępnych opcjach cryptsetup, zobacz LUKS encryption options przed powyższym poleceniem.\n\nOtwórz kontener:\n\n```\n# cryptsetup open /dev/sdaX cryptolvm\n```\n\nOdszyfrowany kontener jest teraz dostępny pod adresem /dev/mapper/cryptolvm.\n\n"
    },
    {
      "title": "Przygotowywanie woluminów logicznych",
      "level": 3,
      "content": "Utwórz wolumin fizyczny na otwartym kontenerze LUKS:\n\n```\n# pvcreate /dev/mapper/cryptolvm\n```\n\nUtwórz nazwę grupy woluminów MyVol (lub cokolwiek chcesz), dodając do niego wcześniej utworzoną wolumin fizyczny:\n\n```\n# vgcreate MyVol /dev/mapper/cryptolvm\n```\n\nUtwórz wszystkie swoje woluminy logiczne w grupie woluminów:\n\n```\n# lvcreate -L 8G MyVol -n swap\n# lvcreate -L 15G MyVol -n root\n# lvcreate -l 100%FREE MyVol -n home\n```\n\nSformatuj systemy plików na każdym woluminie logicznym:\n\n```\n# mkfs.ext4 /dev/mapper/MyVol-root\n# mkfs.ext4 /dev/mapper/MyVol-home\n# mkswap /dev/mapper/MyVol-swap\n```\n\nZamontuj swoje systemy plików:\n\n```\n# mount /dev/mapper/MyVol-root /mnt\n# mkdir /mnt/home\n# mount /dev/mapper/MyVol-home /mnt/home\n# swapon /dev/mapper/MyVol-swap\n```\n\n"
    },
    {
      "title": "Przygotowanie partycji rozruchowej",
      "level": 3,
      "content": "The bootloader loads the kernel, initramfs, and its own configuration files from the /boot directory. This directory must be located on a separate unencrypted filesystem.\n\nProgram ładujący ładuje jądro, initramfs i własne pliki konfiguracyjne z katalogu /boot. Ten katalog musi znajdować się w oddzielnym niezaszyfrowanym systemie plików.\n\nUtwórz system plików Ext2 na partycji przeznaczonej dla /boot. Dowolny system plików, który może odczytać bootloader, jest odpowiedni.\n\n```\n# mkfs.ext2 /dev/sdbY\n```\n\nUtwórz katalog /mnt/boot:\n\n```\n# mkdir /mnt/boot\n```\n\nZamontuj partycję na /mnt/boot:\n\n```\n# mount /dev/sdbY /mnt/boot\n```\n\nNastępnie kontynuuj procedurę instalacji aż do kroku mkinitcpio\n\n"
    },
    {
      "title": "Konfigurowanie mkinitcpio",
      "level": 3,
      "content": "Dodaj keyboard, encrypt i lvm2 haki do mkinitcpio.conf:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... keyboard keymap block encrypt lvm2 ... filesystems ...)\n```\n\nZobacz dm-crypt/System configuration#mkinitcpio dla szczegółów i innych haczyków, których możesz potrzebować.\n\n"
    },
    {
      "title": "Konfigurowanie boot loadera",
      "level": 3,
      "content": "Aby odblokować zaszyfrowaną partycję root przy starcie, program ładujący musi ustawić następujący boot loadera:\n\n```\ncryptdevice=UUID=device-UUID:cryptolvm root=/dev/mapper/MyVol-root\n```\n\nThe <device-UUID> refers to the UUID of /dev/sdaX. See Persistent block device naming for details.\n\nSee dm-crypt/System configuration#Kernel parameters for details.\n\n"
    },
    {
      "title": "LUKS na LVM",
      "level": 2,
      "content": "Aby użyć szyfrowania na LVM, woluminy LVM są najpierw konfigurowane, a następnie wykorzystywane jako baza dla zaszyfrowanych partycji. W ten sposób możliwa jest również kombinacja zaszyfrowanych i nieszyfrowanych woluminów partycji.\n\nPoniższy krótki przykład tworzy LUKS na instalacji LVM i miesza się w użyciu pliku klucza dla partycji / home i tymczasowych woluminów krypt dla / tmp i / swap. Ten ostatni jest uważany za pożądany z punktu widzenia bezpieczeństwa, ponieważ żadne potencjalnie wrażliwe dane tymczasowe nie przeżywają ponownego uruchomienia komputera, gdy szyfrowanie zostanie ponownie zainicjowane. Jeśli masz doświadczenie z LVM, będziesz mógł zignorować / zastąpić LVM i inne szczegóły zgodnie z twoim planem. Jeśli chcesz rozłożyć wolumin logiczny na wielu dyskach podczas konfiguracji, procedura do tego została opisana w dm-crypt (Polski)/Specialties (Polski)#Rozszerzanie LVM na wielu dyskach.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Schemat partycjonowania:\n\n```\n+----------------+-----------------------------------------------------------------------+\n|                | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume |\n|                | /dev/mapper/swap      | /dev/mapper/root      | /dev/mapper/home      |\n|                |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|\n|                | Logical volume1       | Logical volume2       | Logical volume3       |\n|                |/dev/mapper/MyVol-swap |/dev/mapper/MyVol-root |/dev/mapper/MyVol-home |\n|                |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|\n| Boot partition |                                                                       |\n|   /dev/sda1    |                               /dev/sda2                               |\n+----------------+-----------------------------------------------------------------------+\n```\n\nRandomise /dev/sda2 zgodnie z dm-crypt (Polski)/Drive preparation (Polski)#dm-crypt wymazuje pusty dysk lub partycję.\n\n"
    },
    {
      "title": "Przygotowywanie woluminów logicznych",
      "level": 3,
      "content": "```\n# pvcreate /dev/sda2\n# vgcreate MyVol /dev/sda2\n# lvcreate -L 10G -n lvroot MyVol\n# lvcreate -L 500M -n swap MyVol\n# lvcreate -L 500M -n tmp MyVol\n# lvcreate -l 100%FREE -n home MyVol\n```\n\n```\n# cryptsetup luksFormat -c aes-xts-plain64 -s 512 /dev/mapper/MyVol-lvroot\n# cryptsetup open /dev/mapper/MyVol-lvroot root\n# mkfs.ext4 /dev/mapper/root\n# mount /dev/mapper/root /mnt\n```\n\nWięcej informacji o opcjach szyfrowania można znaleźć w dm-crypt (Polski)/Device encryption (Polski)#Opcje szyfrowania dla trybu LUKS. Zauważ, że /home zostanie zaszyfrowane #Szyfrowanie woluminu logicznego /home. Further, zauważ, że jeśli kiedykolwiek będziesz miał dostęp do zaszyfrowanego katalogu głównego z Arch-ISO, powyższe open akcja pozwoli ci po Pojawia się LVM.\n\n"
    },
    {
      "title": "Przygotowanie partycji rozruchowej",
      "level": 3,
      "content": "```\n# dd if=/dev/zero of=/dev/sda1 bs=1M status=progress\n# mkfs.ext4 /dev/sda1\n# mkdir /mnt/boot\n# mount /dev/sda1 /mnt/boot\n```\n\nTeraz po skonfigurowaniu zaszyfrowanego partycjonowania LVM nadszedł czas na instalację: Arch Install Scripts.\n\n"
    },
    {
      "title": "Konfigurowanie mkinitcpio",
      "level": 3,
      "content": "Dodaj keyboard, lvm2 i encrypt haki do mkinitcpio.conf:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... keyboard keymap block lvm2 encrypt ... filesystems ...)\n```\n\nZobacz dm-crypt/System configuration#mkinitcpio po szczegóły i inne haki, które mogą być potrzebne.\n\n"
    },
    {
      "title": "konfiguracjae boot loadera",
      "level": 3,
      "content": "Aby odblokować zaszyfrowaną partycję root przy starcie, program ładujący musi ustawić następujące parametry boot loadera :\n\n```\ncryptdevice=/dev/mapper/MyVol-lvroot:root root=/dev/mapper/root\n```\n\nZobacz dm-crypt/System configuration#Kernel parameters po szczegóły.\n\n"
    },
    {
      "title": "Konfigurowanie fstab i crypttab",
      "level": 3,
      "content": "```\n/etc/fstab\n```\n\n```\n/dev/mapper/root        /       ext4            defaults        0       1\n/dev/sda1               /boot   ext4            defaults        0       2\n/dev/mapper/tmp         /tmp    tmpfs           defaults        0       0\n/dev/mapper/swap        none    swap            sw              0       0\n```\n\nThe following crypttab options will re-encrypt the temporary filesystems each reboot:\n\nNastępujące opcje crypttab ponownie zaszyfrują tymczasowe pliki przy każdym ponownym uruchomieniu komputera:\n\n```\n/etc/crypttab\n```\n\n```\nswap\t/dev/mapper/MyVol-swap\t/dev/urandom\tswap,cipher=aes-xts-plain64,size=256\ntmp\t/dev/mapper/MyVol-tmp\t/dev/urandom\ttmp,cipher=aes-xts-plain64,size=256\n```\n\n"
    },
    {
      "title": "Szyfrowanie woluminu logicznego /home",
      "level": 3,
      "content": "Since this scenario uses LVM as the primary and dm-crypt as secondary mapper, each encrypted logical volume requires its own encryption. Yet, unlike the temporary filesystems configured with volatile encryption above, the logical volume for /home should be persistent, of course. The following assumes you have rebooted into the installed system, otherwise you have to adjust paths. To safe on entering a second passphrase at boot for it, a keyfile is created:\n\nPonieważ ten scenariusz używa LVM jako podstawowej i dm-crypt jako programu odwzorowującego wtórnego, każdy zaszyfrowany wolumin logiczny wymaga własnego szyfrowania. Jednak, inaczej niż w przypadku tymczasowych systemów plików skonfigurowanych powyżej z użyciem szyfrowania ulotnego, wolumin logiczny dla /home powinien być oczywiście stały. Poniższe założenie zakłada ponowne uruchomienie systemu, w przeciwnym razie trzeba dostosować ścieżki. Aby zabezpieczyć się przed wprowadzeniem drugiego hasła podczas uruchamiania, tworzony jest plik klucza:\n\n```\n# mkdir -m 700 /etc/luks-keys\n# dd if=/dev/random of=/etc/luks-keys/home bs=1 count=256 status=progress\n```\n\nWolumin logiczny jest zaszyfrowany:\n\n```\n# cryptsetup luksFormat -v -s 512 /dev/mapper/MyVol-home /etc/luks-keys/home\n# cryptsetup -d /etc/luks-keys/home open /dev/mapper/MyVol-home home\n# mkfs.ext4 /dev/mapper/home\n# mount /dev/mapper/home /home\n```\n\nThe encrypted mount is configured in crypttab:\n\n```\n/etc/crypttab\n```\n\n```\nhome\t/dev/mapper/MyVol-home   /etc/luks-keys/home\n```\n\n```\n/etc/fstab\n```\n\n```\n/dev/mapper/home        /home   ext4        defaults        0       2\n```\n\ni konfiguracja jest zakończona.\n\nJeśli chcesz rozszerzyć wolumin logiczny dla /home (lub dowolnego innego woluminu) w późniejszym czasie, ważne jest, aby pamiętać, że część zaszyfrowana LUKS musi również zostać zmieniona. Aby zobaczyć procedurę, patrz dm-crypt (Polski)/Specialties (Polski)#Rozszerzanie LVM na wielu dyskach.\n\n"
    },
    {
      "title": "LUKS na programowym RAID",
      "level": 2,
      "content": "Ten przykład jest oparty na konfiguracji dla laptopa wyposażonego w dwa dyski SSD o jednakowej wielkości oraz dodatkowy dysk twardy dla pamięci masowej. Efektem końcowym jest oparte na LUKS pełne szyfrowanie dysku (w tym /boot) dla wszystkich dysków, z dyskami SSD w macierzy RAID0 i pliki kluczy używane do odblokowania całego szyfrowania po podaniu GRUB poprawnego hasła przy starcie. Obsługa formatów TRIM jest włączona na dyskach SSD, ale warto zapoznać się ze szczegółowymi informacjami na temat bezpieczeństwa dm-crypt (Polski)/Specialties (Polski)#Obsługa Discard / TRIM dla dysków półprzewodnikowych (SSD) przed rozważeniem skorzystania z tego.\n\nThis setup utilizes a very simplistic partitioning scheme, with all the available RAID storage being mounted at / (no separate /boot partition), and the decrypted HDD being mounted at /mnt/data. It is also worth mentioning that the system in this example boots in BIOS mode and the drives are partitioned with GPT partitions.\n\nTa konfiguracja wykorzystuje bardzo uproszczony schemat partycjonowania, przy czym wszystkie dostępne pamięci RAID są montowane w / (brak oddzielnej partycji rozruchowej), a odszyfrowany dysk HDD jest montowany w {ic|/mnt/data}}. Warto również wspomnieć, że system w tym przykładzie uruchamia się w trybie BIOS, a dyski są partycjonowane przy użyciu partycji GPT.\n\nNależy pamiętać, że regularne kopie zapasowe są bardzo ważne w tej konfiguracji. Jeśli którakolwiek z dysków SSD ulegnie awarii, dane zawarte w macierzy RAID będą praktycznie niemożliwe do odzyskania. Możesz wybrać inny poziom RAID, jeśli twoja odporność na uszkodzenia jest dla ciebie ważna.\n\nW tej konfiguracji szyfrowanie nie jest zaprzeczeniem.\n\nW celu wykonania poniższych instrukcji stosuje się następujące urządzenia blokowe:\n\n```\n/dev/sda = first SSD\n/dev/sdb = second SSD\n/dev/sdc = HDD\n```\n\nPamiętaj, aby zastąpić je odpowiednimi oznaczeniami urządzeń do konfiguracji, ponieważ mogą się one różnić.\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Przed utworzeniem jakichkolwiek partycji powinieneś powinnaś wiedzieć o znaczeniu i metodach bezpiecznego usuwania dysku, opisanych w dm-crypt (Polski)/Drive preparation (Polski).\n\nKorzystając z bootloadera GRUB razem z GPT, utwórz partycję rozruchową systemu BIOS, jak wyjaśniono w systemach GRUB # BIOS. W przypadku tej konfiguracji obejmuje to partycję 1M dla \"rozruchu BIOS\" w /dev/sda1, a pozostałe miejsce na dysku jest podzielone na partycje dla \"Linux RAID\" w /dev/sda2.\n\nPo utworzeniu partycji na /dev/sda, można użyć następujących komend do sklonowania ich do /dev/sdb.\n\n```\n# sfdisk -d /dev/sda > sda.dump\n# sfdisk /dev/sdb < sda.dump\n```\n\nDysk twardy jest przygotowywany z pojedynczą partycją Linuksa obejmującą cały dysk w /dev/sdc1.\n\n"
    },
    {
      "title": "Budowanie macierzy RAID",
      "level": 3,
      "content": "Utwórz macierz RAID dla dysków SSD. Ten przykład wykorzystuje RAID 0, możesz chcieć wykorzystać inny poziom w oparciu o twoje preferencje lub wymagania.\n\n```\n# mdadm --create --verbose --level=0 --metadata=1.2 --raid-devices=2 /dev/md0 /dev/sda2 /dev/sdb2\n```\n\n"
    },
    {
      "title": "Przygotowanie urządzeń blokowych",
      "level": 3,
      "content": "Jak wyjaśniono w przygotowaniu dm-crypt (Polski)/Drive preparation (Polski), dyski są wymazywane losowymi danymi z wykorzystaniem /dev/zero oraz kryptograficznym z losowym kluczem. Alternatywnie możesz użyć dd z /dev/random lub /dev/urandom, ale będzie to znacznie wolniejsze\n\n```\n# cryptsetup open --type plain /dev/md0 container --key-file /dev/random\n# dd if=/dev/zero of=/dev/mapper/container bs=1M status=progress\n# cryptsetup close container\n```\n\nI powtórz powyższe na HDD (/dev/sdc1 w tym przykładzie).\n\nSkonfiguruj szyfrowanie dla /dev/md0:\n\n```\n# cryptsetup -y -v luksFormat -c aes-xts-plain64 -s 512 /dev/md0\n# cryptsetup open /dev/md0 cryptroot\n# mkfs.ext4 /dev/mapper/cryptroot\n# mount /dev/mapper/cryptroot /mnt\n```\n\nI powtórz dla HDD:\n\n```\n# cryptsetup -y -v luksFormat -c aes-xts-plain64 -s 512 /dev/sdc1\n# cryptsetup open /dev/sdc1 cryptdata\n# mkfs.ext4 /dev/mapper/cryptdata\n# mkdir -p /mnt/mnt/data\n# mount /dev/mapper/cryptdata /mnt/mnt/data\n```\n\n"
    },
    {
      "title": "Konfiguracja boot loadera",
      "level": 3,
      "content": "Skonfiguruj GRUB dla zaszyfrowanego systemu, edytując plik /etc/defaults/grub, wykonując następujące czynności. Zauważ, że opcja: :allow-discards umożliwia obsługę TRIM na SSD, jeśli nie chcesz jej używać, powinieneś to pominąć.\n\n```\nGRUB_CMDLINE_LINUX=\"cryptdevice=/dev/md0:cryptroot:allow-discards root=/dev/mapper/cryptroot\"\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nZobacz dm-crypt/System configuration#Kernel parameters i GRUB#Encrypted /boot po szczegółowe informacje.\n\nDokończ instalację GRUB na obu dyskach SSD (w rzeczywistości instalacja będzie działać tylko na /dev/sda).\n\n```\n# grub-install --target=i386-pc /dev/sda\n# grub-install --target=i386-pc /dev/sdb\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n"
    },
    {
      "title": "Tworzenie plików kluczy",
      "level": 3,
      "content": "Kolejne kroki nie pozwalają na dwukrotne wpisanie hasła podczas startu systemu (raz GRUB może odblokować szyfrowanie, a drugi raz, gdy initramfs przejmuje kontrolę nad systemem). Odbywa się to poprzez utworzenie pliku klucza do szyfrowania i dodanie go do obrazu initramfs, aby umożliwić szyfrowanie haka, aby odblokować urządzenie root. zobacz dm-crypt (Polski)/Device encryption (Polski)#Z plikiem kluczy osadzonym w initramfs po szczegółowe informacje.\n\n- Utwórz plik klucza i dodaj klucz do /dev/md0.\n\n- Utwórz kolejny plik kluczy dla dysku twardego ((/dev/sdc1), aby można go było odblokować podczas rozruchu. Dla wygody pozostaw powyższe hasło w miejscu, ponieważ może to ułatwić odzyskiwanie, jeśli kiedykolwiek będziesz tego potrzebować. Edytuj /etc/crypttab, aby odszyfrować dysk twardy podczas startu. Zobacz dm-crypt (Polski)/Device encryption (Polski)#Odblokowywanie partycji głównej podczas rozruchu.\n\n"
    },
    {
      "title": "Konfigurowanie systemu",
      "level": 3,
      "content": "Edytuj /etc/fstab, aby zamontować urządzenia blokujące cryptroot i cryptdata; jeśli nie włączasz obsługi TRIM, usuń opcję montowania:\n\n```\n/dev/mapper/cryptroot  /           ext4    rw,noatime,discard  0   1 \n/dev/mapper/cryptdata  /mnt/data   ext4    defaults            0   2\n```\n\nZapisz konfigurację RAID:\n\n```\n# mdadm --detail --scan > /etc/mdadm.conf\n```\n\nEdytuj plik mkinitcpio.conf, aby dołączyć swój plik kluczy i dodaj odpowiednie haki:\n\n```\nFILES=(/crypto_keyfile.bin)\nHOOKS=( ... keyboard keymap block mdadm_udev encrypt filesystems ... )\n```\n\nZobacz dm-crypt/System configuration#mkinitcpio po szczegóły\n\n"
    },
    {
      "title": "Zwykły dm-crypt",
      "level": 2,
      "content": "W przeciwieństwie do LUKS, tryb zwykły dm-crypt nie wymaga nagłówka na zaszyfrowanym urządzeniu: ten scenariusz wykorzystuje tę funkcję do ustawienia systemu na niepodzielonym na partycje, zaszyfrowanym dysku, który będzie nieodróżnialny od dysku wypełnionego losowymi danymi, co może pozwolić na deniable encryption. Zobacz też wikipedia:Disk encryption#Full disk encryption.\n\nZauważ, że jeśli szyfrowanie całego dysku nie jest wymagane, metody korzystające z LUKS opisane w powyższych sekcjach są lepszymi opcjami zarówno dla szyfrowania systemowego, jak i zaszyfrowanych partycji. Funkcje LUKS takie jak zarządzanie kluczami z wieloma hasłami / plikami kluczy lub ponowne szyfrowanie urządzenia w miejscu są niedostępne w trybie zwykłym.\n\nPlain dm-crypt encryption can be more resilient to damage than LUKS, because it does not rely on an encryption master-key which can be a single-point of failure if damaged.\n\nZwykłe szyfrowanie dm-crypt może być bardziej odporne na uszkodzenia niż LUKS, ponieważ nie opiera się na kluczu szyfrującym, który może być pojedynczym punktem awarii, jeśli jest uszkodzony. Jednak użycie trybu zwykłego wymaga również ręcznej konfiguracji opcji szyfrowania, aby uzyskać taką samą siłę kryptograficzną. Zobacz też Disk encryption#Cryptographic metadata. Stosując tryb \"zwykły\" można również rozważyć, jeśli chodzi o problemy wyjaśnione w dm-crypt (Polski)/Specialties (Polski)#Obsługa Discard / TRIM dla dysków półprzewodnikowych (SSD).\n\n- tcplay, który oferuje szyfrowanie bez nagłówków, ale z funkcją PBKDF2, lub\n- tryb dm-crypt LUKS z odłączonym nagłówkiem za pomocą \"cryptsetup\" --header opcja. Nie można go używać ze standardowym hakiem \"szyfruj\", ale hakiem may be modified.\n\nScenariusz wykorzystujący dwie pamięci USB:\n\n- jeden dla urządzenia rozruchowego, który pozwala również na przechowywanie opcji wymaganych do otwarcia / odblokowania zwykłego szyfrowanego urządzenia w konfiguracji modułu ładującego, ponieważ wpisanie ich na każdym rozruchu byłoby podatne na błędy;\n- drugi dla pliku kluczy szyfrujących, zakładając, że jest przechowywany jako nieprzetworzone bity, aby w oczach nieświadomego napastnika, który mógłby uzyskać klucz usb, klucz szyfrowania pojawi się jako dane losowe, zamiast być widocznym jako normalny plik. Zobacz też Wikipedia:Security through obscurity, follow dm-crypt (Polski)/Device encryption (Polski)#Pliki kluczy to prepare the keyfile.\n\nUkład dysku to:\n\n```\n+--------------------+------------------+--------------------+ +---------------+ +---------------+\n|Volume 1:           |Volume 2:         |Volume 3:           | |Boot device    | |Encryption key |\n|                    |                  |                    | |               | |file storage   |\n|root                |swap              |home                | |/boot          | |(unpartitioned |\n|                    |                  |                    | |               | |in example)    |\n|/dev/store/root     |/dev/store/swap   |/dev/store/home     | |/dev/sdY1      | |/dev/sdZ       |\n|--------------------+------------------+--------------------| |---------------| |---------------|\n|disk drive /dev/sdaX encrypted using plain mode and LVM     | |USB stick 1    | |USB stick 2    |\n+------------------------------------------------------------+ +---------------+ +---------------+\n```\n\n- Możliwe jest również użycie pojedynczego klucza usb poprzez bezpośrednie skopiowanie pliku klucza do initram. Przykładowy plik kluczy /etc/keyfile zostanie skopiowany do obrazu initram przez ustawienie FILES=(/etc/keyfile) w /etc/mkinitcpio.conf. Sposób instruowania encrypt do odczytu pliku klucza w obrazie initram rootfs: prefiks przed nazwą pliku, np. cryptkey=rootfs:/etc/keyfile.\n- inną opcją jest użycie hasła z dobrom entropią.\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Ważne jest, aby zamapowane urządzenie było wypełnione danymi. W szczególności dotyczy to zastosowania scenariusza, które stosujemy tutaj. Zobacz dm-crypt (Polski)/Drive preparation (Polski) i dm-crypt (Polski)/Drive preparation (Polski)#Metody specyficzne dla dm-crypt\n\n"
    },
    {
      "title": "Przygotowywanie partycji, które nie są uruchomione",
      "level": 3,
      "content": "Zobacz dm-crypt (Polski)/Device encryption (Polski)#Opcje szyfrowania dla trybu zwykłego szczegółowe informacje.\n\nKorzystanie z urządzenia /dev/sdX, z szyfrem twofish-xts z 512-bitowym rozmiarem klucza i przy użyciu pliku klucza mamy następujące opcje dla tego scenariusza:\n\n```\n# cryptsetup --hash=sha512 --cipher=twofish-xts-plain64 --offset=0 --key-file=/dev/sdZ --key-size=512 open --type=plain /dev/sdX enc\n```\n\nW przeciwieństwie do szyfrowania za pomocą LUKS, powyższe polecenie musi być wykonane \"w całości\" za każdym razem, gdy konieczne jest ponowne ustanowienie mapowania, dlatego ważne jest, aby pamiętać szczegóły szyfrowania, hasza i pliku klucza.\n\nMożemy teraz sprawdzić, czy wpis mapowania został wprowadzony /dev/mapper/enc:\n\n```\n# fdisk -l\n```\n\nNastępnie ustawiamy woluminy logiczne LVM na zmapowanym urządzeniu. Zobacz Install Arch Linux on LVM po dalsze szczegóły:\n\n```\n# pvcreate /dev/mapper/enc\n# vgcreate store /dev/mapper/enc\n# lvcreate -L 20G store -n root\n# lvcreate -L 10G store -n swap\n# lvcreate -l 100%FREE store -n home\n```\n\nFormatujemy i montujemy je oraz aktywujemy partycję swap zobacz File systems#Create a file system po dalsze szczegóły:\n\n```\n# mkfs.ext4 /dev/store/root\n# mkfs.ext4 /dev/store/home\n# mount /dev/store/root /mnt\n# mkdir /mnt/home\n# mount /dev/store/home /mnt/home\n# mkswap /dev/store/swap\n# swapon /dev/store/swap\n```\n\n"
    },
    {
      "title": "Przygotowanie partycji rozruchowej",
      "level": 3,
      "content": "Partycję /boot można zainstalować na standardowej partycji vfat USB-Stick, jeśli jest taka potrzeba. Ale jeśli potrzebne jest ręczne partycjonowanie, wystarczy mała partycja 200 MB. Utwórz partycję za pomocą wybranego narzędzia do partycjonowania.\n\nWybieramy system plików, który nie jest zapisywany w dzienniku, aby zachować pamięć flash partycji /boot, jeśli nie została jeszcze sformatowana jako vfat:\n\n```\n# mkfs.ext2 /dev/sdY1\n# mkdir /mnt/boot\n# mount /dev/sdY1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Konfigurowanie mkinitcpio",
      "level": 3,
      "content": "Dodaj keyboard, encrypt i lvm2 haki do mkinitcpio.conf:\n\n```\netc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... keyboard keymap block encrypt lvm2 ... filesystems ...)\n```\n\nZobacz dm-crypt/System configuration#mkinitcpio do dalszych szczegółów i innych haczyków, które możesz potrzebować.\n\n"
    },
    {
      "title": "Konfiguracja bootloadera",
      "level": 3,
      "content": "Aby uruchomić zaszyfrowaną partycję root, botlader musi ustawić następujące parametry jądra:\n\n```\ncryptdevice=/dev/sdX:enc cryptkey=/dev/sdZ:0:512 crypto=sha512:twofish-xts-plain64:512:0:\n```\n\nZobacz dm-crypt/System configuration#Kernel parameters po dalsze szczegóły i inne parametry, których możesz potrzebować.\n\n```\n# grub-install --recheck /dev/sdY\n```\n\n"
    },
    {
      "title": "Po instalacji",
      "level": 3,
      "content": "Możesz chcieć usunąć pendrive USB po uruchomieniu. Ponieważ partycja /boot zazwyczaj nie jest potrzebna, opcja noauto może zostać dodana do odpowiedniej linii w /etc/fstab:\n\n```\n/etc/fstab\n```\n\n```\n# /dev/sdYn\n/dev/sdYn /boot ext2 noauto,rw,noatime 0 2\n```\n\nJednakże, gdy wymagana jest aktualizacja jądra lub programu ładującego, partycja /boot musi być obecna i zamontowana. Ponieważ pozycja w fstab już istnieje, można ją zamontować po prostu za pomocą:\n\n```\n# mount /boot\n```\n\n"
    },
    {
      "title": "Szyfrowana partycja rozruchowa (GRUB)",
      "level": 2,
      "content": "Ta konfiguracja wykorzystuje ten sam układ i konfigurację partycji dla partycji głównej systemu, co poprzednia sekcja ##LVM na LUKS, z dwiema wyraźnymi różnicami:\n\n1. Konfiguracja jest przeprowadzana dla systemu UEFI i\n1. Specjalna funkcja programu bodladera GRUB służy do dodatkowego szyfrowania partycji rozruchowej /boot. Zobacz też GRUB#Encrypted /boot.\n\nUkład dysku w tym przykładzie to:\n\n```\n+---------------+----------------+----------------+----------------+----------------+\n|ESP partition: |Boot partition: |Volume 1:       |Volume 2:       |Volume 3:       |\n|               |                |                |                |                |\n|/boot/efi      |/boot           |root            |swap            |home            |\n|               |                |                |                |                |\n|               |                |/dev/store/root |/dev/store/swap |/dev/store/home |\n|/dev/sdaX      |/dev/sdaY       +----------------+----------------+----------------+\n|unencrypted    |LUKS encrypted  |/dev/sdaZ encrypted using LVM on LUKS             |\n+---------------+----------------+--------------------------------------------------+\n```\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Przed utworzeniem jakichkolwiek partycji powinieneś powinnaś wiedzieć o znaczeniu metod bezpiecznego usuwania dysku, opisanych w dm-crypt (Polski)/Drive preparation (Polski).\n\nUtwórz partycję systemową EFI o odpowiednim rozmiarze, później zostanie zamontowana w /boot/efi.\n\nUtwórz partycję do zamontowania w /boot typu 8300 o wielkości 100 MB lub więcej.\n\nUtwórz partycję typu 8E00, który później będzie zawierał zaszyfrowany kontener.\n\nUtwórz zaszyfrowany kontener LUKS na partycji \"systemowej\".\n\n```\n# cryptsetup luksFormat /dev/sdaZ\n```\n\nAby uzyskać więcej informacji o dostępnych opcjach cryptsetup, zobacz LUKS encryption options przed powyższym poleceniem.\n\nTwój układ partycji powinien wyglądać podobnie do tego:\n\n```\n# gdisk /dev/sda\n```\n\n```\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1            2048         1050623   512.0 MiB   EF00  EFI System\n   2         1050624         1460223   200.0 MiB   8300  Linux filesystem\n   3         1460224        41943006   19.3 GiB    8E00  Linux LVM\n```\n\nOtwórz kontener:\n\n```\n# cryptsetup open /dev/sdaZ lvm\n```\n\nOdszyfrowany kontener jest teraz dostępny pod adresem /dev/mapper/lvm.\n\n"
    },
    {
      "title": "Przygotowywanie woluminów logicznych",
      "level": 3,
      "content": "Woluminy logiczne LVM tego przykładu są zgodne z dokładnym układem w poprzednim scenariuszu. Dlatego prosimy postępować zgodnie z instrukcjami Preparing the logical volumes lub dostosuj je według potrzeb.\n\n"
    },
    {
      "title": "Przygotowanie partycji rozruchowej",
      "level": 3,
      "content": "Program ładujący ładuje jądro initramfs, i jego własne pliki konfiguracyjne z katalogu /boot directory.\n\nNajpierw utwórz kontener LUKS, w którym będą znajdować się i instalowane pliki:\n\n```\n# cryptsetup luksFormat /dev/sdaY\n```\n\nNastępnie otwórz:\n\n```\n# cryptsetup open /dev/sdaY cryptboot\n```\n\nUtwórz system plików na partycji przeznaczonej dla /boot. Dowolny system plików, który może odczytać bootloader, jest odpowiedni:\n\n```\n# mkfs.ext2 /dev/mapper/cryptboot\n```\n\nUtwórz katalog /mnt/boot:\n\n```\n# mkdir /mnt/boot\n```\n\nZamontuj partycję na /mnt/boot:\n\n```\n# mount /dev/mapper/cryptboot /mnt/boot\n```\n\nUtwórz punkt montowania dla EFI system partition w /boot/efi w celu zapewnienia zgodności z grub-install i zamontuj:\n\n```\n# mkdir /mnt/boot/efi\n# mount /dev/sdaX /mnt/boot/efi\n```\n\nW tym momencie powinieneś mieć następujące partycje i woluminy logiczne wewnątrz /mnt\n\n```\n$ lsblk\n```\n\n```\nNAME              \t  MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nsda                       8:0      0   200G  0 disk\n├─sda1                    8:1      0   512M  0 part  /boot/efi\n├─sda2                    8:2      0   200M  0 part\n│ └─boot\t\t  254:0    0   198M  0 crypt /boot\n└─sda3                    8:3      0   100G  0 part\n  └─lvm                   254:1    0   100G  0 crypt\n    ├─MyStorage-swapvol   254:2    0     8G  0 lvm   [SWAP]\n    ├─MyStorage-rootvol   254:3    0    15G  0 lvm   /\n    └─MyStorage-homevol   254:4    0    77G  0 lvm   /home\n```\n\nNastępnie kontynuuj procedurę instalacji aż do kroku mkinitcpio.\n\n"
    },
    {
      "title": "Konfigurowanie mkinitcpio",
      "level": 3,
      "content": "Dodaj keyboard, encrypt i lvm2 haki do mkinitcpio.conf:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... keyboard keymap block encrypt lvm2 ... filesystems ...)\n```\n\nZobacz dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Konfiguracja botladera",
      "level": 3,
      "content": "Skonfiguruj GRUB, aby rozpoznał zaszyfrowaną partycję /boot LUKS i odblokuj zaszyfrowaną partycję root przy starcie:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_CMDLINE_LINUX=\"... cryptdevice=UUID=<device-UUID>:lvm ...\"\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nZobacz dm-crypt/System configuration#Kernel parameters i GRUB#Encrypted /boot do dalszych szczegółów. <device-UUID> odnosi się do UUID z /dev/sdaZ (partycja przechowująca lvm zawierający główny system plików). Zobacz Persistent block device naming.\n\nWygeneruj plik konfiguracyjny GRUB i zainstaluj na zamontowanym ESP:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub --recheck\n```\n\nJeśli zakończy się to bezbłędnie, GRUB powinien poprosić o hasło, aby odblokować partycję /boot po następnym uruchomieniu.\n\n"
    },
    {
      "title": "Konfigurowanie fstab i crypttab",
      "level": 3,
      "content": "Ta sekcja opisuje dodatkową konfigurację pozwalającą systemowi zamontować zaszyfrowane /boot\n\nPodczas gdy GRUB prosi o hasło, aby odblokować zaszyfrowane /boot po powyższych instrukcjach odblokowanie partycji nie jest przekazywane do initramfs. Stąd, /boot nie będzie dostępne po ponownym uruchomieniu systemu, ponieważ encrypt hook tylko odblokowuje root systemu.\n\nJeśli używałeś skryptu \"genfstab\" podczas instalacji, zostanie wygenerowany /etc/fstab wpisy dla /boot i /boot/efi montuj punkty już, ale system nie odnajdzie device mapper dla partycji rozruchowej. Aby go udostępnić, dodaj go do crypttab. Na przykład:\n\n```\n/etc/crypttab\n```\n\n```\ncryptboot  /dev/sdaY      none        luks\n```\n\nsprawi, że system ponownie poprosi o podanie hasła (to znaczy, że musisz wprowadzić je dwukrotnie przy starcie systemu: raz dla GRUB i raz dla systemd init). Aby uniknąć podwójnego wpisu dotyczącego odblokowania /boot, postępuj zgodnie z instrukcjami na stronie dm-crypt (Polski)/Device encryption (Polski)#Pliki kluczy do:\n\n1. Stwórz randomtext keyfile,\n1. Dodaj plik klucza do pliku (/dev/sdaY) boot partition's LUKS header and\n1. Sprawdź wpis /etc/fstab i dodaj linię /etc/crypttab do unlock it automatically at boot.\n\nJeśli z jakiegoś powodu plik klucza nie odblokuje partycji rozruchowej, systemd zrestartuje się, aby poprosić o hasło do odblokowania, a jeśli jest to poprawne, kontynuuj uruchamianie.\n\n- Warto rozważyć dodanie programu ładującego GRUB do listy ignorowanych plików /etc/pacman.conf w celu uzyskania szczególnej kontroli, kiedy bootloader (który zawiera własne moduły szyfrujące) jest aktualizowany.\n- Jeśli chcesz zaszyfrować partycję /boot, aby zabezpieczyć się przed zagrożeniami związanymi z nieuprawnionym dostępem, pomoc dla mkinitcpio-chkcryptoboot\n\n"
    },
    {
      "title": "Btrfs subvolumes with swap",
      "level": 2,
      "content": "Poniższy przykład tworzy pełne szyfrowanie systemowe za pomocą LUKS przy użyciu subwoluminów Btrfs do simulate partitions.\n\nJeśli używasz UEFI, to EFI system partition (ESP) jest wymagane. /boot może znajdować się na / i być zaszyfrowane; jednak samo ESP nie może być zaszyfrowane. W tym przykładowym układzie ESP jest /dev/sdaY i jest zamontowany w /boot/efi. /boot sama znajduje się na partycji systemowej, /dev/sdaX.\n\nPonieważ /boot znajduje się na zaszyfrowanej /, GRUB musi być użyty jako bootloader, ponieważ tylko GRUB może załadować moduły niezbędne do odszyfrowania /boot (e.g., crypto.mod, cryptodisk.mod and luks.mod) [1].\n\nDodatkowo wyświetlana jest opcjonalna zwykła, zaszyfrowana partycja swap.\n\n```\n+--------------------------+--------------------------+--------------------------+\n|ESP                       |System partition          |Swap partition            |\n|unencrypted               |LUKS-encrypted            |plain-encrypted           |\n|                          |                          |                          |\n|/boot/efi                 |/                         |                          |\n|/dev/sdaY                 |/dev/sdaX                 |/dev/sdaZ                 |\n|--------------------------+--------------------------+--------------------------+\n```\n\n"
    },
    {
      "title": "Przygotowanie dysku",
      "level": 3,
      "content": "Przed utworzeniem jakichkolwiek partycji powinieneś wiedzieć o znaczeniu i metodach bezpiecznego usuwania dysku, opisanych w dm-crypt (Polski)/Drive preparation (Polski). Jeśli używasz UEFI stworzyć EFI system partition o odpowiednim rozmiarze. Zostanie on później zamontowany w /boot/efi. Jeśli masz zamiar utworzyć zaszyfrowaną partycję wymiany, utwórz dla niej partycję, ale nie oznaczaj jej jako \"swap\", ponieważ z partycją będzie używana zwykły \"dm-crypt\".\n\nUtwórz potrzebne partycje, przynajmniej jedną dla / (e.g. /dev/sdaX). zobacz Partitioning article.\n\n"
    },
    {
      "title": "Utwórz kontener LUKS",
      "level": 4,
      "content": "Śledzić dm-crypt (Polski)/Device encryption (Polski)#Szyfrowanie urządzeń w trybie LUKS ustawić /dev/sdaX dla LUKS. Zobacz dm-crypt (Polski)/Device encryption (Polski)#Opcje szyfrowania dla trybu LUKS zanim to zrobisz, aby wyświetlić listę opcji szyfrowania.\n\n"
    },
    {
      "title": "Odblokuj kontener LUKS",
      "level": 4,
      "content": "Teraz wykonaj dm-crypt (Polski)/Device encryption (Polski)#Odblokowywanie / mapowanie partycji LUKS za pomocą device mapper aby odblokować kontener LUKS i zmapować go.\n\n"
    },
    {
      "title": "Sformatuj zmapowane urządzenie",
      "level": 4,
      "content": "Przejdź do sformatowania zmapowanego urządzenia zgodnie z opisem w Btrfs#File system on a single device, gdzie /dev/partitionjest nazwą zmapowanego urządzenia (tj., cryptroot) i not /dev/sdaX.\n\n"
    },
    {
      "title": "Zamontuj zmapowane urządzenie",
      "level": 4,
      "content": "W końcu, mount teraz sformatowane urządzenie mapowane (tzn. /dev/mapper/cryptroot) do /mnt.\n\n"
    },
    {
      "title": "Układ",
      "level": 4,
      "content": "Subvolumes będą używane do symulacji partycji, ale będą również tworzone inne (zagnieżdżone) podwiliny. Oto częściowa reprezentacja tego, co wygeneruje następujący przykład:\n\n```\nsubvolid=5 (/dev/sdaX)\n   |\n   ├── @ (mounted as /)\n   |       |\n   |       ├── /bin (directory)\n   |       |\n   |       ├── /home (mounted @home subvolume)\n   |       |\n   |       ├── /usr (directory)\n   |       |\n   |       ├── /.snapshots (mounted @snapshots subvolume)\n   |       |\n   |       ├── /var/cache/pacman/pkg (nested subvolume)\n   |       |\n   |       ├── ... (other directories and nested subvolumes)\n   |\n   ├── @snapshots (mounted as /.snapshots)\n   |\n   ├── @home (mounted as /home)\n   |\n   └── @... (additional subvolumes you wish to use as mount points)\n```\n\nTa sekcja jest zgodna z Snapper#Suggested filesystem layout, który jest najbardziej przydatny w połączeniu z Snapper. Powinieneś także skonsultować się Btrfs Wiki SysadminGuide#Layout.\n\n"
    },
    {
      "title": "Create top-level subvolumes",
      "level": 4,
      "content": "Tutaj używamy konwencji prefiksowania @ do subwolumowania nazw, które będą używane jako punkty montowania, oraz @ będzie subvolume, które jest zamontowane jako /.\n\nŚledząc Btrfs#Creating a subvolume artykuł, utwórz subvolumes w /mnt/@, /mnt/@snapshots, i /mnt/@home.\n\nUtwórz teraz wszystkie dodatkowe subvolumes, które chcesz teraz wykorzystać jako punkty podłączenia.\n\n"
    },
    {
      "title": "Mount top-level subvolumes",
      "level": 4,
      "content": "Odmontuj partycję systemową na /mnt.\n\nTeraz zamontuj nowo utworzony @ subvolume, które będzie służyć jako / do /mnt używając subvol= opcje montowania. Zakładając, że zmapowane urządzenie ma nazwę cryptroot, polecenie wyglądałoby jak:\n\n```\n# mount -o compress=lzo,subvol=@ /dev/mapper/cryptroot /mnt\n```\n\nZobacz Btrfs#Mounting subvolumes for more details.\n\nZamontuj także inne subvolumes do odpowiednich punktów montowania @home do /mnt/home i @snapshots do /mnt/.snapshots.\n\n"
    },
    {
      "title": "Utwórz zagnieżdżone subvolumes",
      "level": 4,
      "content": "utwórz dowolne subvolumes, których nie chcesz mieć podczas robienia migawki /. Na przykład prawdopodobnie nie chcesz robić migawek /var/cache/pacman/pkg. Te podwilumny będą zagnieżdżone pod @ subvolume, ale równie łatwo mogłoby zostać stworzone wcześniej na tym samym poziomie co @ zgodnie z własnymi preferencjami.\n\nponieważ @ subvolume jest zamontowany w /mnt będziesz musiał create a subvolume w /mnt/var/cache/pacman/pkg dla tego przykładu. Może być konieczne najpierw utworzenie katalogów macierzystych.\n\nInne katalogi, z którymi możesz to zrobić, to /var/abs, /var/tmp, i /srv.\n\n"
    },
    {
      "title": "Zamontuj ESP",
      "level": 4,
      "content": "Jeśli wcześniej przygotowano partycję systemową EFI, utwórz jej punkt podłączenia i zamontuj go teraz.\n\nNa etapie pacstrap, btrfs-progs musi być zainstalowany jako dodatek do grupy podstawowej.\n\n"
    },
    {
      "title": "Utwórz plik klucza",
      "level": 4,
      "content": "Aby GRUB otworzył partycję LUKS bez konieczności dwukrotnego wpisywania hasła przez użytkownika, użyjemy pliku klucza osadzonego w initramfs. Śledzić dm-crypt (Polski)/Device encryption (Polski)#Z plikiem kluczy osadzonym w initramfs upewnij się, że dodasz klucz /dev/sdaX na luksAddKey step.\n\n"
    },
    {
      "title": "Edycja mkinitcpio.conf",
      "level": 4,
      "content": "Po utworzeniu, dodaniu i osadzeniu klucza, jak opisano powyżej, dodaj encrypt hak do mkinitcpio.conf jak również wszelkie inne haki, których potrzebujesz. Zobacz Dm-crypt/System configuration#mkinitcpio dla szczegółowych informacji. Pamiętaj, aby zregenerować początkowy RAMdysk po zakończeniu.\n\n"
    },
    {
      "title": "Konfigurowanie botladera",
      "level": 3,
      "content": "Zaistaluj GRUB do /dev/sda. Następnie edytuj /etc/default/grub zgodnie z instrukcją GRUB#Encrypted /boot artykułu, zgodnie z instrukcjami dla zaszyfrowanego katalogu głównego i partycji rozruchowej. Na koniec wygeneruj plik konfiguracyjny GRUB.\n\n"
    },
    {
      "title": "Konfiguracja swap",
      "level": 3,
      "content": "Jeśli utworzyłeś partycję, która ma być używana do szyfrowanej wymiany, teraz jest czas na jej skonfigurowanie. Postępuj zgodnie z instrukcjami na dm-crypt (Polski)/Swap encryption (Polski).\n\nPo wykonaniu tego kroku kontynuuj konfigurację systemu zgodnie z ustawieniami installation guide.\n\n"
    }
  ]
}