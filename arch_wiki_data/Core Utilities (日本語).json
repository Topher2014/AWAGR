{
  "title": "Core Utilities (日本語)",
  "url": "https://wiki.archlinux.org/title/Core_Utilities_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- コマンドラインシェル\n- ユーザーとグループ\n- Systemd\n- Pacman\n- 一般的な推奨事項\n\nCore utilitiy は、GNU/Linux システムにおける基本的で基礎的なツールのことです。この記事では、それらのツールに関する完全ではない概要や、ドキュメントへのリンク、有用な代替プログラムに関する情報を提供します。この記事の扱う範囲は GNU coreutils にとどまりません。ほとんどの core utility は伝統的な Unix ツールで、多くが POSIX によって標準化されました。しかし、さらに多くの機能を提供するように開発され続けています。\n\nほとんどのコマンドラインインターフェイスは man ページ に、GNU プロジェクト によるユーティリティは Info マニュアルにドキュメント化されています。一部のシェルは help コマンドをシェルの組み込みコマンドとして提供しています。加えて、ほとんどのユーティリティは --help フラグで実行すると使用方法を表示します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 基本コマンド 1.1 データの損失を防ぐ\n- 2 その他のコマンド\n- 3 代替コマンド 3.1 cat の代替 3.2 cd の代替 3.3 cp の代替 3.4 ls の代替 3.5 find の代替 3.6 diff の代替 3.7 grep の代替 3.7.1 コード検索ソフトウェア 3.7.2 インタラクティブフィルター 3.8 dd の代替 3.8.1 代替 dd の実装 3.8.1.1 GNU dd のスピンオフ 3.8.2 モダンな dd の類似品 3.8.3 buffer のスピンオフ 3.9 df の代替 3.10 du の代替\n- 4 参照\n\n- 1.1 データの損失を防ぐ\n\n- 3.1 cat の代替\n- 3.2 cd の代替\n- 3.3 cp の代替\n- 3.4 ls の代替\n- 3.5 find の代替\n- 3.6 diff の代替\n- 3.7 grep の代替 3.7.1 コード検索ソフトウェア 3.7.2 インタラクティブフィルター\n- 3.8 dd の代替 3.8.1 代替 dd の実装 3.8.1.1 GNU dd のスピンオフ 3.8.2 モダンな dd の類似品 3.8.3 buffer のスピンオフ\n- 3.9 df の代替\n- 3.10 du の代替\n\n- 3.7.1 コード検索ソフトウェア\n- 3.7.2 インタラクティブフィルター\n\n- 3.8.1 代替 dd の実装 3.8.1.1 GNU dd のスピンオフ\n- 3.8.2 モダンな dd の類似品\n- 3.8.3 buffer のスピンオフ\n\n- 3.8.1.1 GNU dd のスピンオフ\n\n"
    },
    {
      "title": "基本コマンド",
      "level": 2,
      "content": "以下の表には ArchLinux ユーザーが知っておくべきいくつかの重要なユーティリティを載せています。intro(1) も参照してください。\n\nTable content:\nパッケージ | ユーティリティ | 説明 | ドキュメント | 代替品\nシェル組み込み | cd | ディレクトリを変更 | cd(1p) | #cd の代替\nGNU coreutils | ls | ファイルを一覧表示 | ls(1), info | tree, #ls の代替\ncat | ファイルを連結して表示 | cat(1), info | tac(1), #cat の代替\nmkdir | ディレクトリを作成 | mkdir(1), info\nrmdir | 空のディレクトリを削除 | rmdir(1), info\nrm | ファイルやディレクトリを削除 | rm(1), info | shred unlink(1)\ncp | ファイルやディレクトリをコピー | cp(1), info | #cp の代替\nmv | ファイルやディレクトリを移動 | mv(1), info\nln | ハードリンクやシンボリックリンクを作成 | ln(1), info | sln(8) (soname リカバリ)\nchown | ファイルの所有者やグループを変更 | chown(1), info | chgrp(1)\nchmod | ファイルのパーミッションを変更 | chmod(1), info\ndd | ファイルを変換・コピー | dd(1), info | #dd の代替\ndf | ファイルシステムの使用状況を表示 | df(1), info | #df の代替\ndu | ファイルとディレクトリによって使用されているディスクの容量を推定します | du(1), info | #du の代替\nGNU tar | tar | tar アーカイバ | tar(1), info | アーカイバ\nGNU less | less | ターミナルページャ | less(1) | ターミナルページャ\nGNU findutils | find | ファイルやディレクトリを検索 | find(1), info, [[1]] | #find の代替\nGNU diffutils | diff | ファイルを行毎に比較 | diff(1), info | #diff の代替\nGNU grep | grep | パターンに一致する行を表示 | grep(1), info | #grep の代替\nGNU sed | sed | ストリームエディタ | sed(1), info, one-liners | sad\nGNU gawk | awk | パターンスキャンとデータ処理言語 | gawk(1), info | nawk, mawkAUR, goawkAUR\nutil-linux | dmesg | カーネルリングバッファを出力/制御 | dmesg(1) | systemd/ジャーナル\nlsblk | ブロックデバイスを一覧表示 | lsblk(8)\nmount | ファイルシステムをマウント | mount(8)\numount | ファイルシステムをアンマウント | umount(8)\nsu | ユーザを変更 | su(1) | sudo, doas\nkill | プロセスを終了 | kill(1) | pkill(1), killall(1)\nprocps-ng | pgrep | 名前や属性によってプロセスを検索 | pgrep(1) | pidof(1)\nps | プロセスの情報を表示 | ps(1) | top(1), タスクマネージャ\nfree | メモリの使用/未使用量を表示 | free(1)\n\n"
    },
    {
      "title": "データの損失を防ぐ",
      "level": 3,
      "content": "rm や mv、cp、シェルのリダイレクトは問答無用でファイルを削除/上書きします。rm と mv、cp はすべて -i フラグをサポートしており、このフラグを使うとファイルを削除/上書きする前にユーザに尋ねるようになります。エイリアスを使って -i フラグをデフォルトで有効化したいユーザもいるでしょう。しかし、これらのシェルオプションに頼りっきりなるのは危険です。これらのオプションに慣れてしまうと、これらを使用していない他のシステムやユーザを使うときにデータ損失を招く可能性があります。データ損失を防ぐ最良の方法はバックアップを取ることです。\n\n"
    },
    {
      "title": "その他のコマンド",
      "level": 2,
      "content": "以下の表にはしばしば便利なコアユーティリティをリストしています。\n\nTable content:\nパッケージ | ユーティリティ | 説明 | ドキュメント | 代替品\nシェル組み込み | alias | エイリアスを定義/表示 | alias(1p)\ntype | コマンドのタイプを表示 | type(1p) | command(1p), whereis(1), which(1)\ntime | コマンドの所要時間を計測 | time(1p)\nGNU coreutils | tee | 標準入力を読み込み、標準出力やファイルに書き出す | tee(1), info | pee(1)\nmktemp | テンポラリファイルやテンポラリディレクトリを作成 | mktemp(1), info\nmknod | 名前付きパイプやデバイスノードを作成する | mknod(1), mkfifo(1), info\ntruncate | ファイルのサイズを縮小/拡張する | truncate(1), info | fallocate(1)\nbasenc | 入力をエンコードし、結果を出力する | basenc(1), base64(1), info\ncut | 行の選択した部分を表示 | cut(1), info | colrm(1), hck, choose\ntr | 文字を置換/削除 | tr(1), info | uconv(1)\nod | ファイルを8進数や他の基数でダンプ | od(1), info | hexdump(1), vim の xxd(1)\nsort | 行をソート | sort(1), info\nuniq | 繰り返される行を表示/省略 | uniq(1), info | anewer, runiqAUR, huniq-gitAUR\ncomm | 2つのソート済みのファイルを行単位で比較 | comm(1), info | zetAUR\nhead | ファイルの最初の部分を出力 | head(1), info\njoin | 2 つの入力のフィールドが共通な行を結合する | join(1), info | combine(1) zetAUR\nmd5sum | 入力の暗号ハッシュ関数の値を計算し、出力する | sha256sum(1), sha512sum(1), info | shasum(1), hashdeep(1), rhash(1)\ntail | ファイルの最後の部分を出力/追従 | tail(1), info\nwc | 改行や単語、バイト数を表示 | wc(1), info\nGNU binutils | strings | バイナリファイル内の表示可能な文字を表示 | strings(1), info | stringsextAUR\nutil-linux | column | ファイルを複数列に整形する、任意でグリッド付きの表で綺麗に出力する | column(1) | paste(1), csviewAUR\nGNU findutils | xargs | 標準入力からの引数を組み合わせる、またはテンプレート化し、外部コマンドを呼び出す | xargs(1) | parallel(1) (parallel_alternatives(7))\nGNU glibc | iconv | 文字コードを変換 | iconv(1) | recode, uconv(1)\nGNU sharutils | uudecode | ファイルを email に適したテキストにエンコードする | uuencode(1), uudecode(1), info | uudeview(1)\nfile | file | ファイルタイプを推測 | file(1)\n\nmoreutils パッケージには GNU coreutils に無い sponge(1) のような便利なツールを提供します。\n\n"
    },
    {
      "title": "代替コマンド",
      "level": 2,
      "content": "コアユーティリティの代替は以下のパッケージによって提供されています:\n\n- BusyBox — レスキューや組み込みシステム向けのユーティリティ。\n\n- Toybox — オールインワンの Linux コマンドライン。\n\n- uutils — GNU coreutils を Rust で書き直したクロスプラットフォームなユーティリティ。\n\n- Heirloom Toolchest — 標準的な Unix ユーティリティの伝統的な実装。\n\n- 9base — Plan9 の様々なツールを Unix に移植したもの。\n\n- sbase — *nix core ユーティリティの suckless 版。\n\n- ubase — sbase ユーティリティの拡張。\n\n"
    },
    {
      "title": "cat の代替",
      "level": 3,
      "content": "- bat — シンタックスハイライトと Git 統合機能を備えた cat クローン\n\n"
    },
    {
      "title": "cd の代替",
      "level": 3,
      "content": "- zoxide — ユーザーの癖を学習するスマートな cd コマンド。たった数個のキーストロークでどこへでも移動できます。\n\n- autojump — コマンドラインからファイルシステムを移動する高速な方法。\n\nBash#パスを入力したら自動で \"cd\" と Zsh#最近のディレクトリを記憶させる も見てください。\n\n"
    },
    {
      "title": "cp の代替",
      "level": 3,
      "content": "rsync を cp/mv の代わりとして使うことで、失敗したファイル転送の再開、転送状況の表示、すでに存在するファイルのスキップ、チェックサムによる転送先ファイルの整合性の確認が可能になります。\n\n"
    },
    {
      "title": "ls の代替",
      "level": 3,
      "content": "- broot — ディレクトリツリーを表示・移動する新しい方法\n\n- clifm — ls(1) のようにファイルを一覧表示し、さらにアイコン表示と RGB カラーサポートを備えたファイルマネージャ\n\n- eza — カラー表示、ツリー表示、git 統合などの機能を備えたもう一つの ls 代替。もはやサポートされていない exa をベースとしています。\n\n- lsd — 多くの美しい色と素晴らしいアイコンを備えたモダンな ls\n\n"
    },
    {
      "title": "find の代替",
      "level": 3,
      "content": "- fd — シンプルで速く、ユーザーフレンドリーな find の代替。隠しファイルや .gitignore にあるファイルをデフォルトで無視します。\n\n- fuzzy-find — ファイル検索のためのあいまい補完。\n\n- mlocate — locate/updatedb の実装をマージ。\n\n- plocate — よりさらに速い locate\n\n- rawhide — C 言語のきれいな式を使ってファイルを検索します。\n\nグラフィカルなファイル検索ソフトウェアは アプリケーション一覧/ユーティリティ#ファイル検索 をご覧ください。\n\n"
    },
    {
      "title": "diff の代替",
      "level": 3,
      "content": "diffutils では単語単位の差分表示ができませんが、それが可能なプログラムがいくつか存在します:\n\n- git の diff は --color-words フラグを使用すると単語単位の差分表示が可能です。--no-index フラグを使用すれば Git のワークツリー外でも使用可能です。\n- cwdiff — 出力をカラー表示化する GNU wdiff ラッパー\n\n- git-delta — git や diff 、grep 用の出力をシンタックスハイライトするページャ\n\n- dwdiff — 単語単位で差分表示する diff のフロントエンド。カラー表示サポート付き。\n\n- icdiff — Python で書かれたカラー表示 diff ツール。\"Improved color diff\" は通常の diff の使用を補助するという意味です。\n\n- wdiff — GNU diff の単語単位の実装。カラー表示はサポートしません。\n\nアプリケーション一覧/ユーティリティ#Comparison, diff, merge もご覧ください。\n\n"
    },
    {
      "title": "grep の代替",
      "level": 3,
      "content": "- mgrep — 複数行 grep\n\n- pdfgrep — PDF ファイル内のテキストを検索するツール\n\n- ripgrep-all — プレーンテキストのみならず、PDF ファイルや E-Books、Office ドキュメント、zip、tar.gz ファイル内のテキストも検索できます。\n\n"
    },
    {
      "title": "コード検索ソフトウェア",
      "level": 4,
      "content": "以下のツールはコード検索の場面で grep を置き換えることを目的としています。これらはデフォルトで再帰検索をし、バイナリファイルや .gitignore 内にあるファイルをスキップします。\n\n- ack — Perl ベースの grep 置き換え。多種多様なソースコードの大きなツリーを扱うプログラマに向けです。\n\n- ripgrep (rg) — ag の使いやすさと grep のそのままの速さを組み合わせた検索ツール。\n\n- The Silver Searcher (ag) — Ack に似ているがより速いコード検索ツール。\n\n- ugrep (ug) — インタラクティブなユーザインターフェイス、曖昧検索、boolean クエリ、16進数表示などの機能を持つ非常に高速な grep。\n\ncscope も参照。\n\n"
    },
    {
      "title": "インタラクティブフィルター",
      "level": 4,
      "content": "- fzf — 汎用のコマンドラインあいまい検索ソフトウェア。デフォルトで find を使用します。\n\n- fzy — 高度なスコアリングアルゴリズムを搭載した速くてシンプルなあいまいテキストセレクタ。\n\n- peco — シンプルなインタラクティブフィルタリングツール。\n\n- percol — UNIX シェルの伝統的なパイプにインタラクティブフィルタリングを追加。\n\n- skim — Rust で書かれたあいまい検索ソフトウェア。fzf に似ています。\n\n"
    },
    {
      "title": "dd の代替",
      "level": 3,
      "content": "dd や ddrescue も参照してください。\n\n"
    },
    {
      "title": "代替 dd の実装",
      "level": 4,
      "content": "このサブセクションでは、dd(1p) の POSIX 仕様に (ほぼ) 準拠しているインターフェイスとデフォルトの挙動を持つ dd の実装をリストアップしています。\n\n- ddpt — Linux カーネルの SCSI サブシステムのメンテナによる、sg_dd(8) のポータブルな代替。オプションですが、非常に特殊化されたハードウェア I/O (SCSI コマンドセット) をサポートし、さらに他の多くの機能を有しています。\n\n- sdd — Joerg Schilling による、UNIX 環境間で移植性の高い dd の実装。コピーされたデータのチェックサムや、不良ブロックを再読込させることができます。\n\ncoreutils にある dd の GNU 実装も POSIX に準拠しています。このサブセクションでは GNU dd のフォークをリストアップしています。\n\n- dcfldd — 科学捜査やセキュリティの場面のための、機能が強化された GNU dd フォーク。次のような機能を有しています: 臨機応変なハッシュ検証機能、柔軟なディスク消去、書き込み検証、同時に複数のターゲットに出力、出力の分割やパイプ。\n\n- dc3dd — アメリカ国防総省サイバー犯罪センター (DC3) による、GNU dd のパッチ済みバージョン。dcfldd とよく似た目的と機能を有しています。\n\n"
    },
    {
      "title": "モダンな dd の類似品",
      "level": 4,
      "content": "このサブセクションでは、(JCL に似たコマンドライン構文とデフォルトの挙動という点で) POSIX に準拠していない dd の代替をリストアップしています。\n\n- dd_rescue — 多くの機能が積み込まれたモダンな dd の類似品。日々のスクリプティングやディスク複製、データリカバリに適しています。\n\n- rw — 従来のコマンドラインフラグ付きの必要最低限でポータブルな dd 類似品。\n\n"
    },
    {
      "title": "buffer のスピンオフ",
      "level": 4,
      "content": "このサブセクションでは、bufferAUR のフォークをリストアップしています。buffer は、dd に似た汎用 I/O バッファリングユーティリティですが、動的サイズバッファを持っています。ブロック単位の I/O をサポートしており、LTO テープを書き込み/読み込みする際に摩耗を防ぐために使用できます。\n\n- mbuffer — buffer ユーティリティにマルチスレッディングや他の機能を組み合わせたもの。\n\n"
    },
    {
      "title": "df の代替",
      "level": 3,
      "content": "- duf — ディスクの使用量と空き容量を調べるユーティリティ\n\n"
    },
    {
      "title": "du の代替",
      "level": 3,
      "content": "- cdu — カラー出力で、美しいヒストグラムを出力する du ラッパ。\n\n- dust — Rust で記述された du のより直感的なバージョン。\n\n- ncdu — ncurses のシンプルなディスク使用量アナライザ。\n\n- gdu — Go で記述された、コンソールインターフェイスのディスク使用量アナライザ。\n\nアプリケーション一覧/ユーティリティ#ディスク使用量表示プログラム も見てください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- GNU Coreutils ドキュメント\n- GNU Coreutils FAQ\n- Coreutils Gotchas: coreutils コンポーネントにおけるいくつかの紛らわしい挙動に関する、GNU coreutils メンテナのノート\n- POSIX utilities\n\n"
    }
  ]
}