{
  "title": "Vi (日本語)",
  "url": "https://wiki.archlinux.org/title/Vi_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- アプリケーション一覧/ドキュメント#Vi テキストエディタ\n\nVim は、ターミナルテキストエディタです。vi の拡張版で、シンタックスハイライト、包括的なヘルプシステム、ネイティブスクリプト (Vim script)、テキスト選択のためのビジュアルモード、ファイルの比較 (vimdiff(1)) といった追加機能、および rview(1) や rvim(1) など制限付きのツールが含まれています。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 使用方法 2.1 編集の基本 2.2 移動 2.3 コマンドの繰り返し 2.4 削除 2.5 アンドゥとリドゥ 2.6 ビジュアルモード 2.7 検索と置換 2.8 保存と終了 2.9 その他のコマンド\n- 3 設定 3.1 クリップボード 3.2 シンタックスハイライト 3.3 インデント 3.4 折返し表示 3.5 マウスを使う 3.6 矢印キーによる行移動\n- 4 ファイルのマージ\n- 5 ヒントとテクニック 5.1 行番号 5.2 スペルチェック 5.3 実行状態の保存 5.3.1 viminfo ファイル 5.3.2 セッションファイル 5.3.3 カーソル位置の保存 5.4 vi コマンドを vim で置き換える 5.5 DOS/Windows のキャリッジリターン (CR) 5.6 gVim ウィンドウの底部の空きスペース 5.7 Vim をページャとして使う 5.8 検索結果の強調表示 5.9 XDG Base Directory 仕様の回避策\n- 6 プラグイン 6.1 インストール 6.1.1 内蔵のパッケージマネージャを使う 6.1.2 プラグインマネージャを使う 6.1.3 Arch のリポジトリを使う 6.2 注目のプラグイン 6.2.1 cscope 6.2.2 Taglist\n- 7 トラブルシューティング 7.1 gVim が遅い 7.2 双方向サポート\n- 8 参照 8.1 公式 8.2 チュートリアル 8.2.1 動画 8.2.2 チートシート 8.2.3 ゲーム 8.3 設定 8.3.1 カラー\n\n- 2.1 編集の基本\n- 2.2 移動\n- 2.3 コマンドの繰り返し\n- 2.4 削除\n- 2.5 アンドゥとリドゥ\n- 2.6 ビジュアルモード\n- 2.7 検索と置換\n- 2.8 保存と終了\n- 2.9 その他のコマンド\n\n- 3.1 クリップボード\n- 3.2 シンタックスハイライト\n- 3.3 インデント\n- 3.4 折返し表示\n- 3.5 マウスを使う\n- 3.6 矢印キーによる行移動\n\n- 5.1 行番号\n- 5.2 スペルチェック\n- 5.3 実行状態の保存 5.3.1 viminfo ファイル 5.3.2 セッションファイル 5.3.3 カーソル位置の保存\n- 5.4 vi コマンドを vim で置き換える\n- 5.5 DOS/Windows のキャリッジリターン (CR)\n- 5.6 gVim ウィンドウの底部の空きスペース\n- 5.7 Vim をページャとして使う\n- 5.8 検索結果の強調表示\n- 5.9 XDG Base Directory 仕様の回避策\n\n- 5.3.1 viminfo ファイル\n- 5.3.2 セッションファイル\n- 5.3.3 カーソル位置の保存\n\n- 6.1 インストール 6.1.1 内蔵のパッケージマネージャを使う 6.1.2 プラグインマネージャを使う 6.1.3 Arch のリポジトリを使う\n- 6.2 注目のプラグイン 6.2.1 cscope 6.2.2 Taglist\n\n- 6.1.1 内蔵のパッケージマネージャを使う\n- 6.1.2 プラグインマネージャを使う\n- 6.1.3 Arch のリポジトリを使う\n\n- 6.2.1 cscope\n- 6.2.2 Taglist\n\n- 7.1 gVim が遅い\n- 7.2 双方向サポート\n\n- 8.1 公式\n- 8.2 チュートリアル 8.2.1 動画 8.2.2 チートシート 8.2.3 ゲーム\n- 8.3 設定 8.3.1 カラー\n\n- 8.2.1 動画\n- 8.2.2 チートシート\n- 8.2.3 ゲーム\n\n- 8.3.1 カラー\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "以下のどちらかのパッケージをインストールしてください:\n\n- vim パッケージは Python, Lua, Ruby, Perl インタプリタをサポート、GTK/X はサポートされません。\n- gvim パッケージは上の vim パッケージと同じものに加えて GTK/X サポートが付属。\n\n- vim パッケージには Xorg のサポートが組み込まれていません。従って、+clipboard 機能がないため、Vim は X11 のプライマリ・クリップボードのセレクションバッファを利用することができません。gvim パッケージには +clipboard が有効になっている完全な X サポートが入った Vim の CLI バージョンも含まれています。\n- 非公式の herecura リポジトリには様々な種類の Vim / gVim が取り揃えられています: vim-cli, vim-gvim-common, vim-gvim-gtk, vim-gvim-qt, vim-rt, vim-tiny\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "これは Vim の使用方法に関する基本的な概略です。また、vimtutor もしくは gvimtutor を実行すると25-30分ほどの vim のチュートリアルが起動します。\n\nVim には4つのモードが備わっています:\n\n- コマンドモード: キー入力はコマンドとして解釈されます。\n- 挿入モード: キー入力はファイルに挿入されます。\n- ビジュアルモード: キー入力でテキストを選択・カット・コピーします。\n- Ex モード: 追加的なコマンドのための入力モード (例: ファイルの保存, テキストの置換...)\n\n"
    },
    {
      "title": "編集の基本",
      "level": 3,
      "content": "次のように Vim を起動すると:\n\n```\n$ vim somefile.txt\n```\n\n空のドキュメントが表示されます (somefile.txt が存在しない場合。存在するときは、その中身が表示されます) このまま編集することはできません – 今いるのはコマンドモードです。このモードではキーボードを使って Vim にコマンドを実行させることができます。\n\ni コマンドで (カーソルの前に) テキストを挿入します。I (大文字の i) は行の最初にテキストを挿入します。テキストの追記 (カーソルの後ろにテキストを記述、ほとんどの人が予期するであろう挿入) には a を使います。A を入力するとカーソルが行末に置かれます。\n\nEsc を押すことでいつでもコマンドモードに戻ることができます。\n\n"
    },
    {
      "title": "移動",
      "level": 3,
      "content": "Vim では、矢印キーを使ってカーソルを移動することができますが、これは Vim の流儀とは言えません。標準のタイピングポジションから矢印キーまで右手を動かしたり、戻したりすることになります。楽しくありません。\n\nVim においては j を押すことで下に移動できます。“j” は垂れ下がっていると覚えて下さい。逆に k を押すことでカーソルを上に移動できます。左は h で (“j” の左にあります)、右は l です (小文字の L)\n\n^ はカーソルを行の最初に、$ は最後に移動します。\n\n次の単語に進むには、w キーを押します。W はより多くの文字列を単語として考えます (例えばアンダースコアやダッシュを単語の一部としてみなします) 前の単語に戻るには、b を使います。同じように、B は Vim が単語としてみなすものにより多くの文字列を含めます。単語の末尾に移動するには、e を使い、E はより多くの文字列を含めて考えます。\n\n文の最初に移動したいときは、( を使います。) は反対に、センテンスの最後まで移動します。もっと大きな単位で移動したい場合は、{ で段落の最初まで移動できます。} はパラグラフ全体の終末まで移動します。\n\n画面の一番上の行に移動するには、H を使います。M は画面の真ん中まで移動し、L は一番下の行に移動します。gg はファイルの先頭まで飛び、G はファイルの一番最後まで行きます。Ctrl+D はページごとにスクロールします。\n\n"
    },
    {
      "title": "コマンドの繰り返し",
      "level": 3,
      "content": "コマンドの前に数字を付けると、その回数分コマンドが繰り返し実行されます (ただし s コマンドなど例外はあります) 例えば、3i → “Help! ” → Esc と入力すると “Help! Help! Help!“ と書かれます。2} なら2段落だけ前に進みます。これは次のコマンドで役に立ちます。\n\n"
    },
    {
      "title": "削除",
      "level": 3,
      "content": "x コマンドはカーソル上の文字を削除します。X はカーソルの前の文字を消します。先の繰り返しと組み合わせると便利です。6x は6文字分削除します。. (ドット) を押すと直前の動作が繰り返されます。例えば、何箇所に \"foobar\" という単語を書いていたとして、あれやこれやと考えた末、“foo” だけにしたくなったとします。その際は、\"b\" のところまでカーソルを移動して、3x と入力して、次の \"foobar\" に移って . (ドット) を押せば \"bar\" を簡単に削除できます。\n\nd は Vim に何かを削除したいことを伝えます。d を押した後、Vim に削除したいものを指定してください。移動コマンドを使うことで指定することができます。dW は次の単語を削除します。d^ は行の先頭まで削除を行います。削除コマンドの前に数字を付けることもできます: 3dW は次の3つの単語を削除します。D (大文字) は行末まで削除するショートカットです (つまり d$) dd と入力すると一行まるまる削除されます。\n\n単語を削除して置き換えたいときは、単語の上にカーソルを移動して cw コマンドを実行してください。単語を削除してから挿入モードに移行します。一文字だけ置換するときは r を使います。\n\n"
    },
    {
      "title": "アンドゥとリドゥ",
      "level": 3,
      "content": "Vim にはクリップボードが内蔵されています (バッファとも呼ばれます) 操作は u で元に戻し Ctrl+r でやり直すことができます。\n\n"
    },
    {
      "title": "ビジュアルモード",
      "level": 3,
      "content": "v を押すことでビジュアルモードに入ることができます。ビジュアルモードではあちこち移動して文章を選択し、選択したら、y を押して文章をバッファにヤンク (コピー) したり、c でカットすることが可能です。カーソルの後ろには p でペーストし、P はカーソルの前にペーストします。V は行単位で選択するビジュアルラインモードです。Ctrl+v は矩形選択を行います。\n\n"
    },
    {
      "title": "検索と置換",
      "level": 3,
      "content": "ファイル内の単語または文字を検索するには、/ を使って検索したい文字列を入力してエンターを押します。次の検索結果を見るには n を、前の結果に戻るには N を押して下さい。\n\n検索と置換をしたいときは代わりに :s/ コマンドを使います。構文は: [range]s///[arguments]。例:\n\n```\nCommand         Outcome\n:s/xxx/yyy/     Replace xxx with yyy at the first occurrence\n:s/xxx/yyy/g    Replace xxx with yyy at every occurrence in the current line\n:s/xxx/yyy/gc   Replace xxx with yyy global with confirm\n:%s/xxx/yyy/g   Replace xxx with yyy global in the whole file\n:#,#s/xxx/yyy/g Replace xxx with yyy line number range\n```\n\nグローバル :g/ コマンドを使えばパターン検索をしてマッチした部分でコマンドを実行することができます。構文は: [range]:g//[cmd]。\n\n```\nCommand  Outcome\n:g/^#/d  Delete all lines that begins with #\n:g/^$/d  Delete all lines that are empty\n```\n\n"
    },
    {
      "title": "保存と終了",
      "level": 3,
      "content": "保存や終了したいときは、Ex モードを使う必要があります。Ex モードのコマンドには : を前に付けます。ファイルを保存するには :w を使い、名前を付けてファイルを保存するには :w filename を使います。終了は :q です。変更を保存しないときには :q! を使って下さい。保存して終了は :x です。\n\n"
    },
    {
      "title": "その他のコマンド",
      "level": 3,
      "content": "1. s を押すとカーソルの文字が消され、挿入モードに変わります。S は行全体を消去して、挿入モードに移行します。\n1. o は行の下に新しい行を追加して挿入モードに変わります、O 行の上に新しい行を追加して挿入モードに移行します。\n1. yy は行全体をヤンクします。\n1. cc はカーソルがある行を削除して挿入モードに入ります。\n1. * は単語をハイライトして、n はその単語を検索します。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "Vim のユーザー別の設定ファイルはホームディレクトリに配置されます: ~/.vimrc。カレントユーザーの Vim ファイルは ~/.vim/ の中に配置されます。グローバルな設定ファイルは /etc/vimrc にあります。グローバルな Vim ファイルは /usr/share/vim/ の中にあります。\n\ngVim の場合、ユーザー固有の設定ファイルは ~/.gvimrc にあり、グローバル設定ファイルは /etc/gvimrc にあります。\n\n- シンタックスハイライトなどの一般的な機能は defaults.vim で有効になっており、~/.vimrc が存在しない場合にロードされます。let skip_defaults_vim=1 を /etc/vimrc に追加することで defaults.vim のロードを完全に無効化できます [1]\n- gVim は Vim と gVim の設定ファイルの両方をロードしますが、Vim は Vim の設定ファイルのみをロードします。\n\n```\nset wrapscan\n```\n\n"
    },
    {
      "title": "クリップボード",
      "level": 3,
      "content": ":yank や :paste などの Vim コマンドは名前のないレジスタを使用しますが、デフォルトでは \"* レジスタがこれにあたります。+clipboard 機能が有効になっている場合、\"* レジスタは X の PRIMARY バッファになります。\n\nデフォルトのレジスタを変更するには :set clipboard=unnamedplus で \"+ レジスタを使うことができます。\"+ レジスタは X の CLIPBOARD バッファに相当します。 clipboard オプションはカンマ区切りの値に設定できることに注意してください。:set Clipboard=unnamedplus,unnamed の場合、ヤンク操作では、ヤンクされたテキストが \"+ レジスタに加えて \"* レジスタにもコピーされます。(ただし、削除、変更、および配置の操作は、依然として \"+ レジスタに対してのみ実行されます)\n\n詳細については、:help 'clipboard'を参照してください。clipboard 機能に設定できる値は他にもあります。:help Clipboard-unnamed を使用すると、この機能に設定できる最初の有効な値のヘルプ トピックに移動し、続いて他のすべての有効な値のヘルプに移動できます。\n\n- コピー&ペースト操作のためのカスタムショートカットを作成できます。Ctrl+c、Ctrl+v、および Ctrl+x のバインディングについては、[2] を参照してください。\n- X クリップボードは vim が終了するとフラッシュされます。vim の選択を X クリップボード内で永続的にするには、クリップボードマネージャ が必要です。あるいは、 autocmd VimLeave * call system(\"echo -n $'\" . escape(getreg(), \"'\") . \"' | xsel --input --clipboard\") を .vimrc に追加します。(xsel パッケージが必要です)\n\n"
    },
    {
      "title": "シンタックスハイライト",
      "level": 3,
      "content": "シンタックスハイライトを有効にするには (Vim は膨大な数のプログラミング言語をサポートしています):\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "インデント",
      "level": 3,
      "content": "特定のファイルタイプのインデントファイルをロードするには:\n\n```\n:filetype indent on\n```\n\n"
    },
    {
      "title": "折返し表示",
      "level": 3,
      "content": "wrap オプションはデフォルトでオンになっており、ウィンドウの幅より長い行を折り返し、残りの行を次の行に表示するように Vim に指示します。wrap オプションはテキストの表示方法のみに影響し、テキスト自体は変更されません。\n\n折り返しは通常、単語の途中であっても、ウィンドウに収まる最後の文字の後に行われます。よりインテリジェントな折り返しは linebreak オプションで制御できます。set linebreak で有効にすると、breakat 文字列オプションにリストされた文字の後に折り返しが発生します。\n\n折り返された行は通常、インデントに関係なく次の行の先頭に表示されます。breakindent オプションは、長い行を折り返すときにインデントを考慮し、折り返された行が前に表示されていた行と同じインデントを保つように Vim に指示します。breakindent の動作は breakindentopt オプションで微調整することができ、例えば Python ファイルでは折り返す行をさらに 4 スペース右にずらすことができます (詳細は:help breakindentopt を参照してください):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "マウスを使う",
      "level": 3,
      "content": "Vim にはマウスを利用できるようにする機能がありますが、特定のターミナルでしか機能しません (Linux なら xterm と gpm による Linux コンソール、あるいは PuTTY、詳しくはコンソールマウスサポート を参照)\n\nこの機能を有効にするには次の行を ~/.vimrc に追加してください:\n\n```\nset mouse=a\n```\n\n~/.vimrc が存在しない場合 mouse=a オプションを defaults.vim に設定することで読み込まれます。\n\n"
    },
    {
      "title": "矢印キーによる行移動",
      "level": 3,
      "content": "デフォルトでは、行頭で ← を押したり、行末で → を押しても、カーソルは前の行や次の行に移動しません。\n\n~/.vimrc ファイルに set whichwrap=b,s,<,>,[,] を追加することでこのデフォルトの挙動を変更することができます。\n\n"
    },
    {
      "title": "ファイルのマージ",
      "level": 2,
      "content": "Vim には差分エディタが入っています。2つ (もしくはそれ以上) のファイルの差分をマージするのを助けるプログラムです。vimdiff は横にマルチペイン表示を行って差分を色でハイライトします、それぞれのペインには確認・編集するファイルが開かれます。Vim には複数のモードが存在しますが、重要なのは文章を編集する挿入モードと、ウィンドウや行をわたってカーソルを移動するコマンドモードの2つです。vimdiff file1 file2 を実行して起動します。以下はいくつかのコマンドの例です。\n\nTable content:\nアクション | ショートカット\n次の差分 | ]c\n前の差分 | [c\nカーソルが (ハイライトされた) 差分の上にあるとき、もうひとつのウィンドウから現在のウィンドウに差分をコピー | do\n現在のウィンドウからもうひとつのウィンドウへ差分をコピー | dp\n折り畳まれた文章を開く | zo\n折り畳まれた文章を閉じる | zc\nファイルの差分を再スキャン | :diffupdate\n\n"
    },
    {
      "title": "ヒントとテクニック",
      "level": 2,
      "content": "作業を完遂するための特定のユーザーのトリック。\n\n"
    },
    {
      "title": "行番号",
      "level": 3,
      "content": "- :set number で行番号を表示。\n- :set relativenumber で相対的な行番号を表示。\n- :<line number> でその行番号にジャンプ。\n\nジャンプはジャンプリストに記録されます。詳しくは :h jump-motions を参照。\n\n"
    },
    {
      "title": "スペルチェック",
      "level": 3,
      "content": "```\nset spell\n```\n\nこの設定を使うと、Vim はスペルが間違っている単語をハイライトします。ミススペルの単語にカーソルを載せて z= を入力すればスペルのサジェストが表示されます。\n\nデフォルトでは英語の辞書しかインストールされていません、他の辞書は公式リポジトリからインストールできます。利用可能な言語のリストを表示するには:\n\n```\n# pacman -Ss vim-spell\n```\n\n言語辞書は Vim FTP archive からも入手できます。ダウンロードした辞書は ~/.vim/spell フォルダに配置して、次を入力して辞書をセットしてください: :setlocal spell spelllang=LL\n\n- LaTeX (または TeX) 文章のスペルチェックのみを有効にしたいときは、autocmd FileType tex setlocal spell spelllang=en_us を ~/.vimrc や /etc/vimrc に追加して、Vim を再起動してください。英語以外の言語のスペルチェックを使う場合は、en_us を適当な言語で置き換えて下さい。\n- 2つの言語のスペルチェックを有効にするには (例えば英語とドイツ語)、set spelllang=en,de を ~/.vimrc や /etc/vimrc に追加して、Vim を再起動してください。\n- FileType プラグインとファイルタイプを検出するカスタムルールを使うことで任意のファイルタイプ (例: *.txt) のスペルチェックを有効にすることができます。名前の最後が *.txt で終わるファイルのスペルチェックを有効にするには、/usr/share/vim/vimfiles/ftdetect/plaintext.vim ファイルを作成して、autocmd BufRead,BufNewFile *.txt setfiletype plaintext という行をファイルの中に記述します。そうしたら、autocmd FileType plaintext setlocal spell spelllang=en_us を ~/.vimrc や /etc/vimrc に追加して、Vim を再起動してください。もしくは、~/.vimrc または /etc/vimrc に autocmd BufRead,BufNewFile *.txt setlocal spell 行を追加してから Vim を再起動してください。スペルチェックを使用するファイルタイプ (*.txt) を指定するようにしてください。\n\n"
    },
    {
      "title": "実行状態の保存",
      "level": 3,
      "content": "通常、vim を終了すると、開いているファイル、コマンドラインの履歴、ヤンクしたテキストなど、必要のない情報はすべて破棄されます。この情報を保存するかどうかは、以下の方法で設定できます。\n\n"
    },
    {
      "title": "viminfo ファイル",
      "level": 4,
      "content": "また、viminfo ファイルには、コマンドライン履歴、検索文字列履歴、入力行履歴、レジスタの内容、ファイルのマーク、ファイル内の位置マーク、最後の検索/置換パターン (セッション内で n と & による検索モードで使用)、バッファリスト、定義済みのあらゆるグローバル変数を保存するために使用されることがあります。viminfo モダリティを使用するには、インストールした vim のバージョンが +viminfo 機能付きでコンパイルされている必要があります。\n\nviminfo ファイルに何を残すかを設定するには、例えば ~/.vimrc ファイルに以下のように記述します。\n\n```\nset viminfo='10,<100,:100,%,n~/.vim/.viminfo\n```\n\n各パラメータの前には識別子が付きます:\n\n```\n'q  : q, 記憶された編集済みファイルの数\n<m  : m, 各レジスタに保存される行数\n:p  : p, 記憶された履歴コマンド行の数\n%   : バッファリストを保存して復元します\nn...: viminfo ファイルへの完全修飾パス (これはリテラル \"n\" であることに注意してください。)\n```\n\n既存の viminfo ファイルが現在のセッション情報、例えばあなたが終了しようとしている現在のセッションのいくつかのバッファから更新されるときに、どのように変更されるかの詳細については、公式 viminfo documentation をご覧ください。\n\n"
    },
    {
      "title": "セッションファイル",
      "level": 4,
      "content": "セッションファイルは、任意の数の特定のセッションの状態を長期にわたって保存するために使用できます。各セッションやプロジェクトに1つの個別のセッションファイルを使用することができます。このモダリティを使用するには、インストールした vim のバージョンが +mksession 機能付きでコンパイルされている必要があります。\n\nセッション内で :mksession[!] [my_session_name.vim] はカレントディレクトリの my_session_name.vim に vim-script を書き出します。ファイル名を not にするとデフォルトで Session.vim が使われます。オプションの ! は、同じ名前とパスの既存のセッションファイルを破棄します。\n\nvim セッションは、ターミナルから vim を起動するときに再開できます:\n\n```\n$ vim -S [my_session_name.vim]\n```\n\nまたは、vim コマンドを実行して、既に開いているセッション バッファーで次のようにします。\n\n```\n:source my_session_name.vim\n```\n\n保存される内容やセッションファイルのオプションの詳細については、vim documentation で詳しく説明されています。コメント付きの例は、ここ にあります。\n\n"
    },
    {
      "title": "カーソル位置の保存",
      "level": 4,
      "content": "こちらを参照 Restore cursor to file position in previous editing session\n\n"
    },
    {
      "title": "vi コマンドを vim で置き換える",
      "level": 3,
      "content": "vi を vim にする エイリアス を作成してください。\n\nもしくは、sudo vi と入力したときに vim が起動するようにしたい場合、vi-vim-symlinkAUR をインストールしてください。vi が削除され vim のシンボリックリンクで置き換えられます。\n\n"
    },
    {
      "title": "DOS/Windows のキャリッジリターン (CR)",
      "level": 3,
      "content": "行末に \"^M\" が表示されることがあります。これは MS-DOS や Windows で作成したテキストファイルを編集しようとしたときに起こります。\n\n解決方法: 次のコマンドで \"^M\" を全て置換:\n\n```\n:%s/^M//g\n```\n\n注意、\"^\" は制御文字なので、Ctrl+Q を押して正しい \"^\" を取得してください。\n\nもしくは、公式リポジトリから dos2unix パッケージをインストールして、dos2unix <file name here> を実行してください。\n\n"
    },
    {
      "title": "gVim ウィンドウの底部の空きスペース",
      "level": 3,
      "content": "ウィンドウサイズのヒントを無視するように設定されたウィンドウマネージャを使っている場合、gVim は空の領域を GTK テーマの背景色で塗りつぶします。\n\n解決方法はウィンドウ下部の gVim が確保するスペースを調整することです。ゼロに設定した場合、下の横スクロールバーが見えなくなってしまうことがあるので注意してください。次の行を ~/.vimrc に記述します:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Vim をページャとして使う",
      "level": 3,
      "content": "スクリプトを使える Vim は アプリケーション一覧/ユーティリティ#ターミナルページャ として使用することができ、配色などの様々な Vim の機能を得ることができます。\n\nVim には /usr/share/vim/vim82/macros/less.sh スクリプトが付属しており、その エイリアス を作成することで利用できます。このスクリプトは less(1) § OPTIONS で述べられているコマンドラインフラグをサポートしていないことに注意してください。\n\n代わりに、vimpager という Vim スクリプトもあります。Vim スクリプトもあります。デフォルトのページャーを変更するには、環境変数 PAGER を export してください。全てのコマンドラインフラグに対応しているわけではないことに注意してください。対応するフラグの一覧は、こちらを参照してください。 available on GitHub\n\n"
    },
    {
      "title": "検索結果の強調表示",
      "level": 3,
      "content": "検索の入力中に検索で一致する最初の文字列を強調表示するには、~/.vimrc に次の行を追加します。\n\n```\nset incsearch\n```\n\n検索の入力中に検索で一致するすべての文字列を強調表示するには、検索が実行された後、~/.vimrc に次の行を追加します。\n\n```\nset hlsearch\n```\n\n- hlsearch を設定すると、さらに検索が行われるまで、すべての一致が強調表示されたままになります。この動作は望ましくない場合があるため、次の検索まで一時的に強調表示を無効にするには、:nohlsearch を実行します。このコマンドを頻繁に実行する場合は、コマンドをキーにバインドすることを検討してください。\n- この動作は、s や g などの正規表現を含む他のコマンドで正規表現を照合するときにも表示されます。\n\n"
    },
    {
      "title": "XDG Base Directory 仕様の回避策",
      "level": 3,
      "content": "7.3.1178 以降、~/.vimrc が見つからない場合、vim は ~/.vim/vimrc を検索します。\n\n```\n\"$XDG_CONFIG_HOME\"/vim/vimrc\n```\n\n```\nset runtimepath^=$XDG_CONFIG_HOME/vim\nset runtimepath+=$XDG_DATA_HOME/vim\nset runtimepath+=$XDG_CONFIG_HOME/vim/after\n\nset packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim\nset packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after\n\nlet g:netrw_home = $XDG_DATA_HOME.\"/vim\"\ncall mkdir($XDG_DATA_HOME.\"/vim/spell\", 'p')\n\nset backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')\nset directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')\nset undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')\nset viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')\n\nif !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif\n```\n\n```\n~/.profile\n```\n\n```\nexport GVIMINIT='let $MYGVIMRC=\"$XDG_CONFIG_HOME/vim/gvimrc\" | source $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC=\"$XDG_CONFIG_HOME/vim/vimrc\" | source $MYVIMRC'\n```\n\n[G]VIMINIT 環境変数は、Neovim にも影響します。Vim と Neovim に個別の設定が必要な場合は、次の方が適切な選択になります:\n\n```\nexport GVIMINIT='let $MYGVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/gvimrc\" : \"$XDG_CONFIG_HOME/nvim/init.gvim\" | so $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/vimrc\" : \"$XDG_CONFIG_HOME/nvim/init.vim\" | so $MYVIMRC'\n```\n\n- https://jorengarenar.github.io/blog/vim-xdg\n- https://tlvince.com/vim-respect-xdg\n\n"
    },
    {
      "title": "プラグイン",
      "level": 2,
      "content": "vim にプラグインを追加することで、Vim の機能が拡張され、生産性が向上します。プラグインは、Vim の UI の変更、新しいコマンドの追加、コード補完サポートの有効化、他のプログラムやユーティリティと Vim との統合、追加言語のサポートの追加などを行うことができます。\n\n"
    },
    {
      "title": "内蔵のパッケージマネージャを使う",
      "level": 4,
      "content": "Vim 8 では、サードパーティのプラグインをネイティブにロードできる機能が追加されました。この機能は、サードパーティのパッケージを ~/.vim/pack フォルダーに保存することで使用できます。このフォルダーの構造は、通常プラグインごとに1つのディレクトリを持つ一般的なプラグインマネージャーの構造とは少し異なります。以下は一般的なインストール手順とディレクトリ構造です (例として Tim Pope の vim-surround プラグイン を使用):\n\n```\n$ mkdir -p ~/.vim/pack/tpope/start\n```\n\n~/.vim/pack/tpope はパッケージディレクトリであり、Vim documentation では1つ以上のプラグインを含むディレクトリとして大まかに定義されていることに注意することが重要です。ただし、プラグインリポジトリはこのディレクトリにダウンロードしないでください。パッケージディレクトリの名前も任意です。すべてのプラグインを1つのパッケージディレクトリに保存するか、この例のように作成者の GitHub 名 tpope を使用するかを選択できます。\n\nパッケージディレクトリには次のサブフォルダーを含めることができます:\n\n- start - このサブフォルダーのプラグインは、Vim の起動時に自動的にロードされます。ここは最も頻繁に使用される場所です。\n- opt - このサブフォルダーのプラグインは、Vim 内で :packadd コマンドを発行することでオンデマンドでロードできます。\n\n次に、start フォルダーに移動し、プラグインリポジトリをチェックアウトします:\n\n```\n$ cd ~/.vim/pack/tpope/start\n$ git clone https://tpope.io/vim/surround.git\n```\n\nこれにより、追加のサブフォルダー ~/.vim/pack/tpope/start/surround が作成され、そこにプラグインファイルが配置されます。\n\n次に、プラグインにヘルプファイルが含まれている場合は、ヘルプインデックスを更新します:\n\n```\n$ vim -u NONE -c \"helptags surround/doc\" -c q\n```\n\nこれで Vim の起動時にプラグインが自動的にロードされるようになります。プラグイン固有のオプションを除き、~/.vimrc を変更する必要はありません。\n\n"
    },
    {
      "title": "プラグインマネージャを使う",
      "level": 4,
      "content": "プラグインマネージャーは、Vim プラグインをインストール、管理、更新するプラグインです。これは、Arch Linux 以外のプラットフォームでも Vim を使用していて、プラグインを更新する一貫した方法が必要な場合に役立ちます。\n\n- Vim-plug はミニマルな Vim プラグインマネージャです。必要に応じてプラグインをロードしたり並列アップデートなどの多数の機能を備えています。vim-plugAUR または vim-plug-gitAUR として利用できます。\n- Vundle vundleAUR または vundle-gitAUR として利用できます。\n- pathogen.vim Vim のランタイムパスを管理するためのシンプルなプラグインで、vim-pathogenAUR または vim-pathogen-gitAUR として利用できます。\n- Dein.vim NeoBundle に代わるプラグインマネージャーで、vim-deinAUR または vim-dein-gitAUR として入手できます。\n\n"
    },
    {
      "title": "Arch のリポジトリを使う",
      "level": 4,
      "content": "vim-plugins グループには様々なプラグインが入っています。pacman -Sg vim-plugins コマンドを使うことで pacman でインストールできるパッケージのリストを確認できます。\n\n"
    },
    {
      "title": "cscope",
      "level": 4,
      "content": "Cscope はプロジェクトを閲覧するためのツールです。単語/シンボル/関数まで移動して (ショートカットキーを使って) cscope を呼び出すことで次のことがわかります: 関数を呼び出している関数や、関数の定義など。コードベースを検索するには複数の手順が必要です。\n\ncscope パッケージを インストール してください。\n\ncscope のデフォルトファイルを vim が自動的に読み取るところへコピーします:\n\n```\nmkdir -p ~/.vim/plugin\nwget -P ~/.vim/plugin http://cscope.sourceforge.net/cscope_maps.vim\n```\n\n```\nset timeoutlen=4000\nset ttimeout\n```\n\ncscope にインデックス化して欲しいファイルを記述したファイルを作成 (Cscope は多数の言語を扱えますがこの例では .c, .cpp, .h ファイルを find しています):\n\n```\n$ cd /path/to/project/dir\n$ find . -type f -print | grep -E '\\.(c(pp)?|h)$' > cscope.files\n```\n\ncscope が読み取るデータベースファイルを作成します:\n\n```\ncscope -bq\n```\n\nデフォルトのキーボードショートカット:\n\n```\nCtrl-\\ and\n      c: Find functions calling this function\n      d: Find functions called by this function\n      e: Find this egrep pattern\n      f: Find this file\n      g: Find this definition\n      i: Find files #including this file\n      s: Find this C symbol\n      t: Find assignments to\n```\n\nショートカットは自由に変更することができます。\n\n```\n#Maps ctrl-c to find functions calling the function \nnnoremap <C-c> :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n```\n\n"
    },
    {
      "title": "Taglist",
      "level": 4,
      "content": "Taglist はソースコードファイルの構造の概観を提供し、様々なプログラミング言語で書かれたソースコードファイルを効率的に閲覧できるようにします。\n\nvim-taglistAUR パッケージをインストールしてください。\n\n~/.vimrc に記述する有用なオプション:\n\n```\nlet Tlist_Compact_Format = 1\nlet Tlist_GainFocus_On_ToggleOpen = 1\nlet Tlist_Close_On_Select = 1\nnnoremap <C-l> :TlistToggle<CR>\n```\n\n"
    },
    {
      "title": "gVim が遅い",
      "level": 3,
      "content": "Vim の GTK3GUI は GTK2 バージョンよりも遅い場合があります(FS#51366 を参照) gvim-gtk2AUR を回避策としてインストールしてみて下さい。\n\n"
    },
    {
      "title": "双方向サポート",
      "level": 3,
      "content": "Vim は依然として 完全な双方向サポートが不足 であり、これは端末によって異なります。\n\n:rightleft を使用してテキストの位置を強制的に揃えます。以下を使用してキーバインドに割り当てることができます。\n\n```\ninoremap <C-X> <C-O>:silent if &rl <Bar> set rl! <Bar> else <Bar> set rl <Bar> endif<CR>\n```\n\nVim には独自の文字整形機能があります。いくつかの レンダリングの問題 にもかかわらず、これは alacritty や st のような文字整形をサポートしていない端末でも機能します。整形は アラビア語プレゼンテーションフォーム-B (U+FE70–FEFF) に依存するため、フォントにこれらの文字のサポートが含まれていることを確認してください。これらの文字を完全にサポートする既知の等幅フォントがないため、追加のフォールバックフォント (例: ttf-dejavu へのフォールバックを備えた vazir-code-fontsAUR) が必要です。端末フォントの設定例については、St#アラビア語シェーピングのサポート を参照してください。\n\nただし、端末が gnome-terminal やその他の libvte ベースの端末のような文字整形をサポートしている場合、Vim と端末の文字整形が競合する可能性があります。現在の回避策は、:set arabicshape! による整形を無効にすることですが、これにより、:set rightleft のときにテキストが反転してしまうことに注意してください。詳細については、:set arabic を参照してください。\n\n"
    },
    {
      "title": "公式",
      "level": 3,
      "content": "- ホームページ\n- ドキュメント\n- Vim Wiki\n- Vim Scripts\n\n"
    },
    {
      "title": "チュートリアル",
      "level": 3,
      "content": "- vim Tutorial and Primer\n- vi Tutorial and Reference Guide\n- Graphical vi-Vim Cheat Sheet and Tutorial\n- Vim Introduction and Tutorial\n- Open Vim - Vim 学習ツールのコレクション。\n- Learn Vim Progressively\n- Learning Vim in 2014\n- Seven habits of effective text editing\n- Basic Vim Tips\n\n"
    },
    {
      "title": "動画",
      "level": 4,
      "content": "- Vimcasts - .ogg 形式のスクリーンキャスト。\n- Vim Tutorial Videos - 基本事項から高度な話題までカバー。\n\n"
    },
    {
      "title": "チートシート",
      "level": 4,
      "content": "- https://devhints.io/vim\n- https://vim.rtorr.com/ - モバイルフレンドリーな Vim のチートシート。 - Sources\n\n"
    },
    {
      "title": "ゲーム",
      "level": 4,
      "content": "- Vim Adventures\n- VimGolf\n\n"
    },
    {
      "title": "設定",
      "level": 3,
      "content": "- nion's\n- A detailed configuration from Amir Salihefendic\n- Bart Trojanowski\n- Steve Francia's Vim Distribution\n- Vim Awesome - Vim プラグイン\n- W4RH4WK の Vim 設定\n- Fast vimrc/colorscheme from askapache\n- Basic vimrc\n- Usevim\n\n"
    },
    {
      "title": "カラー",
      "level": 4,
      "content": "- Vivify — Vim のカラースキームエディタ。\n- Vim colorscheme customization\n\n"
    }
  ]
}