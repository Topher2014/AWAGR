{
  "title": "WirePlumber (Русский)",
  "url": "https://wiki.archlinux.org/title/WirePlumber_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- PipeWire (Русский)\n\nWirePlumber — это мощный менеджер сеансов и политик для PipeWire. Основанный на модульном дизайне, с плагинами Lua, реализующими фактическую функциональность управления, он обладает высокой настраиваемостью и расширяемостью.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет wireplumber. Он конфликтует с пакетами других менеджеров сеансов PipeWire, что гарантирует, что они будут удалены.\n\nWirePlumber использует пользовательский экземпляр systemd для управления сервером.\n\n"
    },
    {
      "title": "Расположение файлов настроек",
      "level": 3,
      "content": "Конфигурация WirePlumber[устаревшая ссылка 2024-01-13 ⓘ] состоит из глобальных JSON-подобных объектов, похожих на объекты из конфигурации PipeWire, таких как context и alsa_monitor. Настройки считываются из каталогов ~/.config/wireplumber/ (пользовательская конфигурация), /etc/wireplumber/ (глобальная конфигурация) и /usr/share/wireplumber/ (конфигурация по умолчанию).\n\nWirePlumber начинает работу с чтения основного файла настроек[устаревшая ссылка 2024-01-13 ⓘ]. Это JSON-подобный файл, который настраивает контекст PipeWire, SPA-плагины, модули и компоненты. Среди этих компонентов есть и Lua, который используется для динамического изменения глобальных объектов.\n\nЕсть несколько разных основных файлов настроек, поставляемых вместе с пакетом:\n\n- Настройки для одиночного экземпляра — /usr/share/wireplumber/wireplumber.conf. Это конфигурация по умолчанию, которая включает в себя функциональность всех других конфигураций в рамках одного процесса. Смотрите документацию объекта «context»[устаревшая ссылка 2024-01-13 ⓘ], который используется во всех основных файлах настроек.\n- Основной файл настроек — /usr/share/wireplumber/main.conf. Он загружает модули и компоненты, необходимые для ядра WirePlumber, а также загружает скрипты Lua[устаревшая ссылка 2024-01-13 ⓘ] из каталог-настроек/main.lua.d/. [1][устаревшая ссылка 2024-01-13 ⓘ] Смотрите документацию объектов ALSA[устаревшая ссылка 2024-01-13 ⓘ] и объектов «access»[устаревшая ссылка 2024-01-13 ⓘ].\n- Файл настроек Bluetooth — /usr/share/wireplumber/bluetooth.conf. Он может использоваться для отдельного процесса WirePlumber, который обрабатывает подключения Bluetooth для основного процесса. При этом загружаются файлы Lua из каталог-настроек/bluetooth.lua.d/. Смотрите документацию объекта Bluetooth[устаревшая ссылка 2024-01-13 ⓘ].\n- Файл настроек policy — /usr/share/wireplumber/policy.conf. В нём содержится функциональность политики, с помощью которой WirePlumber принимает решения о перемещении и внесении изменений в узлы. При этом загружаются файлы Lua из каталог-настроек/policy.lua.d/ Смотрите документацию объектов, связанных с политиками[устаревшая ссылка 2024-01-13 ⓘ].\n\n- Смотрите документацию объекта «context»[устаревшая ссылка 2024-01-13 ⓘ], который используется во всех основных файлах настроек.\n\n- Смотрите документацию объектов ALSA[устаревшая ссылка 2024-01-13 ⓘ] и объектов «access»[устаревшая ссылка 2024-01-13 ⓘ].\n\n- Смотрите документацию объекта Bluetooth[устаревшая ссылка 2024-01-13 ⓘ].\n\n- Смотрите документацию объектов, связанных с политиками[устаревшая ссылка 2024-01-13 ⓘ].\n\nLua-скрипты из каталогов lua.d/ также загружают другие Lua-скрипты из каталог-настроек/scripts/. Эти скрипты реализуют некоторые логические/функциональные возможности Pipewire и могут быть полезны при определённых обстоятельствах.\n\n"
    },
    {
      "title": "Изменение настроек",
      "level": 3,
      "content": "Рекомендуемый способ для настройки WirePlumber — добавить Lua-скрипт в соответствующий каталог lua.d/ в /etc/wireplumber/ или ~/.config/wireplumber/. Следует учесть следующие моменты:\n\n- Если вы хотите создать скрипт, который полностью заменит собой стандартный скрипт, скопируйте его из /usr/share/wireplumber/ в место назначения с тем же самым именем. Будет прочитан только самый приоритетный файл; файлы с таким же именем из менее приоритетных каталогов будут проигнорированы. [2][устаревшая ссылка 2024-01-13 ⓘ]\n- В противном случае, если вы хотите добавить новый скрипт, в начале его имени укажите номер больше 50 (например, 51-my-config.lua), так как настройки по умолчанию в основном содержатся на уровне 50 или ниже. Имейте в виду, что WirePlumber выполняет multi-path merging[устаревшая ссылка 2024-01-13 ⓘ], а это значит, что стандартные настройки с более низким номером будут прочитаны раньше вашего нового скрипта, так как файлы настроек сортируются по их именам.\n- Выбранный вами каталог должен соответствовать тому, что делает конфигурация по умолчанию, но это не имеет особого значения, если вы не используете несколько экземпляров[устаревшая ссылка 2024-01-13 ⓘ].\n- Свойства ALSA для устройств Bluetooth должны быть настроены в файле bluetooth.lua.d/. Свойства, заданные в main.lua.d/, не применятся.\n\n- Имейте в виду, что WirePlumber выполняет multi-path merging[устаревшая ссылка 2024-01-13 ⓘ], а это значит, что стандартные настройки с более низким номером будут прочитаны раньше вашего нового скрипта, так как файлы настроек сортируются по их именам.\n\n"
    },
    {
      "title": "Получение имени интерфейса для правил matches",
      "level": 3,
      "content": "Выбор настраиваемого интерфейса в Lua-скриптах WirePlumber выполняется с помощью правил matches, в которых прописываются свойства PipeWire-объектов и их значения, по которым будет выполняться выборка.\n\nИспользуйте команду wpctl status, чтобы посмотреть все объекты, которыми управляет WirePlumber. Найдите ID нужного вам интерфейса.\n\nПример вывода команды:\n\n```\n$ wpctl status\n```\n\n```\nPipeWire 'pipewire-0' [0.3.56, user@hostname, cookie:1163266174]\n └─ Clients:\n        32. pipewire-pulse                      [0.3.56, user@hostname, pid:895]\n        33. WirePlumber                         [0.3.56, user@hostname, pid:894]\n        ...\nAudio\n ├─ Devices:\n │      42. HD Audio Controller                 [alsa]\n │     105. USB PnP Audio Device                [alsa]\n │\n ├─ Sinks:\n │  *   48. HD Audio Controller Analog Stereo   [vol: 0.50]\n │      53. EasyEffects Sink                    [vol: 1.00]\n │\n ├─ ...\n │\n ├─ Sources:\n │      54. EasyEffects Source                  [vol: 1.00]\n │  *  101. USB PnP Audio Device Mono           [vol: 0.74]\n │\n └─ ...\n\nVideo\n └─ ...\n\nSettings\n └─ Default Configured Node Names:\n         0. Audio/Sink    alsa_output.pci-0000_08_00.4.analog-stereo\n         1. Audio/Source  alsa_input.usb-0c76_USB_PnP_Audio_Device-00.mono-fallback\n```\n\nНапример, если нужен интерфейс HD Audio Controller Analog Stereo, то здесь его ID — 48.\n\nТеперь с помощью команды wpctl inspect ID можно посмотреть список всех доступных свойств этого объекта:\n\n```\n$ wpctl inspect 48\n```\n\n```\nid 48, type PipeWire:Interface:Node\n    ...\n  * client.id = \"34\"\n    device.api = \"alsa\"\n    device.class = \"sound\"\n  * device.id = \"42\"\n    device.profile.description = \"Analog Stereo\"\n    device.profile.name = \"analog-stereo\"\n  * factory.id = \"18\"\n    factory.mode = \"merge\"\n    factory.name = \"api.alsa.pcm.sink\"\n    library.name = \"audioconvert/libspa-audioconvert\"\n  * media.class = \"Audio/Sink\"\n  * node.description = \"HD Audio Controller Analog Stereo\"\n    ...\n  * node.name = \"alsa_output.pci-0000_08_00.4.analog-stereo\"\n  * node.nick = \"ALC1220 Analog\"\n    ...\n  * object.path = \"alsa:pcm:1:front:1:playback\"\n  * object.serial = \"49\"\n    ...\n```\n\nВыберите какое-нибудь из свойств device.name, node.name и node.nick для последующего использования в правилах matches в Lua-скрипте.\n\nНе используйте device.id, так как он динамический и часто меняется.\n\n- wpctl inspect показывает тип объекта в первой строке, то есть type PipeWire:Interface:Node означает, что тип этого объекта Node.\n- Объекты Node — это источники (sources) или выводы (sinks) в графе PipeWire, а объекты Device соответствуют устройствам ALSA.\n- Вы можете определить класс Endpoint этого объекта по свойству media.class.\n- Начиная с WirePlumber v0.4.9, узлы ALSA используют имя PCM для заполнения node.nick, что полезно, по крайней мере, на картах HDA, использующих UCM, где все выходы (аналоговые, HDMI и т.д.) отображаются как Node на одном профиле.\n\n- Команда pw-top показывает список Device и Node, используемых в настоящее время.\n- Команда wpctl inspect ID выводит тот же самый список свойств, что и команда pw-cli dump ID.\n\n"
    },
    {
      "title": "Изменение свойства устройства/узла",
      "level": 3,
      "content": "Чтобы изменить свойство устройства или узла, например, его описание или ник, создайте Lua-скрипт и добавьте его в /etc/wireplumber/ или ~/.config/wireplumber/ с соответствующими путём и именем.\n\nНапример, чтобы изменить описание узла ALSA, можно создать примерно такой файл:\n\n```\n/etc/wireplumber/main.lua.d/51-device-rename.lua (или ~/.config/wireplumber/main.lua.d/51-device-rename.lua)\n```\n\n```\nrule = {\n  matches = {\n    {\n      { \"node.name\", \"equals\", \"alsa_output.pci-0000_00_1f.3.output_analog-stereo\" },\n    },\n  },\n  apply_properties = {\n    [\"node.description\"] = \"Laptop\",\n  },\n}\n\ntable.insert(alsa_monitor.rules, rule)\n```\n\nА для изменения каких-нибудь свойств узла или устройства Bluetooth можно создать примерно такой файл:\n\n```\n/etc/wireplumber/bluetooth.lua.d/51-device-rename.lua (или ~/.config/wireplumber/bluetooth.lua.d/51-device-rename.lua)\n```\n\n```\nrule = {\n  matches = {\n    {\n      { \"node.name\", \"equals\", \"bluez_output.02_11_45_A0_B3_27.a2dp-sink\" },\n    },\n  },\n  apply_properties = {\n    [\"node.nick\"] = \"Headphones\",\n  },\n}\n\ntable.insert(bluez_monitor.rules, rule)\n```\n\nСвойства, которые вы можете изменить, а также правила сопоставления для выбора устройств или узлов описаны в документации WirePlumber: конфигурация ALSA[устаревшая ссылка 2024-01-13 ⓘ] и конфигурация Bluetooth[устаревшая ссылка 2024-01-13 ⓘ].\n\n"
    },
    {
      "title": "Отключение устройства/узла",
      "level": 3,
      "content": "Начиная с WirePlumber v0.4.7, пользователи могут отключать любые устройства или узлы с помощью свойства device.disabled или node.disabled.\n\n```\n/etc/wireplumber/main.lua.d/51-alsa-disable.lua (или ~/.config/wireplumber/main.lua.d/51-alsa-disable.lua)\n```\n\n```\nrule = {\n  matches = {\n    {\n      { \"device.name\", \"equals\", \"alsa_card.pci-0000_08_00.4\" },\n    },\n  },\n  apply_properties = {\n    [\"device.disabled\"] = true,\n  },\n}\n\ntable.insert(alsa_monitor.rules,rule)\n```\n\nЧтобы узнать имя alsa_card.* в вашей системе, смотрите #Получение имени интерфейса для правил matches.\n\n"
    },
    {
      "title": "Одновременное использование нескольких выводов на одной звуковой карте",
      "level": 3,
      "content": "Создайте копию /usr/share/alsa-card-profile/mixer/profile-sets/default.conf, чтобы изменения сохранялись при обновлениях. В нём мы определим профиль, объединяющий два стандартных отображения для аналогового и HDMI выводов.\n\n```\n/usr/share/alsa-card-profile/mixer/profile-sets/multiple.conf\n```\n\n```\n[General]\nauto-profiles = no\n\n[Mapping analog-stereo]\ndevice-strings = front:%f\nchannel-map = left,right\npaths-output = analog-output analog-output-lineout analog-output-speaker analog-output-headphones analog-output-headphones-2\npaths-input = analog-input-front-mic analog-input-rear-mic analog-input-internal-mic analog-input-dock-mic analog-input analog-input-mic analog-input-linein analog-input-aux analog-input-video analog-input-tvtuner analog-input-fm analog-input-mic-line analog-input-headphone-mic analog-input-headset-mic\npriority = 15\n\n[Mapping hdmi-stereo]\ndescription = Digital Stereo (HDMI)\ndevice-strings = hdmi:%f\npaths-output = hdmi-output-0\nchannel-map = left,right\npriority = 9\ndirection = output\n\n[Profile multiple]\ndescription = Analog Stereo Duplex + Digital Stereo (HDMI) Output\noutput-mappings = analog-stereo hdmi-stereo\ninput-mappings = analog-stereo\n```\n\nТеперь настроим Wireplumber на использование нового профиля карты для нужных устройств. Получение идентификаторов описано в разделе #Получение имени интерфейса для правил matches. Мы применим конфигурацию, создав такой Lua-скрипт:\n\n```\n/etc/wireplumber/main.lua.d/51-alsa-custom.lua (или ~/.config/wireplumber/main.lua.d/51-alsa-custom.lua)\n```\n\n```\nrule = {\n  matches = {\n    {\n      { \"device.nick\", \"matches\", \"HDA Intel PCH\" },\n    },\n  },\n  apply_properties = {\n    [\"api.alsa.use-acp\"] = true,\n    [\"api.acp.auto-profile\"] = false,\n    [\"api.acp.auto-port\"] = false,\n    [\"device.profile-set\"] = \"multiple.conf\",\n    [\"device.profile\"] = \"multiple\",\n  },\n}\ntable.insert(alsa_monitor.rules,rule)\n```\n\n"
    },
    {
      "title": "Регулировка звука клавиатурой",
      "level": 3,
      "content": "Привяжите следующие команды к своим кнопкам регулировки громкости: XF86AudioRaiseVolume, XF86AudioLowerVolume, XF86AudioMute, XF86AudioMicMute. Подробнее это рассмотрено здесь: Горячие клавиши#Xorg.\n\nДля увеличения громкости:\n\n```\n$ wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+\n```\n\nДля понижения громкости:\n\n```\n$ wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-\n```\n\nОтключить/включить звук:\n\n```\n$ wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle\n```\n\nОтключить/включить микрофон:\n\n```\n$ wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle\n```\n\n"
    },
    {
      "title": "Отображение уровня громкости",
      "level": 3,
      "content": "Чтобы получить уровень громкости вывода по умолчанию:\n\n```\n$ wpctl get-volume @DEFAULT_AUDIO_SINK@\n```\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Документация — Официальная документация\n- WirePlumber, менеджер сеансов PipeWire — Сообщение в блоге Джорджа Киагиадакиса (Collabora) от мая 2020 года с подробным описанием работы WirePlumber\n\n"
    }
  ]
}