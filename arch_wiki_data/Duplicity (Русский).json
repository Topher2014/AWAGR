{
  "title": "Duplicity (Русский)",
  "url": "https://wiki.archlinux.org/title/Duplicity_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Программы синхронизации и резервного копирования\n\nDuplicity — это программа сетевого резервного копирования.\n\nОна может сохранять снимки каталогов и файлов в удалённый зашифрованный GnuPG tar-файл, который выступает в качестве хранилища резервных копий. Соединение с удалённым хранилищем резервных копий может осуществляться по любому из следующих протоколов: rsync, ftp, HSI, WebDAV, Tahoe-LAFS или Amazon S3.\n\nРезервные копии являются гранулярно инкрементными, то есть сохраняются только изменения в файлах (с момента последнего снимка).\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет duplicity.\n\n"
    },
    {
      "title": "Фронтенды",
      "level": 3,
      "content": "- Duply — Маленький фронтенд для Duplicity. Она управляет настройками заданий резервного копирования в профилях и позволяет пакетно выполнять команды.\n\n- Deja Dup — Простой инструмент резервного копирования, который скрывает сложность резервного копирования правильным способом и использует duplicity в качестве бэкенда.\n\n"
    },
    {
      "title": "Выполнение резервного копирования",
      "level": 3,
      "content": "Для создания резервной копии локальной папки /home/me в удалённом месте /usr/backup на хосте other.host по протоколу scp/ssh используйте:\n\n```\n$ duplicity /home/me scp://uid@other.host//usr/backup\n```\n\nПри первом выполнении этой команды создаётся полная резервная копия. Повторное выполнение той же команды вызывает инкрементное резервное копирование в существующее хранилище резервных копий.\n\nДополнительные параметры командной строки позволяют:\n\n- включать или исключать определённые файлы и каталоги из резервного копирования (с помощью шаблонов оболочки или регулярных выражений)\n- настраивать шифрование и подпись резервных копий\n\n"
    },
    {
      "title": "Восстановление файлов из резервной копии",
      "level": 3,
      "content": "Чтобы восстановить локальную папку /home/me до состояния последнего снимка, сохранённого в удалённом хранилище /usr/backup на хосте other.host, выполните:\n\n```\n$ duplicity scp://uid@other.host//usr/backup /home/me\n```\n\nОбратите внимание на обратный порядок аргументов по сравнению с приведённой выше командой backup. Аргумент URL всегда рассматривается как хранилище резервных копий, а аргумент local path — как каталог для синхронизации с резервной копией. (Локальное хранилище резервных копий должно быть явно указано с помощью префикса протокола file://!)\n\nСуществуют дополнительные опции командной строки, позволяющие:\n\n- восстанавливать конкретный файл вместо всего хранилища\n- восстановить файл(ы) до состояния, в котором они находились на определённую дату, а не до самого последнего доступного снимка\n\n"
    },
    {
      "title": "Проверка и обслуживание хранилища",
      "level": 3,
      "content": "Существуют некоторые дополнительные опции командной строки для сравнения состояния хранилища с состоянием локальных файлов, а также для удаления старых снимков, чтобы хранить только фиксированное количество снимков или только те, которые новее заданной даты.\n\nСмотрите duplicity(1) для более подробной информации.\n\n"
    },
    {
      "title": "Пример скрипта резервного копирования",
      "level": 3,
      "content": "```\n#!/bin/sh\n## Remote backup script. Requires duplicity and gpg-agent with the keys and passphrases loaded as root.\n## Uses separate encryption and signing keys\n## Usage:  'backup_remote.sh'\n\nenc_key=44D79E41\nsign_key=F5C978E3\nsrc=\"/mnt/backup/\"\ndest=\"scp://destination.com//backups/homeserver\"\n\n# Keychain is used to source the ssh-agent keys when running from a cron job\ntype -P keychain &>/dev/null || { echo \"I require keychain but it's not installed.  Aborting.\" >&2; exit 1; }\neval `keychain --eval web_rsa` || exit 1\n## Note: can't use keychain for gpg-agent because it doesn't currently (2.7.1) read in all the keys correctly.\n## Gpg will ask for a passphrase twice for each key...once for encryption/decryption and once for signing.\n## This makes unattended backups impossible, especially when trying to resume an interrupted backup.\nif [ -f \"${HOME}/.gnupg/gpg-agent-info\" ]; then\n      . \"${HOME}/.gnupg/gpg-agent-info\"\n      export GPG_AGENT_INFO\nfi\n\nduplicity --use-agent \\\n         --verbosity notice \\\n         --encrypt-key \"$enc_key\" \\\n         --sign-key \"$sign_key\" \\\n         --full-if-older-than 60D \\\n         --num-retries 3 \\\n         --asynchronous-upload \\\n         --volsize 100 \\\n         --archive-dir /root/.cache/duplicity \\\n         --log-file /var/log/duplicity.log \\\n         --exclude /mnt/backup/fsarchiver \\\n         --exclude '**rdiff-backup-data' \\\n         \"$src\" \"$dest\"\n```\n\nЕсли вы хотите запускать gpg-agent при входе в root и кэшировать пароли gpg-agent по удобства, вы можете добавить эти функции в /root/.bashrc:\n\n```\nfunction gpg_start {\n       gnupginf=\"${HOME}/.gnupg/gpg-agent-info\"\n       if pgrep -u \"${USER}\" gpg-agent >/dev/null 2>&1; then\n           eval \"$(cat $gnupginf)\"\n           eval \"$(cut -d= -f1 < $gnupginf | xargs echo export)\"\n       else\n           eval \"$(gpg-agent -s --daemon --write-env-file $gnupginf)\"\n       fi\n}\nfunction keys {\n       touch test-gpg.txt\n       touch test-gpg.txt1\n       gpg -r 'Duplicity Encryption Key' -e test-gpg.txt\n       gpg -r 'Duplicity Signature Key' -e test-gpg.txt1\n       gpg -u <signing key> --detach-sign test-gpg.txt\n       gpg -u <encryption key> --detach-sign test-gpg.txt1\n       gpg -d test-gpg.txt.gpg\n       gpg -d test-gpg.txt1.gpg\n       rm test-gpg.txt*\n}\ngpg_start\n```\n\n"
    },
    {
      "title": "Решение проблем",
      "level": 2,
      "content": "Если вы получаете ошибки gpg про «inappropriate ioctl for device», скорее всего это связано с изменениями в поведении агента gpg с версии gpg 2.1 и выше. Смотрите эту тему для получения дополнительной информации. Вкратце, нужно явно разрешить программам автоматически передавать пароль агенту gpg вместо того, чтобы запрашивать ввод пароля у пользователя.\n\nШаги по решению этой проблемы описаны в разделе GnuPG (Русский)#Автоматический ввод пароля.\n\n"
    },
    {
      "title": "Смотрите также",
      "level": 2,
      "content": "- Домашняя страница Duplicity\n- Wikipedia:Duplicity (software)\n- Домашняя страница Déjà Dup\n\n"
    }
  ]
}