{
  "title": "Init (Português)",
  "url": "https://wiki.archlinux.org/title/Init_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Processo de inicialização do Arch\n- ConsoleKit\n\nInit é o primeiro processo iniciado durante a inicialização do sistema. É um processo daemon que continua em execução até que o sistema seja encerrado. Init é o ancestral direto ou indireto de todos os outros processos e adota automaticamente todos os processos órfãos. É iniciado pelo kernel usando um nome de arquivo embutido; Se o kernel não conseguir iniciá-lo, haverá um pânico. Normalmente, a inicialização é atribuída a identificador de processo 1.\n\nOs init scripts (ou rc) são iniciados pelo processo init para garantir a funcionalidade básica no início e no encerramento do sistema. Isso inclui (des)montagem de sistema de arquivos e inicialização de daemons. Um gerenciador de serviços dá um passo além, fornecendo controle ativo sobre processos iniciados, ou supervisão de processos. Um exemplo é monitorar falhas e reiniciar processos de acordo.\n\nEsses componentes combinam-se com o sistema init. Algumas entradas incluem o gerenciador de serviços no processo de inicialização ou possuem scripts de inicialização em relação próxima. Estes inits são abaixo referidos como integrados, embora as entradas em diferentes categorias possam depender explicitamente umas das outras.\n\n"
    },
    {
      "title": "Inits (integrados)",
      "level": 2,
      "content": "- anopa — Sistema de inicialização construído em torno do conjunto de supervisão s6.\n\n- GNU Shepherd — Sistema de inicialização escrito em Guile.\n\n- OpenRC — Sistema de inicialização baseado em dependência.\n\n- systemd — Sistema de inicialização baseado em dependência com paralelização agressiva, supervisão de processo usando cgroups e a capacidade de depender de um ponto de montagem dado ou um serviço dbus.\n\n"
    },
    {
      "title": "Inits",
      "level": 2,
      "content": "- BusyBox — Utilitários para sistemas de recuperação e embarcados.\n\n- sinit — Inicialização simples inicialmente baseada no init mínimo de Rich Felker.\n\n- SysVinit — Init tradicional do System V.\n\n"
    },
    {
      "title": "Init scripts",
      "level": 2,
      "content": "- initscripts-fork — Fork mantido dos scripts SysVinit no Arch Linux.\n\n- minirc — Script init mínimo projetado para BusyBox.\n\n- kisslinux-init — Framework de inicialização do KISS Linux.\n\n"
    },
    {
      "title": "Gerenciadores de serviços",
      "level": 2,
      "content": "- Monit — Monit é uma ferramenta de supervisão de processos para Unix e Linux. Com o monit, o status do sistema pode ser visualizado diretamente a partir da linha de comando ou através do servidor da Web HTTP(S) nativo.\n\n- perp — Supervisor de processo persistente (serviço) e estrutura de gerenciamento para UNIX.\n\n- runit — Esquema de inicialização do UNIX com supervisão de serviço, uma substituição para o SysVinit e outros esquemas de inicialização.\n\n- s6 — Pequeno conjunto de programas para UNIX, projetado para permitir a supervisão de serviço na linha de daemontools e runit.\n\n- Supervisor — Um sistema que permite aos usuários monitorar e controlar os processos em sistemas operacionais UNIX-like.\n\n"
    },
    {
      "title": "Migrar serviços em execução",
      "level": 3,
      "content": "Para executar daemons sob o novo init, salve uma lista de daemons em execução:\n\n```\n$ systemctl list-units --state=running \"*.service\" > daemons.list\n```\n\ne configure os #Init scripts adequadamente. Veja também [2].\n\n"
    },
    {
      "title": "logind",
      "level": 3,
      "content": "logind requer systemd para ser o processo init. [3] local sessions Portanto, sessões locais e outras funcionalidades não estão disponíveis.\n\n"
    },
    {
      "title": "Permissões de dispositivo",
      "level": 3,
      "content": "Adicione usuários aos respectivos grupos de usuários para acesso ao dispositivo e reinicialize. A associação atual ao grupo deve primeiro ser verificada com id usuário.\n\n```\n# usermod -a -G video,audio,power,disk,storage,optical,lp,scanner,input usuário\n```\n\nVeja também Usuários e grupos#Grupos pré-systemd. Para criar regras de grupo para usar com Polkit, veja Polkit#Bypass password prompt.\n\n"
    },
    {
      "title": "X sem root",
      "level": 3,
      "content": "Como Xorg.wrap não verifica se logind está ativo [5], permissões de root para Xorg precisam ser habilitadas manualmente.\n\n"
    },
    {
      "title": "Gerenciamento de energia",
      "level": 3,
      "content": "Veja pm-utilsAUR e acpid para substituir o gerenciamento de energia por systemd.\n\n"
    },
    {
      "title": "Tarefas agendadas",
      "level": 3,
      "content": "Arch usa arquivos timer em vez do cron, por padrão. Veja archlinux-cronjobs para trabalhos de cron básicos.\n\n"
    },
    {
      "title": "Dbus",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAs instâncias de usuário do dbus-daemon são iniciadas pelo systemd/User [6]. Ao solicitar IPC entre aplicativos de desktop, restaure 30-dbus.sh:\n\n```\n/etc/X11/xinit/xinitrc.d/30-dbus.sh\n```\n\n```\n#!/bin/bash\n\n# inicia uma instância de sessão dbus\nif [ -z \"${DBUS_SESSION_BUS_ADDRESS-}\" ] && type dbus-launch >/dev/null; then\n  eval $(dbus-launch --sh-syntax --exit-with-session)\nfi\n```\n\n"
    },
    {
      "title": "systemd-nspawn",
      "level": 3,
      "content": "systemd-nspawn é uma ferramenta para sistemas systemd. Desde o Linux 2.6.19, é possível, no entanto, executar o systemd em um sistema não-systemd usando o espaço de nome de PID. Para isso, o kernel precisa ser configurado com CONFIG_PID_NS e CONFIG_NAMESPACES).\n\nO espaço de nome de PID cria uma nova hierarquia de processos que começam com o PID 1. Além disso, o systemd exige que um sistema de arquivos raiz \"chrootado\" seja montado. Portanto, você precisa pelo menos fazer uma montagem de ligação, porque senão alguns serviços falharão com\n\n```\n\"Failed at step NAMESPACE spawning\" due to \"Invalid operation\"\n```\n\npois o systemd tenta remontar a raiz com a opção private.\n\nPara configurar um chroot com um novo namespace PID, você pode usar o jchroot [7] [8]. Certifique-se de não montar /proc dentro da nova raiz antes de fazer o chroot, caso contrário, o systemd detectará o ambiente chroot. Você pode montá-lo depois que o systemd estiver em execução.\n\n"
    },
    {
      "title": "Substituindo udev",
      "level": 3,
      "content": "Note: **antes** \n\n- eudev — O eudev é um fork do udev iniciado pelo projeto Gentoo. É principalmente projetado e testado com OpenRC.\n\n- mdev — Gerenciador de dispositivos para uso em sistemas embarcados.\n\n- smdev — O smdev é um programa simples para gerenciar nós de dispositivos. É principalmente compatível com o mdev, mas não possui todos os seus recursos.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- Debian:Debate/initsystem\n- Como executar o s6-svscan como processo 1\n- Substitua o systemd com busybox + minirc\n- Init vs. runsv\n- Desmistificando o sistema init\n- Uma história de sistemas init modernos (1992-2015)[link inativo 2024-10-12 ⓘ]\n- Gentoo: Comparação de sistemas init\n- InitWare: Guia de estudo dos colaboradores\n- O pacote nosh\n\n"
    }
  ]
}