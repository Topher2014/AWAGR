{
  "title": "Android (日本語)",
  "url": "https://wiki.archlinux.org/title/Android_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Android テザリング\n- Android Debug Bridge\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ファイル転送\n- 2 Android 開発 2.1 Android SDK コアコンポーネント 2.2 Android SDK プラットフォーム API 2.3 Android システムイメージ 2.4 開発環境 2.4.1 Android Studio 2.4.2 Netbeans 2.4.3 Eclipse 2.5 Android Debug Bridge (ADB) 2.5.1 実機に接続 2.5.2 デバイス ID を確かめる 2.5.3 udev ルールを追加する 2.5.4 adb の設定 2.5.5 動作するか確認 2.6 NVIDIA Tegra プラットフォーム\n- 3 Android のビルド 3.1 必要なパッケージ 3.2 Java Development Kit 3.3 ビルド環境の設定 3.4 ソースコードのダウンロード 3.5 コードのビルド 3.6 ビルドのテスト 3.7 書き込みイメージの作成\n- 4 Android の復元 4.1 Fastboot 4.2 Samsung 端末 4.2.1 Heimdall 4.2.2 Odin (Virtualbox)\n- 5 他の接続方法 5.1 Android File Transfer 5.2 adb-sync 5.3 AirDroid 5.4 Send Anywhere 5.5 AndroidScreencast 5.6 FTP 5.7 KDE Connect 5.8 SSH サーバー 5.9 Samba\n- 6 ヒントとテクニック‎ 6.1 デバッグ中に \"Source not found\" 6.2 SD カード上に Linux ディストリビューション\n- 7 トラブルシューティング 7.1 Android Studio: Android Virtual Devices show 'failed to load'. 7.2 Android Studio: 'failed to create the SD card' 7.3 aapt: No such file or directory 7.4 ValueError: unsupported pickle protocol 7.5 libGL error: failed to load driver: swrast 7.6 sh: glxinfo: command not found\n\n- 2.1 Android SDK コアコンポーネント\n- 2.2 Android SDK プラットフォーム API\n- 2.3 Android システムイメージ\n- 2.4 開発環境 2.4.1 Android Studio 2.4.2 Netbeans 2.4.3 Eclipse\n- 2.5 Android Debug Bridge (ADB) 2.5.1 実機に接続 2.5.2 デバイス ID を確かめる 2.5.3 udev ルールを追加する 2.5.4 adb の設定 2.5.5 動作するか確認\n- 2.6 NVIDIA Tegra プラットフォーム\n\n- 2.4.1 Android Studio\n- 2.4.2 Netbeans\n- 2.4.3 Eclipse\n\n- 2.5.1 実機に接続\n- 2.5.2 デバイス ID を確かめる\n- 2.5.3 udev ルールを追加する\n- 2.5.4 adb の設定\n- 2.5.5 動作するか確認\n\n- 3.1 必要なパッケージ\n- 3.2 Java Development Kit\n- 3.3 ビルド環境の設定\n- 3.4 ソースコードのダウンロード\n- 3.5 コードのビルド\n- 3.6 ビルドのテスト\n- 3.7 書き込みイメージの作成\n\n- 4.1 Fastboot\n- 4.2 Samsung 端末 4.2.1 Heimdall 4.2.2 Odin (Virtualbox)\n\n- 4.2.1 Heimdall\n- 4.2.2 Odin (Virtualbox)\n\n- 5.1 Android File Transfer\n- 5.2 adb-sync\n- 5.3 AirDroid\n- 5.4 Send Anywhere\n- 5.5 AndroidScreencast\n- 5.6 FTP\n- 5.7 KDE Connect\n- 5.8 SSH サーバー\n- 5.9 Samba\n\n- 6.1 デバッグ中に \"Source not found\"\n- 6.2 SD カード上に Linux ディストリビューション\n\n- 7.1 Android Studio: Android Virtual Devices show 'failed to load'.\n- 7.2 Android Studio: 'failed to create the SD card'\n- 7.3 aapt: No such file or directory\n- 7.4 ValueError: unsupported pickle protocol\n- 7.5 libGL error: failed to load driver: swrast\n- 7.6 sh: glxinfo: command not found\n\n"
    },
    {
      "title": "ファイル転送",
      "level": 2,
      "content": "コンピュータと Android デバイス間でファイルを転送する方法にはいくつかあります:\n\n- USB ケーブル MTP: 新しい Android デバイス USB mass storage 比較的古い Android デバイス Android Debug Bridge\n- special USB sticks / regular USB stick with adapter\n- Bluetooth\n- Android と互換性のある Arch Linux のソフトウェア SSH や、Samba、HTTP などのファイル転送に使えるプロトコル KDE Connect (kdeconnect) - Android デバイスと KDE デスクトップを統合する ( synced notification & クリップボードや、マルチメディアコントロール、ファイル /URL 共有)。 クラウドとの同期クライアント Syncthing sendanywhereAUR - クロスプラットフォーム対応のファイル転送\n\n- MTP: 新しい Android デバイス\n- USB mass storage 比較的古い Android デバイス\n- Android Debug Bridge\n\n- SSH や、Samba、HTTP などのファイル転送に使えるプロトコル\n- KDE Connect (kdeconnect) - Android デバイスと KDE デスクトップを統合する ( synced notification & クリップボードや、マルチメディアコントロール、ファイル /URL 共有)。\n- クラウドとの同期クライアント\n- Syncthing\n- sendanywhereAUR - クロスプラットフォーム対応のファイル転送\n\n"
    },
    {
      "title": "Android 開発",
      "level": 2,
      "content": "Arch Linux で Android アプリケーションを開発できるようにするためには3つの手順を踏む必要があります:\n\n1. Android SDK コアコンポーネントのインストール\n1. Android SDK プラットフォームパッケージのインストール\n1. Android SDK に対応している IDE のインストール\n\n"
    },
    {
      "title": "Android SDK コアコンポーネント",
      "level": 3,
      "content": "- 64ビット環境を使っている場合は、最初に pacman.conf で multilib リポジトリを有効にしてください。\n- Android Studio をインストールして IDE を使って SDK を管理する場合、以下のパッケージをインストールする必要はありません。\n\nAndroid アプリケーションの開発を始める前に、Android SDK をインストールしてください。4つのパッケージに別れており、すべて AUR からインストールできます:\n\n1. android-platformAUR\n1. android-sdkAUR\n1. android-sdk-platform-toolsAUR\n1. android-sdk-build-toolsAUR\n\n古いデバイスのサポートが必要な場合や古いコードを動かすときは android-supportAUR と android-support-repositoryAUR もインストールしてください。\n\nAndroid-sdk は /opt/android-sdk にインストールされます。このフォルダは root パーミッションになるので、sdk マネージャは root で実行してください。root でないと /opt/android-sdk 上のものをインストール・アップデート・修正することができません。通常ユーザーで使いたい場合は、以下の手順に従って下さい。\n\nAndroid sdk ユーザーグループを作成 (名前は何でもいいです):\n\n```\n# groupadd sdkusers\n```\n\nユーザーをグループに追加:\n\n```\n# gpasswd -a <user> sdkusers\n```\n\nフォルダの所有者とグループを変更:\n\n```\n# chown -R :sdkusers /opt/android-sdk/\n```\n\nフォルダのパーミッションを変更して読み書き実行を可能にする:\n\n```\n# chmod -R g+w /opt/android-sdk/\n```\n\n再ログインあるいは <user> として新しく作成したグループでターミナルにログイン:\n\n```\n$ newgrp sdkusers\n```\n\n"
    },
    {
      "title": "Android SDK プラットフォーム API",
      "level": 3,
      "content": "必要な Android SDK Platform パッケージを AUR からインストールしてください:\n\n- android-platformAUR (最新)\n- android-platform-25AUR\n- android-platform-24AUR\n- android-platform-23AUR\n- android-platform-22AUR\n- android-platform-21AUR\n- android-platform-20AUR\n- android-platform-19AUR\n- android-platform-18AUR\n- android-platform-17AUR\n- android-platform-16AUR\n- android-platform-15AUR\n- android-platform-14AUR\n\n"
    },
    {
      "title": "Android システムイメージ",
      "level": 3,
      "content": "AUR から適当な Android システムイメージ パッケージをインストールしてください。Android Studio を使う場合はシステムイメージは必要ありません。特定の Android デバイスをエミュレートするときはイメージが必須ですが、Android スマートフォンを使って開発する場合はイメージは不要です。\n\n"
    },
    {
      "title": "開発環境",
      "level": 3,
      "content": "Android Studio は IntelliJ IDEA がベースの新しい (実験的な) Android 開発環境です。もしくは、下に記述しているプラグインをインストールした後 Netbeans を使って開発することもできます。\n\n"
    },
    {
      "title": "Android Studio",
      "level": 4,
      "content": "ADT プラグインのある Eclipse のように、Android Studio も開発とデバッグのための統合された Android 開発者ツールを提供しています。\n\nAndroid Studio は AUR の android-studioAUR パッケージでダウンロード・インストールすることが可能です。SDK が存在しないというエラーが表示された場合は、上記の Android SDK プラットフォーム API に関するセクションを見て下さい。\n\n- i3wm 以外のタイル型ウィンドウマネージャを使っている場合、この issue ページに書かれているフィックスを適用する必要があります。\n- Java 環境を設定していないと android-studio は起動しません。\n\n通常、アプリは Android Studio の GUI からビルドします。コマンドラインからアプリをビルドするには (例: ./gradlew assembleDebug)、以下を ~/.bashrc に追加してください:\n\n```\nexport ANDROID_HOME=/opt/android-sdk\n```\n\n"
    },
    {
      "title": "Netbeans",
      "level": 4,
      "content": "IDE として Netbeans を使って Android アプリケーションを開発したい場合は、以下から NBAndroid をダウンロードしてください:\n\n```\nTools -> Plugins -> Settings\n```\n\n次の URL を追加: http://nbandroid.org/release81/updates/updates.xml\n\nAvailable Plugins から Android と JUnit プラグインをインストールしてください。インストールしたら:\n\n```\nTools -> Options -> Miscellaneous -> Android\n```\n\nから SDK をインストールしたパスを選択します (デフォルトは /opt/android-sdk)。これで完了です。Netbeans を使って新しい Android プロジェクトを作成して開発を始めることができます。\n\n"
    },
    {
      "title": "Eclipse",
      "level": 4,
      "content": "公式の Eclipse ADT プラグインが eclipse-androidAUR[リンク切れ: パッケージが存在しません] パッケージでインストールできます。\n\n- 依存関係が解決できないというメッセージが表示される場合は、Java を手動でインストールして再度試して下さい。\n- 別の方法として、eclipse の \"add new software\" コマンドから ADT をインストールすることもできます (ADT のサイトに書かれている手順を参照)。\n- 問題が発生する場合は、Android SDK をダウンロードして、それにバンドルされている Eclipse を使用することもできます。これは基本的に問題なく動作するはずです。\n- AUR にない SDK プラグインを追加でインストールしたい場合は、まず /opt/android-sdk ファイルの所有者を変更する必要があります。# chgrp -R users /opt/android-sdk ; chmod -R 0775 /opt/android-sdk で変更できます (詳しくはファイルのパーミッションと属性を参照)。\n\nAndroid SDK の場所のパスを設定で入力してください:\n\n```\nWindows -> Preferences -> Android\n```\n\n"
    },
    {
      "title": "Android Debug Bridge (ADB)",
      "level": 3,
      "content": "- デバイスによっては、ADB を動作させる前に、デバイスの MTP を有効にする必要があります。また、PTP モードを有効にする必要があるデバイスもあります。\n- 大抵のデバイスは libmtp に udev ルールが含まれているため、パッケージがインストールされていれば、ルールの追加は必要ありません。\n\n"
    },
    {
      "title": "実機に接続",
      "level": 4,
      "content": "ADB で Arch 下の実機やスマートフォンに接続するには、以下を実行する必要があります:\n\n- android-tools をインストール。適当な /dev/ エントリにデバイスを接続するには android-udev もインストールする必要があります。\n- USB で Android デバイスを接続する。\n- スマートフォンやデバイスで USB デバッグを有効にする。 Jelly Bean (4.2) 以降: 設定 --> 端末情報 を開いてデベロッパーになったというポップアップが表示されるまで “Build Number” をタップ (約10回連打)。そして 設定 --> 開発者向けオプション --> USB デバッグ から USB デバッグを有効にする。デバイスはフィンガープリントを使ってコンピュータに接続しても良いか聞いてきます。永続的に許可すると $HOME/.android/adbkey.pub がデバイスの /data/misc/adb/adb_keys フォルダにコピーされます。 古いバージョン: 設定 --> アプリケーション --> 開発 --> USB デバッグ から有効にできます。このオプションにチェックを入れた後はスマートフォンを再起動して USB デバッグを有効にしてください。\n- android-udev をインストールしなかった場合、ユーザーを adbusers グループに追加します (# gpasswd -a username adbusers)。\n\n- Jelly Bean (4.2) 以降: 設定 --> 端末情報 を開いてデベロッパーになったというポップアップが表示されるまで “Build Number” をタップ (約10回連打)。そして 設定 --> 開発者向けオプション --> USB デバッグ から USB デバッグを有効にする。デバイスはフィンガープリントを使ってコンピュータに接続しても良いか聞いてきます。永続的に許可すると $HOME/.android/adbkey.pub がデバイスの /data/misc/adb/adb_keys フォルダにコピーされます。\n- 古いバージョン: 設定 --> アプリケーション --> 開発 --> USB デバッグ から有効にできます。このオプションにチェックを入れた後はスマートフォンを再起動して USB デバッグを有効にしてください。\n\nADB がデバイスを認識したら (IDE からアクセスできる状態)、完了です。認識しない場合は以下を見て下さい。\n\n"
    },
    {
      "title": "デバイス ID を確かめる",
      "level": 4,
      "content": "それぞれの Android デバイスには USB ベンダー・プロダクト ID が存在します。例えば HTC Evo なら:\n\n```\nvendor id: 0bb4\nproduct id: 0c8d\n```\n\nデバイスを接続して次を実行してください:\n\n```\n$ lsusb\n```\n\n以下のように表示されるはずです:\n\n```\nBus 002 Device 006: ID 0bb4:0c8d High Tech Computer Corp.\n```\n\n"
    },
    {
      "title": "udev ルールを追加する",
      "level": 4,
      "content": "android-udev (または android-udev-gitAUR) をインストールするか手動で Android developer のルールを使うか、あるいは以下のテンプレートを使って udev ルールを作って下さい。[VENDOR ID] と [PRODUCT ID] はあなたの ID に置き換えて下さい。ルールを /etc/udev/rules.d/51-android.rules にコピー:\n\n```\n/etc/udev/rules.d/51-android.rules\n```\n\n```\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"[VENDOR ID]\", MODE=\"0660\", GROUP=\"adbusers\"\nSUBSYSTEM==\"usb\",ATTR{idVendor}==\"[VENDOR ID]\",ATTR{idProduct}==\"[PRODUCT ID]\",SYMLINK+=\"android_adb\"\nSUBSYSTEM==\"usb\",ATTR{idVendor}==\"[VENDOR ID]\",ATTR{idProduct}==\"[PRODUCT ID]\",SYMLINK+=\"android_fastboot\"\n```\n\nそして、新しい udev ルールをリロードするために、次を実行:\n\n```\n# udevadm control --reload-rules\n```\n\n使用しているユーザーを adbusers グループに追加することで adb デバイスにアクセスできるようになります。\n\n"
    },
    {
      "title": "adb の設定",
      "level": 4,
      "content": "udev ルールを使う代わりにベンダー id のリストを記述する ~/.android/adb_usb.ini を作成・編集することができます。\n\n```\n$ cat ~/.android/adb_usb.ini\n```\n\n```\n0x27e8\n```\n\n"
    },
    {
      "title": "動作するか確認",
      "level": 4,
      "content": "udev ルールを設定したら、デバイスのプラグを一度抜いてから再接続してください。\n\n次のコマンドを実行すれば:\n\n```\n$ adb devices\n```\n\n以下のように表示されるはずです:\n\n```\nList of devices attached \nHT07VHL00676    device\n```\n\nadb を使ってデバイスとコンピュータ間でファイルを転送することができます。ファイルをデバイスに送信するには次のコマンドを使用:\n\n```\n$ adb push <what-to-copy> <where-to-place>\n```\n\nファイルを受信するには:\n\n```\n$ adb pull <what-to-pull> <where-to-place>\n```\n\nadb プログラムがない場合 (通常は /opt/android-sdk/platform-tools/ にあります)、プラットフォームツールがインストールされていません。空のリストが表示される (デバイスがない) 場合、デバイスの USB デバッグが有効になっていません。\n\nadb がデバイスの下に ???????? no permissions と表示する問題が起こる場合、adb サーバーを root で再起動してみてください:\n\n```\n# adb kill-server\n# adb start-server\n```\n\n"
    },
    {
      "title": "NVIDIA Tegra プラットフォーム",
      "level": 3,
      "content": "あなたのアプリケーションが NVIDIA の Tegra プラットフォームを対象にする場合、NVIDIA によって提供されているツールやサンプル、ドキュメントなどをインストールすると良いでしょう。NVIDIA Developer Zone for Mobile には2つのツールが存在します:\n\n1. Tegra Android Development Pack には Eclipse ADT に関連するツール (NVIDIA Debug Manager) とそのドキュメントが入っています。\n1. Tegra Toolkit にはツール (ほとんどは CPU と GPU の最適化に関するもの) とサンプル、ドキュメントが入っています。\n\nどちらも AUR からはインストールできません、ダウンロードするのに NVIDIA のサイトで登録・ログインが必要だからです。\n\n"
    },
    {
      "title": "Android のビルド",
      "level": 2,
      "content": "以下の手順は 公式の AOSP のビルド手順 を元にしています。LineageOS などの Android 派生環境の場合、大抵は追加のステップが必要になります。\n\n"
    },
    {
      "title": "必要なパッケージ",
      "level": 3,
      "content": "どのバージョンの Android でも、ビルドするには以下のパッケージをインストールする必要があります:\n\n- gcc-multilib[リンク切れ: 置換パッケージ: gcc] git gnupg flex bison gperf sdl wxgtk[リンク切れ: 置換パッケージ: wxgtk2] squashfs-tools curl ncurses zlib schedtool perl-switch zip unzip libxslt python2-virtualenv bc rsync ncurses5-compat-libsAUR lib32-zlib lib32-ncurses lib32-readline lib32-ncurses5-compat-libsAUR\n\naosp-develAUR メタパッケージで上記のパッケージを一度に全てインストールできます。\n\nさらに LineageOS は以下のパッケージを必要とします:\n\n- xml2AUR lzop pngcrush imagemagick\n\nlineageos-develAUR メタパッケージで上記のパッケージを一度に全てインストールできます。\n\n"
    },
    {
      "title": "Java Development Kit",
      "level": 3,
      "content": "- Android 7 と 8 (Nougat と Oreo) では OpenJDK 8 が必要です [1]。jdk8-openjdk パッケージでインストールできます。\n- Android 5 と 6 (Lollipop と Marshmallow) では、OpenJDK 7 が必要です。jdk7-openjdk パッケージでインストールできます。\n\n古いバージョンでは Oracle JDK をインストールする必要があります [2]。OpenJDK では動作しません。\n\n- Gingerbread から KitKat (2.3 - 4.4) では、Java 6 が必要です。AUR の jdk6AUR パッケージでインストールできます。\n- Cupcake から Froyo (1.5 - 2.2) では、Java 5 が必要です。AUR の jdk5AUR パッケージでインストールできます。\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-x-openjdk\n```\n\n"
    },
    {
      "title": "ビルド環境の設定",
      "level": 3,
      "content": "repo パッケージをインストールしてください。\n\nビルドのためのディレクトリを作成:\n\n```\n$ mkdir ~/android\n$ cd ~/android\n```\n\nデフォルトの Python をバージョン3からバージョン2に変更する必要があります:\n\n```\n$ virtualenv2 venv\n$ source venv/bin/activate\n```\n\n- 上記のアクティベーションは現在のターミナルセッションでのみ有効になります。仮想環境は venv フォルダに保存されます。\n- ビルド中に python モジュールが見つからないというエラーが表示されることがあります。/usr/lib/python2.7/* から ~/android/venv/lib/python2.7/ にシンボリックリンクを作成することで解決できます (~/android はビルドディレクトリに置き換えて下さい)、例: $ ln -s /usr/lib/python2.7/* ~/android/venv/lib/python2.7/ (ビルドディレクトリが /Data/Android_Build であれば $ ln -s /usr/lib/python2.7/* /Data/Android_Build/venv/lib/python2.7/)。\n\n"
    },
    {
      "title": "ソースコードのダウンロード",
      "level": 3,
      "content": "リポジトリの複製を行います。Android を初めてビルドするときや、ブランチを切り替えたいときに必要です。\n\n- repo には -j スイッチがあり make で使用するのと意味は同じです。同時ダウンロードの数を決めるので、ダウンロードのネットワーク帯域に合わせて調整してください。\n\n- -b スイッチでチェックアウトするブランチ (Android のリリース) を指定する必要があります。スイッチを付けなかった場合、マスターブランチが取得されます。\n\n```\n$ repo init -u https://android.googlesource.com/platform/manifest -b master\n$ repo sync -j4\n```\n\nしばらく待って下さい。未コンパイルのソースコードと、.repo と .git ディレクトリで、10 GB を軽く超えます。Android 6.0.1 現在、コードベースの合計は 40 GB です。\n\n"
    },
    {
      "title": "コードのビルド",
      "level": 3,
      "content": "AOSP のために実行する必要があること:\n\n```\n$ source build/envsetup.sh\n$ lunch full-eng\n$ make -j4\n```\n\nlunch に引数を付けないで実行すると、どのビルドを作成するか聞かれます。-j は並列実行するジョブの数を指定します。コア・スレッド数の1倍から2倍の間で設定します。\n\nビルドには非常に長い時間がかかります。\n\n- make が flex-2.5.39: loadlocale.c:131: _nl_intern_locale_data: Assertion `cnt < (sizeof (_nl_value_type_LC_COLLATE) / sizeof (_nl_value_type_LC_COLLATE[0]))' failed. などのエラーで失敗する場合、LANG=C make を使ってみてください。\n- 十分な RAM があることを確認してください。Android は /tmp ディレクトリを重度に使用します。デフォルトでは /tmp フォルダがマウントされるパーティションのサイズは RAM の半分になっています。/tmp が満杯になると、ビルドは失敗します。RAM は 4GB 以上あることが推奨されます。もしくは、fstab から tmpfs を完全に削除してください。\n- Android Building and Running ガイド より: \"GNU make は -jN 引数で並列処理することができます。ビルドするときは、コンピュータに搭載されているハードウェアスレッドと同じ数からその倍にするのが普通です。例えば E5520 が2つ搭載されたマシンなら (2 CPU, 4 コア CPU, 2 スレッド)、make -j16 から make -j32 までのコマンドでビルドするのが最速になります\"。\n\n"
    },
    {
      "title": "ビルドのテスト",
      "level": 3,
      "content": "完了したら、完成したイメージを実行・テストしてください:\n\n```\n$ emulator\n```\n\n"
    },
    {
      "title": "書き込みイメージの作成",
      "level": 3,
      "content": "書き込みできるイメージを作成するには:\n\n```\n$ make -j8 updatepackage\n```\n\nout/target/product/hammerhead に書き込みできる zip イメージが作成されます (hammerhead はデバイスの名前に置き換えて下さい)。\n\n"
    },
    {
      "title": "Android の復元",
      "level": 2,
      "content": "ときには、Android 携帯端末にカスタム ROM を書き込んだ後に、標準の Android に戻したいという場合もあるでしょう。端末への書き込みについては、XDA フォーラム を参照するようにしてください。\n\n"
    },
    {
      "title": "Fastboot",
      "level": 3,
      "content": "Fastboot (と ADB) は android-tools パッケージに付属しています。\n\n"
    },
    {
      "title": "Samsung 端末",
      "level": 3,
      "content": "Samsung の端末は Fastboot ツールを使って書き込みを行うことができません。Heimdall か Odin (Windows と VirtualBox を使用) を利用するのが唯一の方法です。\n\n"
    },
    {
      "title": "Heimdall",
      "level": 4,
      "content": "Heimdall は Samsung の携帯電話にファームウェア (ROM) を書き込むのに使われるクロスプラットフォームのオープンソースツールスイートです。Odin の代わりとして使えるツールとして知られています。Heimdall は heimdall や heimdall-gitAUR でインストールすることが可能です。\n\n実際に書き込みを行う手順は Heimdall の GitHub ページ や XDA フォーラム を参照してください。\n\n"
    },
    {
      "title": "Odin (Virtualbox)",
      "level": 4,
      "content": "Odin を使うことで Samsung のデバイスに標準の Android をリストアさせることができます。ただし VirtualBox が必須です。詳しくは、XDA のスレッド を見てください。\n\nArch Linux による手順:\n\n1. VirtualBox をインストールしてください。エクステンションパックと guest additions も必要です。\n1. VirtualBox の仮想ハードドライブに Windows オペレーティングシステム (と VirtualBox の guest additions) をインストールしてください。Odin が動くのであればどういうふうにインストールしてもかまいません。\n1. Windows オペレーティングシステムの VirtualBox 設定を開いて、USB から Enable USB 2.0 (EHCI) Controller にチェックを入れてください。\n1. Windows オペレーティングシステムが動作している VirtualBox で、メニューバーの Devices をクリックして、USB Devices から USB でコンピュータに接続している Samsung の携帯電話をクリックしてください。\n\nWindows 関連リンク:\n\n- Samsung のドライバーは こちら からダウンロードできます。\n- Odin は こちら からダウンロードできます。\n- Samsung の Android ファームウェアは こちら からダウンロードできます。\n\n全てが問題ないことを確認するには、Samsung デバイスを接続してダウンロードモードにして、Odin を開いてください。Message という名前の白いボックス (左下) に、以下のように表示されているはずです:\n\n```\n<ID:0/003> Added!!\n```\n\n上記のメッセージは Odin からデバイスが認識されていて、書き込みの準備が整ったことを意味しています。\n\n"
    },
    {
      "title": "Android File Transfer",
      "level": 3,
      "content": "android-file-transfer は Mac 用の Android File Transfer と同じようなシンプルな UI を備えた信頼性のある MTP クライアントです。\n\n"
    },
    {
      "title": "adb-sync",
      "level": 3,
      "content": "adb-sync (adb-sync-gitAUR でインストールできます) は ADB を使って PC と Android デバイスのファイルを同期するツールです。\n\n"
    },
    {
      "title": "AirDroid",
      "level": 3,
      "content": "AirDroid はウェブブラウザからファイルにアクセスするための Android アプリです。\n\n"
    },
    {
      "title": "Send Anywhere",
      "level": 3,
      "content": "sendanywhereAUR は速度とシンプリシティに重きを置いているクロスプラットホームのファイル転送ソリューションです。simplicity.\n\n"
    },
    {
      "title": "AndroidScreencast",
      "level": 3,
      "content": "AndroidScreencast は Android を PC から確認・操作することができます (ADB を使用)。\n\n"
    },
    {
      "title": "FTP",
      "level": 3,
      "content": "Arch で FTP サーバーを動作させて携帯からサーバーに接続したり、携帯で FTP サーバーを動作させて Arch から接続することができます。\n\nアプリケーション一覧/インターネット#FTP を見て下さい。Anroid で使える FTP クライアント/サーバーは多数存在します。\n\n"
    },
    {
      "title": "KDE Connect",
      "level": 3,
      "content": "kdeconnect は Android デバイスを KDE デスクトップに統合します。通知やクリップボードの同期、マルチメディアの操作、ファイルや URL の共有などが可能です。詳しくは KDE#Android との統合を参照。\n\n"
    },
    {
      "title": "SSH サーバー",
      "level": 3,
      "content": "Android で使える SSH サーバーは多数存在します。scp コマンドでファイルを転送できるようになります。SSH を参照。\n\n"
    },
    {
      "title": "Samba",
      "level": 3,
      "content": "Samba を参照。\n\n"
    },
    {
      "title": "デバッグ中に \"Source not found\"",
      "level": 3,
      "content": "大抵はデバッガが Java コードにステップインしたがっています。Android SDK には Android のソースコードは付属していないため、このようなエラーが発生します。ステップフィルターを利用して Java ソースコードにジャンプしないようにするのが解決法としてはベストです。デフォルトではステップフィルターは有効になっていません。有効化するには:\n\n```\nWindow -> Preferences -> Java -> Debug -> Step Filtering\n```\n\n全てのアイテムを選択してください。必要であれば android.* パッケージを追加することができます。詳しくは次のフォーラムの投稿を見てください: http://www.eclipsezone.com/eclipse/forums/t83338.rhtml\n\n"
    },
    {
      "title": "SD カード上に Linux ディストリビューション",
      "level": 3,
      "content": "このスレッド に書かれているように Debian をインストールすることができます。chroot で Arch をインストールするガイドが archlinuxarm.org フォーラム にあります。\n\n"
    },
    {
      "title": "Android Studio: Android Virtual Devices show 'failed to load'.",
      "level": 3,
      "content": "#Android Studio に書いているように ANDROID_HOME 変数をエクスポートしてください。\n\n"
    },
    {
      "title": "Android Studio: 'failed to create the SD card'",
      "level": 3,
      "content": "x86_64 環境の Arch で AVD (Android Virtual Device) を実行しようとしたときにエラーが表示される場合、Multilib リポジトリから lib32-gcc-libs パッケージをインストールしてください。\n\n"
    },
    {
      "title": "aapt: No such file or directory",
      "level": 3,
      "content": "ビルドツールには32ビットのバイナリが含まれているため、32ビットのライブラリを必要とします。SDK を手動でインストールする場合、multilib/lib32-libstdc++5 と multilib/lib32-zlib をインストールしなくてはなりません。\n\n"
    },
    {
      "title": "ValueError: unsupported pickle protocol",
      "level": 3,
      "content": "次のコマンドで解決できます:\n\n```\n$ rm ~/.repopickle_.gitconfig\n```\n\n上記のコマンドで解決しない場合、次のコマンドを実行してみてください:\n\n```\n$ rm `find /path/to/android-root -name .repopickle_config`\n```\n\n"
    },
    {
      "title": "libGL error: failed to load driver: swrast",
      "level": 3,
      "content": "AVD が間違ったバージョンの libstdc++ をロードしています。~/Android/Sdk/emulator/lib64/ (64ビット) または ~/Android/Sdk/emulator/lib/ (32ビット) から libstdc++ を削除してください。例:\n\n```\n$ rm -r ~/Android/Sdk/emulator/lib64/libstdc++\n```\n\nもしくは以下のように ~/.profile で ANDROID_EMULATOR_USE_SYSTEM_LIBS を設定します:\n\n```\nexport ANDROID_EMULATOR_USE_SYSTEM_LIBS=1\n```\n\n詳しくは Android Studio のユーザーガイド https://developer.android.com/studio/command-line/variables.html#studio_jdk を参照してください。\n\n.desktop ファイルについては Exec 行で env コマンドを使うことで修正できます (デスクトップエントリ#環境変数の修正を参照):\n\n```\nenv ANDROID_EMULATOR_USE_SYSTEM_LIBS=1\n```\n\n"
    },
    {
      "title": "sh: glxinfo: command not found",
      "level": 3,
      "content": "エラーの全文:\n\n```\nCannot launch AVD in emulator.\nOutput:\nsh: glxinfo: command not found\nsh: glxinfo: command not found\nlibGL error: unable to load driver: swrast_dri.so\nlibGL error: failed to load driver: swrast\nX Error of failed request:  BadValue (integer parameter out of range for operation)\n  Major opcode of failed request:  154 (GLX)\n  Minor opcode of failed request:  24 (X_GLXCreateNewContext)\n  Value in failed request:  0x0\n  Serial number of failed request:  32\n  Current serial number in output stream:  33\nQObject::~QObject: Timers cannot be stopped from another thread\n```\n\nglxinfo (mesa-demos パッケージ) をインストールしてみてください。コンピュータに十分な性能がある場合、ソフトウェアを使ってグラフィックをレンダリングできます。Tools -> Android -> AVD Manager から AVD を編集 (ペンのアイコンをクリック) して、\"Emulated Performance -> Graphics\" で \"Software - GLES 2.0\" を選択してください。\n\n"
    }
  ]
}