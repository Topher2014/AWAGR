{
  "title": "Init Rosetta (日本語)",
  "url": "https://wiki.archlinux.org/title/Init_Rosetta_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- Arch ブートプロセス\n- ConsoleKit\n\nInit はシステムのブート時に最初に起動されるプロセスです。システムがシャットダウンするまで実行し続けるデーモンプロセスです。Init は他の全てのプロセスの直接的または間接的な祖先となり、孤児プロセスを全て自動的に引き取ります。ハードコードされたファイル名を使ってカーネルによって起動され、カーネルが init を起動できない場合、パニックが発生します。典型的に Init にはプロセス ID 1 が割り当てられます。\n\ninit プロセスと init スクリプト、そしてサービスマネージャはまとめて init システムとしてひと括りにされます。Init システムによってこれらのコンポーネントは分割されていたり、init プロセスに (一部あるいは全てを) 複合されていたりします。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 Inits (複合型)\n- 2 Inits\n- 3 Init スクリプト\n- 4 サービスマネージャ\n- 5 設定 5.1 使用しているデーモンの移行 5.2 logind 5.3 デバイスのパーミッション 5.4 Rootless X 5.5 電源管理 5.6 スケジュールされたタスク 5.7 D-Bus\n- 6 ヒントとテクニック 6.1 systemd-nspawn 6.2 udev の置き換え\n- 7 参照\n\n- 5.1 使用しているデーモンの移行\n- 5.2 logind\n- 5.3 デバイスのパーミッション\n- 5.4 Rootless X\n- 5.5 電源管理\n- 5.6 スケジュールされたタスク\n- 5.7 D-Bus\n\n- 6.1 systemd-nspawn\n- 6.2 udev の置き換え\n\n"
    },
    {
      "title": "Inits (複合型)",
      "level": 2,
      "content": "- anopa — s6 管理スイートのために開発された Init システム。\n\n- GNU Shepherd — Guile で書かれた Init システム。\n\n- OpenRC — 依存関係ベースの rc システムで、通常の SysVinit で動作する。\n\n- systemd — 積極的な並列化、cgroups によるプロセス監視を行う依存関係ベースの init システム。指定されたマウントポイントや dbus サービスに依存することができる。\n\n"
    },
    {
      "title": "Inits",
      "level": 2,
      "content": "- BusyBox — レスキューや組み込みシステム向けのユーティリティ。\n\n- sinit — Rich Felker の minimal init がベースのシンプルな init。\n\n- SysVinit — 伝統的な System V init。\n\n"
    },
    {
      "title": "Init スクリプト",
      "level": 2,
      "content": "- initscripts-fork — Arch Linux の SysVinit スクリプトのメンテナンスがされているフォーク。\n\n- minirc — BusyBox のために作られたミニマル init スクリプト。\n\n- kisslinux-init — KISS Linux の Init フレームワーク。\n\n"
    },
    {
      "title": "サービスマネージャ",
      "level": 2,
      "content": "- Monit — Unix や Linux 向けのプロセス監視ツール。monit では、システムの状態をコマンドラインや HTTP(S) ウェブサーバーから直接閲覧することができます。\n\n- perp — UNIX 向けの永続的なプロセス(サービス)監視・管理フレームワーク。\n\n- runit — SysVinit やその他の init スキームを置き換える、サービス監視が付いた UNIX init スキーム。\n\n- s6 — UNIX 向けの小さなプログラムスイート。daemontools や runit でサービス監視ができるように作られました。\n\n- Supervisor — UNIX ライクなオペレーティングシステム上のプロセスを監視、制御するためのシステム。\n\n"
    },
    {
      "title": "使用しているデーモンの移行",
      "level": 3,
      "content": "新しい init でデーモンを実行するために、実行中のデーモンのリストを保存してください:\n\n```\n$ systemctl list-units --state=running \"*.service\" > daemons.list\n```\n\nそれから Init スクリプトを設定してください。詳しくは [1] を参照。\n\n"
    },
    {
      "title": "logind",
      "level": 3,
      "content": "logind は init プロセスとして systemd を必要とします [2]。したがって systemd 以外の init ではローカルセッションなどの機能が利用できません。\n\n"
    },
    {
      "title": "デバイスのパーミッション",
      "level": 3,
      "content": "デバイスにアクセスするためにユーザーを適切なグループに追加して、再起動してください。現在のグループは id user で確認できます。追加するコマンドの例:\n\n```\n# usermod -a -G video,audio,power,disk,storage,optical,lp,scanner user\n```\n\nPolicykit で使用するグループルールを作成する方法は PolicyKit#パスワードプロンプトの迂回を参照。\n\n"
    },
    {
      "title": "Rootless X",
      "level": 3,
      "content": "Xorg.wrap は、logind がアクティブであるかどうかをチェックしないため [4]、Xorg の root 権限は 手動で有効にして下さい。\n\n"
    },
    {
      "title": "電源管理",
      "level": 3,
      "content": "systemd の電源管理機能を置き換える方法は pm-utils や acpid を参照してください。\n\n"
    },
    {
      "title": "スケジュールされたタスク",
      "level": 3,
      "content": "Arch はデフォルトで cron の代わりに timer ファイルを使っています。基本的な cron ジョブについては archlinux-cronjobs を参照してください。\n\n"
    },
    {
      "title": "D-Bus",
      "level": 3,
      "content": "systemd/ユーザーによって dbus-daemon のユーザーインスタンスが起動されるようになっています [5]。デスクトップアプリケーション間で IPC が必要な場合、30-dbus.sh をリストアしてください:\n\n```\n/etc/X11/xinit/xinitrc.d/30-dbus.sh\n```\n\n```\n#!/bin/bash\n\n# launches a session dbus instance\nif [ -z \"${DBUS_SESSION_BUS_ADDRESS-}\" ] && type dbus-launch >/dev/null; then\n  eval $(dbus-launch --sh-syntax --exit-with-session)\nfi\n```\n\n"
    },
    {
      "title": "systemd-nspawn",
      "level": 3,
      "content": "systemd-nspawn は systemd 環境用のツールです。Linux 2.6.19 から PID 名前空間を使うことで systemd を使ってない環境でも systemd を動作させることができるようになっています。それには、カーネルで CONFIG_PID_NS と CONFIG_NAMESPACES を設定する必要があります。\n\nPID 名前空間は PID 1 で始まるプロセスに新しい階層を作成します。さらに、systemd は chroot する root ファイルシステムのマウントを必要とします。最低でも、バインドマウントは作成してください。そうしないと systemd が private オプションで root を再マウントしようとして、サービスが以下のように失敗することがあります:\n\n```\n\"Failed at step NAMESPACE spawning\" due to \"Invalid operation\"\n```\n\n新しい PID 名前空間で chroot をセットアップしたい場合 jchroot を使うこともできます [6] [7]。chroot する前に新しい root の中に /proc がマウントされてない状態にしてください。systemd を実行さえしてしまえば後でマウントできます。\n\n"
    },
    {
      "title": "udev の置き換え",
      "level": 3,
      "content": "- eudev — Gentoo プロジェクトによって創始された udev のフォーク。主として OpenRC と組み合わせて使うように開発されています。\n\n- mdev — 組み込みシステムで使用されるデバイスマネージャ。\n\n- smdev — デバイスノードを管理するシンプルなプログラム。mdev と互換性がありますが、全ての機能を備えているわけではありません。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Debian の init システムに関する討論\n- How to run s6-svscan as process 1\n- Replace systemd with busybox + minirc\n- Init vs. runsv\n- Demystifying the init system\n- 新しい init システムの歴史 (1992-2015)\n- init システムの比較 (gentoo wiki)\n- InitWare: Contributors' Study Guide\n- The nosh package\n\n"
    }
  ]
}