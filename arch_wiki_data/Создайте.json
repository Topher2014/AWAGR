{
  "title": "Создайте",
  "url": "https://wiki.archlinux.org/title/%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%B9%D1%82%D0%B5",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Help:Просмотр\n- Help:Стиль\n\nПоскольку подавляющее большинство статей в ArchWiki содержит указания, не совсем понятные для новых пользователей Arch Linux (или GNU/Linux в целом), было решено написать это краткое изложение основных процедур во избежание путаницы при чтении, а также для уменьшения количества повторений в самом содержании статей.\n\n"
    },
    {
      "title": "Организация",
      "level": 2,
      "content": "Большинство статей в ArchWiki не предоставляет целостного погружения в конкретную тему, они пишутся в соответствии с принципом «Не повторяйся» и предполагают, что пользователь самостоятельно найдёт и прочитает необходимые дополнительные материалы по тем темам, которые ему непонятны. Там, где это возможно, ссылки на такие материалы приведены в самих статьях с использованием специального форматирования — смотрите раздел #Форматирование.\n\nВследствие такой организации, чтобы лучше усвоить материал, может потребоваться изучить несколько относящихся к теме источников. В частности, новичкам в Arch (или GNU/Linux в целом) может понадобиться прочитать довольно много статей даже при решении простых проблем. Особенно важно изучить вспомогательные материалы, прежде чем обращаться за дополнительной помощью к другим пользователям.\n\n"
    },
    {
      "title": "Форматирование",
      "level": 2,
      "content": "- ссылка на раздел в текущей статье: #Организация\n- ссылка на другую статью ArchWiki\n- ссылка на внешний веб-ресурс\n- ссылка на man-страницу: intro(1)\n- man-страница, недоступная через интернет: foo(1)\n- ссылка на пакет, находящийся в официальных репозиториях: foobar\n- ссылка на пакет, находящийся в AUR: foobarAUR\n\n"
    },
    {
      "title": "Обычный пользователь или root",
      "level": 2,
      "content": "Есть строки, написанные так:\n\n```\n# mkinitcpio -p linux\n```\n\nА есть с другим префиксом:\n\n```\n$ makepkg -s\n```\n\nЗнак решётки (#) указывает на то, что команда должна быть запущена от имени root, в то время как знак доллара ($) показывает, что команда должна быть запущена от имени обычного пользователя.\n\nЕсть одно исключение, на которое стоит обратить внимание:\n\n```\n# Этот псевдоним раскрашивает список вывода ls\nalias ls='ls --color=auto'\n```\n\nВ этом примере контекст, в котором находится знак #, намекает, что это не команда, которую нужно сразу выполнять; подразумевается, что этот код должен быть записан в какой-то файл, а знак # просто обозначает комментарий в этом коде. Комментарии игнорируются программой, выполняющей код, и обычно содержат пояснения к коду. В скриптах Bash знак, обозначающий комментарии, совпадает со знаком в строке приглашения суперпользователя.\n\nДля текста на английском языке дополнительным намёком на то, что это просто комментарий, может быть заглавная буква после знака #. В Unix-подобных системах команды обычно имеют другой стиль: чаще всего это не полные слова, а короткие аббревиатуры без заглавных букв (например, команда копирования имеет название не Copy, а cp).\n\nВ любом случае, в статьях обычно явно поясняется, что это такое и что с этим делать, например:\n\nДобавьте следующие строки в файл ~/путь/к/файлу:\n\n```\n# Этот псевдоним раскрашивает список вывода ls\nalias ls='ls --color=auto'\n```\n\n"
    },
    {
      "title": "Добавить, создать, редактировать",
      "level": 2,
      "content": "Когда статья предлагает создать или отредактировать один или несколько файлов или добавить что-то в файл, в этом случае предполагается использование одного из следующих методов.\n\nДля создания или изменения текстовых файлов предлагается использовать текстовый редактор. Например, использование nano для редактирования файла /etc/bash.bashrc:\n\n```\n# nano /etc/bash.bashrc\n```\n\nЧтобы создать или перезаписать файл, состоящий из одной строки, может быть проще использовать перенаправление вывода в терминале. В следующем примере создаётся файл /etc/hostname с текстом myhostname (если файл уже существует, то старое содержимое будет стёрто).\n\n```\n# echo myhostname > /etc/hostname\n```\n\nТакже перенаправление вывода можно использовать для добавления новой строки в файл. Следующий пример добавляет строку [custom-repo] в конце файла /etc/pacman.conf.\n\n```\n# echo \"[custom-repo]\" >> /etc/pacman.conf\n```\n\nКогда просят создать каталог, используйте команду mkdir:\n\n```\n# mkdir /mnt/boot\n```\n\n"
    },
    {
      "title": "Сделать исполняемым",
      "level": 3,
      "content": "После создания файла, предназначенного для запуска в виде скрипта (вручную или другой программой), нужно сделать его исполняемым. Для этого можно использовать, например, команду chmod:\n\n```\n$ chmod +x имя_скрипта\n```\n\nПодробная информация об этой команде есть в разделе Разрешения и атрибуты файлов#Изменение разрешений. Некоторые приложения, такие как файловый менеджер, могут предоставлять графический интерфейс для изменения разрешений.\n\n"
    },
    {
      "title": "Source",
      "level": 2,
      "content": "Некоторые приложения, в частности командные оболочки, используют скрипты для своей настройки: после редактирования таких скриптов нужно выполнить source для применения изменений. Например, в случае с bash это делается путём выполнения такой команды (также можно заменить source на .):\n\n```\n$ source ~/.bashrc\n```\n\nКогда статья предложит изменить скрипт настроек, она не будет напоминать вам о выполнении команды source для файла, и только в некоторых случаях вы увидите ссылку на этот раздел в качестве напоминания.\n\n"
    },
    {
      "title": "Установка пакетов",
      "level": 2,
      "content": "Когда статья предлагает установить какие-либо пакеты обычным способом, она не будет содержать подробные инструкции по установке. Вместо них будут имена пакетов, которые нужно установить.\n\nСледующие подразделы дают обзор общих процедур установки в зависимости от типа пакета.\n\n"
    },
    {
      "title": "Официальные пакеты",
      "level": 3,
      "content": "Для пакетов из официальных репозиториев вы увидите что-то вроде:\n\nЭто означает, что вам нужно выполнить команду:\n\n```\n# pacman -S имя_пакета\n```\n\nСтатья pacman содержит подробную информацию об управлении пакетами в Arch Linux.\n\n"
    },
    {
      "title": "Пользовательский репозиторий Arch (AUR)",
      "level": 3,
      "content": "Для пакетов из пользовательского репозитория Arch (AUR) вы увидите что-то вроде:\n\nВ общем случае это означает, что нужно перейти по ссылке имя_пакетаAUR, скачать архив PKGBUILD, распаковать его, проверить содержимое и в том же каталоге выполнить команду:\n\n```\n$ makepkg -si\n```\n\nСтатья Пользовательский репозиторий Arch содержит все подробные объяснения и лучшие методы работы с пакетами из AUR.\n\n"
    },
    {
      "title": "Управление юнитами systemd",
      "level": 2,
      "content": "Когда статья предлагает запустить, включить, остановить или перезапустить какой-то юнит systemd (например, службу), в статье не будут указаны подробные инструкции как это сделать, вместо этого вы увидите примерно такое:\n\nЭто означает, что вам нужно выполнить команду:\n\n```\n# systemctl start пример.service\n```\n\nСписок доступных операций и пояснения к ним описаны в разделе systemd (Русский)#Использование юнитов.\n\n"
    },
    {
      "title": "Общесистемные или пользовательские настройки",
      "level": 2,
      "content": "Важно помнить, что в системе GNU/Linux существуют два разных вида настроек. Общесистемные настройки влияют на всех пользователей. Поскольку общесистемные настройки обычно расположены в каталоге /etc, для их редактирования нужны права суперпользователя (root). Например, чтобы изменить настройки Bash для всех пользователей, нужно отредактировать файл /etc/bash.bashrc.\n\nПользовательские настройки затрагивают только конкретного пользователя. Имена пользовательских файлов настроек обычно начинаются с точки (так называемые dotfiles). Например, файл ~/.bashrc является пользовательским (для конкретного пользователя) файлом настроек Bash. Идея заключается в том, что каждый пользователь может задать свои собственные настройки, такие как псевдонимы (alias), функции и другие интерактивные функции, такие как строка приглашения (prompt), не влияя на других пользователей.\n\n"
    },
    {
      "title": "Общие файлы оболочек",
      "level": 3,
      "content": "Bash и другие Bourne-совместимые оболочки, как Zsh, также выполняют source определённых файлов настроек в зависимости от того, запущены ли они как оболочка входа или интерактивная оболочка. Подробности описаны в статьях соответствующих оболочек, например Bash (Русский)#Файлы настроек и Zsh (Русский)#Файлы запуска/завершения.\n\n"
    },
    {
      "title": "Псевдо-переменные в примерах кода",
      "level": 2,
      "content": "Некоторые блоки кода могут содержать так называемые псевдо-переменные, которые, как следует из названия, не являются реальными переменными, используемыми в коде. Вместо этого они представляют собой место для заполнения, в которое вы должны вручную вписать значение, специфичное для вашей конкретной системы, перед запуском этого кода. Обычно оболочки, такие как bash и zsh, реализуют автодополнение по клавише Tab помогающее заполнить параметры для некоторых распространённых команд, таких как systemctl.\n\nВ статьях, которые соответствуют Help:Style/Formatting and punctuation, псевдо-переменные оформлены курсивом. Например, вы можете увидеть что-то такое:\n\n- Включите службу dhcpcd@интерфейс.service для сетевого интерфейса, название которого указано в выводе команды ip link.\n\nВ этом случае интерфейс используется в качестве псевдо-переменной, на месте которой нужно вписать значение для использования юнита-шаблона systemd. Понять, что юнит systemd является юнитом-шаблоном, можно по наличию знака @ в его имени. Такие юниты-шаблоны принимают в качестве аргумента какой-то элемент, специфичный для конкретной системы (в данном примере таким элементом является название сетевого интерфейса). Смотрите systemd (Русский)#Использование юнитов для более подробной информации. Ещё пример:\n\n- Команда dd if=источник of=/dev/sdX bs=размер_сектора count=число_секторов seek=первый_сектор_раздела может быть запущена от имени суперпользователя, чтобы уничтожить раздел с указанными параметрами.\n\nВ этом случае псевдо-переменные используются для описания параметров, которые должны быть подставлены на место этих псевдо-переменных. Подробнее о том, как получить правильные значения для параметров этой команды, описано в разделе Securely wipe disk#Calculate blocks to wipe manually.\n\nВ случае примеров файлов вставка псевдо-переменных в реальный файл настроек может испортить работу программы, которая его использует.\n\n"
    },
    {
      "title": "Многоточие",
      "level": 3,
      "content": "В большинстве случаев многоточие (...) не является частью фактического содержимого файла или вывода кода и используется для того, чтобы сэкономить место и не отвлекать читателя текстом, который не относится к обсуждаемой теме.\n\nНапример HOOKS=\"... encrypt ... filesystems ...\" или:\n\n```\n/etc/X11/xorg.conf.d/50-synaptics.conf\n```\n\n```\nSection \"InputClass\"\n    ...\n    Option      \"CircularScrolling\"          \"on\"\n    Option      \"CircScrollTrigger\"          \"0\"\n    ...\nEndSection\n```\n\nИмейте в виду, что в некоторых случаях многоточие может быть значимой частью синтаксиса кода: внимательные пользователи смогут легко распознавать эти случаи по контексту.\n\n"
    }
  ]
}