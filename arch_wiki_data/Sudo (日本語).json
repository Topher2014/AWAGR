{
  "title": "Sudo (日本語)",
  "url": "https://wiki.archlinux.org/title/Sudo_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ユーザーとグループ\n- su\n- doas\n\nsudo を使うことでシステム管理者は権限を委託できるようになり、root や他のユーザーとして複数の(もしくは全ての)コマンドを実行する能力を特定のユーザー(もしくはユーザーのグループ)に与えることができます。\n\nSudo は root でコマンドを実行するためのものとして su に代わるものです。su が root シェルを起動してそれから全てのコマンドを root として実行できるようにするのに対し、sudo は一つのコマンドだけに特権を与えます。必要な時だけに root 特権を有効にするので、sudo を使うことにより打ち間違いや呼び出されたコマンドのバグによってシステムを破壊してしまう可能性を減らすことができます。\n\nSudo は他のユーザーとしてコマンドを実行するために使うこともできます; さらに、sudo は全てのコマンドとセキュリティ検査のアクセス失敗を記録します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 使用方法 2.1 ログインシェル\n- 3 設定 3.1 デフォルトのスケルトンファイル 3.2 現在の設定を表示 3.3 visudo を使う 3.4 エントリの例 3.5 Sudoers デフォルトファイルパーミッション\n- 4 ヒントとテクニック 4.1 パスワードプロンプトのタイムアウトを無効にする 4.2 パスワードプロンプトに端末ベルを鳴らす 4.3 エイリアスを渡す 4.4 ターミナルごとの sudo を無効化 4.5 パスワードの入力回数を減らす 4.6 環境変数 4.7 Root パスワード 4.8 root ログインを無効化 4.8.1 kdesu 4.9 sudoでハード化する例 4.10 /etc/sudoers.d のドロップインファイルを使って sudo を設定 4.11 ファイルの編集 4.12 侮辱を有効にする 4.13 パスワード入力のフィードバックを有効にする 4.14 カラーパスワードプロンプト 4.15 U2F の使用\n- 5 トラブルシューティング 5.1 SSH TTY 問題 5.2 Permissive Umask\n\n- 2.1 ログインシェル\n\n- 3.1 デフォルトのスケルトンファイル\n- 3.2 現在の設定を表示\n- 3.3 visudo を使う\n- 3.4 エントリの例\n- 3.5 Sudoers デフォルトファイルパーミッション\n\n- 4.1 パスワードプロンプトのタイムアウトを無効にする\n- 4.2 パスワードプロンプトに端末ベルを鳴らす\n- 4.3 エイリアスを渡す\n- 4.4 ターミナルごとの sudo を無効化\n- 4.5 パスワードの入力回数を減らす\n- 4.6 環境変数\n- 4.7 Root パスワード\n- 4.8 root ログインを無効化 4.8.1 kdesu\n- 4.9 sudoでハード化する例\n- 4.10 /etc/sudoers.d のドロップインファイルを使って sudo を設定\n- 4.11 ファイルの編集\n- 4.12 侮辱を有効にする\n- 4.13 パスワード入力のフィードバックを有効にする\n- 4.14 カラーパスワードプロンプト\n- 4.15 U2F の使用\n\n- 4.8.1 kdesu\n\n- 5.1 SSH TTY 問題\n- 5.2 Permissive Umask\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "sudo パッケージをインストールしてください。あるいは、sudo-rsにsudo-rsというメモリ安全なsudoの実装があります。\n\n"
    },
    {
      "title": "使用方法",
      "level": 2,
      "content": "ユーザーはコマンドの前に sudo を付けることで、スーパーユーザー(もしくはその他の)特権がある状態でコマンドを実行できます。\n\nsudo を使うときはコマンドの前に sudo と空白を付けてください:\n\n```\n$ sudo cmd\n```\n\n例えば、pacman を root で使いたいなら:\n\n```\n$ sudo pacman -Syu\n```\n\n詳しくは sudo(8) を見てください。\n\n"
    },
    {
      "title": "ログインシェル",
      "level": 3,
      "content": "すべてのコマンドを他のユーザーとして実行するために単に sudo を前置するだけでは不十分です。特に、リダイレクションやコマンド置換を使用する場合、ログインシェルを使用する必要があります。これは sudo -iu user で簡単にアクセスできます（目的のユーザーが root である場合は -u user を省略できます）。\n\n次の例では、コマンド置換はフルシェルで動作しますが、sudo を前置すると失敗します：\n\n```\n$ sudo wpa_supplicant -B -i interface -c <(wpa_passphrase MYSSID passphrase)\n```\n\n```\nSuccessfully initialized wpa_supplicant\nFailed to open config file '/dev/fd/63', error: No such file or directory\nFailed to read or parse configuration '/dev/fd/63'\n```\n\n"
    },
    {
      "title": "デフォルトのスケルトンファイル",
      "level": 3,
      "content": "sudoers(5) § SUDOERS OPTIONS は /etc/sudoers ファイル内の Defaults コマンドで使用できる全てのオプションをリストアップします。\n\nオプションのリスト (バージョン 1.8.7 のソースコードから解析されたもの) を sudoers 用に最適化した形式で表示するには [1] を参照してください。\n\nパスワードのタイムアウトの設定など、より詳しい情報は sudoers(5) を見て下さい。\n\n"
    },
    {
      "title": "現在の設定を表示",
      "level": 3,
      "content": "sudo -ll を実行して現在の sudo 設定を表示してください。sudo -lU user で指定したユーザーの sudo 設定も確認できます。\n\n"
    },
    {
      "title": "visudo を使う",
      "level": 3,
      "content": "sudo の設定ファイルは /etc/sudoers です。このファイルはどんなときでも visudo コマンドを使って編集するべきです。visudo は sudoers ファイルをロックし、一時ファイルに編集内容を保存して、それを /etc/sudoers にコピーする前にファイルの構文をチェックします。\n\n- sudoers に構文エラーの危険性があるということは絶対避けなくてはいけません!どんなエラーでも sudo を使用不可能にしてしまいます。エラーを防ぐためにどんなときでも visudo を使って編集するようにしてください。\n- visudo(8) は、ユーザーが選択したエディターのユーザー環境変数を尊重するように visudo を設定すると、その変数を別の値に設定するだけで、visudo 権限を持つユーザーがログを記録せずに root として任意のコマンドを実行できるようになるため、セキュリティ ホールになる可能性があると警告しています。\n\nvisudo のデフォルトエディタは vi です。core リポジトリの sudo はデフォルトで --with-env-editor を有効にしてコンパイルされており、VISUAL や EDITOR 変数を使用することができます。VISUAL が設定されている場合 EDITOR は使われません。\n\n現在のシェルセッションの間だけ visudo のエディタとして nano を使いたい場合、visudo を実行する前に EDITOR 変数を設定してください:\n\n```\n# EDITOR=nano visudo\n```\n\nもしくは /etc/sudoers ファイルのコピーを編集して visudo -c -f /copy/of/sudoers でチェックすることもできます。visudo でファイルをロックしたくない場合に有用です。\n\nエディタを永久に変更するには、環境変数#ユーザーごとを参照してください。システム全体で visudo のみのエディタを永久に変更するには、以下を /etc/sudoers に追加します（nano が好みのエディタであると仮定します）：\n\n```\n# デフォルトのエディタを nano の制限付きバージョンに設定し、visudo が EDITOR/VISUAL を使用しないようにする。\nDefaults      editor=/usr/bin/rnano, !env_editor\n```\n\n"
    },
    {
      "title": "エントリの例",
      "level": 3,
      "content": "ユーザー USER_NAME が sudo を使った時に、完全な root 権限を与えたい場合は、次の行を加えて下さい:\n\n```\nUSER_NAME   ALL=(ALL) ALL\n```\n\nマシンのホストネームが HOST_NAME のときだけ、ユーザー USER_NAME に他のユーザーとしてコマンドを実行する権限を与えるには:\n\n```\nUSER_NAME   HOST_NAME=(ALL) ALL\n```\n\nwheel グループに追加されている全てのユーザーが sudo を使えるようにするには:\n\n```\n%wheel      ALL=(ALL) ALL\n```\n\nユーザー USER_NAME にパスワードを尋ねるのを無効化するには:\n\n```\nDefaults:USER_NAME      !authenticate\n```\n\nホスト HOST_NAME 上のユーザー USER_NAME のみに対して明示的に定義されたコマンドを有効にするには：\n\n```\nUSER_NAME HOST_NAME=/usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\nユーザー USER_NAME が ホスト HOST_NAME を使っているときだけ特定のコマンドに sudo をパスワードなしで使えるようにするには:\n\n```\nUSER_NAME HOST_NAME= NOPASSWD: /usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\n説明のついた sudoers のサンプルは /usr/share/doc/sudo/examples/sudoers にあります。詳しくは sudoers(5) を見て下さい。\n\n"
    },
    {
      "title": "Sudoers デフォルトファイルパーミッション",
      "level": 3,
      "content": "sudoers ファイルの所有者とグループはゼロにしてください、つまり所有者が居てはいけません。ファイルパーミッションは 0440 に設定する必要があります。このパーミッションはデフォルトでセットされますが、パーミッションを変える事故を起こしてしまった場合、すぐにパーミッションを元に戻すか sudo を消して下さい。\n\n```\n# chown -c root:root /etc/sudoers\n# chmod -c 0440 /etc/sudoers\n```\n\n"
    },
    {
      "title": "パスワードプロンプトのタイムアウトを無効にする",
      "level": 3,
      "content": "よくある悩みは、通常のパーミッションで実行され、必要な時にのみ上昇するバックグラウンドターミナルで実行される長時間実行プロセスです。これにより sudo のパスワード入力が促され、気づかれずにタイムアウトし、その時点でプロセスが終了し、完了した作業は失われるか、せいぜいキャッシュされます。一般的なアドバイスは、パスワードなしの sudo を有効にするか、パスワードを記憶する sudo のタイムアウトを延長することです。これらはいずれもセキュリティに悪影響を及ぼします。 プロンプト タイムアウトを無効にすることもできますが、これは適切なセキュリティ上の目的を果たすものではありません、そこを理解して設定する必要があります。\n\n```\nDefaults passwd_timeout=0\n```\n\n"
    },
    {
      "title": "パスワードプロンプトに端末ベルを鳴らす",
      "level": 3,
      "content": "バックグラウンドの端末で sudo プロンプトに注意を引く為に、bell character を鳴らす方法もあります。\n\n```\nDefaults passprompt=\"^G[sudo] password for %p: \"\n```\n\n^G は文字通りベル文字です。 例えば。 vim で、シーケンスを使用して挿入 Ctrl+v Ctrl+g または Nano alt+v Ctrl+g\n\nもう一つのオプションとして、SUDO_PROMPT 環境変数 を設定する方法があります。例えば、シェルの設定ファイルに以下を追加します：\n\n```\nexport SUDO_PROMPT=$'\\a[sudo] please enter a password: '\n```\n\n"
    },
    {
      "title": "エイリアスを渡す",
      "level": 3,
      "content": "Zsh と Bash では、エイリアスは通常、コマンドの最初の単語に対してのみ展開されます。これは、sudo コマンドを実行するときにエイリアスが通常展開されないことを意味します。次の単語を展開する方法の一つは、スペースで終わる sudo のエイリアスを作成することです。以下をシェルの設定ファイルに追加します：\n\n```\nalias sudo='sudo '\n```\n\nzshmisc(1) § ALIASING はこれがどのように機能するかを説明しています：\n\nbash(1) § ALIASES も同様に説明しています：\n\n"
    },
    {
      "title": "ターミナルごとの sudo を無効化",
      "level": 3,
      "content": "新しいターミナルを開くたびにパスワードを入力するよう求められる sudo のデフォルト設定が煩わしい場合は、timestamp_type を global に設定します：\n\n```\nDefaults timestamp_type=global\n```\n\n"
    },
    {
      "title": "パスワードの入力回数を減らす",
      "level": 3,
      "content": "5分ごとにパスワードを再入力するのが面倒な場合 (デフォルト)、 timestamp_timeout に長い値を設定することで変更することができます。(単位:分)。\n\n```\nDefaults timestamp_timeout=10\n```\n\n多くの sudo コマンドを連続して使用する場合、timestamp_timeout を増やすよりも、sudo を使用するたびにタイムアウトを更新する方が論理的です。タイムアウトを更新するには、sudo -v を使用します（sudo -K は即座に取り消します）。\n\n次の内容をシェル初期化ファイルに追加することで、自動化することができます：\n\n```\nalias sudo='sudo -v; sudo '\n```\n\nまた、bash 関数を使用することも可能です。詳細は stackexchange を参照してください。\n\n"
    },
    {
      "title": "環境変数",
      "level": 3,
      "content": "環境変数をたくさん使っている場合や、export http_proxy=\"...\" でプロクシー設定を export している場合、sudo を使うときに、sudo に -E オプションを付けない限りこれらの環境変数が root アカウントに渡されません。\n\n```\n$ sudo -E pacman -Syu\n```\n\n環境変数を維持するために env_keep にそれら環境変数を追加するのを推奨します:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults env_keep += \"ftp_proxy http_proxy https_proxy no_proxy\"\n```\n\n"
    },
    {
      "title": "Root パスワード",
      "level": 3,
      "content": "ユーザーは、/etc/sudoers の Defaults 行に targetpw（ターゲットユーザー、デフォルトは root）または rootpw を追加することで、ユーザーパスワードの代わりに root パスワードを尋ねるように sudo を設定できます：\n\n```\nDefaults targetpw\n```\n\nroot パスワードをユーザーに公開しないようにするためには、これを特定のグループに制限できます：\n\n```\nDefaults:%wheel targetpw\n%wheel ALL=(ALL) ALL\n```\n\n"
    },
    {
      "title": "root ログインを無効化",
      "level": 3,
      "content": "sudo をインストール・設定したら、root ログインを無効化できます。root を無効化すれば、攻撃者はユーザーのパスワードだけでなく sudoer として設定されたユーザー名もまず考えなくてはならなくなります。Secure Shell#root ログインを制限するも参照。\n\n- ルートログインを無効にすることで、自分自身をロックアウトしてしまう可能性がありますのでご注意ください。Sudo は自動的にインストールされませんし、そのデフォルトの設定では、パスワードなしの root アクセスも、自分のパスワードによる root アクセスもできません。root アカウントを無効にする前に、ユーザが sudoer として適切に設定されている ことを確認してください!\n- sudoers ファイルをデフォルトで rootpw を使用するように変更した場合、以下のコマンドで root ログインを無効化しないでください!\n- すでにロックアウトされている場合は、パスワードリカバリ を参照してください。\n\nアカウントをロックするには passwd を使います:\n\n```\n# passwd -l root\n```\n\n同じようなコマンドで root をアンロックできます。\n\n```\n$ sudo passwd -u root\n```\n\nもしくは、/etc/shadow を編集して root の暗号化されたパスワードを \"!\" で置き換えてください:\n\n```\nroot:!:12345::::::\n```\n\nもう一度 root ログインを有効にするには:\n\n```\n$ sudo passwd root\n```\n\nシステム緊急時には、リカバリプロンプトが root パスワードを要求するため、リカバリシェルにログインすることができません。緊急時に自動的に root アカウントをアンロックするには、rescue.service に ドロップインファイル を使用して SYSTEMD_SULOGIN_FORCE=1 環境変数を追加します：\n\n```\n/etc/systemd/system/rescue.service.d/SYSTEMD_SULOGIN_FORCE.conf\n```\n\n```\n[Service]\nEnvironment=SYSTEMD_SULOGIN_FORCE=1\n```\n\n"
    },
    {
      "title": "kdesu",
      "level": 4,
      "content": "KDE では root 権限で GUI アプリケーションを起動するのに kdesu が使われることがあります。root アカウントが無効になっているときでもデフォルトで kdesu は su を使おうとします。幸いに、kdesu では su の代わりに sudo を使うようにすることができます。~/.config/kdesurc (kde4 の場合は ~/.kde4/share/config/kdesurc) ファイルを作成・編集してください:\n\n```\n[super-user-command]\nsuper-user-command=sudo\n```\n\nもしくは以下のコマンドを使用 (kde4 の場合は kwriteconfig を使用):\n\n```\n$ kwriteconfig5 --file kdesurc --group super-user-command --key super-user-command sudo\n```\n\n"
    },
    {
      "title": "sudoでハード化する例",
      "level": 3,
      "content": "例えば、admin, devel, joe の3人のユーザーを作ったとします。admin は journalctl, systemctl, mount, kill, iptables に、devel はパッケージのインストールや設定ファイルの編集に、そして joe はログインするユーザにそれぞれ使用します。joe\" にリブート、シャットダウン、netctl を使わせるためには、以下のようにします。\n\n/etc/pam.d/su と /etc/pam.d/su-l を編集してください。 ユーザが wheel グループに属していることを要求するが、誰もその中に入れないようにする。\n\n```\n#%PAM-1.0\nauth            sufficient      pam_rootok.so\n# Uncomment the following line to implicitly trust users in the \"wheel\" group.\n#auth           sufficient      pam_wheel.so trust use_uid\n# Uncomment the following line to require a user to be in the \"wheel\" group.\nauth            required        pam_wheel.so use_uid\nauth            required        pam_unix.so\naccount         required        pam_unix.so\nsession         required        pam_unix.so\n```\n\nSSH ログインを 'ssh' グループに制限します。joe だけがこのグループの一員になります。\n\n```\ngroupadd -r ssh\ngpasswd -a joe ssh\necho 'AllowGroups ssh' >> /etc/ssh/sshd_config\n```\n\nリスタート sshd.service.\n\nユーザーを他のグループに追加する。\n\n```\nfor g in power network ;do ;gpasswd -a joe $g ;done\nfor g in network power storage ;do ;gpasswd -a admin $g ;done\n```\n\nデベロッパーが編集できるように、コンフィグにパーミッションを設定します。\n\n```\nchown -R devel:root /etc/{http,openvpn,cups,zsh,vim,screenrc}\n```\n\n```\nCmnd_Alias  POWER       =   /usr/bin/shutdown -h now, /usr/bin/halt, /usr/bin/poweroff, /usr/bin/reboot\nCmnd_Alias  STORAGE     =   /usr/bin/mount -o nosuid\\,nodev\\,noexec, /usr/bin/umount\nCmnd_Alias  SYSTEMD     =   /usr/bin/journalctl, /usr/bin/systemctl\nCmnd_Alias  KILL        =   /usr/bin/kill, /usr/bin/killall\nCmnd_Alias  PKGMAN      =   /usr/bin/pacman\nCmnd_Alias  NETWORK     =   /usr/bin/netctl\nCmnd_Alias  FIREWALL    =   /usr/bin/iptables, /usr/bin/ip6tables\nCmnd_Alias  SHELL       =   /usr/bin/zsh, /usr/bin/bash\n%power      ALL         =   (root)  NOPASSWD: POWER\n%network    ALL         =   (root)  NETWORK\n%storage    ALL         =   (root)  STORAGE\nroot        ALL         =   (ALL)   ALL\nadmin       ALL         =   (root)  SYSTEMD, KILL, FIREWALL\ndevel\t    ALL         =   (root)  PKGMAN\njoe\t    ALL         =   (devel) SHELL, (admin) SHELL\n```\n\nこの設定により、root ユーザーでのログインはほとんど必要なくなります。\n\njoe は自宅の WiFi に接続できます。\n\n```\nsudo netctl start home\nsudo poweroff\n```\n\njoe は、他のユーザーとして netctl を使用できません。\n\n```\nsudo -u admin -- netctl start home\n```\n\njoe が journalctl を使ったり、逃亡したプロセスを kill したりする必要があるとき、そのユーザーに切り替えることができます。\n\n```\nsudo -i -u devel\nsudo -i -u admin\n```\n\nしかし、joe は root ユーザーに切り替えることはできません。\n\n```\nsudo -i -u root\n```\n\njoe が管理者として gnu-screen のセッションを開始したい場合は、次のようにします。\n\n```\nsudo -i -u admin\nadmin% chown admin:tty `echo $TTY`\nadmin% screen\n```\n\n"
    },
    {
      "title": "/etc/sudoers.d のドロップインファイルを使って sudo を設定",
      "level": 3,
      "content": "sudo は /etc/sudoers.d/ ディレクトリ内のファイルを読み込みます。/etc/sudoers を編集するかわりに、/etc/sudoers.d/ ディレクトリのファイルで設定を変更することができます。これには2つのメリットがあります:\n\n- sudoers.pacnew ファイルを編集する必要がありません。\n- 新しいエントリに問題があった場合、/etc/sudoers を編集するのではなく問題のあるファイルを削除するだけですみます。\n\nドロップインファイルのエントリの形式は /etc/sudoers 自体と同じです。直接編集するときは、visudo -f /etc/sudoers.d/somefile を使ってください。詳しくは sudoers(5) の \"Including other files from within sudoers\" セクションを参照。\n\n/etc/sudoers.d/ ディレクトリのファイルは辞書順に読み込まれます。ファイル名に . または ~ が含まれているとスキップされます。ソート順で問題が起こらないように、ファイル名には2桁の数字を付けてください。例: 01_foo。\n\n"
    },
    {
      "title": "ファイルの編集",
      "level": 3,
      "content": "sudo -e または sudoedit を使うことで、ファイルを他のユーザーとして編集することができます。テキストエディタを動かすユーザーは変わりません。\n\nテキストエディタの権限を昇格させることなく root でファイルを編集することが可能です。詳しくは sudo(8) § e を読んでください。\n\nエディタは他のプログラムに設定できます。例えば meld を使って pacnew ファイルを管理する場合:\n\n```\n$ SUDO_EDITOR=meld sudo -e /etc/file{,.pacnew}\n```\n\n"
    },
    {
      "title": "侮辱を有効にする",
      "level": 3,
      "content": "visudo を使用して sudoers ファイルに次の行を追加することにより、sudo でイースターエッグ (侮辱) することができます。\n\n不正なパスワードを入力すると、Sorry, try again. のメッセージがユーモラスな侮辱に置き換えられます。\n\n```\n/etc/sudoers\n```\n\n```\nDefaults insults\n```\n\n"
    },
    {
      "title": "パスワード入力のフィードバックを有効にする",
      "level": 3,
      "content": "デフォルトでは、パスワードを入力する際に視覚的なフィードバックはありません。これは、セキュリティを高めるために意図的に行われています。しかし、視覚的な入力が必要な場合は、この行を追加することで有効にすることができます:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults pwfeedback\n```\n\n"
    },
    {
      "title": "カラーパスワードプロンプト",
      "level": 3,
      "content": "パスワードプロンプトをカラーや太字フォントでカスタマイズするには、シェル初期化ファイルに SUDO_PROMPT 環境変数 を設定し、tput(1) を使用します。\n\n例えば、パスワードプロンプトを太字の赤で表示するには、以下のように設定します：\n\n```\nexport SUDO_PROMPT=\"$(tput setaf 1 bold)Password:$(tput sgr0) \"\n```\n\nまた、デフォルトメッセージに異なる色を使用するには、以下のようにします：\n\n```\nexport SUDO_PROMPT=\"$(tput setab 1 setaf 7 bold)[sudo]$(tput sgr0) $(tput setaf 6)password for$(tput sgr0) $(tput setaf 5)%p$(tput sgr0): \"\n```\n\nTable content:\ntput コマンドラインオプション チートシート tput コマンド 説明 tput bold 太字テキスト tput setaf [CODE] 前景色を設定 tput setab [CODE] 背景色を設定 tput rev 色を反転 tput sgr0 すべてをリセット | tput コマンド | 説明 | tput bold | 太字テキスト | tput setaf [CODE] | 前景色を設定 | tput setab [CODE] | 背景色を設定 | tput rev | 色を反転 | tput sgr0 | すべてをリセット |  | tput カラーコード tput カラー [CODE] 色 0 黒 1 赤 2 緑 3 黄 4 青 5 マゼンタ 6 シアン 7 白 | tput カラー [CODE] | 色 | 0 | 黒 | 1 | 赤 | 2 | 緑 | 3 | 黄 | 4 | 青 | 5 | マゼンタ | 6 | シアン | 7 | 白\ntput コマンド | 説明\ntput bold | 太字テキスト\ntput setaf [CODE] | 前景色を設定\ntput setab [CODE] | 背景色を設定\ntput rev | 色を反転\ntput sgr0 | すべてをリセット\ntput カラー [CODE] | 色\n0 | 黒\n1 | 赤\n2 | 緑\n3 | 黄\n4 | 青\n5 | マゼンタ\n6 | シアン\n7 | 白\n\nTable content:\ntput コマンド | 説明\ntput bold | 太字テキスト\ntput setaf [CODE] | 前景色を設定\ntput setab [CODE] | 背景色を設定\ntput rev | 色を反転\ntput sgr0 | すべてをリセット\n\nTable content:\ntput カラー [CODE] | 色\n0 | 黒\n1 | 赤\n2 | 緑\n3 | 黄\n4 | 青\n5 | マゼンタ\n6 | シアン\n7 | 白\n\n"
    },
    {
      "title": "U2F の使用",
      "level": 3,
      "content": "U2F は sudo と一緒に使用するのに最適です。これは、公共の場所でのショルダーハックのリスクを効果的に排除しながら、シンプルな物理的なタッチでプロンプトを承認する意識的なコントロールを与えてくれます。\n\nUniversal 2nd Factor#パスワードなしの sudo を参照してください。\n\n"
    },
    {
      "title": "SSH TTY 問題",
      "level": 3,
      "content": "リモートコマンドを実行するとき SSH はデフォルトでは tty を割り当てません。tty がないと、パスワードを要求するときに sudo は echo を無効化することができません。ssh の -tt オプションを使うことで強制的に tty を割り当てることができます (-tt を2回使ってください)。\n\nDefaults オプションの requiretty は tty が存在するときだけ sudo を実行することを許可します。\n\n```\n# Disable \"ssh hostname sudo <cmd>\", because it will show the password in clear text. You have to run \"ssh -t hostname sudo <cmd>\".\n#\n#Defaults    requiretty\n```\n\n"
    },
    {
      "title": "Permissive Umask",
      "level": 3,
      "content": "Sudo はユーザーの umask の値を sudo の umask (デフォルトは 0022) と結合します。これによってユーザーの umask が許可している以上のパーミッションでファイルを作成できないようにしています。umask をカスタマイズしていない場合はデフォルトで問題ありませんが、sudo によって実行されたユーティリティが作成したファイルのパーミッションが root で直接実行した場合と異なってしまう可能性があります。エラーが発生する場合、たとえユーザーが指定した umask よりもパーミッションを甘くしたいときでも、sudo には umask を修正する手段があります。以下を追加 (visudo を使用) することで sudo のデフォルトの挙動が上書きされます:\n\n```\nDefaults umask = 0022\nDefaults umask_override\n```\n\nsudo の umask が root のデフォルト umask (0022) に設定されデフォルトの挙動が上書きされます。ユーザーによって設定された umask を無視して指定された umask を常時使うようになります。\n\n"
    }
  ]
}