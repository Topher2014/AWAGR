{
  "title": "Network bridge (日本語)",
  "url": "https://wiki.archlinux.org/title/Network_bridge_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- netctl でブリッジ接続\n- ネットワーク設定#ボンディングまたは LAG\n\nブリッジは複数のネットワークセグメントをまとめるのに使われる一種のソフトウェアです。ブリッジは仮想ネットワークスイッチのように動作し、透過的に働きます (他のマシンはブリッジの存在を知る必要がありません)。ブリッジには実際のデバイス (例: eth0) と仮想デバイス (例: tap0) を接続することができます。\n\nこの記事では少なくとも一つのイーサネットデバイスを含むブリッジを作成する方法を説明します。QEMU のブリッジモードやソフトウェアベースのアクセスポイントの設定などに役立ちます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ブリッジの作成 1.1 iproute2 を使う 1.1.1 メインネットワークインターフェースの追加 1.2 bridge-utils を使う 1.2.1 メインネットワークインターフェースの追加 1.3 netctl を使う 1.4 systemd-networkd を使う 1.5 NetworkManager を使う\n- 2 IP アドレスを割り当てる 2.1 iproute2 を使用する場合 2.2 NetworkManager を使用する場合\n- 3 ヒントとテクニック 3.1 ブリッジ上の無線インターフェイス 3.2 ブリッジ自体のトラフィックを高速化する\n- 4 トラブルシューティング 4.1 ブリッジ設定後にネットワークが動作しない 4.2 ブリッジ設定後、ホストされたサーバーでネットワークが動作しない 4.3 通常接続に接続後、ブリッジ接続に接続できない\n- 5 参照\n\n- 1.1 iproute2 を使う 1.1.1 メインネットワークインターフェースの追加\n- 1.2 bridge-utils を使う 1.2.1 メインネットワークインターフェースの追加\n- 1.3 netctl を使う\n- 1.4 systemd-networkd を使う\n- 1.5 NetworkManager を使う\n\n- 1.1.1 メインネットワークインターフェースの追加\n\n- 1.2.1 メインネットワークインターフェースの追加\n\n- 2.1 iproute2 を使用する場合\n- 2.2 NetworkManager を使用する場合\n\n- 3.1 ブリッジ上の無線インターフェイス\n- 3.2 ブリッジ自体のトラフィックを高速化する\n\n- 4.1 ブリッジ設定後にネットワークが動作しない\n- 4.2 ブリッジ設定後、ホストされたサーバーでネットワークが動作しない\n- 4.3 通常接続に接続後、ブリッジ接続に接続できない\n\n"
    },
    {
      "title": "ブリッジの作成",
      "level": 2,
      "content": "ブリッジを作成する方法は複数存在します。\n\nネットワークブリッジを作成するには、いくつかの方法があります。このセクションでは、少なくとも 1 つのイーサネットインターフェイスを備えたブリッジを設定するために必要な手順の概要を説明します。これは、QEMU のブリッジモード、ソフトウェアベースのアクセスポイントの設定などに役立ちます。\n\n"
    },
    {
      "title": "iproute2 を使う",
      "level": 3,
      "content": "このセクションでは (base メタパッケージに含まれている) iproute2 パッケージの ip ツールを使ってネットワークブリッジを管理します。\n\n新しいブリッジを作成して状態を up に変更:\n\n```\n# ip link add name bridge_name type bridge\n# ip link set dev bridge_name up\n```\n\nブリッジにインターフェイス (例: eth0) を追加するには、まずインターフェイスをプロミスキャスモードに設定して立ち上げておく必要があります:\n\n```\n# ip link set dev eth0 promisc on\n# ip link set dev eth0 up\n```\n\nインターフェイスの master を bridge_name に設定することでブリッジにインターフェイスを追加します:\n\n```\n# ip link set dev eth0 master bridge_name\n```\n\n既存のブリッジと関連付けられたインターフェイスを表示するには、bridge ユーティリティを使って下さい (iproute2 に含まれています)。詳しくは man bridge を参照。\n\n```\n# bridge link show\n```\n\nブリッジを削除するときは、最初に全てのインターフェイスを削除します。プロミスキャスモードをオフにして down に設定してから元の状態に戻してください。\n\n```\n# ip link set eth0 promisc off\n# ip link set eth0 down\n# ip link set dev eth0 nomaster\n```\n\nブリッジを空にしたら、削除することができます:\n\n```\n# ip link delete bridge_name type bridge\n```\n\n"
    },
    {
      "title": "メインネットワークインターフェースの追加",
      "level": 4,
      "content": "これをリモートサーバーで実行しており、メイン ネットワークインターフェイス (例: eth0) をブリッジに追加する計画がある場合は、まず現在のネットワークステータスをメモします:\n\n```\n$ ip address show eth0\n$ ip route show dev eth0\n```\n\nこの例の関連情報は次のとおりです:\n\n- 添付されている IP アドレス eth0: 10.2.3.4/8\n- デフォルトゲートウェイ: 10.0.0.1\n- ブリッジネーム: br0\n\nブリッジの初期設定:\n\n```\n# ip link add name br0 type bridge\n# ip link set dev br0 up\n# ip address add 10.2.3.4/8 dev br0\n# ip route append default via 10.0.0.1 dev br0\n```\n\n次に、これらのコマンドを続けて実行します。これらをスクリプトファイルに配置して、スクリプトを実行することをお勧めします:\n\n```\n# ip link set eth0 master br0\n# ip address del 10.2.3.4/8 dev eth0\n```\n\n説明:\n\n- eth0 がブリッジに追加されると、ルーティングには使われなくなります。{ic|br0}} がその代わりになるので、IP が必要です、デフォルトルートがアタッチされている必要があります。\n- インターフェイスを br0 に追加する前に eth0 の IP アドレスを削除することはできません。\n- しかし、eth0 上の IP アドレスを素早く削除する必要があります。\n- Linux は同じルーティングテーブル上に 2 つのデフォルトルートを持つことができません。\n- eth0 の IP アドレスが削除されると、それに接続されていたデフォルトルートも自動的に削除されます。\n\n"
    },
    {
      "title": "bridge-utils を使う",
      "level": 3,
      "content": "このセクションでは (公式リポジトリの) bridge-utils パッケージに含まれている brctl ツールを使ってネットワークブリッジを管理します。オプションの完全な説明は man brctl を見て下さい。\n\n新しいブリッジを作成:\n\n```\n# brctl addbr bridge_name\n```\n\nブリッジにデバイスを追加 (例: eth0):\n\n```\n# brctl addif bridge_name eth0\n```\n\n現在のブリッジと接続されているインターフェイスを表示:\n\n```\n$ brctl show\n```\n\nブリッジデバイスを立ち上げる:\n\n```\n# ip link set up dev bridge_name\n```\n\nブリッジを削除、先にブリッジを down に設定する必要があります:\n\n```\n# ip link set dev bridge_name down\n# brctl delbr bridge_name\n```\n\n"
    },
    {
      "title": "メインネットワークインターフェースの追加",
      "level": 4,
      "content": "まず、現在のネットワーク状態を記録します:\n\n```\n$ ip address show eth0\n$ ip route show dev eth0\n```\n\nこの例の関連情報は次のとおりです:\n\n- 添付されている IP アドレス eth0: 10.2.3.4/8\n- デフォルトゲートウェイ: 10.0.0.1\n- ブリッジネーム: br0\n\nブリッジの初期設定:\n\n```\n# brctl addbr br0\n# ip address add 10.2.3.4/8 dev br0\n# ip link set dev br0 up\n```\n\n次に、これらのコマンドを続けて実行します。これらをスクリプトファイルに配置して、スクリプトを実行することをお勧めします。\n\n```\n# brctl addif br0 eth0\n# ip address del 10.2.3.4/8 dev eth0\n```\n\n"
    },
    {
      "title": "netctl を使う",
      "level": 3,
      "content": "netctl でブリッジ接続を見て下さい。\n\n"
    },
    {
      "title": "systemd-networkd を使う",
      "level": 3,
      "content": "systemd-networkd#ブリッジインターフェイス を見て下さい。\n\n"
    },
    {
      "title": "NetworkManager を使う",
      "level": 3,
      "content": "Gnome の NetworkManager がブリッジを作成することができますが、ブリッジへの自動接続はいまのところ行いません。Network Settings を開いて、Bridge タイプのインターフェイスを新しく追加し、新しいブリッジ接続を追加して、ブリッジに接続するデバイスの MAC アドレスを選択してください。\n\n接続するデバイスの UUID を確認 (デフォルトでは \"bridge0 slave 1\" という名前になっています):\n\n```\n$ nmcli connection\n```\n\n接続を有効化:\n\n```\n$ nmcli con up <UUID>\n```\n\nブリッジに追加したデバイスが NetworkManager のデフォルトインターフェイスとして自動的に接続される場合、Network Settings の歯車をクリックして、\"Identity\" の \"Connect automatically\" のチェックを外すことで無効化できます。\n\n"
    },
    {
      "title": "IP アドレスを割り当てる",
      "level": 2,
      "content": "ブリッジが完全に設定されていれば、IP アドレスを割り当てることができます:\n\n"
    },
    {
      "title": "iproute2 を使用する場合",
      "level": 3,
      "content": "```\n# ip addr add dev bridge_name 192.168.66.66/24\n```\n\n"
    },
    {
      "title": "NetworkManager を使用する場合",
      "level": 3,
      "content": "目的のアドレスを指定します:\n\n```\n# nmcli connection modify Connection ipv4.addresses desired_IP\n```\n\nDNS サーバーをセットアップします (これにより、変更を適用した後にページを読み込めなくなることも回避されます):\n\n```\n# nmcli connection modify Connection ipv4.dns DNS_server\n```\n\nIP アドレスを静的に設定します:\n\n```\n# nmcli connection modify Connection ipv4.method manual\n```\n\n変更を適用します:\n\n```\n# nmcli connection up Connection\n```\n\n"
    },
    {
      "title": "ブリッジ上の無線インターフェイス",
      "level": 3,
      "content": "ブリッジに無線インターフェイスを追加するには、まずアクセスポイントに無線インターフェイスを指定するか、または hostapd でアクセスポイントを起動する必要があります。そうしないとブリッジに無線インターフェイスは追加されません。\n\nDebian wiki の Bridging with a wireless NIC も参照。\n\n"
    },
    {
      "title": "ブリッジ自体のトラフィックを高速化する",
      "level": 3,
      "content": "状況によっては、ブリッジはブリッジボックスとして機能するだけでなく、他のホストと通信することもできます。ブリッジポートに到着し、ブリッジ ボックス自体を宛先とするパケットは、デフォルトで、論理ブリッジポートを入力デバイスとして iptables INPUT チェーンに入ります。これらのパケットは、ネットワークコードによって 2 回キューに入れられます。1 回目は、ネットワークデバイスによって受信された後にキューに入れられます。 2 回目は、ブリッジコードが宛先 MAC アドレスを調べて、それがローカル宛のパケットであると判断した場合、フレームを上位のプロトコルスタックに渡します。[1]\n\nローカル宛先のパケットを 1 回だけキューに入れる方法は、ブルートテーブルの BROUTING チェーンでパケットをブルートすることです。br0 には IP アドレスがあり、br0 のブリッジポートには IP アドレスが無い場合。次のルールを使用すると、ローカルに送信されるすべてのトラフィックが 1 回だけキューに入れられるようになります:\n\n```\n# ebtables -t broute -A BROUTING -d $MAC_OF_BR0 -p ipv4 -j redirect --redirect-target DROP\n```\n\nブリッジからの応答は br0 デバイス経由で送信されるため (ルーティングテーブルが正しく、すべてのトラフィックが br0 経由で送信されると仮定します)、パケットが 2 回キューに入れられることによるパフォーマンスの低下がなく、すべてが正常に動作し続けます。\n\nブリッジポートの MAC アドレスはブリッジデバイスの MAC アドレスと必ずしも一致しないため、リダイレクトターゲットが必要になります。ブリッジ ボックス宛てのパケットはブリッジ br0 の宛先 MAC アドレスと同じ宛先 MAC アドレスを持つため、その宛先アドレスをブリッジポートの宛先アドレスに変更する必要があります。\n\n"
    },
    {
      "title": "ブリッジ設定後にネットワークが動作しない",
      "level": 3,
      "content": "ブリッジに追加されたインターフェイス (例: eth1) からすべての IP アドレスとルートを削除し、代わりにこれらのパラメータをブリッジに設定すると役立つ場合があります。\n\nまず、eth1 に対して dhcpcd インスタンスが実行されていないことを確認してください。実行されていない場合、削除されたアドレスが再割り当てされる可能性があります。\n\neth1 インターフェースからアドレスとルートを削除します:\n\n```\n# ip addr del address dev eth1\n# ip route del address dev eth1\n```\n\nここで、以前に設定したブリッジの IP アドレスとルートを設定する必要があります。これは通常、このインターフェイスの DHCP クライアントを開始することによって行われます。それ以外の場合は、ネットワーク設定 を参照して手動設定を行ってください。\n\n"
    },
    {
      "title": "ブリッジ設定後、ホストされたサーバーでネットワークが動作しない",
      "level": 3,
      "content": "ブリッジの MAC アドレスは、サーバーが通常使用するネットワークカードの MAC アドレスと必ずしも同じではないため、サーバープロバイダーがブリッジから送信されるトラフィックをドロップし、ブリッジング時に接続が失われる可能性があります (サーバーのイーサネットインターフェイスなど)。したがって、ホストされているサーバーでは、イーサネットインターフェイスの MAC アドレスのクローンを作成するようにブリッジを設定することが必要になる場合があります。\n\n"
    },
    {
      "title": "通常接続に接続後、ブリッジ接続に接続できない",
      "level": 3,
      "content": "Network Manager アプレットで、通常のイーサネット/ワイヤレス接続 (ブリッジスレーブ接続ではない) があり、最初にそれに接続し、次にブリッジ接続に接続しようとすると (最初に通常の接続から切断するかどうかに関係なく)、接続できません。何らかの理由で、自動接続チェックボックスが有効になっている場合でも、ブリッジスレーブ接続 (ネットワーク アプレットにリストされていない) はアクティブになりません。\n\n回避策は、ターミナル経由で手動でアクティブ化することです:\n\n```\nnmcli connection up br1\\ slave\\ 1\n```\n\nその後、すぐにブリッジ接続が機能します。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- bridge-utils の公式ドキュメント\n- iproute2 の公式ドキュメント\n- Linux ベースのブリッジでの ebtables/iptables の相互作用\n\n"
    }
  ]
}