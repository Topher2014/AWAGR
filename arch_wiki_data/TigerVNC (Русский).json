{
  "title": "TigerVNC (Русский)",
  "url": "https://wiki.archlinux.org/title/TigerVNC_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- x11vnc\n- TurboVNC\n\nTigerVNC — это реализация протокола Virtual Network Computing (VNC). Данная статья фокусирует внимание на серверную функциональность.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Установите пакет tigervnc.\n\n"
    },
    {
      "title": "Первоначальная настройка",
      "level": 3,
      "content": "Для быстрого старта см. шаги ниже. Пользователям рекомендуется прочитать vncserver(8) для полного списка настроек конфигурации.\n\n1. Создайте пароль с помощью vncpasswd, который сохранит хешированный пароль в ~/.vnc/passwd.\n1. Отредактируйте /etc/tigervnc/vncserver.users для того, чтобы определить сопоставление пользователей. Каждый определённый в этом файле пользователь будет иметь соответствующий порт, на котором выполнится его сессия. Число в данном файле соответствует TCP-порту. По умолчанию, :1 — это TCP-порт 5901 (5900+1). Если нужен другой параллельный сервер, может быть выполнен второй экземпляр на следующем высшем свободном порте, например, 5902 (5900+2).\n1. Создайте ~/.vnc/config и как минимум определите тип сессии строкой вроде session=foo, где foo соответствует нужной среде рабочего стола для выполнения. Можно увидеть список доступных сред рабочего стола на системе, просмотрев их соответствующие .desktop-файлы в пределах /usr/share/xsessions/. Например:\n\n```\n~/.vnc/config\n```\n\n```\nsession=lxqt\ngeometry=1920x1080\nlocalhost\nalwaysshared\n```\n\n"
    },
    {
      "title": "Запуск и остановка tigervnc",
      "level": 3,
      "content": "Запустите экземпляр шаблона vncserver@.service и по желанию включите его запуск при загрузке/выключении системы. Обратите внимание, что идентификатор экземпляра в данном случае является номером дисплея (например, экземпляр vncserver@:1.service для номера дисплея :1).\n\n"
    },
    {
      "title": "Выставление локального дисплея напрямую",
      "level": 2,
      "content": "Tigervnc поставляется с libvnc.so, который может быть непосредственно загружен во время инициализации X, что даёт больше производительности. Создайте следующий файл и перезапустите X:\n\n```\n/etc/X11/xorg.conf.d/10-vnc.conf\n```\n\n```\nSection \"Module\"\nLoad \"vnc\"\nEndSection\n\nSection \"Screen\"\nIdentifier \"Screen0\"\nOption \"UserPasswdVerifier\" \"VncAuth\"\nOption \"PasswordFile\" \"/root/.vnc/passwd\"\nEndSection\n```\n\n"
    },
    {
      "title": "Выполнение x0vncserver для непосредственного управления локального дисплея",
      "level": 2,
      "content": "tigervnc также предоставляет x0vncserver(1), позволяющий непосредственный контроль над физической X-сессии. После определения пароля сессии с помощью инструмента vncpasswd, вызовите сервер следующим образом:\n\n```\n$ x0vncserver -rfbauth ~/.vnc/passwd\n```\n\n- x11vnc — другой VNC-сервер, тоже предоставляющий непосредственное управление текущей X-сессии.\n- x0vncserver на данный момент не поддерживает совместное использования буфера обмена между клиентом и сервером (даже с помощью autocutsel). См. проблему №529.\n\n"
    },
    {
      "title": "С помощью xprofile",
      "level": 3,
      "content": "Простой способ запуска x0vncserver — это добавить строку в одном из xprofile-файлов, например:\n\n```\n~/.xprofile\n```\n\n```\n...\nx0vncserver -rfbauth ~/.vnc/passwd &\n```\n\n"
    },
    {
      "title": "С помощью системного сервиса",
      "level": 4,
      "content": "Данный вариант даст пользователям доступ к текущему дисплею, включая экран входа, предоставляемый вашим экранным менеджером.\n\nСервис будет автоматически перезапущен каждый раз, когда пользователь выходит из его сессии.\n\nДля примера ниже используется LightDM, но должно быть возможным его адаптирование к другим экранным менеджерам, модифицировав переменную XAUTHORITY.\n\n```\n/etc/systemd/system/x0vncserver.service\n```\n\n```\n[Unit]\nDescription=Сервис удалённого доступа (VNC) для дисплея :0\nRequires=display-manager.service\nAfter=network-online.target\nAfter=display-manager.service\n\n[Service]\nType=simple\nEnvironment=HOME=/root\nEnvironment=XAUTHORITY=/var/run/lightdm/root/:0\nExecStart=x0vncserver -display :0 -rfbauth ~/.vnc/passwd\nRestart=on-failure\nRestartSec=500ms\n\n[Install]\nWantedBy=multi-user.target\n```\n\nПоскольку это системный юнит, -rfbauth ~/.vnc/passwd отсылается к /root/.vnc/passwd\n\nЗапустите/включите x0vncserver.service.\n\n"
    },
    {
      "title": "С помощью пользовательского сервиса",
      "level": 4,
      "content": "Для того, чтобы VNC-сервер выполнял x0vncserver, что является самым лёгким способом для большинства из пользователей для быстрого удалённого доступа к текущему рабочему столу, создайте systemd-юнит как указано ниже, заменяя user (пользователя) и настройки на желаемые:\n\n```\n~/.config/systemd/user/x0vncserver.service\n```\n\n```\n[Unit]\nDescription=Сервис удалённого доступа (VNC)\n\n[Service]\nType=simple\nExecStartPre=/bin/sh -c 'while ! pgrep -U \"$USER\" Xorg; do sleep 2; done'\nExecStart=/usr/bin/x0vncserver -rfbauth %h/.vnc/passwd\n\n[Install]\nWantedBy=default.target\n```\n\nСтрока ExecStartPre ждёт запуска Xorg от лица ${USER}.\n\nДля входа с Вашим именем пользователя и паролем, замените ExecStart на /usr/bin/x0vncserver -PAMService=login -PlainUsers=${USER} -SecurityTypes=TLSPlain.\n\nЗапустите/включите пользовательский юнит x0vncserver.service.\n\n"
    },
    {
      "title": "Выполнение Xvnc с XDMCP для сеансов по требованию",
      "level": 2,
      "content": "Можно использовать систему активации сокетов в systemd в сочетании с XDMCP для автоматического создания VNC-серверов дял каждого пользователя, пытающийся войти, чтобы не было необходимости настраивать один сервер/порт для каждого пользователя. Эта настройка использует экранный менеджер для аутентификации пользователей и входа, поэтому нет надобности для паролей VNC. Недостатком является то, что пользователи не смогут оставить сессию на сервере и подключиться к ней позже.\n\nДля того, чтобы его настроить, сначала установите XDMCP и убедитесь в том, что экранный менеджер работает. После этого создайте файлы:\n\n```\n/etc/systemd/system/xvnc.socket\n```\n\n```\n[Unit]\nDescription=XVNC-сервер\n\n[Socket]\nListenStream=5900\nAccept=yes\n\n[Install]\nWantedBy=sockets.target\n```\n\n```\n/etc/systemd/system/xvnc@.service\n```\n\n```\n[Unit]\nDescription=Демон XVNC для каждого соединения\n\n[Service]\nExecStart=-/usr/bin/Xvnc -inetd -query localhost -geometry 1920x1080 -once -SecurityTypes=None\nUser=nobody\nStandardInput=socket\nStandardError=syslog\n```\n\nЗапустите/включите xvnc.socket. Теперь любое количество пользователей может получить уникальные дисплеи, подключившись к порту 5900.\n\nЕсли VNC-сервер подвергается воздействию Интернета, добавьте параметр -localhost к Xvnc в xvnc@.service (обратите внимание, что -query localhost и -localhost — два разных переключателя) и следуйте #Получение доступа к vncserver через SSH-туннели. Т. к. мы только выбираем пользователя после подключения, VNC-сервер выполняется как пользователь nobody и непосредственно использует Xvnc вместо скрипта vncserver, так что любые опции в ~/.vnc проигнорированы. По желанию настройте автозапуск vncconfig, чтобы буфер обмена работал (vncconfig завершается сразу же в сессиях не VNC). Один из способов — создать файл:\n\n```\n/etc/X11/xinit/xinitrc.d/99-vncconfig.sh\n```\n\n```\n#!/bin/sh\nvncconfig -nowin &\n```\n\n"
    },
    {
      "title": "Соединение к vncserver",
      "level": 2,
      "content": "Любое количество клиентов может подключиться к серверу vncserver. Простой пример указан ниже, где vncserver выполняется на 10.1.10.2 с портом 5901 или :1 в сокращённом виде:\n\n```\n$ vncviewer 10.1.10.2:1\n```\n\n"
    },
    {
      "title": "Аутентификация без пароля",
      "level": 3,
      "content": "Параметр -passwd позволяет указать путь к серверному файлу ~/.vnc/passwd. Предпологается, что этот файл доступен пользователю через SSH или физический доступ к серверу. В обоих случаях поместите файл в файловую систему клиента в безопасном месте, например, в том, в котором только у предназначенного пользователя есть доступ к чтению.\n\n```\n$ vncviewer -passwd /path/to/server-passwd-file\n```\n\nПароль также можно передать напрямуюhe password can also be provided directly.\n\n```\n$ vncviewer -passwd <(echo MYPASSWORD | vncpasswd -f)\n```\n\n"
    },
    {
      "title": "Примерные клиенты с графическим интерфейсом",
      "level": 3,
      "content": "- gtk-vnc\n- krdc\n- vinagre\n- remmina\n- virt-viewer\n- vncviewer-jarAUR[ссылка недействительна: package not found]\n\nvncviewer от TigerVNC также имеет простой GUI при выполнении без параметров:\n\n```\n$ vncviewer\n```\n\n"
    },
    {
      "title": "Получение доступа к vncserver через SSH-туннели",
      "level": 2,
      "content": "Для серверов, предоставляющих SSH-соединение, преимущество этого способа то, что необязательно открывать любой другой порт кроме уже открытого порта SSH наружу, т. к. весь трафик VNC туннелируется в порт SSH.\n\n"
    },
    {
      "title": "На сервере",
      "level": 3,
      "content": "На стороне сервера должен быть выполнен либо vncserver, либо x0vncserver.\n\nПри выполнении любого из этих серверов, рекомендуется использовать параметр localhost в ~/.vnc/config или переключатель -localhost (для x0vncserver), т. к. это позволяет соединения только из localhost и, по аналогии, только от пользователей в SSH и аутентифицированных из коробки. Например:\n\n```\n~/.vnc/config\n```\n\n```\nsession=lxqt\ngeometry=1920x1080\nlocalhost\nalwaysshared\n```\n\nНе забудьте запустить или перезапустить vncserver@.service, например, таким образом (см. также #Первоначальная настройка):\n\n```\n# systemctl start vncserver@:1\n```\n\nили для x0vncserver:\n\n```\n$ x0vncserver -localhost -SecurityTypes none\n```\n\n"
    },
    {
      "title": "На клиенте",
      "level": 3,
      "content": "VNC-сервер был настроен на удалённой машине для принятия только локальных соединений. Теперь клиент должен открыть безопасную оболочку с удалённой машиной (в данном примере 10.1.10.2) и создать туннель с порта клиента, для примера 9901, к порту удалённого сервера 5901. Для большей информации по поводу этой функции см. OpenSSH (Русский)#Проброс других портов и ssh(1).\n\n```\n$ ssh 10.1.10.2 -L 9901:localhost:5901\n```\n\nПосле подключения по SSH оставьте это окно оболочки, т. к. он действует как защищённый туннель с сервером. В качестве альтернативы можно непосредственно выполнить SSH на фоне с помощью параметра -f. На клиентской части для подключения через этот зашифрованный туннель, направьте vncviewer к перенаправленному порту клиента на localhost.\n\n```\n$ vncviewer localhost:9901\n```\n\nНа практике происходит так, что vncviewer подключается локально к порту 9901, который туннелируется к серверному localhost-порту 5901. Соединение устанавливается к правильному порту в пределах безопасной оболочки.\n\nNote: После этой команды переключатель -f оставит ssh выполняться на фоне; он всё же будет в сети, выполняя sleep 10. Затем же выполняется vncviewer и ssh остаётся открытым на фоне пока vncviewer использует туннель. ssh завершится после отключения туннеля, что и является желаемым поведением.\n\n```\n$ ssh -fL 9901:localhost:5901 10.1.10.2 sleep 10; vncviewer localhost:9901\n```\n\nПосле этой команды переключатель -f оставит ssh выполняться на фоне; он всё же будет в сети, выполняя sleep 10. Затем же выполняется vncviewer и ssh остаётся открытым на фоне пока vncviewer использует туннель. ssh завершится после отключения туннеля, что и является желаемым поведением.\n\nВ качестве альтернативы переключатель vncviewer -via предоставляет ярлык для команды выше:\n\n```\n$ vncviewer -via 10.1.10.2 localhost::5901\n```\n\n(Обратите внимание на два двоеточия – синтаксис vncviewer — [хост]:[дисплей#] или [хост]::[порт].)\n\n"
    },
    {
      "title": "Соединение с vncserver с Android-устройств через SSH",
      "level": 3,
      "content": "Для подключения к VNC-серверу через SSH используя Android-устройство как клиент, рассмотрите использование следующей установки:\n\n1. SSH, выполняющийся на сервере\n1. vncserver, выполняющийся на сервере (с параметром -localhost для безопасности)\n1. SSH-клиент на Android-устройстве: ConnectBot является популярным выбором и будет использован в этом руководстве для примера\n1. VNC-клиент на Android-устройстве: androidVNC используется здесь\n\nВ ConnectBot подключитесь к нужной машине. Нажмите на кнопку настроек, выберите Проброс портов и добавьте порт:\n\n```\nТип: Локальный\nИсходный порт: 5901\nПорт назначения: 127.0.0.1:5901\n```\n\nD androidVNC подключитесь к VNC-порту; это локальный адрес, следующий за SSH-соединением:\n\n```\nПароль: пароль от vncserver\nАдрес: 127.0.0.1\nПорт: 5901\n```\n\n"
    },
    {
      "title": "Подключение к системе macOS",
      "level": 3,
      "content": "См. https://help.ubuntu.com/community/AppleRemoteDesktop. Проверено на Remmina.\n\n"
    },
    {
      "title": "Рекомендуемые настройки безопасности",
      "level": 3,
      "content": "Если Вы не получаете доступ к серверу vncserver с помощью SSH-туннелей, где идентификация и шифрование работает через SSH, рекомендуется использовать X509Vnc, т. к. TLSVnc испытывает недостатки подтверждения личности.\n\n```\n$ vncserver -x509key /путь/к/ключу.pem -x509cert /путь/к/сертификату.pem -SecurityTypes X509Vnc :1\n```\n\nВыдача сертификатов x509 выходит за рамки данного руководства. Однако Let's Encrypt предоставляет лёгкий способ для этого. В качестве альтернативы можно выдать сертификаты с помощью OpenSSL, поделиться публичным ключом с клиентом и указать его с помощью параметра -X509CA. Пример приведен ниже, сервер работает на 10.1.10.2:\n\n```\n$ vncviewer 10.1.10.2 -X509CA /путь/к/сертификату.pem\n```\n\n"
    },
    {
      "title": "Переключение полноэкранного режима",
      "level": 3,
      "content": "Это можно сделать с помощью меню vnc-клиента. По умолчанию, mkey vnc-клиента — F8.\n\n"
    },
    {
      "title": "Обходной путь для неработающих кнопок мыши назад и вперед",
      "level": 3,
      "content": "Протокол VNC на данный момент поддерживает только 7 кнопок мыши (левая, средняя, правая, прокрутка вверх, вниз, вправо, влево), что означает, если у Вашей мыши есть кнопки назад и вперёд, ими нельзя пользоваться и их ввод будет проигнорирован.\n\nevrouter может быть использован для обхода данного ограничения, отправляя нажатия кнопок клавиатуры при нажатии на кнопки мыши вперёд/назад. По желанию xte в xautomation и xbindkeys может быть использован на сервере для преобразования нажатий кнопок клавиатур обратно в нажатия кнопок мыши при надобности.\n\n"
    },
    {
      "title": "Замена кнопок мыши назад/вперед клавишами клавиатуры XF86Back/XF86Forward",
      "level": 4,
      "content": "Этот метод прост и подходит, если Вам нужен только способ навигации назад/вперёд при использовании веб-браузеров или, например, файловых браузеров.\n\nУстановите evrouterAUR и xautomation на клиенте. Настройте evrouter, см. Mouse buttons (Русский)#evrouter и man-страницы evrouter для инструкции и советов о том, как найти корректное название устройств, окон, кнопок и т. д. Примерная конфигурация:\n\n```\n~/.evrouterrc\n```\n\n```\nWindow \"OtherComputer:0 - TigerVNC\": # Заголовок окна, используемый в качестве фильтра\n\n# Использование Shell, чтобы избежать повторного нажатия клавиш (см. мануал evrouter)\n\"USB mouse\" \"/dev/input/by-id/usb-Mouse-name-event-mouse\" none key/275 \"Shell/xte 'key XF86Back'\"\n\"USB mouse\" \"/dev/input/by-id/usb-Mouse-name-event-mouse\" none key/276 \"Shell/xte 'key XF86Forward'\"\n\n# Используйте XKey ниже вместо способа ниже, если требуется повтор клавиш (см. мануал evrouter)\n#\"Logitech Gaming Mouse G400\" \"/dev/input/by-id/usb-Logitech_Gaming_Mouse_G400-event-mouse\" none key/275 \"XKey/XF86Back\"\n#\"Logitech Gaming Mouse G400\" \"/dev/input/by-id/usb-Logitech_Gaming_Mouse_G400-event-mouse\" none key/276 \"XKey/XF86Forward\"\n```\n\nЗапустите evrouter на клиенте. С конфигурацией выше клавиша клавиатуры XF86Back отправляется VNC-серверу при нажатии на кнопку назад на мыши и клавиша XF86Forward отправлена при нажатии на кнопку вперёд.\n\n"
    },
    {
      "title": "Сопоставление нажатий клавиш клавиатуры с нажатиями кнопок мыши на сервере",
      "level": 4,
      "content": "При надобности возможно сопоставить клавиши клавиатуры обратно в нажатия кнопок мыши на сервере. В этом случае хорошей идеей может быть использование клавиш клавиатуры, которые никогда не находятся ни на клиенте, ни на сервере. В примере ниже клавиши клавиатуры XF86Launch8/XF86Launch9 используются как кнопки мыши 8/9.\n\nКонфигурация Evrouter на клиентской части:\n\n```\n~/.evrouterrc\n```\n\n```\nWindow \"OtherComputer:0 - TigerVNC\": # Заголовок окна\n\n# Использование Shell для обхода повторений клавиш (см. мануал evrouter)\n\"USB mouse\" \"/dev/input/by-id/usb-Mouse-name-event-mouse\" none key/275 \"Shell/xte 'key XF86Launch8'\"\n\"USB mouse\" \"/dev/input/by-id/usb-Mouse-name-event-mouse\" none key/276 \"Shell/xte 'key XF86Launch9'\"\n```\n\nУстановите xautomation и xbindkeys на серверной части. Настройте xbindkeys для сопоставления клавиш XF86Launch8/XF86Launch9 на клики кнопок мыши 8/9 с xte.\n\n```\n~/.xbindkeysrc\n```\n\n```\n\"xte 'mouseclick 8'\"\n     XF86Launch8\n\n\"xte 'mouseclick 9'\"\n     XF86Launch9\n```\n\nЗапустите xbindkeys (xbindkeys -f ~/.xbindkeysrc). Сервер теперь начнёт сопоставлять клавиши XF86Launch8/XF86Launch9 на кнопки мыши 8/9.\n\n"
    },
    {
      "title": "Устранение неполадок",
      "level": 2,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\n"
    },
    {
      "title": "Black rectangle instead of window",
      "level": 3,
      "content": "Most probably, this is due to the application strictly requiring the composite Xorg extension. For example webkit based app: midori, psi-plus, etc.\n\nRestart vncserver in this case using something like following:\n\n```\n$ vncserver -geometry ... -depth 24 :1 +extension Composite\n```\n\nIt looks like Composite extension in VNC will work only with 24bit depth.\n\n"
    },
    {
      "title": "Empty black window with mouse cursor",
      "level": 3,
      "content": "Verify that the user is not logged into a physical X session, unless this option was configured with x0vncserver. Multiple X sessions for a single user are not supported, see https://github.com/TigerVNC/tigervnc/issues/684#issuecomment-494385395.\n\nConversely, trying to log into a local X session while a VNC server service is running for that user will likely not work, and you may get stuck on a splash screen when using a desktop environment.\n\n"
    },
    {
      "title": "No mouse cursor",
      "level": 3,
      "content": "If no mouse cursor is visible when using x0vncserver, start vncviewer as follows:\n\n```\n$ vncviewer DotWhenNoCursor=1 server\n```\n\nAlternatively, put DotWhenNoCursor=1 in the TigerVNC configuration file, which is at ~/.vnc/default.tigervnc by default.\n\n"
    },
    {
      "title": "Copying clipboard content from the remote machine",
      "level": 3,
      "content": "If copying from the remote machine to the local machine does not work, run autocutsel on the server, as mentioned in [1]:\n\n```\n$ autocutsel -fork\n```\n\nNow, press F8 to display the VNC menu popup, and select Clipboard: local -> remote option.\n\n"
    },
    {
      "title": "No window decoration / borders / titlebars / cannot move windows around",
      "level": 3,
      "content": "Start a window manager to fix an empty xterm frame. For example, on Xfce, run xfwm4 &.\n\n"
    },
    {
      "title": "Desktop environment is displaying only boxes for font",
      "level": 3,
      "content": "Some desktop environments might be missing necessary font to display ASCII characters. Install ttf-dejavu.\n\n"
    },
    {
      "title": "См. также",
      "level": 2,
      "content": "- https://github.com/TigerVNC/tigervnc\n\n"
    }
  ]
}