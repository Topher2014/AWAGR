{
  "title": "Pacman/Tips and tricks (Русский)",
  "url": "https://wiki.archlinux.org/title/Pacman/Tips_and_tricks_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ссылки по теме\n\n- Зеркала\n- Создание пакетов\n\nПолезные советы, которые расширят возможности используемых утилит и самого pacman, можно найти в статьях Базовые утилиты и Bash.\n\n"
    },
    {
      "title": "Обслуживание",
      "level": 2,
      "content": "Смотрите также Обслуживание системы.\n\n"
    },
    {
      "title": "С версией",
      "level": 4,
      "content": "При составлении отчётов об ошибках или обсуждении установленных пакетов может понадобиться составить список пакетов с версиями.\n\n- Пакеты, установленные явно: pacman -Qe.\n- Пакеты в группе группа: pacman -Sg группа.\n- Сторонние пакеты (как правило, скачаны и установлены вручную либо были удалены из репозиториев): pacman -Qm.\n- Пакеты из базы синхронизации: pacman -Qn.\n- Пакеты из базы синхронизации, установленные явно и не являющиеся зависимостями, в том числе опциональными: pacman -Qent.\n- Пакеты по регулярному выражению (regex): pacman -Qs regex.\n- Пакеты по регулярному выражению с пользовательским форматом вывода (требуется пакет expac): expac -s '%-30n %v' regex.\n\n"
    },
    {
      "title": "С размером",
      "level": 4,
      "content": "При необходимости освободить место на жёстком диске полезно будет узнать размер установленных пакетов. Можно определить как размер каждого пакета в отдельности, так и суммарный размер пакета и его зависимостей.\n\nСписок установленных пакетов с размером:\n\n```\n$ LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h\n```\n\nРазмеры пакетов вместе с зависимостями (два способа):\n\n- Установите пакет expac и выполните expac -H M '%m\\t%n' | sort -h.\n- Установите пакет pacgraphAUR и выполните pacgraph -c.\n\nРазмер загружаемых пакетов (если пакеты не указать, то будет выведен список всех пакетов в базе синхронизации):\n\n```\n$ expac -S -H M '%k\\t%n' пакеты\n```\n\nРазмер и описание явно установленных пакетов, не входящих ни в мета-пакет base, ни в группу пакетов xorg:\n\n```\n$ expac -H M \"%011m\\t%-20n\\t%10d\" $(comm -23 <(pacman -Qqen | sort) <({ pacman -Qqg xorg; expac -l '\\n' '%E' base; } | sort -u)) | sort -n\n```\n\nСписок пакетов, которым требуется обновление, с размером загрузки:\n\n```\n$ expac -S -H M '%k\\t%n' $(pacman -Qqu) | sort -sh\n```\n\nСписок только необязательных зависимостей:\n\n```\n$ expac -S \"%o\" пакет\n```\n\n"
    },
    {
      "title": "С датой",
      "level": 4,
      "content": "Список последних 20 установленных пакетов при помощи expac:\n\n```\n$ expac --timefmt='%Y-%m-%d %T' '%l\\t%n' | sort | tail -n 20\n```\n\nили в секундах с начала эпохи (1970-01-01 UTC):\n\n```\n$ expac --timefmt=%s '%l\\t%n' | sort -n | tail -n 20\n```\n\n"
    },
    {
      "title": "Не в группе или репозитории",
      "level": 4,
      "content": "Список явно установленных пакетов не из мета-пакета base:\n\n```\n$ comm -23 <(pacman -Qqe | sort) <(expac -l '\\n' '%E' base | sort)\n```\n\nСписок явно установленных пакетов, которые не входят в мета-пакет base или группу пакетов xorg:\n\n```\n$ comm -23 <(pacman -Qqe | sort) <({ pacman -Qqg xorg; expac -l '\\n' '%E' base; } | sort -u)\n```\n\nСписок установленных пакетов, которые не явлются зависимостями других пакетов и не принадлежат мета-пакету base или группе пакетов xorg:\n\n```\n$ comm -23 <(pacman -Qqt | sort) <({ pacman -Qqg xorg; echo base; } | sort -u)\n```\n\nТо же, но с описаниями:\n\n```\n$ expac -H M '%-20n\\t%10d' $(comm -23 <(pacman -Qqt | sort) <({ pacman -Qqg xorg; echo base; } | sort -u))\n```\n\nСписок пакетов, установленных не из репозитория имя_репозитория:\n\n```\n$ comm -23 <(pacman -Qq | sort) <(pacman -Sql имя_репозитория | sort)\n```\n\nСписок пакетов, установленных из репозитория имя_репозитория :\n\n```\n$ comm -12 <(pacman -Qq | sort) <(pacman -Sql имя_репозитория | sort)\n```\n\nСписок пакетов Arch Linux ISO, которые не входят в мета-пакет base:\n\n```\n$ comm -23 <(curl https://gitlab.archlinux.org/archlinux/archiso/-/raw/master/configs/releng/packages.x86_64) <(expac -l '\\n' '%E' base | sort)\n```\n\n"
    },
    {
      "title": "В разработке",
      "level": 4,
      "content": "Список установленных пакетов, которые считаются нестабильными и/или находятся в стадии активной разработки:\n\n```\n$ pacman -Qq | grep -Ee '-(bzr|cvs|darcs|git|hg|svn)$'\n```\n\n"
    },
    {
      "title": "Зависимости пакета",
      "level": 4,
      "content": "Чтобы узнать список зависимостей пакета, можно посмотреть вывод команды:\n\n```\n$ pacman -Qi пакет\n```\n\nДля использования в скриптах, чтобы не приходилось парсить вывод этой команды, можно использовать expac:\n\n```\n$ expac -S '%D' пакет\n```\n\n"
    },
    {
      "title": "Просмотр пакетов",
      "level": 3,
      "content": "Следующая команда выведет информацию об установленных пакетах:\n\n```\n$ pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'\n```\n\nУтилита fzf выдаёт данные в терминал в виде двух панелей: названия пакетов слева, информация о них — справа.\n\nНачните вводить буквы, чтобы искать пакет по названию; навигация по списку — стрелками или комбинациями клавиш Ctrl-j/Ctrl-k; нажатие Enter выводит информацию о пакете в формате less.\n\nСледующая команда fzf позволяет просматривать пакеты, о которых знает pacman (и установленные, и не установленные):\n\n```\n$ pacman -Slq | fzf --preview 'pacman -Si {}' --layout=reverse\n```\n\nКлавиши для навигации те же, но Enter не работает.\n\n"
    },
    {
      "title": "Список файлов пакета с размером",
      "level": 3,
      "content": "Если какой-то пакет стал занимать слишком много места на диске и вы хотите понять, какие файлы в этом виноваты, выполните:\n\n```\n$ pacman -Qql пакет | grep -v '/$' | xargs -r du -h | sort -h\n```\n\n"
    },
    {
      "title": "Поиск файлов без пакета-владельца",
      "level": 3,
      "content": "Если в вашей системе появились файлы, которые не принадлежат ни одному пакету (обычная ситуация, если вы не используете пакетный менеджер для установки программ), то стоит их найти и удалить.\n\nПервый способ найти такие файлы — командой pacreport --unowned-files (пакет pacutils) с правами root, которая, помимо прочего, выведет список \"ничьих\" файлов.\n\nВторой — составить список интересующих файлов и проверить их через pacman:\n\n```\n# find /etc /usr /opt | LC_ALL=C pacman -Qqo - 2>&1 >&- >/dev/null | cut -d ' ' -f 5-\n```\n\n"
    },
    {
      "title": "Отслеживание созданных пакетами файлов-сирот",
      "level": 3,
      "content": "Как правило, в нормально функционирующей системе со временем скапливаются файлы-призраки, вроде файлов состояний, логов, индексов и т.п.\n\nУтилита pacreport из пакета pacutils отслеживает такие файлы в привязке к создавшим их пакетам с помощью настроек в файле /etc/pacreport.conf (см. pacreport(1) § FILES).\n\nПример настроек (сокращённо):\n\n```\n/etc/pacreport.conf\n```\n\n```\n[Options]\nIgnoreUnowned = usr/share/applications/mimeinfo.cache\n\n[PkgIgnoreUnowned]\nalsa-utils = var/lib/alsa/asound.state\nbluez = var/lib/bluetooth\nca-certificates = etc/ca-certificates/trust-source/*\ndbus = var/lib/dbus/machine-id\nglibc = etc/ld.so.cache\ngrub = boot/grub/*\nlinux = boot/initramfs-linux.img\npacman = var/lib/pacman/local\nupdate-mime-database = usr/share/mime/magic\n```\n\nПосле этого команда pacreport --unowned-files с правами root выведет список файлов-сирот, если связанные с ними пакеты были удалены (или вместо старых файлов были созданы новые).\n\nКроме того, утилита aconfmgr (aconfmgr-gitAUR) может отслеживать изменённые файлы и файлы без пакета-владельца с помощью скрипта настройки.\n\n"
    },
    {
      "title": "Удаление неиспользуемых пакетов",
      "level": 3,
      "content": "Пакеты-сироты — это пакеты, которые когда-то были установлены как зависимости других пакетов, но на данный момент не требуются ни одному установленному пакету.\n\nОни со временем могут накапливаться в системе при удалении пакетов командой pacman -R пакет вместо pacman -Rs пакет, при установке зависимостей для сборки или при установке новых версий пакетов, которым больше не требуются некоторые старые зависимости.\n\nКоманда для рекурсивного удаления пакетов-сирот и их файлов настроек:\n\n```\n# pacman -Qtdq | pacman -Rns -\n```\n\nЕсли неиспользуемых пакетов найдено не было, pacman выведет сообщение ошибка: аргумент '-' указан без ввода в stdin. Это нормальное поведение команды pacman -Rns, которой не было передано аргументов. Можно избавиться от ошибки добавлением ifne(1) из пакета moreutils в начале второй команды.\n\n"
    },
    {
      "title": "Более тщательное определение ненужных пакетов",
      "level": 3,
      "content": "Иногда описанный выше метод находит не все ненужные пакеты, например, из-за циклических зависимостей.\n\nДля поиска таких пакетов:\n\n```\n$ pacman -Qqd | pacman -Rsu --print -\n```\n\nДля удаления всех пакетов из этого списка запустите команду без аргумента --print.\n\n"
    },
    {
      "title": "Удаление всех пакетов, кроме базовых",
      "level": 3,
      "content": "Если возникла необходимость очистить систему, оставив только базовый набор пакетов, то проще всего изменить причину установки ненужных пакетов на \"зависимость\", после чего удалить неиспользуемые зависимости.\n\nСначала измените причину установки всех явно установленных пакетов на \"зависимость\":\n\n```\n# pacman -D --asdeps $(pacman -Qqe)\n```\n\nЗатем измените причину установки пакетов, которые вы удалять не хотите, на \"установлен явно\":\n\n```\n# pacman -D --asexplicit base linux linux-firmware\n```\n\n- В последней команде следует указать все пакеты, которые должны остаться в системе. В статье Руководство по установке#Установка основных пакетов перечислены пакеты, которые нужны для нормального функционирования базовой системы.\n- Последняя команда удалит также и пакет программы-загрузчика. Система всё ещё будет загружаться, но изменить параметры загрузки станет невозможно.\n\nНаконец, удалите ненужные пакеты-зависимости, как описано в разделе #Удаление неиспользуемых пакетов.\n\n"
    },
    {
      "title": "Список зависимостей нескольких пакетов",
      "level": 3,
      "content": "Ниже приведена команда для вывода списка зависимостей нескольких пакетов, отсортированого в алфавитном порядке с удалением дубликатов.\n\n```\n$ LC_ALL=C pacman -Si пакеты | awk -F'[:<=>]' '/^Depends/ {print $2}' | xargs -n1 | sort -u\n```\n\nТо же самое, с помощью expac:\n\n```\n$ expac -l '\\n' %E -S пакеты | sort -u\n```\n\n"
    },
    {
      "title": "Список изменённых файлов для резервного копирования",
      "level": 3,
      "content": "Чтобы получить список файлов настроек, которые могут изменяться пользователем (то есть файлы, указанные в массиве backup файла PKGBUILD) и в которых есть пользовательские изменения, используйте команду:\n\n```\n# pacman -Qii | awk '/^MODIFIED/ {print $2}'\n```\n\nКоманда должна выполняться с правами root, чтобы в список вошли файлы, доступ на чтение которых есть только у суперпользователя (вроде файла /etc/sudoers).\n\nЭто можно использовать при выборочном резервном копировании системы или при копировании конфигурацию системы с одной машины на другую.\n\n- В разделе #Список изменённых файлов пакетов описано, как вывести список всех известных pacman изменённых файлов, а не только файлы с резервными копиями.\n- В разделе #Поиск файлов без пакета-владельца описано, как вывести список файлов, которые pacman не отслеживает.\n\n"
    },
    {
      "title": "Резервная копия базы данных pacman",
      "level": 3,
      "content": "Следующая команда создаст резервную копию локальной базы данных pacman:\n\n```\n$ tar -cjf pacman_database.tar.bz2 /var/lib/pacman/local\n```\n\nСохраните резервную копию на одном или нескольких внешних устройствах, вроде USB-накопителя, внешнего жесткого диска или CD-R.\n\nЧтобы восстановить базу данных, поместите файл pacman_database.tar.bz2 в каталог / и выполните:\n\n```\n# tar -xjvf pacman_database.tar.bz2\n```\n\n"
    },
    {
      "title": "Просмотр списка изменений пакета",
      "level": 3,
      "content": "При внесении изменений в состав пакета сопроводители часто подробно комментируют произведённые правки. Утилита pacologAUR позволяет просматривать эти комментарии из командной строки. Команда pacolog пакет выведет последние сообщения о правках для пакетов из официальных репозиториев и AUR.\n\n"
    },
    {
      "title": "Установка и восстановление",
      "level": 2,
      "content": "Альтернативные способы получения и восстановления пакетов.\n\n"
    },
    {
      "title": "Установка пакетов с CD/DVD или USB-накопителя",
      "level": 3,
      "content": "Загрузите пакеты или группы пакетов:\n\n```\n# cd ~/Packages\n# pacman -Syw --cachedir . base base-devel grub-bios xorg gimp\n# repo-add ./custom.db.tar.gz ./*\n```\n\nПо умолчанию pacman работает с деревом каталогов (и базами данных) на хосте, поэтому он не сможет правильно разрешать и загружать зависимости. Если необходимы все пакеты и зависимости, лучше создать временную пустую базу данных и работать с ней через опцию --dbpath:\n\n```\n# mkdir /tmp/blankdb\n# pacman -Syw --cachedir . --dbpath /tmp/blankdb base base-devel grub-bios xorg gimp\n# repo-add ./custom.db.tar.gz ./*\n```\n\nЗатем запишите каталог Packages на CD/DVD, USB-накопитель, внешний жёсткий диск и т.д.\n\nУстановка пакетов:\n\n1. Примонтируйте носитель:\n\nДля CD/DVD:\n\n```\n# mount --mkdir /dev/sr0 /mnt/repo\n```\n\nДля USB, жёсткого диска и т. п.:\n\n```\n# mount --mkdir /dev/sdxY /mnt/repo\n```\n\n2. Отредактируйте файл pacman.conf, добавив свой репозиторий перед всеми остальными (extra, core и др.). Это необходимо, чтобы пакеты на CD/DVD/USB получили приоритет над пакетами в стандартных репозиториях:\n\n```\n/etc/pacman.conf\n```\n\n```\n[custom]\nSigLevel = PackageRequired\nServer = file:///mnt/repo/Packages\n```\n\n3. В заключение, синхронизируйте базу данных pacman, чтобы получить доступ к новому репозиторию:\n\n```\n# pacman -Syu\n```\n\n"
    },
    {
      "title": "Собственный локальный репозиторий",
      "level": 3,
      "content": "Скрипт repo-add (входит в состав pacman) может создать базу данных для личного репозитория. Команда repo-add --help выведет краткую информацию о работе утилиты. База данных пакетов представляет собой tar-файл, возможно сжатый, с суффиксом .db или .files, за которым следует суффикс архива .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.zst или .tar.Z. На момент запуска утилиты базы может ещё не быть, но родительские каталоги уже должны быть созданы.\n\nСледующая команда добавляет новый пакет к базе данных или заменяет старую версию существующего пакета на более новую:\n\n```\n$ repo-add /путь/к/репозиторию.db.tar.gz /путь/к/пакету-1.0-1-x86_64.pkg.tar.zst\n```\n\nДля работы repo-add база данных и пакеты могут храниться в разных каталогах, но когда вы станете работать с базой через pacman, её нужно объединить с пакетами в одном месте. Хранение всех пакетов репозитория в одном каталоге также позволяет использовать подстановочные символы в командной оболочке, чтобы добавлять или обновлять несколько пакетов за раз:\n\n```\n$ repo-add /путь/к/репозиторию.db.tar.gz /путь/к/*.pkg.tar.zst\n```\n\nЕсли вы собираетесь поддерживать несколько версий пакета для разных архитектур, то следует соблюдать некоторые предосторожности. Под каждую архитектуру должен быть выделен отдельный каталог:\n\n```\n$ tree ~/customrepo/ | sed \"s/$(uname -m)/архитектура/g\"\n```\n\n```\n/home/archie/customrepo/\n└── архитектура\n    ├── customrepo.db -> customrepo.db.tar.xz\n    ├── customrepo.db.tar.xz\n    ├── customrepo.files -> customrepo.files.tar.xz\n    ├── customrepo.files.tar.xz\n    └── personal-website-git-b99cce0-1-архитектура.pkg.tar.zst\n\n1 directory, 5 files\n```\n\nПри запуске repo-add проверяет, подходят ли пакеты для добавления в базу. Если нет, то появится сообщение об ошибке:\n\n```\n==> ERROR: '/home/archie/customrepo/архитектура/foo-архитектура.pkg.tar.zst' does not have a valid database archive extension.\n```\n\nУтилита repo-remove удаляет пакеты из базы данных:\n\n```\n$ repo-remove /путь/к/repo.db.tar.gz пакеты\n```\n\nПосле создания локальной базы данных укажите репозиторий в файле pacman.conf на каждой системе, где он будет использоваться. Пример настроек пользовательского репозитория можно найти в самом файле. Название репозитория представляет собой имя файла базы данных без суффикса. В примере выше репозиторий называется repo. Ссылаться на репозиторий можно по URL file:// или через HTTP http://localhost/path/to/directory.\n\nПри желании добавьте свой репозиторий в список неофициальных репозиториев, чтобы сообщество могло извлечь из него пользу.\n\n"
    },
    {
      "title": "Сетевой кэш pacman с совместным доступом",
      "level": 3,
      "content": "Если в вашей локальной сети есть несколько машин с Arch Linux, сетевой кэш позволит значительно уменьшить время загрузки новых пакетов. При этом важно помнить, что в кэше не должно быть пакетов для разных архитектур (например, i686 и x86_64), иначе возникнут проблемы.\n\n"
    },
    {
      "title": "Кэш только на чтение",
      "level": 4,
      "content": "В качестве быстрого решения можно запустить простой временный веб-сервер, который другие компьютеры могут использовать в качестве первого зеркала.\n\nСперва сделайте базы данных pacman доступными в каталоге, который будет обслуживаться веб-сервером:\n\n```\n# ln -s /var/lib/pacman/sync/*.db /var/cache/pacman/pkg/\n```\n\nЗатем запустите веб-сервер, раздающий файлы из этого каталога. Например, можно использовать Python-модуль http.server:\n\n```\n$ python -m http.server -d /var/cache/pacman/pkg/\n```\n\n```\n$ python -m http.server -d /var/cache/pacman/pkg/ --bind 127.0.0.1 8080\n```\n\nПосле этого на каждом клиентском компьютере отредактируйте файл /etc/pacman.d/mirrorlist, добавив адрес запущенного вами веб-сервера в качестве первого зеркала:\n\n```\n/etc/pacman.d/mirrorlist\n```\n\n```\nServer = http://ip-адрес-сервера:порт\n...\n```\n\nNote: **Не** \n\nВ качестве более автономного решения можно использовать darkhttpd. Замените ранее показанную команду python, например, на такую:\n\n```\n$ sudo -u http darkhttpd /var/cache/pacman/pkg --no-server-id\n```\n\nТакже для удобства можно запустить darkhttpd как службу systemd; смотрите раздел systemd (Русский)#Написание файлов юнитов.\n\nМожно использовать miniserve — небольшой веб-сервер на Rust:\n\n```\n$ miniserve /var/cache/pacman/pkg\n```\n\nОтредактируйте /etc/pacman.d/mirrorlist как описано выше, указав тот URL, на котором доступен mimiserve.\n\nЕсли у вас уже есть веб-сервер, запущенный для каких-то других целей, можно использовать его как сервер локального репозитория вместо описанных ранее вариантов. Например, для сервера nginx добавьте в настройки блок правил server с указанием прослушивать порт 8080:\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nserver {\n    listen 8080;\n    root /var/cache/pacman/pkg;\n    server_name myarchrepo.localdomain;\n    try_files $uri $uri/;\n}\n```\n\nНе забудьте после этого перезапустить службу nginx.service.\n\n"
    },
    {
      "title": "Overlay-монтирование кэша только на чтение",
      "level": 4,
      "content": "Можно настроить использование отдельной машины в локальной сети как read-only кэш пакетов. Для этого используется overlay-монтирование каталога /var/cache/pacman/pkg. Преимущество такой конфигурации — на сервере установлен полный набор новейших пакетов, которые используются другими машинами; в результате можно сэкономить внешнюю (из локальной сети) пропускную способность.\n\nПример:\n\n```\n# mkdir /tmp/remote_pkg /mnt/workdir_pkg /tmp/pacman_pkg\n# sshfs remote_username@remote_pkgcache_addr:/var/cache/pacman/pkg /tmp/remote_pkg -C\n# mount -t overlay overlay -o lowerdir=/tmp/remote_pkg,upperdir=/var/cache/pacman/pkg,workdir=/mnt/workdir_pkg /tmp/pacman_pkg\n```\n\nПосле этого запустите pacman с опцией --cachedir /tmp/pacman_pkg:\n\n```\n# pacman -Syu --cachedir /tmp/pacman_pkg\n```\n\n"
    },
    {
      "title": "Распределённый кэш только на чтение",
      "level": 4,
      "content": "В Arch Linux есть несколько инструментов, которые выполняют автоматический поиск кэша пакетов на других компьютерах в локальной сети. Среди них pacredir, pacserve, pkgdistcacheAUR и paclanAUR. pkgdistcache использует Avahi вместо чистого UDP, который может работать лучше в некоторых домашних сетях, где используется связка WiFi и Ethernet.\n\nТакже раньше использовались утилиты PkgD и multipkg, но их разработка была прекращена.\n\n"
    },
    {
      "title": "Кэш на чтение и запись",
      "level": 4,
      "content": "Чтобы несколько машин могли работать с общим кэшем пакетов, откройте совместный доступ к каталогу /var/cache/pacman/ с помощью любого сетевого протокола монтирования файловых систем. В этом разделе описано, как использовать SSHFS для организации совместного доступа к кэшу пакетов и некоторым каталогам с библиотеками в локальной сети. Имейте в виду, что сетевой кэш может быть довольно медленным, в том числе и из-за выбранной файловой системы.\n\nВо-первых, установите любой пакет с поддержкой сетевых файловых систем: sshfs, curlftpfs, samba или nfs-utils.\n\n- Полезную информацию о работе с sshfs можно найти в статье Ключи SSH.\n- smbfs по умолчанию не умеет работать с файлами, имена которых содержат двоеточия. В итоге клиент будет загружать такие пакеты заново при каждом обновлении. Чтобы это предотвратить, используйте на системе-клиенте опцию монтирования mapchars.\n\nТеперь, чтобы открыть совместный доступ к пакетам, смонтируйте каталог сервера /var/cache/pacman/pkg в каталог /var/cache/pacman/pkg на клиентских машинах.\n\n"
    },
    {
      "title": "Двухсторонний кэш на основе rsync",
      "level": 4,
      "content": "Другой подход к созданию сетевого кэша — использовать rsync. Настройте сервер кэша, запустите на нём демон rsync и выполните двухстороннюю синхронизацию между сервером и клиентскими машинами по протоколу rsync. В этом случае имена файлов с двоеточиями проблемы не создадут.\n\nНиже приведён пример работы с кэшем на машине-клиенте. Команда uname -m позволяет выполнить синхронизацию пакетов с учётом архитектуры:\n\n```\n# rsync rsync://server/share_$(uname -m)/ /var/cache/pacman/pkg/ ...\n # pacman ...\n # paccache ...\n # rsync /var/cache/pacman/pkg/ rsync://server/share_$(uname -m)/  ...\n```\n\n"
    },
    {
      "title": "Динамический обратный прокси-кэш на основе nginx",
      "level": 4,
      "content": "Сервер nginx может работать в качестве посредника для запросов пакетов на официальные upstream-зеркала, кэшируя ответы на локальном диске. Все последующие запросы к этим пакетам будут адресоваться к локальному кэшу, минимизируя интернет-трафик при обновлении большого количества компьютеров.\n\nВ примере ниже кэширующий сервер запущен на адресе http://cache.domain.example:8080/. Пакеты хранятся в каталоге /srv/http/pacman-cache/.\n\nУстановите nginx на машине, предназначенной для хранения кэша. Создайте каталог кэша с необходимыми разрешениями, чтобы nginx мог записывать в него файлы:\n\n```\n# mkdir /srv/http/pacman-cache\n# chown http:http /srv/http/pacman-cache\n```\n\nИспользуйте этот файл настроек в качестве отправной точки для редактирования /etc/nginx/nginx.conf. Проверьте, чтобы директива resolver работала так, как ожидается. В блоках правил исходящих запросов server укажите директиву proxy_pass с адресами официальных зеркал (пример ожидаемого формата этой директивы можно найти в самом файле настроек). После настройки включите и запустите nginx.\n\nЧтобы использовать кэш на каждом компьютере с Arch Linux (включая тот, который хранит кэш), нужно добавить следующую строку в начало файла mirrorlist:\n\n```\n/etc/pacman.d/mirrorlist\n```\n\n```\nServer = http://cache.domain.example:8080/$repo/os/$arch\n...\n```\n\n"
    },
    {
      "title": "Кэширующий прокси-сервер Pacoloco",
      "level": 4,
      "content": "Pacoloco — простой прокси-сервер, кэширующий пакеты из репозиториев pacman. Также он поддерживает автоматическую предзагрузку обновлений для ранее скачивавшихся пакетов.\n\nУстанавливается с пакетом pacoloco. Откройте файл настроек и добавьте зеркала pacman:\n\n```\n/etc/pacoloco.yaml\n```\n\n```\nport: 9129\nrepos:\n  mycopy:\n    urls:\n      - http://mirror.lty.me/archlinux\n      - http://mirrors.kernel.org/archlinux\n```\n\nПерезапустите pacoloco.service и после этого прокси-репозиторий будет доступен по адресу http://сервер:9129/repo/mycopy.\n\n"
    },
    {
      "title": "Кэширующий прокси-сервер Flexo",
      "level": 4,
      "content": "Flexo — ещё один кэширующий прокси для репозиториев pacman. Flexo доступен в пакете flexo-gitAUR. После установки запустите службу flexo.service.\n\nFlexo по умолчанию работает на порте 7878. Добавьте строку Server = http://мой_сервер:7878/$repo/os/$arch в самое начало файла /etc/pacman.d/mirrorlist, чтобы pacman загружал пакеты через Flexo.\n\n"
    },
    {
      "title": "Синхронизация кэша пакетов специальными программами",
      "level": 4,
      "content": "Утилиты Syncthing и Resilio Sync можно использовать для синхронизации каталогов кэша pacman (например, /var/cache/pacman/pkg).\n\n"
    },
    {
      "title": "Предотвращение нежелательной очистки кэша пакетов",
      "level": 4,
      "content": "По умолчанию команда pacman -Sc очищает кэш от старых версий пакетов, которые были удалены из системы. В условиях совместного доступа к кэшу от нескольких машин в локальной сети pacman не может достоверно определить, какие пакеты установлены на каждой системе. По этой причине очистку кэша нужно ограничить.\n\nЧтобы удалялись только старые архивы:\n\n```\n/etc/pacman.conf\n```\n\n```\n[options]\nCleanMethod = KeepCurrent\n```\n\n"
    },
    {
      "title": "Воссоздание пакета из файловой системы",
      "level": 3,
      "content": "С помощью пакета fakepkgAUR можно воссоздать пакет из файловой системы. Файлы будут собраться в том виде, в каком они есть, следовательно, сделанные в них изменения войдут в \"собранный\" пакет. По этой причине распространять пакет среди других пользователей не рекомендуется; для этого гораздо лучше подойдёт система сборки Arch или архив Arch Linux.\n\n"
    },
    {
      "title": "Список установленных пакетов",
      "level": 3,
      "content": "Создание списка явно установленных пакетов может оказаться полезным, если вы собираетесь сделать резервную копию системы или ускорить процесс установки на новой машине:\n\n```\n$ pacman -Qqe > pkglist.txt\n```\n\n- С параметром -t в список не будут включены пакеты, которые нужны другим явно установленным пакетам. При переустановке по этому списку они всё равно будут установлены, но уже как зависимости.\n- С опцией -n в список не войдут внешние пакеты (например, из AUR).\n- Команда comm -13 <(pacman -Qqdt | sort) <(pacman -Qqdtt | sort) > optdeplist.txt создаст список установленных опциональных зависимостей, которые можно будет переустановить с параметром --asdeps.\n- Команда pacman -Qqem > foreignpkglist.txt создаст список пакетов из AUR и других внешних пакетов, которые были установлены явно.\n\nХук pacman позволит автоматизировать обновление списка пакетов. Пример:\n\n```\n[Trigger]\nOperation = Install\nOperation = Remove\nType = Package\nTarget = *\n\n[Action]\nWhen = PostTransaction\nExec = /bin/sh -c '/usr/bin/pacman -Qqe > /etc/pkglist.txt'\n```\n\n"
    },
    {
      "title": "Установка пакетов по списку",
      "level": 3,
      "content": "Следующая команда установит пакеты в соответствии с ранее созданным списком, при этом уже установленные пакеты переустанавливаться не будут:\n\n```\n# pacman -S --needed - < pkglist.txt\n```\n\nВ списке могут оказаться внешние пакеты, из AUR или установленные локально. Чтобы их исключить, вместо предыдущей команды выполните следующую:\n\n```\n# pacman -S --needed $(comm -12 <(pacman -Slq | sort) <(sort pkglist.txt))\n```\n\nНаконец, убедитесь, что установленные в системе пакеты совпадают со списком, и удалите всё, что в него не входит:\n\n```\n# pacman -Rsu $(comm -23 <(pacman -Qq | sort) <(sort pkglist.txt))\n```\n\n"
    },
    {
      "title": "Список изменённых файлов пакетов",
      "level": 3,
      "content": "Если вы предполагаете, что какие-то файлы были повреждены (например, из-за ошибки программы или аппаратного обеспечения), стоит проверить их хэш-суммы. Сделать это можно с помощью пакета pacutils:\n\n```\n# paccheck --md5sum --quiet\n```\n\nВосстановление базы данных описано в разделе #Восстановление локальной базы данных. Файлы mtree можно также извлечь как .MTREE из соответствующих файлов пакета.\n\nNote: **не** \n\n"
    },
    {
      "title": "Переустановка всех пакетов",
      "level": 3,
      "content": "Чтобы переустановить все пакеты, установленные из базы синхронизации, выполните:\n\n```\n# pacman -Qqn | pacman -S -\n```\n\nСторонние пакеты (AUR) придётся установить отдельно; найти их можно командой pacman -Qqm.\n\nПо умолчанию при переустановке пакета pacman оставляет причину установки без изменений.\n\n"
    },
    {
      "title": "Восстановление локальной базы данных",
      "level": 3,
      "content": "См. pacman/Восстановление локальной базы данных.\n\n"
    },
    {
      "title": "Восстановление USB-носителя из существующей установки",
      "level": 3,
      "content": "Если вы установили Arch на USB-носитель и испортили его (например, выдернув носитель в процессе записи), стоит попробовать переустановить все пакеты. Возможно, это восстановит работоспособность флешки. Предположим, USB-носитель смонтирован в каталог /newarch:\n\n```\n# pacman -S $(pacman -Qq --dbpath /newarch/var/lib/pacman) --root /newarch --dbpath /newarch/var/lib/pacman\n```\n\n"
    },
    {
      "title": "Просмотр отдельного файла внутри файла .pkg",
      "level": 3,
      "content": "Например, вы хотите увидеть содержимое файла /etc/systemd/logind.conf в пакете systemd:\n\n```\n$ bsdtar -xOf /var/cache/pacman/pkg/systemd-250.4-2-x86_64.pkg.tar.zst etc/systemd/logind.conf\n```\n\nДля просмотра файлов архива можно использовать vim:\n\n```\n$ vim /var/cache/pacman/pkg/systemd-250.4-2-x86_64.pkg.tar.zst\n```\n\n"
    },
    {
      "title": "Список приложений, использующих устаревшие библиотеки",
      "level": 3,
      "content": "Внесённые обновлением изменения не применятся к ранее запущенным процессам. Они продолжат использовать старые версии библиотек даже после обновления. Если какая-то из этих библиотек содержит уязвимость или опасный баг, продолжать её использовать — не самая лучшая идея.\n\nПроцессы, зависящие от обновившихся библиотек, можно найти либо с помощью htop, который подсвечивает имена затронутых программ, либо с помощью такой команды на основе lsof, которая также выводит имена библиотек:\n\n```\n# lsof +c 0 | grep -w DEL | awk '1 { print $1 \": \" $NF }' | sort -u\n```\n\nЭто решение позволяет найти только файлы, которые процессы постоянно держат открытыми, так что оно подходит в основном только для поиска обновившихся библиотек (файлы .so). Оно не покажет, например, зависимости приложений Java или Python.\n\n"
    },
    {
      "title": "Установка контента только на нужном языке",
      "level": 3,
      "content": "Многие пакеты по умолчанию устанавливают документацию и переводы на нескольких языках. Существует ряд программ, разработанных для удаления таких ненужных файлов. Например, утилита localepurgeAUR удалит лишние файлы локалей, если запустить её после установки пакета. Более прямой подход к этой проблеме — указать директиву NoExtract в файле pacman.conf, что предотвратит установку ненужных файлов.\n\nНапример, чтобы не устанавливать переводы справки, кроме локали C, добавьте:\n\n```\nNoExtract = usr/share/help/* !usr/share/help/C/*\n```\n\nЧтобы не устанавливать HTML-документацию приложений GTK, добавьте:\n\n```\nNoExtract = usr/share/gtk-doc/html/*\n```\n\nNote: **всех** \n\nДля установки только необходимых локалей:\n\n```\nNoExtract = usr/share/locale/* usr/share/X11/locale/*/* usr/share/i18n/locales/* opt/google/chrome/locales/* !usr/share/X11/locale/C/*\nNoExtract = !usr/share/X11/locale/compose.dir !usr/share/X11/locale/iso8859-1/*\nNoExtract = !*locale*/en*/* !usr/share/*locale*/locale.*\nNoExtract = !usr/share/*locales/en_?? !usr/share/*locales/i18n* !usr/share/*locales/iso*\nNoExtract = usr/share/i18n/charmaps/* !usr/share/i18n/charmaps/UTF-8.gz !usr/share/i18n/charmaps/ANSI_X3.4-1968.gz\nNoExtract = !usr/share/*locales/trans*\nNoExtract = !usr/share/*locales/C !usr/share/*locales/POSIX\n```\n\nЧтобы не устанавливать переводы man-страниц:\n\n```\nNoExtract = usr/share/man/* !usr/share/man/man*\n```\n\nЧтобы не устанавливать файлы языков в vim-runtime:\n\n```\nNoExtract = usr/share/vim/vim*/lang/*\n```\n\nДля установки только английского языка в приложениях Qt:\n\n```\nNoExtract = usr/share/*/translations/*.qm usr/share/*/nls/*.qm usr/share/qt/phrasebooks/*.qph usr/share/qt/translations/*.pak !*/en-US.pak\n```\n\nДля установки только английского языка в приложения Electron:\n\n```\nNoExtract = usr/share/*/locales/*.pak opt/*/locales/*.pak usr/lib/*/locales/*.pak !*/en-US.pak\n```\n\nДля установки только английской справки в LibreOffice:\n\n```\nNoExtract = usr/lib/libreoffice/help/en-US/*\n```\n\nДля установки только английского языка в OnlyOffice:\n\n```\nNoExtract = opt/onlyoffice/desktopeditors/dictionaries/* !opt/onlyoffice/desktopeditors/dictionaries/en_US/*\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/locale/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/resources/help/*/* !*/help/en/*\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/resources/symboltable/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/documenteditor/forms/locale/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/spreadsheeteditor/main/resources/formula-lang/* !*/en.json !*/en_desc.json\nNoExtract = opt/onlyoffice/desktopeditors/converter/empty/*/* !opt/onlyoffice/desktopeditors/converter/empty/en-US/*\n```\n\nДля установки только английского словаря Emoji в iBus:\n\n```\nNoExtract = usr/share/ibus/dicts/emoji-*.dict !usr/share/ibus/dicts/emoji-en.dict\n```\n\n"
    },
    {
      "title": "Установка пакетов при плохом соединении",
      "level": 3,
      "content": "При попытке скачать пакет через плохое соединение (например, в поезде с помощью мобильного телефона) используйте опцию --disable-download-timeout, чтобы уменьшить вероятность получения подобных ошибок:\n\n```\nerror: failed retrieving file […] Operation too slow. Less than 1 bytes/sec transferred the last 10 seconds\n```\n\nили\n\n```\nerror: failed retrieving file […] Operation timed out after 10014 milliseconds with 0 out of 0 bytes received\n```\n\n"
    },
    {
      "title": "Увеличение скорости загрузки",
      "level": 3,
      "content": "При загрузке пакетов pacman использует зеркала в том порядке, в каком они перечислены в файле /etc/pacman.d/mirrorlist. Зеркало, указанное первым, будет использоваться по умолчанию, и совсем не обязательно оно окажется для вас самым быстрым. Подробнее о выборе зеркал см. Зеркала.\n\nСкорость загрузки пакетов можно повысить, если включить параллельную загрузку или использовать сторонние приложения для загрузки вместо встроенного в pacman менеджера закачек.\n\nВ любом случае, прежде чем делать какие-либо изменения, убедитесь, что используете последнюю версию pacman:\n\n```\n# pacman -Syu\n```\n\n"
    },
    {
      "title": "Powerpill",
      "level": 4,
      "content": "Powerpill — обёртка для pacman, которая использует параллельную и сегментированную загрузку для повышения скорости.\n\n"
    },
    {
      "title": "wget",
      "level": 4,
      "content": "Эта утилита будет очень полезна, если вам нужны более сложные настройки прокси, чем это позволяют возможности pacman.\n\nУстановите пакет wget, после чего отредактируйте /etc/pacman.conf, указав в разделе [options] следующую строку:\n\n```\nXferCommand = /usr/bin/wget --passive-ftp --show-progress -c -q -N %u\n```\n\nЧтобы не указывать параметры wget в файле /etc/pacman.conf, можно отредактировать непосредственно файл настроек wget — либо общесистемный файл /etc/wgetrc, либо пользовательский $HOME/.wgetrc.\n\n"
    },
    {
      "title": "aria2",
      "level": 4,
      "content": "aria2 — небольшая загрузочная утилита с поддержкой возобновляемой и сегментной загрузки по протоколам HTTP/HTTPS и FTP. aria2 создаёт несколько одновременных соединений с зеркалом Arch, что увеличивает скорость загрузки файлов и пакетов.\n\nУстановите aria2, затем добавьте следующую строку в раздел [options] файла /etc/pacman.conf:\n\n```\nXferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=2 --max-connection-per-server=2 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --summary-interval=60 --timeout=5 --dir=/ --out %o %u\n```\n\nПараметры aria2 описаны в руководстве aria2c(1) § OPTIONS. Некоторые разъяснения о параметрах последней команды:\n\n- -d, --dir: каталог для сохранения скачиваемых файлов.\n- -o, --out: итоговые имена скачиваемых файлов.\n- %o: локальное имя файла в представлении pacman.\n- %u: URL загрузки в представлении pacman.\n\n"
    },
    {
      "title": "Другие приложения",
      "level": 4,
      "content": "Есть и другие загрузочные приложения, с которыми может работать pacman. Ниже приводится список в виде соответствующих настроек XferCommand:\n\n- snarf: XferCommand = /usr/bin/snarf -N %u\n- lftp: XferCommand = /usr/bin/lftp -c pget %u\n- axel: XferCommand = /usr/bin/axel -n 2 -v -a -o %o %u\n- hget: XferCommand = /usr/bin/hget %u -n 2 -skip-tls false (подробнее см. документацию на странице проекта)\n- saldl: XferCommand = /usr/bin/saldl -c6 -l4 -s2m -o %o %u (подробнее см. документацию на странице проекта)\n\n"
    },
    {
      "title": "Утилиты",
      "level": 2,
      "content": "- Lostfiles — Скрипт для обнаружения файлов, не принадлежащих ни одному пакету.\n\n- pacutils — Библиотека для программ, основанных на libalpm.\n\n- pkgfile — Утилита, которая находит, какому пакету принадлежит файл.\n\n- pkgtools — Коллекция скриптов для пакетов Arch Linux.\n\n- pkgtop — Интерактивный менеджер пакетов и системный менеджер, разработанный для GNU/Linux.\n\n- Powerpill — Использует параллельную и сегментную загрузку с помощью aria2 и Reflector, чтобы ускорить скачивание пакетов через pacman.\n\n- repoctl — Утилита для управления локальными репозиториями.\n\n- repose — Программа для создания репозиториев Arch Linux.\n\n- snap-pac — Заставляет pacman использовать snapper для создания снимков до и после транзакции, как в YaST из openSUSE.\n\n- vrms-arch — Виртуальный Ричард Столлман подсказывает тебе, какие несвободные пакеты установлены в системе.\n\n"
    },
    {
      "title": "Графические",
      "level": 3,
      "content": "- Apper — Менеджер пакетов на основе PackageKit; написан на C++ с использованием Qt 5. Поддержка метаданных AppStream.\n\n- Deepin App Store — Сторонний магазин приложений для DDE, собранный с DTK используя PackageKit. Поддерживает метаданные AppStream.\n\n- Discover — Менеджер приложений на основе PackageKit; написан на C++/QML с использованием Qt 5. Поддержка метаданных AppStream, Flatpak и обновления прошивок.\n\n- GNOME PackageKit — Менеджер пакетов на основе PackageKit, написан на Си с использованием GTK 3.\n\n- GNOME Software — Менеджер пакетов на основе PackageKit, написан на Си с использованием GTK 3. Поддержка метаданных AppStream, Flatpak и обновления прошивок\n\n- pcurses — Обёртка для pacman на C++ с текстовым интерфейсом curses.\n\n- tkPacman — Tk-обёртка для pacman, написанная на Tcl.\n\n- bauh — ранее известный как fpakman, - это графический интерфейс для управления программным обеспечением Linux (пакетами/приложениями). В настоящее время он поддерживает следующие форматы: AppImage, пакеты Debian и Arch Linux (включая AUR), Flatpak, Snap и веб-приложения.\n\n"
    }
  ]
}