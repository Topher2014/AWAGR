{
  "title": "Systemd-boot (Español)",
  "url": "https://wiki.archlinux.org/title/Systemd-boot_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2018-12-20** \n\nArtículos relacionados\n\n- Arch boot process (Español)\n- Secure Boot\n- Unified Extensible Firmware Interface (Español)\n\nsystemd-boot, anteriormente llamado gummiboot, es un sencillo gestor de arranque UEFI que ejecuta imágenes EFI configuradas. La entrada predeterminada es seleccionada por un patrón configurado (glob) o un menú en pantalla. Se incluye en el paquete systemd, que se instala en un sistema Arch de forma predeterminada.\n\nEs fácil de configurar, pero solo puede iniciar ejecutables EFI, tales como EFISTUB (Español) del kernel de Linux, Intérprete de órdenes de UEFI, GRUB o Windows Boot Manager.\n\n"
    },
    {
      "title": "Instalar el gestor de arranque EFI",
      "level": 3,
      "content": "Para instalar el gestor de arranque EFI systemd-boot primero asegúrese de que el sistema haya arrancado en modo UEFI y que las variables de UEFI son accesibles. Esto se puede verificar ejecutando la orden efivar --list.\n\nCabe señalar que systemd-boot solo puede cargar el kernel EFISTUB desde la EFI system partition (Español) (ESP). Para mantener el kernel actualizado, es más sencillo y, por lo tanto, mas recomendable montar la ESP en /boot. Si la ESP no está montada en /boot, los archivos kernel y de initramfs deben copiarse en dicha ESP. Consulte EFI system partition (Español)#Puntos de montaje alternativos para más detalles.\n\nespse usará a lo largo de esta página para indicar el punto de montaje ESP, es decir, /boot.\n\nCon la ESP montada en esp, utilice bootctl(1) para instalar systemd-boot en la partición del sistema EFI ejecutando:\n\n```\n# bootctl --path=esp install\n```\n\nEsto copiará el cargador de arranque systemd-boot a la partición EFI: en un sistema de arquitectura x64 los dos binarios idénticos esp/EFI/systemd/systemd-bootx64.efi y esp/EFI/BOOT/BOOTX64.EFI se transferirán a la ESP. A continuación, establecerá systemd-boot como la aplicación EFI predeterminada (entrada de arranque predeterminada) cargada por el gestor de arranque EFI («EFI Boot Manager»).\n\nLuego, vaya a la sección #Configuración para agregar entradas de arranque para que systemd-boot funcione correctamente en el momento del arranque.\n\n"
    },
    {
      "title": "Actualizar el gestor de arranque EFI",
      "level": 3,
      "content": "Siempre que haya una nueva versión de systemd-boot, el gestor de arranque debe ser actualizado por el usuario. Esto se puede realizar bien manualmente o bien la actualización se puede activar automáticamente utilizando los hooks de pacman. Los dos enfoques se describen a continuación.\n\n"
    },
    {
      "title": "Actualización manual",
      "level": 4,
      "content": "systemd-boot pueden ser actualizado por systemd-boot. Si el parámetro path no se especifica, /efi, /boot, y /boot/efi se verifican a su vez.\n\n```\n# bootctl update\n```\n\nSi la ESP está montada en una ubicación diferente, la opción --path= puede pasar la ruta apropiada. Por ejemplo:\n\n```\n# bootctl --path=esp update\n```\n\n"
    },
    {
      "title": "Actualización automática",
      "level": 4,
      "content": "El paquete systemd-boot-pacman-hookAUR proporciona un hook de pacman para automatizar el proceso de actualización. Al instalar el paquete, este agregará un hook que se ejecutará cada vez que se actualice el paquete systemd. En otro caso, para replicar lo que hace el paquete systemd-boot-pacman-hook sin instalarlo, coloque el siguiente hook de pacman en el directorio /etc/pacman.d/hooks/:\n\n```\n/etc/pacman.d/hooks/systemd-boot.hook\n```\n\n```\n[Trigger]\nType = Package\nOperation = Upgrade\nTarget = systemd\n\n[Action]\nDescription = Updating systemd-boot\nWhen = PostTransaction\nExec = /usr/bin/bootctl update\n```\n\n"
    },
    {
      "title": "Configurar el cargador",
      "level": 3,
      "content": "La configuración del cargador se coloca en esp/loader/loader.conf, y está compuesto por las siguientes opciones:\n\n- default — entrada por defecto para seleccionar como se define #Añadir entradas al cargador; se da sin el sufijo .conf y se puede utilizar un comodín como arch-*;\n- timeout — tiempo de espera del menú, en segundos. Si este no se ha establecido, el menú solo se muestra cuando se mantiene pulsada la tecla espaciadora (aunque también funcionan la mayoría de las otras teclas) durante el arranque;\n- editor — si se quiere activar el editor de los parámetros del kernel o no. yes (por defecto) es para activar, no es para desactivar. Dado que el usuario puede añadir init=/bin/bash para puentear la contraseña de root y acceder como tal, se recomienda encarecidamente establecer esta opción en no;\n- auto-entries — muestra entradas automáticas para Windows, EFI Shell y Default Loader si se configura en 1 (default), 0 para ocultar;\n- auto-firmware — muestra la entrada para reiniciar en las configuraciones de firmware UEFI si está configurado en 1 (default), 0 para ocultar;\n- console-mode — cambia el modo de consola UEFI: 0 para 80x25, 1 para 80x50, 2 y superior para modos no estándar proporcionado por el firmware del dispositivo, si existe, auto selecciona un modo adecuado automáticamente, max para el modo más alto disponible, keep (default) para el modo de firmware seleccionado.\n\nConsulte loader.conf(5) § OPTIONS para ver la lista completa de opciones.\n\nHe aquí un ejemplo de configuración del cargador:\n\n```\nesp/loader/loader.conf\n```\n\n```\ndefault  arch\ntimeout  4\nconsole-mode max\neditor   no\n```\n\n- default y timeout se pueden cambiar en el menú de inicio y los cambios se almacenarán como variables EFI, sobrescribiendo estas opciones.\n- Un archivo básico de configuración del cargador se encuentra en /usr/share/systemd/bootctl/loader.conf.\n\n"
    },
    {
      "title": "Añadir entradas al cargador",
      "level": 3,
      "content": "bootctl busca elementos del menú de arranque en esp/loader/entries/*.conf —cada archivo encontrado debe contener exactamente un cargador—. Las opciones posibles son:\n\n- title — nombre del sistema operativo. Necesario.\n\n- version — versión del kernel, que se muestra solamente cuando existan varias entradas con el mismo título. Opcional.\n\n- machine-id — identificador de la máquina desde /etc/machine-id, que se muestra solamente cuando existan varias entradas con la misma versión y título. Opcional.\n\n- efi — programas EFI a iniciar, que se encuentren en la ESP (esp); por ejemplo, /vmlinuz-linux. Tanto este parámetro como linux (véase a continuación) son necesarios.\n\n- options — opciones de línea de órdenes para pasar al programa EFI o los parámetros del kernel. Opcional, pero es necesario al menos initrd=ruta-a-efi y root=dev para arrancar Linux.\n\nPara el arranque de Linux, también puede usar, en lugar de efi y options, la siguiente sintaxis:\n\n- linux y initrd seguidos de la ruta relativa de los archivos correspondientes en el ESP; por ejemplo /vmlinuz-linux; esto se traducirá automáticamente a efi path y options initrd=path —esta sintaxis solo se admite por comodidad y no tiene diferencias en la función—.\n\nUn ejemplo de un archivo de carga para iniciar Arch desde una partición con la etiqueta arch_os y cargar el microcode (Español) de la CPU de Intel sería:\n\n```\nesp/loader/entries/arch.conf\n```\n\n```\ntitle   Arch Linux\nlinux   /vmlinuz-linux\ninitrd  /intel-ucode.img\ninitrd  /initramfs-linux.img\noptions root=LABEL=arch_os rw\n```\n\nbootctl buscará automáticamente para «Windows Boot Manager» (\\EFI\\Microsoft\\Boot\\Bootmgfw.efi), «EFI Shell» (\\shellx64.efi) y «EFI Default Loader» (\\EFI\\Boot\\bootx64.efi). En caso de detectarlas, las entradas también se generarán automáticamente para ellos. Sin embargo, no autodetecta otras aplicaciones EFI (a diferencia de lo que hace rEFInd), por lo que para arrancar el kernel, deben ser creadas entradas de configuración manualmente.\n\n- Si realiza un arranque dual con Windows, se recomienda encarecidamente que desactive la opción predeterminada [[[Dual boot with Windows#Fast Startup and hibernation|Fast Start-Up]].\n- Recuerde cargar el microcódigo de Intel con initrd si procede, se proporciona un ejemplo en Microcode (Español)#systemd-boot.\n- La partición raíz se puede identificar con su LABEL o PARTUUID. Este último se puede encontrar con la orden blkid -s PARTUUID -o value /dev/sdxY, donde x es la letra del dispositivo y Y es el número de partición. Esto es necesario solo para identificar la partición raíz, no la partición esp.\n\n- Las entradas de arranque disponibles que se han configurado pueden enumerarse con la orden bootctl list.\n- Un archivo de entrada de ejemplo se encuentra en /usr/share/systemd/bootctl/arch.conf.\n- Los kernel parameters (Español) para escenarios como LVM (Español) o dm-crypt (Español) se pueden encontrar en sus páginas respectivas.\n\n"
    },
    {
      "title": "Intérpretes de órdenes de EFI y otras aplicaciones EFI",
      "level": 4,
      "content": "En el caso de que haya instalado instérpretes de órdenes de EFI u otras aplicaciones EFI dentro de la partición ESP, puede utilizar los siguientes fragmentos:\n\nEjemplos de entradas para los cargadores del intérprete de órdenes de UEFI personalizadas:\n\n```\nesp/loader/entries/uefi-shell-v1-x86_64.conf\n```\n\n```\ntitle   UEFI Shell x86_64 v1\nefi     /EFI/shellx64_v1.efi\n```\n\n```\nesp/loader/entries/uefi-shell-v2-x86_64.conf\n```\n\n```\ntitle   UEFI Shell x86_64 v2\nefi     /EFI/shellx64_v2.efi\n```\n\n"
    },
    {
      "title": "Arrancar con la configuración del firmware de EFI",
      "level": 3,
      "content": "La mayoría de los firmware del sistema configurado para el inicio de EFI agregarán sus propias entradas efibootmgr para arrancar en la «Configuración del Firmware de UEFI».\n\n"
    },
    {
      "title": "Preparar los kernels para /EFI/Linux",
      "level": 3,
      "content": "/EFI/Linux busca archivos del kernel especialmente preparados, que agrupan el kernel, el disco RAM de inicio (initrd), la línea de órdenes del kernel y /etc/os-release en un solo archivo . Este archivo se puede firmar fácilmente para «secure boot».\n\nColoque la línea de órdenes del kernel que desea usar en un archivo y cree un archivo de agrupación como este:\n\n```\nKernel packaging command:\n```\n\n```\nobjcopy \\\n    --add-section .osrel=\"/usr/lib/os-release\" --change-section-vma .osrel=0x20000 \\\n    --add-section .cmdline=\"kernel-command-line.txt\" --change-section-vma .cmdline=0x30000 \\\n    --add-section .linux=\"vmlinuz-file\" --change-section-vma .linux=0x40000 \\\n    --add-section .initrd=\"initrd-file\" --change-section-vma .initrd=0x3000000 \\\n    \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"linux.efi\"\n```\n\nOpcionalmente firme el archivo linux.efi producido anteriormente.\n\nCopie linux.efi en esp/EFI/Linux.\n\n"
    },
    {
      "title": "Proporcionar soporte para hibernación",
      "level": 3,
      "content": "Véase Suspender e hibernar.\n\n"
    },
    {
      "title": "Proteger con contraseña el editor de parámetros del kernel",
      "level": 3,
      "content": "Alternativamente, puede instalar systemd-boot-passwordAUR que admite password como opción de configuración básica. Utilice sbpctl generate para generar un valor para esta opción.\n\nInstale systemd-boot-password con la siguiente orden:\n\n```\n# sbpctl install esp\n```\n\nCon el editor activado, se le solicitará su contraseña antes de poder editar los parámetros del kernel.\n\n"
    },
    {
      "title": "Teclas utilizadas en el menú de arranque",
      "level": 2,
      "content": "Las siguientes teclas se utilizan dentro del menú:\n\n- Arriba/Abajo - selecciona la entrada\n- Intro - arranca la entrada seleccionada\n- d - selecciona la entrada por defecto para arrancar (almacenado en una variable de EFI no volátil)\n- -/T - disminuye el tiempo de espera (almacenado en una variable de EFI no volátil)\n- +/t - aumenta el tiempo de espera (almacenado en una variable de EFI no volátil)\n- e - edita la línea de órdenes del kernel\n- v - muestra la versión de systemd-boot y de UEFI\n- Q - sale\n- P - imprime la configuración actual\n- h/? - ayuda\n\nLas siguientes teclas son de acceso rápido, de modo que cuando se pulsan dentro del menú o durante el arranque, inician directamente una entrada específica:\n\n- l - Linux\n- w - Windows\n- a - OS X\n- s - Shell de EFI\n- 1-9 - número de entrada\n\n"
    },
    {
      "title": "Instalación después de arrancar en modo BIOS",
      "level": 3,
      "content": "Si se inicia en el modo BIOS, aún puede instalar systemd-boot, sin embargo, este proceso requiere que le diga al firmware que inicie el archivo EFI de systemd-boot en el arranque, lo cual se puede hacer generalmente de dos maneras:\n\n- tiene un intérprete de órdenes de EFI en funcionamiento en otro lugar;\n- su interfaz de firmware proporciona una forma de configurar correctamente el archivo EFI que debe cargarse en el momento del arranque.\n\nSi puede hacerlo, la instalación es más fácil: ingrese en el intérprete de órdenes de EFI o en la interfaz de configuración de su firmware y cambie el archivo EFI predeterminado de su equipo a esp/EFI/systemd/systemd-bootx64.efi (o systemd-bootia32.efi dependiendo de si el firmware de su sistema es de 32 bits).\n\n"
    },
    {
      "title": "Crear entrada manual utilizando efibootmgr",
      "level": 3,
      "content": "Si la orden bootctl install falla, puede crear una entrada de arranque EFI manualmente con la utilidad efibootmgr:\n\n```\n# efibootmgr -c -d /dev/sdX -p Y -l \"\\EFI\\systemd\\systemd-bootx64.efi\" -L \"Linux Boot Manager\"\n```\n\nDonde /dev/sdXY es la EFI system partition (Español).\n\n"
    },
    {
      "title": "El menú no aparece después de actualizar Windows",
      "level": 3,
      "content": "Véase UEFI#Windows changes boot order.\n\n"
    },
    {
      "title": "Véase también",
      "level": 2,
      "content": "- https://systemd.io/BOOT/\n- https://github.com/systemd/systemd/tree/master/src/boot/efi[enlace roto 2024-12-15]\n\n"
    }
  ]
}