{
  "title": "Java Runtime Environment Fonts (日本語)",
  "url": "https://wiki.archlinux.org/title/Java_Runtime_Environment_Fonts_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- フォント\n- フォント設定\n- MS フォント\n- X Logical Font Description\n\nユーザーによってはデフォルトの Java フォントや Java アプリケーションのフォントの表示モードが気に入らないという人もいるでしょう。Oracle Java Runtime Environment (JRE) のフォント表示を改善する方法は複数存在します。これらの方法は別々に使うこともできますが、多くの場合まとめて使うことでより良い結果が得られるでしょう。\n\nTrueType フォントは Java で一番良くサポートされているフォーマットです。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 アンチエイリアス 1.1 xsettings デーモンの実行 1.2 自動的に取得された設定を上書きする\n- 2 フォント選択 2.1 TrueType フォント 2.2 文字化けの修正\n- 3 参照\n\n- 1.1 xsettings デーモンの実行\n- 1.2 自動的に取得された設定を上書きする\n\n- 2.1 TrueType フォント\n- 2.2 文字化けの修正\n\n"
    },
    {
      "title": "アンチエイリアス",
      "level": 2,
      "content": "フォントの アンチエイリアス は Linux の Oracle Java 1.6 及び OpenJDK で利用可能です。\n\n"
    },
    {
      "title": "xsettings デーモンの実行",
      "level": 3,
      "content": "Java は、xsettings を通じてシステムのデフォルトを取得しようとします。GNOME では何もする必要はありません。gnome-settings-daemon はすでに実行されています。それ以外の場合は、Xsettingsd が簡単な代替手段です。\n\n"
    },
    {
      "title": "自動的に取得された設定を上書きする",
      "level": 3,
      "content": "xsettingsデーモンを実行したくない場合、またはフォントがまだ醜く見える場合は、アンチエイリアスを設定するシステムプロパティもあります。システム全体でこれを行うには、/etc/environment に以下の行を追加します:\n\n```\n_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=setting'\n```\n\nsetting は以下の7つの値のどれか一つに置き換えて下さい:\n\nTable content:\n設定 | 説明\noff, false, default | アンチエイリアスなし\non | 完全なアンチエイリアス\ngasp | フォントに埋め込まれたヒント情報を使う\nlcd, lcd_hrgb | 多数派の LCD モニターにあわせてアンチエイリアスを調整する\nlcd_hbgr, lcd_vrgb, lcd_vbgr | もうひとつの LCD モニター設定\n\ngasp と lcd の設定は多くの場合に適切に機能します。\n\nオプションで GTK のルックアンドフィールを使用するには、代わりに次の行を追加します。\n\n```\n_JAVA_OPTIONS='-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n```\n\n- 上述の Java オプションやこのオプションは Java で GUI を描写している Jdownloader などのアプリケーションでしか意味がありません。Java をバックエンドでしか利用していない Openoffice.org や Matlab などのアプリケーションでは表示が変わりません。\n- TrueType フォントにはポイントサイズに合わせてどうフォントを表示するかデザイナーによって決められたグリッド調整およびスキャン変換手続き (GASP) テーブルが含まれています。サイズによっては完全にアンチエイリアスをかけられたり、場合によってはヒンティングを適用したり、あるいはビットマップフォントとして表示するようになったりします。特定のポイントサイズではそれらを組み合わせて使われることもあります。\n\nコマンドラインで実行ファイルの前に変数を指定して新しい設定を試して下さい:\n\n```\n_JAVA_OPTIONS=options executable\n```\n\n変更を適用するには再ログインする必要があります。\n\n"
    },
    {
      "title": "TrueType フォント",
      "level": 3,
      "content": "Java アプリケーションによっては特定の TrueType フォントを使用するよう選択できたりしますが、こういったアプリケーションは使用したいフォントのディレクトリパスを指定できるようになっています。TrueType フォントは /usr/share/fonts/TTF ディレクトリにインストールされます。次の行を /etc/environment に追加してフォントを有効にしてください。\n\n```\nJAVA_FONTS=/usr/share/fonts/TTF\n```\n\n変更を適用するには再ログインする必要があります。\n\n"
    },
    {
      "title": "文字化けの修正",
      "level": 3,
      "content": "フォントファイルを /usr/lib/jvm/java-8-openjdk/jre/lib/fonts/fallback/ に配置します。必要に応じて作成します。\n\n実際に使用している JRE の /usr/lib/jvm/java-8-openjdk を $JAVA_HOME に置き換えてください。Oracle Java 9 以降、この機能は削除されていることに注意してください。Oracle はlib の変更を促すためにバグとみなし、設定ファイルを conf に移動し、フォールバック機能を \"mis-feature\" と呼びました。この動作を提供する具体的な関数は sun.awt.FontConfiguration.getInstalledFallbackFontsFonts で、OpenJDK にはまだあるようです。\n\nこれにより、Java は常にこのディレクトリ内のフォントをフォールバックシーケンスに追加して、文字の形状 (グリフ) を検索します。この方法では、アプリケーションがどのようなフォントを要求したとしても、必要に応じてこれらの追加フォントが不足しているグリフを提供します。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Java Font Configuration Files (Java 11); Java 8\n\n"
    }
  ]
}