{
  "title": "D-Bus (日本語)",
  "url": "https://wiki.archlinux.org/title/D-Bus_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "D-Bus はプロセス間のやりとりを行うためのメッセージバスシステムです。システム全体とユーザーセッション両方で実行できるデーモンと、アプリケーションが D-Bus を使うためのライブラリのセットから構成されています。\n\ndbus は systemd の依存関係としてプルおよび、インストールされます。ユーザーセッションのバスは各ユーザーごとに 自動的に 起動されます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 実装 1.1 dbus-broker 1.2 リファレンス実装\n- 2 ヒントとテクニック 2.1 dbus サービスを上書きする\n- 3 デバッグ\n- 4 参照\n\n- 1.1 dbus-broker\n- 1.2 リファレンス実装\n\n- 2.1 dbus サービスを上書きする\n\n"
    },
    {
      "title": "実装",
      "level": 2,
      "content": "Arch は 2 つの D-Bus メッセージブローカー実装を提供します。最初に、ユーザーは、systemd パッケージのインストール中に、目的の dbus-units プロバイダーを選択するよう求められます。一度にインストールできる実装は 1 つだけです。これにより、自動開始される dbus 実装となるユニットファイルが提供されます。 新しいデフォルトの dbus-broker-units または dbus-daemon-units パッケージは、ソケットによって開始される dbus.service システムファイルとユーザーユニットファイルを提供します。それぞれの実装の dbus-broker.service または dbus.service ファイルへのシンボリックリンクになっています。systemd ユニットパッケージには、依存関係として、使用される実際の実装、つまり dbus-broker や dbus が必要です。これらは、シンボリックリンクのターゲットである dbus-broker.service または dbus.service ファイルも提供します。\n\ndbus パッケージは現在でも systemd によって明示的に必要とされており、dbus-broker は dbus 自体を提供しません。 ただし、どちらのパッケージも独自に自動起動されず、dbus-units のプロバイダーは 1 つしかインストールできないので、両方のデーモンパッケージがインストールされていても問題ありません dbus パッケージは、dbus-broker が現在提供していない診断目的で使用されるコマンドラインユーティリティにも役立つ場合があります。\n\n"
    },
    {
      "title": "dbus-broker",
      "level": 3,
      "content": "dbus-broker は現在 Arch のデフォルト実装です [1] [2] これは リファレンス実装 のドロップインの置き換えで、D-Bus リファレンス実装との互換性を維持しつつ、高い性能と信頼性を提供する ことを目的としています。\n\ndbus-units プロバイダーを求められたら、dbus-broker-units を選択するか、直接インストールして下さい。\n\n"
    },
    {
      "title": "リファレンス実装",
      "level": 3,
      "content": "The reference implementation は現在も Arch によって正式にサポートされています。\n\ndbus-units プロバイダを要求されたら dbus-daemon-units を選択するか、直接インストールしてください。\n\n"
    },
    {
      "title": "dbus サービスを上書きする",
      "level": 3,
      "content": "これは、同じ有名なバス名を提供する複数のサービスの中から特定のサービスを指定する際に便利です。 例えば、KeePass#自動起動 や KDE Wallet#D-Bus の自動アクティベーション を参照してください。\n\nD-Bus サービスは、$XDG_DATA_HOME/dbus-1/services 内のサービスファイルで Exec=/bin/false を設定することでマスクできます。 例えば、gvfsd をマスクする場合は以下のようにします。\n\n```\n$ cp /usr/share/dbus-1/services/org.gtk.vfs.Daemon.service ~/.local/share/dbus-1/services\n$ sed 's|^Exec=.*|Exec=/bin/false|' ~/.local/share/dbus-1/services/org.gtk.vfs.Daemon.service\n```\n\nサービスがすでに起動されている場合、上書きは機能しません。既存のサービスのプロセスを強制終了するか、サービスを早めに起動する必要があります。\n\n"
    },
    {
      "title": "デバッグ",
      "level": 2,
      "content": "- Bustle — D-Bus のアクティビティのシーケンス図を描画します。シグナルの発行、メソッド呼び出し、それに対応する戻り値を表示し、各イベントのタイムスタンプとメソッド呼び出しの継続時間を示します。\n\n- D-Feet — 使いやすい D-Bus デバッガーの GUI ツール、開発は中止されています。\n\n- D-Spy — 使いやすい GUI の D-Bus デバッガーツール。D-Spy を使用すると、実行中のプログラムの D-Bus インターフェイスを検査し、それらのインターフェイスでメソッドを呼び出すことができます。\n\n- Qt D-Bus Viewer — GUI D-Bus デバッガー、D-Bus サービスを検査し、それらのメソッドを呼び出すために使用できます。\n\nbusctl(1) から systemd を使用することもできます\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- https://freedesktop.org/wiki/Software/dbus/\n- https://freedesktop.org/wiki/IntroductionToDBus/\n- https://uyha.github.io/technical/dbus-systemd.html systemd は DBus を使用してやり取りを行います。この記事では、DBus の基本的な概念と、busctl を使用して systemd と通信する方法について紹介します。\n\n"
    }
  ]
}