{
  "title": "Pacnew and Pacsave Files (日本語)",
  "url": "https://wiki.archlinux.org/title/Pacnew_and_Pacsave_Files_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "pacman は、設定ファイルが存在するパッケージを削除する際に、その設定ファイルのバックアップコピーを作成します。この時、バックアップファイルの名前には .pacsave という接尾辞が付けられます。同じように、パッケージをアップグレードする際に、ファイルシステム上に既に存在している設定ファイルの内容が、パッケージに含まれる新しい設定ファイルと異なる場合、新しい方の設定ファイルが .pacnew ファイルとして保存されます。pacman は、これらのファイルが作成された際に警告を表示します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 これらのファイルが作成される理由\n- 2 パッケージのバックアップファイル\n- 3 タイプの説明 3.1 .pacnew 3.2 .pacsave\n- 4 .pac* ファイルの検索\n- 5 .pac* ファイルの管理 5.1 pacdiff 5.2 サードパーティのユーティリティ\n- 6 参照\n\n- 3.1 .pacnew\n- 3.2 .pacsave\n\n- 5.1 pacdiff\n- 5.2 サードパーティのユーティリティ\n\n"
    },
    {
      "title": "これらのファイルが作成される理由",
      "level": 2,
      "content": ".pacnew ファイルは、既にファイルシステム上に存在している変更済みの設定ファイルを上書きしないようにするために、パッケージの更新時に作成されます。この時、pacman は以下のようなメッセージを出力します:\n\n```\n警告: /etc/pam.d/usermod は /etc/pam.d/usermod.pacnew としてインストールされました\n```\n\n.pacsave ファイルは、パッケージの削除時 (pacman -R) とアップグレード時に作成されます (アップグレード時にはパッケージが一度削除されるため)。pacman は、パッケージを削除する際に、データベースを調べてバックアップするべきファイルが存在するか判断します。そのようなファイルに対しては、バックアップとして .pacsave ファイルが作成されます。この時、pacman は以下のようなメッセージを出力します:\n\n```\n警告: /etc/pam.d/usermod は /etc/pam.d/usermod.pacsave として保存されました\n```\n\nこれらのファイルに対してはユーザによる手動操作が必要であり、パッケージのアップグレードや削除の後は即座にこれらのファイルを処理することが推奨されます。放置していると、不適切な設定によってソフトウェアの誤動作を招いたり、ソフトウェアが実行できなくなったりする可能性があります。\n\n"
    },
    {
      "title": "パッケージのバックアップファイル",
      "level": 2,
      "content": "パッケージの PKGBUILD ファイルでは、パッケージをアップグレードまたは削除した際に保持またはバックアップするべきファイルが指定されていることがあります。例えば、pulseaudio の PKGBUILD には以下の行が含まれています:\n\n```\nbackup=(etc/pulse/{daemon.conf,default.pa,system.pa})\n```\n\nパッケージのインストール後、pacman -Qii package_name を実行することで、pacman データベースからバックアップすべきファイルのリストを取得できます。\n\nパッケージの操作時に特定のファイルを上書きしないようにするには、Pacman#アップグレードさせないファイルを設定 を参照してください。\n\n"
    },
    {
      "title": ".pacnew",
      "level": 3,
      "content": "パッケージに含まれているバックアップファイルが更新されると、pacman はファイルの中身から生成される3つの md5sum を相互に比較します: 1つは更新前のパッケージによってインストールされた元のバージョンのチェックサム、1つはファイルシステムに存在する現在のバージョンのチェックサム、そしてもう1つは新しいパッケージに含まれているバージョンのチェックサムです。ファイルシステムに存在する現在のバージョンのファイルがパッケージによってインストールされる元のバージョンから修正されている場合、pacman は修正を新しいバージョンのファイルにマージする方法を知り得ません。従って、更新するとき、修正されたファイルを上書きする代わりに pacman は .pacnew 拡張子が付いた新しいバージョンを保存し、修正されたバージョンには手を付けないでおきます。\n\nもっと詳しく解説すると、3-way の MD5 チェックサムの比較は以下のどれかに当てはまることになります:\n\n稀に、アップグレードされたパッケージに以前のバージョンには無かったバックアップファイルが含まれていることがありますが、この場合は X/Y/Y か X/Y/Z として正しく処理されます (ここで X は存在しない値)。\n\n"
    },
    {
      "title": ".pacsave",
      "level": 3,
      "content": "backup で指定されているファイルのどれかをユーザーが編集した場合、そのファイルは .pacsave 拡張子が付けられた名前に変更され、パッケージが削除された後もファイルシステムに残り続けます。\n\n"
    },
    {
      "title": ".pac* ファイルの検索",
      "level": 2,
      "content": "Pacman は .pacnew を自動的に処理しません。あなた自身でこれらのファイルを管理する必要があります。次のセクションではいくつかのツールが紹介されています。管理を手動で行うには、まずファイルを確認しなくてはならないでしょう。多数のパッケージを更新・削除した時は、更新された .pac* ファイルを見落とすかもしれません。.pac* ファイルがインストールされているかどうか調べる方法としては、以下があります:\n\n- グローバルな設定ファイルのほとんどが保存されている /etc ディレクトリを調べるには、以下のコマンドを実行してください: # find /etc -name '*.pacnew' -o -name '*.pacsave' ディスク全体を調べるには、コマンドの /etc の部分を / に置き換えてください (この場合、検索を高速化させるために特定のディレクトリの検索をスキップすると良いかもしれません)。\n- インストールされているならば、locate を使っても良いです。まず、データベースを再インデックス化してください: # updatedb 次に以下のコマンドを実行してください: $ locate --existing '*.pacnew' '*.pacsave'\n- Pacman のログを使って見つけるには: $ grep '\\.pacnew\\|\\.pacsave' /var/log/pacman.log 注意点としてこのログは、ファイルシステム上に現在存在している .pac* ファイルと、既に削除された .pac* ファイルを把握していません。上記のコマンドによって表示されるものは、システム上に一度でも存在していたことのある .pac* ファイルです。最近の10個の .pac* ファイルのみを表示するには、コマンドの出力をパイプで tail に繋げてください。\n\n```\n# find /etc -name '*.pacnew' -o -name '*.pacsave'\n```\n\n```\n# updatedb\n```\n\n```\n$ locate --existing '*.pacnew' '*.pacsave'\n```\n\n```\n$ grep '\\.pacnew\\|\\.pacsave' /var/log/pacman.log\n```\n\n"
    },
    {
      "title": "pacdiff",
      "level": 3,
      "content": "pacman-contrib パッケージは、.pac* ファイルを管理するためのシンプルな pacdiff(8) ツールを提供しています。このツールは、全ての .pacnew ファイルと .pacsave ファイルを検索し、それぞれに対してどのような操作を行うか尋ねます。デフォルトでは vimdiff が使用されますが、DIFFPROG=your_editor pacdiff のように環境変数を設定することで他のツールを指定することもできます。その他の一般的な比較ツールについては アプリケーション一覧/ユーティリティ#Comparison, diff, merge を参照してください。\n\n"
    },
    {
      "title": "サードパーティのユーティリティ",
      "level": 3,
      "content": ".pac* の管理を様々なレベルで自動化するサードパーティのユーティリティが、いくつか存在します:\n\n- dotpac — ベーシックな対話スクリプト。ncurses ベースのテキストインターフェイスで、便利なチュートリアルがあります。マージ機能や自動マージ機能は存在しません。\n\n- etc-update — Gentoo のユーティリティですが、Arch も含めて他のディストリビューションとの互換性があります。変更を表示、マージ、そして対話的に編集することができるシンプルな CLI を提供します。些細な変更 (コメントなど) は自動的にマージさせることができます。\n\n- p3wm — .pacnew ファイルを 3-way merge します。些細な変更は自動的にマージさせることができます。コンフリクトが発生した場合、vimdiff、meld、kdiff3 のどれかを起動します。\n\n- pacnews-git — 全ての .pacnew ファイルを見つけ、vimdiff で編集するためのシンプルなスクリプト。\n\n- pacfiles-mode — Emacs で .pacnew ファイルの管理とマージをするためのパッケージ。\n\n- pacdiff-pacman-hook-git — pacdiff を自動的に実行する pacman フック。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- フォーラムスレッド: Dealing with .pacnew files\n\n"
    }
  ]
}