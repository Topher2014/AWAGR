{
  "title": "Vim (Português)",
  "url": "https://wiki.archlinux.org/title/Vim_(Portugu%C3%AAs)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Lista de aplicativos/Documentos#Editores de texto no estilo Vi\n\nO Vim é um editor de texto do terminal. É uma versão estendida do vi com alguns recursos adicionais, incluindo realce de sintaxe, um sistema de ajuda abrangente, script nativo (vimscript), um modo visual para seleção de texto, comparação de arquivos (vimdiff) e ferramentas com recursos restritos, como rview e rvim.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "Instale um dos seguintes pacotes:\n\n- vim — com suporte a interpretadores Python 2/3, Lua, Ruby e Perl, mas sem suporte a GTK/X.\n- gvim — que também fornece o mesmo que o pacote vim com suporte GTK/X.\n\n- O pacote vim é construído sem o suporte do Xorg especificamente a ferramente +clipboard, então o Vim não poderá operar como buffers de seleção primário e área de transferência. O pacote gvim fornece também a versão CLI do Vim com a ferramenta +clipboard.\n- O repositório não oficial herecura também fornece várias variantes do Vim/gVim: vim-cli, vim-gvim-common, vim-gvim-gtk, vim-gvim-qt, vim-rt e vim-tiny.\n\n"
    },
    {
      "title": "Uso",
      "level": 2,
      "content": "Para uma visão geral básica de como usar o Vim, siga o tutorial do vim executando vimtutor (para a versão do terminal) ou gvimtutor (para a versão gráfica).\n\nO Vim inclui um amplo sistema de ajuda que pode ser acessado com o comando :h subject. Os assuntos incluem comandos, opções de configuração, atalhos de teclas, plugins etc. Use o comando :h (sem nenhum assunto) para obter informações sobre o sistema de ajuda e saltar entre os assuntos.\n\n"
    },
    {
      "title": "Configuração",
      "level": 2,
      "content": "O arquivo de configuração específico dos usuários do Vim está localizado no diretório inicial: ~/.vimrc, e os arquivos dos usuários Vim estão localizados dentro do ~/.vim/. O arquivo de configuração global está localizado em /etc/vimrc. Arquivos globais do Vim, como defaults.vim e archlinux.vim estão localizados dentro do /usr/share/vim/.\n\n"
    },
    {
      "title": "Área de transferência",
      "level": 3,
      "content": "Comandos do Vim, como :yank ou :paste opera com o registro sem nome, que por padrão corresponde ao registro \"*. Se a ferramenta +clipboard está disponível, o registro \"* é refletido no buffer PRIMARY no X.\n\nPara alterar o registro padrão, você pode usar :set clipboard=unnamedplus em vez do registro \"+. O registro \"+ corresponde ao buffer CLIPBOARD no X.\n\nPara mais informações, veja :help 'clipboard'.\n\n"
    },
    {
      "title": "Realce da sintaxe",
      "level": 3,
      "content": "Para habilitar o destaque de sintaxe para muitas linguagens de programação:\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "Recuo",
      "level": 3,
      "content": "O arquivo de recuo para os tipos de arquivos específicos pode ser carregado com:\n\n```\n:filetype indent on\n```\n\n"
    },
    {
      "title": "Quebra de linha",
      "level": 3,
      "content": "A opção wrap está ativada por padrão, que instrui o Vim a quebrar linhas mais longas que a largura da janela, para que o restante da linha seja exibido na próxima linha. A opção wrap afeta apenas como o texto é exibido, o próprio texto não é modificado.\n\nA quebra normalmente ocorre após o último caractere que se ajusta à janela, mesmo quando está no meio de uma palavra. Uma quebra de linha mais inteligente pode ser controlado com a opção linebreak. Quando está ativado com set linebreak, a quebra ocorre após os caracteres listados na opção breakat, que por padrão contém um espaço e alguns sinais de pontuação (veja :help breakat).\n\nAs linhas quebradas normalmente são exibidas no início da próxima linha, independentemente de qualquer recuo. A opção breakindent instrui o Vim a levar em conta o recuo ao quebrar linhas longas, para que as linhas quebradas mantenham o mesmo recuo da linha exibida anteriormente. O comportamento do breakindent pode ser ajustado com a opção breakindentopt, por exemplo, para deslocar a linha quebrada outros quatro espaços para a direita para arquivos Python (veja :help breakindentopt para mais detalhes):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "Usando o mouse",
      "level": 3,
      "content": "O Vim tem a capacidade de fazer uso do mouse, mas funciona apenas em determinados terminais:\n\n- xterm/urxvt-baseados em emuladores de terminais\n- Console do Linux com o pacote gpm (veja Suporte a mouse de console para detalhes)\n- PuTTY\n\nPara ativar esse recurso, adicione esta linha ao ~/.vimrc:\n\n```\nset mouse=a\n```\n\nA opção mouse=a é definido em defaults.vim.\n\n"
    },
    {
      "title": "Atravessar quebras de linha com as setas",
      "level": 3,
      "content": "Por padrão, pressionando a ← no início de uma linha, ou pressionando → no final de uma linha, não permitirá que o cursor se desloque para a linha anterior ou seguinte.\n\nO comportamento padrão pode ser alterado adicionando set whichwrap=b,s,<,>,[,] ao seu arquivo ~/.vimrc.\n\n"
    },
    {
      "title": "Mesclando arquivos",
      "level": 2,
      "content": "O Vim inclui um editor de diferenças (um programa que mostra diferenças entre dois ou mais arquivos e auxílios para mesclá-los convenientemente). Use o vimdiff para executar o editor diff - basta especificar alguns arquivos para ele: vimdiff arquivo1 arquivo2. Aqui está a lista de comandos específicos do vimdiff.\n\nTable content:\nAção | Atalhos\npróxima alteração | ]c\nalteração anterior | [c\ndiff, obter | do\ndiff, colocar (put) | dp\nabrir dobra (fold) | zo\nfechar dobra | zc\nnova varredura por arquivos | :diffupdate\n\n"
    },
    {
      "title": "Números de linha",
      "level": 3,
      "content": "Para mostrar a coluna do número das linhas, use :set number. Por padrão, números de linha absolutos são mostrados, números relativos podem ser ativados com :set relativenumber.\n\nÉ possível pular para uma linha específica com :número da linha ou número da linhagg. Os saltos são lembrados em uma lista de saltos, consulte :h jump-motions para mais detalhes.\n\n"
    },
    {
      "title": "Verificação ortográfica",
      "level": 3,
      "content": "O Vim tem a capacidade de verificar a ortografia, ativar digitando:\n\n```\nset spell\n```\n\nPor padrão, apenas dicionários do idioma inglês estão instalados. Mais dicionários podem ser encontrados no diretório dos repositórios oficiais procurando por vim-spell. Dicionários adicionais podem ser encontrados no diretório do Arquivo FTP do Vim[link inativo 2025-01-22 ⓘ]. Dicionários adicionais podem ser colocados na pasta ~/.vim/spell/ e ativado com o comando: :setlocal spell spelllang=en_us (substituindo o en_us com o nome do dicionário necessário).\n\nTable content:\nAção | Atalhos\npróxima ortografia | ]s\nortografia anterior | [s\nsugestões de ortografia | z=\nortografia correta, adicione | zg\nortografia correta, sessão | zG\nortografia errada, adicione | zw\nortografia errada, sessão | zW\nrepetir toda a ortografia no arquivo | :spellr\n\nNote: **tex** \n\n- Para habilitar a ortografia em dois idiomas (por exemplo, inglês e alemão), adicione set spelllang=en,de no seu ~/.vimrc ou /etc/vimrc, e, em seguida, reinicie o Vim.\n- Você pode ativar a verificação ortográfica para tipos de arquivos arbitrários (por exemplo, .txt) usando o plugin FileType e uma regra personalizada para detecção de tipo de arquivo. Para ativar a verificação ortográfica de qualquer arquivo que termine com .txt, crie o arquivo /usr/share/vim/vimfiles/ftdetect/plaintext.vim, e insira a linha autocmd BufRead,BufNewFile *.txt set filetype=plaintext nesse arquivo. Em seguida, insira a linha autocmd FileType plaintext setlocal spell spelllang=en_us no seu ~/.vimrc ou /etc/vimrc, e, em seguida, reinicie o Vim. Como alternativa, pode-se simplesmente inserir a linha autocmd BufRead,BufNewFile *.txt setlocal spell no seu ~/.vimrc ou /etc/vimrc, e, em seguida, reinicie o Vim. Certifique-se de editar esta linha (especificamente *.txt) para incluir os tipos de arquivos destinados à verificação ortográfica.\n- Para ativar a verificação ortográfica apenas para documentos LaTeX (ou TeX), adicione autocmd FileType tex setlocal spell spelllang=en_us no seu ~/.vimrc ou /etc/vimrc, e, em seguida, reinicie o Vim.\n\n"
    },
    {
      "title": "Salvando estado durante execução",
      "level": 3,
      "content": "Saindo normalmente o vim descarta todas as informações não essenciais, como arquivos abertos, histórico de linha de comando, texto arrancado etc. A preservação dessas informações pode ser configurada das seguintes maneiras.\n\n"
    },
    {
      "title": "Arquivos viminfo",
      "level": 4,
      "content": "O arquivo viminfo também pode ser usado para armazenar o histórico da linha de comando, histórico de pesquisas, histórico de linhas de entrada, conteúdo de registros, marcas de arquivos, marcas de localização em arquivos, último padrão de pesquisa/substituição (a ser usado no modo de pesquisa com n e & dentro da sessão), lista de buffers e quaisquer variáveis globais que você possa ter definido. Para o viminfo modalidade disponível, a versão do vim você instalou deve ter sido compilado com a ferramenta +viminfo.\n\nConfigure o que é mantido no seu arquivo viminfo, adicionando (por exemplo) o seguinte ao seu arquivo ~/.vimrc:\n\n```\nset viminfo='10,<100,:100,%,n~/.vim/.viminfo\n```\n\nonde cada parâmetro é precedido por um identificador:\n\n```\n'q  : q, número de arquivos editados lembrados\n <m  : m, número de linhas salvas para cada registro\n :p  : p, número de linhas de cmd da história lembradas\n %   : salva e restaura a lista de buffers\n n...: caminho completo para os arquivos viminfo (observe que este é um literal \"n\")\n```\n\nVeja a documentação oficial documentação viminfo para detalhes sobre como um sistema preexistente viminfo O arquivo é modificado à medida que é atualizado com as informações da sessão atual, digamos de vários buffers na sessão atual que você está saindo.\n\n"
    },
    {
      "title": "Arquivos de sessão",
      "level": 4,
      "content": "Os arquivos de sessão podem ser usados para salvar o estado de qualquer número de sessões específicas ao longo do tempo. Um arquivo de sessão distinto pode ser usado para cada sessão ou projeto de seu interesse. Para que essa modalidade esteja disponível, a versão do vim instalada deve ter sido compilado com a ferramenta +mksession.\n\nDentro de uma sessão, :mksession[!] [meu_nome_de_sessão.vim] escreverá um script vim para meu_nome_de_sessão.vim no diretório atual ou Session.vim por padrão, se você escolher não para fornecer um nome de arquivo. O opcional ! derruba um arquivo de sessão preexistente com o mesmo nome e caminho.\n\nA sessão do vim pode ser retomado ao iniciar vim pelo o terminal:\n\n```\n$ vim -S [meu_nome_de_sessão.vim]\n```\n\nOu em um buffer de sessão já aberto, executando o comando vim:\n\n```\n:source meu_nome_de_sessão.vim\n```\n\nExatamente o que é salvo e detalhes adicionais sobre as opções de arquivos de sessão são amplamente abordados na Documentação do VIM (EN). Exemplos comentados são encontrados aqui.\n\n"
    },
    {
      "title": "Salvando a posição do cursor",
      "level": 4,
      "content": "Veja na wiki do VIM Restaurar o cursor para a posição do arquivo na sessão de edição anterior (EN).\n\n"
    },
    {
      "title": "Substitua o comando Vi pelo Vim",
      "level": 3,
      "content": "Crie um alias do vi para vim.\n\nComo alternativa, se você desejar digitar sudo vi e chamar o vim, instale o pacote vi-vim-symlinkAUR que irá remover vi e substitua-o por um link simbólico para vim.\n\n"
    },
    {
      "title": "Carriage returns do DOS/Windows",
      "level": 3,
      "content": "Se houver um ^M no final de cada linha, isso significa que você está editando um arquivo de texto criado no MS-DOS ou no Windows. Isso ocorre porque no Linux apenas um único caractere de avanço de linha (LF) é usado para quebra de linha, mas nos sistemas Windows/MS DOS eles estão usando uma sequência de retorno de carriage (CR) e um avanço de linha (LF) para o mesmo. E esse retorno de carro é exibido como ^M.\n\nPara remover todos os retornos de carriage de um arquivo, faça:\n\n```\n:%s/^M//g\n```\n\nNote que há ^ é uma letra de controle. Para inserir a sequência de controle ^M pressione Ctrl+v,Ctrl+m.\n\nComo alternativa, instale o pacote dos2unix e execute dos2unix file para corrigir o arquivo.\n\n"
    },
    {
      "title": "Espaço vazio na parte inferior das janelas do gVim",
      "level": 3,
      "content": "Ao usar um gerenciador de janelas configurado para ignorar as dicas de tamanho da janela, o gVim preencherá a área não funcional com a cor de fundo do tema GTK.\n\nA solução é ajustar a quantidade de espaço que o gVim reserva na parte inferior da janela. Coloque a seguinte linha em ~/.vimrc:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Vim como pager",
      "level": 3,
      "content": "Usando scripts, o Vim pode ser usado como um paginadores de terminal, para que você obtenha vários recursos do Vim, como esquemas de cores.\n\nO Vim vem com o script /usr/share/vim/vim82/macros/less.sh, para o qual você pode criar um alias. Observe que este script não suporta nenhum sinalizador de linha de comando mencionado em less(1) § OPTIONS.\n\nAlternativamente, há também o pacote vimpager. Para alterar o pager padrão, export a PÁGINA variável de ambiente. Observe que nem todos os sinalizadores de linha de comando são suportados; a lista de sinalizadores suportados é disponível no GitHub.\n\n"
    },
    {
      "title": "Destacando resultados de pesquisa",
      "level": 3,
      "content": "Para destacar a primeira string que será correspondida em uma pesquisa enquanto você digita, adicione a seguinte linha ao seu ~/.vimrc:\n\n```\nset incsearch\n```\n\nPara destacar todas as strings que serão correspondidas em uma pesquisa enquanto você digita, e depois que a pesquisa for executada, adicione a seguinte linha ao seu ~/.vimrc:\n\n```\nset hlsearch\n```\n\n- A configuração hlsearch manterá todas as correspondências destacadas até que uma pesquisa adicional seja feita. Esse comportamento pode ser indesejável; portanto, para desativar temporariamente o realce até a próxima pesquisa, execute :nohlsearch. Se você estiver executando esse comando com frequência, considere vinculá-lo a uma chave.\n- Esse comportamento também será observado ao corresponder regex durante outros comandos que os envolvem como s ou g.\n\n"
    },
    {
      "title": "Plugins",
      "level": 2,
      "content": "Adicionar plugins ao Vim pode aumentar sua produtividade estendendo os recursos do Vim. Os plugins podem alterar a interface do usuário do Vim, adicionar novos comandos, ativar o suporte à conclusão de código, integrar outros programas e utilitários ao Vim, adicionar suporte a idiomas adicionais e muito mais.\n\n"
    },
    {
      "title": "Usando o gerenciador de pacotes embutido",
      "level": 4,
      "content": "O Vim 8 adicionou a possibilidade de carregar plugins de terceiros nativamente. É possível usar essa funcionalidade armazenando pacotes de terceiros na pasta ~/.vim/pack. A estrutura dessa pasta é um pouco diferente da de um gerenciador de plugins típico, onde geralmente contém um diretório por plugin. Vamos seguir um procedimento típico de instalação e estrutura de diretórios, O plugin vim-surround de Tim Pope como por exemplo:\n\n```\n$ mkdir -p ~/.vim/pack/tpope/start\n```\n\nÉ importante notar que ~/.vim/pack/tpope é um diretório de pacotes que é vagamente definido como diretório que contém um ou mais plugins na Documentação do vim. Este não é o lugar certo para da um git clone no repositório de plugins. O nome do diretório do pacote pode ser arbitrário. Você pode optar por manter todos os seus plugins em um único diretório de pacotes ou, como no nosso exemplo, usar o nome do GitHub do autor tpope.\n\nO diretório do pacote pode conter as seguintes subpastas:\n\n- start - os plugins desta subpasta serão carregados automaticamente quando o Vim iniciar. Este é o local usado com mais frequência.\n- opt - os plugins desta subpasta podem ser carregados sob demanda, emitindo o comando :packadd dentro do Vim.\n\nAgora mude para pasta criada start e faça o checkout do repositório do plugin:\n\n```\n$ cd ~/.vim/pack/tpope/start\n$ git clone https://tpope.io/vim/surround.git\n```\n\nIsso cria uma subpasta adicional no início ~/.vim/pack/tpope/start/surround e é aí que os arquivos e diretórios do plugin vim são colocados.\n\nPróximo índice de ajuda da atualização, se o plugin contiver arquivos de ajuda:\n\n```\n$ vim -u NONE -c \"helptags surround/doc\" -c q\n```\n\nAgora você pode iniciar o Vim e o plugin será carregado automaticamente. Não são necessárias alterações no arquivo de configuração ~/.vimrc, a menos que você queira personalizar opções específicas de plugins.\n\n"
    },
    {
      "title": "Usando um gerenciador de plugins",
      "level": 4,
      "content": "Um gerenciador de plugins é um plugin que instala, gerencia e atualiza os plugins do Vim. Isso pode ser útil se você também estiver usando o Vim em plataformas diferentes do Arch Linux e desejar um método consistente de atualização de plugins.\n\n- Vundle atualmente é o gerenciador de plugins mais popular do Vim, disponível como vundleAUR ou vundle-gitAUR.\n- Vim-plug é um gerenciador de plugins minimalista do Vim com muitos recursos, como carregamento de plugin sob demanda e atualização paralela, disponível como vim-plugAUR ou vim-plug-gitAUR.\n- pathogen.vim é um plugin simples para gerenciar o runtimepath do Vim, disponível como vim-pathogenAUR ou vim-pathogen-gitAUR.\n- Dein.vim é um gerenciador de plugins que substitui o NeoBundle, disponível como vim-deinAUR ou vim-dein-gitAUR.\n\n"
    },
    {
      "title": "De repositórios do Arch",
      "level": 4,
      "content": "O grupo vim-plugins fornece vários plugins. Use o comando pacman -Sg vim-plugins para listar os pacotes disponíveis que você pode instalar com o pacman.\n\n"
    },
    {
      "title": "cscope",
      "level": 4,
      "content": "O Cscope é uma ferramenta para navegar em um projeto. Navegando para uma palavra/símbolo/função e chamando o cscope (geralmente com teclas de atalho), ele pode encontrar: funções que chamam a função, a definição da função e muito mais.\n\nInstale o pacote cscope.\n\nCopie o arquivo padrão do cscope onde será lido automaticamente pelo Vim:\n\n```\nmkdir -p ~/.vim/plugin\nwget -P ~/.vim/plugin https://cscope.sourceforge.net/cscope_maps.vim\n```\n\n```\nset timeoutlen=4000\nset ttimeout\n```\n\nCrie um arquivo que contenha a lista de arquivos que você deseja que o cscope indexe (o cscope pode lidar com vários idiomas, mas este exemplo encontra os arquivos .c, .cpp and .h, específico para o projeto C / C ++):\n\n```\ncd /path/to/project/dir\nfind . -type f -print | grep -E '\\.(c(pp)?|h)$' > cscope.files\n```\n\nCrie arquivos de banco de dados que o cscope lê:\n\n```\ncscope -bq\n```\n\nTeclas de atalhos padrão:\n\n```\nCtrl-\\ and\n      c: Find functions calling this function\n      d: Find functions called by this function\n      e: Find this egrep pattern\n      f: Find this file\n      g: Find this definition\n      i: Find files #including this file\n      s: Find this C symbol\n      t: Find assignments to\n```\n\nSinta-se livre para alterar os atalhos.\n\n```\n#Maps ctrl-c to find functions calling the function\nnnoremap <C-c> :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n```\n\n"
    },
    {
      "title": "Taglist",
      "level": 4,
      "content": "A Taglist fornece uma visão geral da estrutura dos arquivos de código fonte e permite navegar eficientemente pelos arquivos de código fonte em diferentes linguagens de programação.\n\nInstale o pacote vim-taglistAUR.\n\nOpções úteis a serem colocadas no ~/.vimrc:\n\n```\nlet Tlist_Compact_Format = 1\nlet Tlist_GainFocus_On_ToggleOpen = 1\nlet Tlist_Close_On_Select = 1\nnnoremap <C-l> :TlistToggle<CR>\n```\n\n"
    },
    {
      "title": "Oficial",
      "level": 3,
      "content": "- Site\n- Documentação\n- Vim Wiki\n- Vim Scripts\n\n"
    },
    {
      "title": "Tutoriais",
      "level": 3,
      "content": "- Tutorial and Primer para o vim\n- Tutorial and Reference Guide do vi\n- Graphical vi-Vim Cheat Sheet and Tutorial\n- Vim Introduction and Tutorial\n- Open Vim — coleção de ferramentas de aprendizagem de Vim\n- Learn Vim Progressively\n- Learning Vim in 2014\n- Seven habits of effective text editing\n- Basic Vim Tips[link inativo 2025-03-15 ⓘ]\n\n"
    },
    {
      "title": "Vídeos",
      "level": 4,
      "content": "- Vimcasts — gravação de tela no formato .ogg.\n- Vim Tutorial Videos — cobertura do básico até tópicos avançados.\n\n"
    },
    {
      "title": "Página de dicas",
      "level": 4,
      "content": "- https://devhints.io/vim\n- https://vim.rtorr.com/ - Uma coleção de dicas do Vim boas para acesso por disponíveis móveis - Fontes\n\n"
    },
    {
      "title": "Jogos",
      "level": 4,
      "content": "- Vim Adventures\n- VimGolf\n\n"
    },
    {
      "title": "Configuração",
      "level": 3,
      "content": "- nion's\n- Uma configuração detalhada de Amir Salihefendic\n- Bart Trojanowski\n- Vim de Steve Francia\n- Vim Awesome - Plugins para o Vim\n- Configuração para o Vim de W4RH4WK\n- Fast vimrc/colorscheme de askapache\n- Um vimrc básico\n- Usevim\n\n"
    },
    {
      "title": "Cores",
      "level": 4,
      "content": "- Vivify\n- Vim colorscheme customization\n\n"
    }
  ]
}