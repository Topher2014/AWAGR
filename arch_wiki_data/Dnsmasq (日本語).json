{
  "title": "Dnsmasq (日本語)",
  "url": "https://wiki.archlinux.org/title/Dnsmasq_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "dnsmasq は、DNS サーバー、DHCPv6 と PXE をサポートする DHCP サーバー および TFTP サーバー を提供します。また、dnsmasq は DNS クエリをキャッシュし、過去に訪問したことのあるサイトへの DNS 検索速度を向上させるように設定することができます。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 設定 2.1 DNS サーバー 2.1.1 DNS アドレスファイルと転送 2.1.1.1 openresolv 2.1.1.2 手動転送 2.1.2 カスタムドメインの追加 2.1.3 テスト 2.2 DHCP サーバー 2.2.1 プロキシ DHCP 2.2.2 テスト 2.3 TFTP サーバーの設定 2.4 PXE の設定\n- 3 ヒントとテクニック 3.1 OpenDNS が Google へのクエリをリダイレクトするのを止める 3.2 アドレスの上書き 3.3 複数のインスタンス 3.3.1 固定 3.3.2 動的 3.4 ドメインのブロックリスト化 3.5 キャッシュ統計を表示\n- 4 参照\n\n- 2.1 DNS サーバー 2.1.1 DNS アドレスファイルと転送 2.1.1.1 openresolv 2.1.1.2 手動転送 2.1.2 カスタムドメインの追加 2.1.3 テスト\n- 2.2 DHCP サーバー 2.2.1 プロキシ DHCP 2.2.2 テスト\n- 2.3 TFTP サーバーの設定\n- 2.4 PXE の設定\n\n- 2.1.1 DNS アドレスファイルと転送 2.1.1.1 openresolv 2.1.1.2 手動転送\n- 2.1.2 カスタムドメインの追加\n- 2.1.3 テスト\n\n- 2.1.1.1 openresolv\n- 2.1.1.2 手動転送\n\n- 2.2.1 プロキシ DHCP\n- 2.2.2 テスト\n\n- 3.1 OpenDNS が Google へのクエリをリダイレクトするのを止める\n- 3.2 アドレスの上書き\n- 3.3 複数のインスタンス 3.3.1 固定 3.3.2 動的\n- 3.4 ドメインのブロックリスト化\n- 3.5 キャッシュ統計を表示\n\n- 3.3.1 固定\n- 3.3.2 動的\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "dnsmasq パッケージを インストール します。次に、dnsmasq.service を 起動/有効化 します。\n\nDHCP クライアントが新しい /etc/resolv.conf を作成できるように、ネットワークを再起動する必要があります。\n\n"
    },
    {
      "title": "設定",
      "level": 2,
      "content": "dnsmasq を設定するには、/etc/dnsmasq.conf を編集します。 ファイルにはオプションを説明するコメントが含まれています。 利用可能なすべてのオプションについては dnsmasq(8) を参照してください。\n\ndnsmasq をローカル DNS リゾルバとして使用しない場合は、nss-lookup.target をプルインしないように 編集dnsmasq.service} して下さい。\n\n```\n/etc/systemd/system/dnsmasq.service.d/no-nss-lookup-target.conf\n```\n\n```\n[Unit]\nWants=\n```\n\n```\n$ dnsmasq --test\n```\n\n"
    },
    {
      "title": "DNS サーバー",
      "level": 3,
      "content": "dnsmasq を1台のコンピュータで DNS キャッシュデーモンとして設定するには、 listen-address ディレクティブでローカルホストの IP アドレスを追加してください。\n\n```\nlisten-address=::1,127.0.0.1\n```\n\nこのコンピュータを使用して、ネットワーク上の他のコンピュータの LAN IP アドレスをリッスンします。この場合、静的 LAN IP を使用することをお勧めします。例\n\n```\nlisten-address=::1,127.0.0.1,192.168.1.1\n```\n\nあるいは、ネットワークインターフェイスを割り当てることもできます。\n\n```\ninterface=enp5s0\n```\n\nキャッシュされるドメイン名の数を cache-size=size で設定します(デフォルトは 150 です。)\n\n```\ncache-size=10000\n```\n\nDNSSEC の検証には、dnsmasq パッケージが提供する DNSSEC トラストアンカーを読み込み、オプション dnssec を設定します。\n\n```\nconf-file=/usr/share/dnsmasq/trust-anchors.conf\ndnssec\n```\n\n使いたいオプションは dnsmasq(8) を参照してください。\n\n"
    },
    {
      "title": "DNS アドレスファイルと転送",
      "level": 4,
      "content": "dnsmasqを設定した後、/etc/resolv.conf にローカルホストアドレスを唯一のネームサーバーとして追加する必要があります。これにより、すべてのクエリが dnsmasq に送信されるようになります。\n\ndnsmasq はスタブリゾルバであり、リカーシブリゾルバではないため、外部 DNS サーバーへの転送を設定する必要があります。これは、openresolv を使用して自動的に行うか、dnsmasq の設定で DNS サーバーアドレスを手動で指定することで実行できます。\n\nネットワークマネージャが resolvconf をサポートしていれば、/etc/resolv.conf を直接変更する代わりに、 openresolv を使って dnsmasq の設定ファイルを生成 することができます。\n\n/etc/resolvconf.conf を編集し、ループバックアドレスをネームサーバとして追加し、dnsmasq 設定を書き出すように openresolv を設定します。\n\n```\n/etc/resolvconf.conf\n```\n\n```\n# Use the local name server\nname_servers=\"::1 127.0.0.1\"\nresolv_conf_options=\"trust-ad\"\n\n# Write out dnsmasq extended configuration and resolv files\n dnsmasq_conf=/etc/dnsmasq-conf.conf\n dnsmasq_resolv=/etc/dnsmasq-resolv.conf\n```\n\nresolvconf-u を実行して、設定ファイルを作成します。ファイルが存在しない場合、dnsmasq.service は起動に失敗します。\n\ndnsmasq の設定ファイルを編集して、openresolv が生成した設定を使用します [1]\n\n```\n# Read configuration generated by openresolv\nconf-file=/etc/dnsmasq-conf.conf\nresolv-file=/etc/dnsmasq-resolv.conf\n```\n\nまず、/etc/resolv.conf でネームサーバーとして localhost のアドレスのみを設定する必要があります。\n\n```\n/etc/resolv.conf\n```\n\n```\nnameserver ::1\nnameserver 127.0.0.1\noptions trust-ad\n```\n\nドメイン名前解決#/etc/resolv.conf の書き込み保護 の説明に従って、/etc/resolv.conf を上書きから保護していることを確認してください。\n\nその後、dnsmasq の設定ファイルに server=server_address として上流の DNS サーバのアドレスを指定する必要があります。また、/etc/resolv.conf を読み込んで、dnsmasq が自分自身のローカルホストのアドレスだけを読み込むことがないように、no-resolv を追加してください。\n\n```\n/etc/dnsmasq.conf\n```\n\n```\n[...]\nno-resolv\n\n# Google's nameservers, for example\nserver=8.8.8.8\nserver=8.8.4.4\n```\n\nこれでDNSクエリは dnsmasq で解決され、キャッシュからクエリに答えられない場合のみ外部サーバをチェックするようになります。\n\n"
    },
    {
      "title": "カスタムドメインの追加",
      "level": 4,
      "content": "(ローカル) ネットワークの hosts にカスタムドメインを追加することができます:\n\n```\nlocal=/home.lan/\ndomain=home.lan\n```\n\nこの例では hostname.home.lan を (hosts ファイルに定義されている) ホスト/デバイスとして ping できます。\n\nhosts エントリにカスタムドメインを追加するには expand-hosts をアンコメントしてください:\n\n```\nexpand-hosts\n```\n\nこの設定を使わない場合、/etc/hosts のエントリにドメインを追加する必要があります。\n\n"
    },
    {
      "title": "テスト",
      "level": 4,
      "content": "dnsmasq を起動してから一度も訪問していないウェブサイトを選択して、検索速度をテストします(drillは ldnsパッケージの一部です)\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\n再度コマンドを実行すると、キャッシュされた DNS IP が使用され、dnsmasq が正しく設定されていれば、検索時間はより速くなります。\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\n```\n;; Query time: 18 msec\n```\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\n```\n;; Query time: 2 msec\n```\n\nDNSSEC の検証が機能しているかどうかを調べるには、DNSSEC#テスト をご覧ください。\n\n"
    },
    {
      "title": "DHCP サーバー",
      "level": 3,
      "content": "dnsmasq はデフォルトでは DHCP 機能がオフになっていますので、使用したい場合はオンにする必要があります。 以下、重要な設定項目です。\n\n```\n# Only listen to routers' LAN NIC.  Doing so opens up tcp/udp port 53 to localhost and udp port 67 to world:\ninterface=enp0s0\n\n# dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with dynamic interfaces (assigning dynamic IPs).\n# dnsmasq will discard world requests to them, but the paranoid might like to close them and let the kernel handle them.\nbind-interfaces\n\n# Optionally set a domain name\ndomain=example.org\n\n# Set default gateway\ndhcp-option=3,0.0.0.0\n\n# Set DNS servers to announce\ndhcp-option=6,0.0.0.0\n\n# If your dnsmasq server is also doing the routing for your network, you can use option 121 to push a static route out.\n# x.x.x.x is the destination LAN, yy is the CIDR notation (usually /24), and z.z.z.z is the host which will do the routing.\ndhcp-option=121,x.x.x.x/yy,z.z.z.z\n\n# Dynamic range of IPs to make available to LAN PC and the lease time. \n# Ideally set the lease time to 5m only at first to test everything works okay before you set long-lasting records.\ndhcp-range=192.168.111.50,192.168.111.100,12h\n\n# Provide IPv6 DHCP leases, the range is constructed using the network interface as prefix\ndhcp-range=::f,::ff,constructor:enp0s0\n\n# If you’d like to have dnsmasq assign static IPs to some clients, bind the LAN computers NIC MAC addresses:\ndhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50\ndhcp-host=aa:bb:cc:ff:dd:ee,192.168.111.51\n```\n\nその他のオプションについては dnsmasq(8) を参照してください。\n\n"
    },
    {
      "title": "プロキシ DHCP",
      "level": 4,
      "content": "ネットワーク上にすでに DHCP サーバーがあり、それと相互運用したい場合、dnsmasq を プロキシ DHCP として動作させ、#PXEサーバー 固有の情報のみをクライアントに提供するように設定することが可能です。このモードは IPv4 でのみ利用可能です。以下の構文を使用し、既存の DHCP サーバーのアドレスを指定します。\n\n```\ndhcp-range=192.168.0.1,proxy\n```\n\n"
    },
    {
      "title": "テスト",
      "level": 4,
      "content": "dnsmasq がインストールされているコンピュータに接続し、DHCP を使用して IP アドレスを自動的に割り当てるように設定し、ネットワークに正常にログインできるか試します。\n\nサーバ上の /var/lib/misc/dnsmasq.leases ファイルを調査すると、リースが確認できるはずです。\n\n"
    },
    {
      "title": "TFTP サーバーの設定",
      "level": 3,
      "content": "転送ファイルを保存する TFTP のルートディレクトリ (例: /srv/tftp) を作成してください。\n\ndnsmasq の TFTP セキュアモードを使うには TFTP のルートディレクトリとファイルの所有者を全て dnsmasq ユーザーに設定してください。\n\ndnsmasq.conf で TFTP を有効化:\n\n```\n/etc/dnsmasq.conf\n```\n\n```\nenable-tftp\ntftp-root=/srv/tftp\ntftp-secure\n```\n\n"
    },
    {
      "title": "PXE の設定",
      "level": 3,
      "content": "PXE を使うには DHCP と TFTP サーバーが必要ですが、どちらの機能も dnsmasq によって提供されています.\n\n```\n/etc/dnsmasq.conf\n```\n\n```\ninterface=enp0s0\nbind-dynamic\ndhcp-range=192.168.0.1,proxy\n```\n\n1. TFTP サーバーと DHCP サーバーを設定\n1. PXE 互換のブートローダー (例: PXELINUX) を TFTP のルートにコピーして設定\n1. /etc/dnsmasq.conf で PXE を有効化:\n\n- ファイルのパスは TFTP ルートからの相対パスです。\n- ファイルに .0 拡張子が付く場合、pxe-service オプションで拡張子を除外する必要があります。\n\nファイルを送信するには:\n\n```\ndhcp-boot=lpxelinux.0\n```\n\nクライアントアーキテクチャに応じてファイルを送信するには:\n\n```\npxe-service=x86PC, \"PXELINUX (BIOS)\", \"bios/lpxelinux\"\npxe-service=X86-64_EFI, \"PXELINUX (EFI)\", \"efi64/syslinux.efi\"\n```\n\n```\ndhcp-match=set:efi-x86_64,option:client-arch,7\ndhcp-match=set:efi-x86_64,option:client-arch,9\ndhcp-match=set:efi-x86,option:client-arch,6\ndhcp-match=set:bios,option:client-arch,0\ndhcp-boot=tag:efi-x86_64,\"efi64/syslinux.efi\"\ndhcp-boot=tag:efi-x86,\"efi32/syslinux.efi\"\ndhcp-boot=tag:bios,\"bios/lpxelinux.0\"\n```\n\n後はブートローダー次第です。\n\n"
    },
    {
      "title": "OpenDNS が Google へのクエリをリダイレクトするのを止める",
      "level": 3,
      "content": "OpenDNS が全ての Google クエリを OpenDNS の検索サーバーにリダイレクトを止めさせるには、以下を /etc/dnsmasq.conf に追加してください:\n\n```\nserver=/www.google.com/<ISP DNS IP>\n```\n\n"
    },
    {
      "title": "アドレスの上書き",
      "level": 3,
      "content": "キャプティブポータルを使用する場合など、特定の場面では特定のドメインをハードコードされたアドレスセットに解決するのが役に立つ場合があります。address の設定で解決できます:\n\n```\naddress=/example.com/1.2.3.4\n```\n\nさらに、特殊なワイルドカードを使うことで /etc/hosts や DHCP が返答がないドメイン名について特定のアドレスを返すようにすることが可能です:\n\n```\naddress=/#/1.2.3.4\n```\n\n"
    },
    {
      "title": "複数のインスタンス",
      "level": 3,
      "content": "複数の dnsmasq サーバーをインターフェイスで動作させたい場合:\n\n"
    },
    {
      "title": "固定",
      "level": 4,
      "content": "インターフェイスごとに固定のサーバーを使いたい場合、interface と bind-interface オプションを使ってください。2番目の dnsmasq が起動するようになります。\n\n"
    },
    {
      "title": "動的",
      "level": 4,
      "content": "インターフェイスを除外して他のインターフェイスにバインドできます:\n\n```\nexcept-interface=lo\nbind-dynamic\n```\n\n"
    },
    {
      "title": "ドメインのブロックリスト化",
      "level": 3,
      "content": "ドメインをブロックリスト化する、つまり NXDOMAIN でドメインに対するクエリに答えるには、IP アドレスを指定せずに address オプションを使用します:\n\n```\naddress=/blocked.example/\naddress=/anotherblocked.example/\n```\n\nワイルドカードもサポートされています。パターンの先頭に * を追加します:\n\n```\n# blocks both blocked.example and anotherblocked.example and all their subdomains\naddress=/*blocked.example/\n\n# blocks subdomains like mail.google.com but not google.com\naddress=/*.google.com/\n```\n\n一部の特定のサブドメインは、サーバーアドレスとして # を使用してブロックを解除できます:\n\n```\n# blocks google.com and all subdomains except mail.google.com.\naddress=/google.com/\nserver=/mail.google.com/#\n```\n\n- オプション address=/example.com/ と server=/example.com/ は等価です。どちらも NXDOMAIN でクエリに答えます。\n- address=/example.com/# と server=/example.com/# は等価ではありません。 address=/example.com/# は、NULL アドレス (0.0.0.0 または IPv6 の ::) を持つドメインに対するクエリに応答します。 server=/example.com/# は、ドメインに対するクエリを、標準設定されているサーバーに送ります。\n- パターン /example.com/ と /.example.com/ は等価です。どちらも example.com とそのすべてのサブドメインにマッチします。\n\n- address=/example.com/# は、NULL アドレス (0.0.0.0 または IPv6 の ::) を持つドメインに対するクエリに応答します。\n- server=/example.com/# は、ドメインに対するクエリを、標準設定されているサーバーに送ります。\n\n使いやすいようにブロックリストを別のファイル、例えば /etc/dnsmasq.d/blocklist.conf に置き、/etc/dnsmasq.conf から conf-file=/etc/dnsmasq.d/blocklist.conf または conf-dir=/etc/dnsmasq.d/,*.conf でロードします。\n\n- OpenWrt の広告ブロックパッケージの README にリストがあります。\n- hostsファイルのブロックリストは addn-hosts=hosts.txt オプションで使うこともできますし、以下の awk コマンドで dnsmasq ブロックリストに変換することもできます: awk '/^[^#]/ { print \"address=/\"$2\"/\"$1\"\" }' hosts.txt\n\n"
    },
    {
      "title": "キャッシュ統計を表示",
      "level": 3,
      "content": "キャッシュ統計は、ldns パッケージからの drill ユーティリティを使用して、chaos 要求を使用して照会できます。\n\n```\n$ drill misses.bind TXT CH\n$ drill hits.bind TXT CH\n```\n\n出力には、それぞれキャッシュミスとヒットの数が含まれます:\n\n```\n;; ANSWER SECTION:\nmisses.bind.    0       CH      TXT     \"411\"\n```\n\nその他のオプション cachesize.bind、insertions.bind、evictions.bind、auth.bind、servers.bind\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Caching Nameserver using dnsmasq, and a few other tips and tricks.\n\n"
    }
  ]
}