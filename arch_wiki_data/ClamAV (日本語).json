{
  "title": "ClamAV (日本語)",
  "url": "https://wiki.archlinux.org/title/ClamAV_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Clam AntiVirus は UNIX 用のオープンソースの (GPL) アンチウイルスツールキットです。柔軟性がありマルチスレッドで動作するデーモンやコマンドラインスキャナー、データベースを自動的に更新するツールなど、さまざまなユーティリティが含まれています。ClamAV は主として Windows デスクトップのためのファイル・メールサーバーで使われることを想定しているので、基本的には Windows のウイルスやマルウェアを検知します。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 インストール\n- 2 データベースの更新\n- 3 デーモンの起動\n- 4 ソフトウェアのテスト\n- 5 データベースや署名リポジトリの追加 5.1 オプション1: Fangfrisch の設定 5.2 オプション2:clamav-unofficial-sigs の設定 5.2.1 MalwarePatrol データベース\n- 6 ウイルスのスキャン 6.1 スタンドアロンスキャナーを使用する 6.2 デーモンの使用\n- 7 milter を使う\n- 8 オンアクセススキャン\n- 9 ヒントとテクニック 9.1 複数のスレッドで実行 9.1.1 clamscan の使用方法 9.1.2 clamdscan の使用方法\n- 10 トラブルシューティング 10.1 Error: Clamd was NOT notified 10.2 Error: No supported database files found 10.3 Error: Can't create temporary directory\n- 11 参照\n\n- 5.1 オプション1: Fangfrisch の設定\n- 5.2 オプション2:clamav-unofficial-sigs の設定 5.2.1 MalwarePatrol データベース\n\n- 5.2.1 MalwarePatrol データベース\n\n- 6.1 スタンドアロンスキャナーを使用する\n- 6.2 デーモンの使用\n\n- 9.1 複数のスレッドで実行 9.1.1 clamscan の使用方法 9.1.2 clamdscan の使用方法\n\n- 9.1.1 clamscan の使用方法\n- 9.1.2 clamdscan の使用方法\n\n- 10.1 Error: Clamd was NOT notified\n- 10.2 Error: No supported database files found\n- 10.3 Error: Can't create temporary directory\n\n"
    },
    {
      "title": "インストール",
      "level": 2,
      "content": "ClamAV は clamav パッケージでインストールできます。さらに以下のパッケージをインストールすることもできます:\n\n- clamtk - ClamAV の GUI フロントエンド\n- アドオン clamtk-gnomeAUR - Nautilus ファイルマネージャでファイルやフォルダを右クリックしてコンテキストメニューからスキャンできるようにする ClamTk のプラグイン。 thunar-sendto-clamtkAUR - Thunar でファイルやフォルダを右クリックしてスキャンできるようにするシンプルなプラグイン。\n\n- clamtk-gnomeAUR - Nautilus ファイルマネージャでファイルやフォルダを右クリックしてコンテキストメニューからスキャンできるようにする ClamTk のプラグイン。\n- thunar-sendto-clamtkAUR - Thunar でファイルやフォルダを右クリックしてスキャンできるようにするシンプルなプラグイン。\n\n"
    },
    {
      "title": "データベースの更新",
      "level": 2,
      "content": "次のコマンドでウイルス定義を更新します:\n\n```\n# freshclam\n```\n\nプロキシを使っている場合は、/etc/clamav/freshclam.conf を編集して、HTTPProxyServer、HTTPProxyPort、HTTPProxyUsername、および HTTPProxyPassword を更新します。\n\nデータベース ファイルは次の場所に保存されます:\n\n```\n/var/lib/clamav/daily.cvd\n/var/lib/clamav/main.cvd\n/var/lib/clamav/bytecode.cvd\n```\n\nウイルス定義が最新に保たれるように clamav-freshclam.service を 起動/有効化 します。\n\n"
    },
    {
      "title": "デーモンの起動",
      "level": 2,
      "content": "- 初めてサービスを開始する前に freshclam を実行する必要があります。そうしないと、ClamAV が正しく起動できなくなるトラブル/エラーが発生します。\n- スタンドアロンスキャンを行うだけであれば、デーモンは必要ありません。以下の ウイルスのスキャン を参照してください。\n\nサービス名は clamav-daemon.service です。これを 起動 し、有効化 します。\n\n"
    },
    {
      "title": "ソフトウェアのテスト",
      "level": 2,
      "content": "ClamAV とウイルス定義が正しくインストールされているかどうか確かめるには、clamscan で EICAR テストファイル (ウイルスコードは含まれていない無害な署名です) をスキャンします。\n\n```\n$ curl https://www.eicar.org/download/eicar.com.txt | clamscan -\n```\n\n以下が出力されれば検出成功です:\n\n```\nstdin: Win.Test.EICAR_HDB-1 FOUND\n```\n\n上記の表示が出ない場合、トラブルシューティングを読むか、あるいは Arch フォーラム に投稿してください。\n\n"
    },
    {
      "title": "データベースや署名リポジトリの追加",
      "level": 2,
      "content": "ClamAV は他のリポジトリやセキュリティベンダーから提供されたデータベースや署名を使うことができます。\n\nclamav-unofficial-sigsAUR をインストールして /etc/clamav-unofficial-sigs/user.conf で設定するだけで MalwarePatrol, SecuriteInfo, Yara, Linux Malware Detect などの署名・データベースを追加できます。データベースについては GitHub リポジトリの説明 を読んでください。\n\n"
    },
    {
      "title": "オプション1: Fangfrisch の設定",
      "level": 3,
      "content": "Fangfrisch は clamav-unofficial-sigs のより安全で柔軟かつ便利な代替品として設計され、ほとんど設定が必要ありません\n\n最も重要なことは、Fangfrisch は clamav-unofficial-sigs とは異なり、ルート権限で実行する必要がないことです。\n\n実行することでデータベース構造を作成します。\n\n```\n# sudo -u clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb\n```\n\nfangfrisch.timer を 有効化 してください。\n\n"
    },
    {
      "title": "オプション2:clamav-unofficial-sigs の設定",
      "level": 3,
      "content": "まず /etc/clamav-unofficial-sigs/user.conf を編集して以下の行を変えてください:\n\n```\n# Uncomment the following line to enable the script\nuser_configuration_complete=\"yes\"\n```\n\nそして以下のコマンドを実行して非公式の署名サービスを有効化 (マニュアルページやログローテーション、cron ジョブなどが含まれています):\n\n```\n# clamav-unofficial-sigs.sh --install-all\n```\n\nClamAV で署名アップデートを行うために clamav-daemon サービスは動作させ続ける必要があります。\n\nclamav-unofficial-sigs スクリプトで使われているデータベースと /etc/clamav-unofficial-sigs の設定ファイルで設定されているデータベースから署名が更新されます。手動でデータベースから署名を更新するには、以下のコマンドを実行:\n\n```\n# clamav-unofficial-sigs.sh\n```\n\ncron ジョブの実行を止めるには /etc/cron.d/clamav-unofficial-sigs ファイルを削除してください。\n\n"
    },
    {
      "title": "MalwarePatrol データベース",
      "level": 4,
      "content": "MalwarePatrol データベースを使用したい場合 https://www.malwarepatrol.net/ でアカウントを登録してください。\n\n/etc/clamav-unofficial-sigs/user.conf の以下の行を変えることで有効にできます:\n\n```\nmalwarepatrol_receipt_code=\"YOUR-RECEIPT-NUMBER\" # enter your receipt number here\nmalwarepatrol_product_code=\"8\" # Use 8 if you have a Free account or 15 if you are a Premium customer.\nmalwarepatrol_list=\"clamav_basic\" # clamav_basic or clamav_ext\nmalwarepatrol_free=\"yes\" # Set to yes if you have a Free account or no if you are a Premium customer.\n```\n\n詳しくは https://www.malwarepatrol.net/clamav-configuration-guide/ を参照。\n\n"
    },
    {
      "title": "ウイルスのスキャン",
      "level": 2,
      "content": "オンデマンドスキャンには2つのオプションがあります。\n\n"
    },
    {
      "title": "スタンドアロンスキャナーを使用する",
      "level": 3,
      "content": "clamscan を使って特定のファイルやホームディレクトリ、もしくはシステム全体をスキャンすることができます:\n\n```\n$ clamscan myfile\n$ clamscan --recursive --infected /home # or -r -i\n$ clamscan --recursive --infected --exclude-dir='^/sys|^/dev' /\n```\n\n感染しているファイルを clamscan に削除して欲しい場合はコマンドに --remove オプションを使って下さい。隔離したい場合は --move=/dir を使います。\n\nclamscan で巨大なファイルをスキャンするときは、コマンドに --max-filesize=4000M や --max-scansize=4000M オプションを追加してください。4000M というサイズは最大値です。必要に応じて低い値に置き換えてください。\n\n-l path/to/file オプションを使うと clamscan のログがテキストファイルに出力されます。\n\n"
    },
    {
      "title": "デーモンの使用",
      "level": 3,
      "content": "clamdscan は上記と似ていますが、コマンドが動作するためにはデーモンが起動している必要があります。デーモンは /etc/clamav/clamd.conf で指定された設定を読み込むので、ほとんどのオプションは無視されます。\n\n"
    },
    {
      "title": "milter を使う",
      "level": 2,
      "content": "Milter を使ってメールにウイルスが含まれていないか sendmail サーバーでスキャンすることができます。\n\n/etc/clamav/clamav-milter.conf.sample を /etc/clamav/clamav-milter.conf にコピーして必要に応じて編集してください。例:\n\n```\n/etc/clamav/clamav-milter.conf\n```\n\n```\nMilterSocket /run/clamav/clamav-milter.sock\nMilterSocketMode 660\nFixStaleSocket yes\nUser clamav\nPidFile /run/clamav/clamav-milter.pid\nTemporaryDirectory /tmp\nClamdSocket unix:/var/lib/clamav/clamd.sock\nLogSyslog yes\nLogInfected Basic\n```\n\n/etc/systemd/system/clamav-milter.service を作成:\n\n```\n/etc/systemd/system/clamav-milter.service\n```\n\n```\n[Unit]\nDescription='ClamAV Milter'\nAfter=clamd-daemon.service\n\n[Service]\nType=forking\nExecStart=/usr/bin/clamav-milter --config-file /etc/clamav/clamav-milter.conf\n\n[Install]\nWantedBy=multi-user.target\n```\n\nサービス clamav-milter.service を有効化して起動してください。\n\n"
    },
    {
      "title": "オンアクセススキャン",
      "level": 2,
      "content": "オンアクセススキャンはファイルを読み書き実行した際にスキャンを実行する機能です。\n\nオンアクセススキャンを使うには fanotify を有効にしてコンパイルしたカーネルが必要です (カーネル 3.8 以上)。オンアクセススキャンを有効にする前に fanotify が有効になっているか確認してください:\n\n```\n$ zgrep FANOTIFY /proc/config.gz\n```\n\n/etc/clamav/clamd.conf ファイルの最後に以下を追加して、編集します。(個々のオプションを変更することもできます)\n\n```\n/etc/clamav/clamd.conf\n```\n\n```\n# Set the mount point where to recursively perform the scan,\n# this could be every path or multiple path (one line for path)\nOnAccessMountPath /\nOnAccessExcludePath /proc\nOnAccessExcludePath /run\nOnAccessExcludePath /sys\n\n# Alternatively, add some directories instead of mount points\n# OnAccessIncludePath /home\n\n# Prevention doesn't work with OnAccessMountPath.\n# It works with OnAccessIncludePath, as long as /usr and /etc are not included.\n# Including /var while activating prevention is also not recommended, because\n# this would slow down package installation by a factor of 1000.\nOnAccessPrevention false\n\n# Perform scans on newly created, moved, or renamed files\nOnAccessExtraScanning true\n\n# Exclude the UID of the scanner itself from checking, to prevent loops\nOnAccessExcludeUname clamav\n\n# Optionally, also exclude root-owned processes\n# OnAccessExcludeRootUID true\n\n# Specify an action to perform when clamav detects a malicious file\n# it is possible to specify an inline command too\nVirusEvent /etc/clamav/virus-event.bash\n\n# WARNING: for security reasons, clamd should NEVER run as root.\n# Previous instructions in this wiki included this line, remove it:\n# User root    # REMOVE THIS\n# Add this instead:\nUser clamav\n```\n\n次に、clamav ユーザが sudo を介してカスタム環境変数を持つ任意のユーザとして notify-send を実行することを許可します。\n\n```\n/etc/sudoers.d/clamav\n```\n\n```\nclamav ALL = (ALL) NOPASSWD: SETENV: /usr/bin/notify-send\n```\n\n```\n/etc/clamav/virus-event.bash\n```\n\n```\n#!/bin/bash\nPATH=/usr/bin\nALERT=\"Signature detected by clamav: $CLAM_VIRUSEVENT_VIRUSNAME in $CLAM_VIRUSEVENT_FILENAME\"\n\n# Send an alert to all graphical users.\nfor ADDRESS in /run/user/* ; do\n    USERID=${ADDRESS#/run/user/}\n    /usr/bin/sudo -u \"#$USERID\" DBUS_SESSION_BUS_ADDRESS=\"unix:path=$ADDRESS/bus\" PATH=${PATH} \\\n        /usr/bin/notify-send -i dialog-warning \"Virus found!\" \"$ALERT\"\ndone\n```\n\nclamav-daemon.service を 再起動 します。\n\nデフォルトでは clamonacc は clamav にアクセスしたばかりのファイル名を渡してスキャンします。これは問題で、clamav ユーザがアクセスできないファイルはこの方法ではスキャンできないからです。その代わりに、clamonacc (常に root として実行される) にファイル記述子渡しを使用するように指示することが可能であり。編集 してください。clamav-clamonacc.service に以下のように記述します。\n\n```\n[Service]\nExecStart=\nExecStart=/usr/sbin/clamonacc -F --fdpass --log=/var/log/clamav/clamonacc.log\n```\n\n最後に、clamav-clamonacc.service を 起動/有効化 する必要があります。\n\nもしclamdに関して AppArmor から拒否された場合は、プロファイルを complain-only モードに設定してください。\n\n```\n# aa-complain clamd\n```\n\n"
    },
    {
      "title": "clamscan の使用方法",
      "level": 4,
      "content": "コマンドラインから clamscan を使ってファイルやディレクトリをスキャンする場合、1つの CPU スレッドのみが使用されます。タイミングが重要でない場合や、コンピュータが重くなることを望まない場合は、これでよいかもしれません。大きなフォルダや USB ドライブを高速にスキャンする必要がある場合は、利用可能なすべての CPU を使用してプロセスを高速化することができます。\n\nclamscan はシングルスレッドで設計されているので、xargs を使って並列にスキャンを実行することができます。\n\n```\n$ find /home/archie -type f -print0 | xargs -0 -P $(nproc) clamscan\n```\n\nこの例では、xargs の -P パラメータは、({ic|nproc}} によって報告される)と同じだけプロセスで clamscan を実行します。--max-lines と --max-args オプションにより、スレッド間のワークロードのバッチ処理をさらに細かく制御することができます。\n\n"
    },
    {
      "title": "clamdscan の使用方法",
      "level": 4,
      "content": "すでに clamd デーモンが動作している場合は、代わりに clamdscan を使うことができます (参照 ClamAV#デーモンの起動)\n\n```\n$ clamdscan --multiscan --fdpass /home/archie\n```\n\nここでは、--multiscan パラメータによって clamd が利用可能なスレッドを使用してディレクトリの内容を並行してスキャンすることを可能にしています。--fdpass パラメータは、clamav ユーザとグループの下でデーモンが動作しているので、ファイル記述子のパーミッションを clamd に渡すために必要です。\n\nclamdscan で利用可能なスレッド数は /etc/clamav/clamd.conf の clamd.conf(5) パラメータで決定されます.コマンドラインから MaxThreads を指定してスキャンを開始しても、--multiscan オプションを指定しない場合は、有効な CPU スレッドが 1 つしかスキャンに使用されません(現在のデフォルトは 10 です)\n\n"
    },
    {
      "title": "Error: Clamd was NOT notified",
      "level": 3,
      "content": "freshclam を実行した後に以下のメッセージが表示される場合:\n\n```\nWARNING: Clamd was NOT notified: Cannot connect to clamd through \n/var/lib/clamav/clamd.sock connect(): No such file or directory\n```\n\nClamAV の sock ファイルを追加してください:\n\n```\n# touch /var/lib/clamav/clamd.sock\n# chown clamav:clamav /var/lib/clamav/clamd.sock\n```\n\nそれから、/etc/clamav/clamd.conf を編集して次の行をアンコメントしてください:\n\n```\nLocalSocket /var/lib/clamav/clamd.sock\n```\n\nファイルを保存してデーモンを再起動してください。\n\n"
    },
    {
      "title": "Error: No supported database files found",
      "level": 3,
      "content": "デーモンを起動した時に次のエラーが表示される場合:\n\n```\nLibClamAV Error: cli_loaddb(): No supported database files found\nin /var/lib/clamav ERROR: Not supported data format\n```\n\nこの問題は /etc/freshclam.conf の DatabaseDirectory の設定と /etc/clamd.conf の DatabaseDirectory の設定が一致していないことが原因です。/etc/freshclam.conf が /var/lib/clamav を指定しているのに、/etc/clamd.conf (デフォルトディレクトリ) は /usr/share/clamav など別のディレクトリを指定してしまっています。/etc/clamd.conf を編集して DatabaseDirectory が /etc/freshclam.conf と同じになるようにしてください。設定後 clamav は問題なく起動するはずです。\n\n"
    },
    {
      "title": "Error: Can't create temporary directory",
      "level": 3,
      "content": "次のエラーが UID と GID の番号を含む 'HINT' と一緒に表示される場合:\n\n```\n# can't create temporary directory\n```\n\nパーミッションを直して下さい:\n\n```\n# chown UID:GID /var/lib/clamav & chmod 755 /var/lib/clamav\n```\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- Wikipedia:ja:Clam AntiVirus\n\n"
    }
  ]
}