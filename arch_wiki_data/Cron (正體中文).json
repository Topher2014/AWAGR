{
  "title": "Cron (正體中文)",
  "url": "https://wiki.archlinux.org/title/Cron_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **本條目或段落需要進行翻譯。** 本條目或段落需要進行翻譯。\n\n本條目或段落需要進行翻譯。\n\n相關文章\n\n- systemd/Timers\n\n摘錄維基百科:\n\n"
    },
    {
      "title": "安裝",
      "level": 2,
      "content": "有很多 cron 的實做方法，但都不是預設安裝的，因為基本系統使用的是 systemd/Timers 。 參見 Gentoo 的 cron 指南，它提供了一些比較。\n\n可供使用的套件：\n\n- cronie\n- fcron\n- dcronAUR\n- vixie-cronAUR\n- scron-gitAUR\n\n"
    },
    {
      "title": "啟動和自動啟動",
      "level": 3,
      "content": "安裝後，守護進程預設不會啟動。安裝的套件包很可能提供一種透過 systemctl 來控制的服務。 例如： cronie 使用 cronie.service 。\n\n檢查 /etc/cron.daily/ 和相似的目錄，看看有哪些工作存在。啟動 cron 服務會觸發所有的工作。\n\n"
    },
    {
      "title": "工作的除錯",
      "level": 3,
      "content": "cron 會紀錄來自 stdout 和 stderr 的輸出，並試著透過 sendmail 指令將其作為電子郵件發送到使用者的 spool 。如果沒有找到 /usr/bin/sendmail ， Cronie 將會禁用郵件輸出。為了讓郵件被寫入使用者的 spool ，系統中必須有一個 smtp 的守護進程，例如： opensmtpd 。除此之外你還可以安裝一個提供 sendmail 命令的套件包，並配置它將郵件發送到遠端的郵件交換器。你也可以透過使用 -m 選項並寫一個自定義的腳本來紀錄郵件。\n\n1. 修改 cronie.service 單元。\n1. 安裝 esmtpAUR, msmtp, opensmtpd, sSMTP，或寫一個自定義的腳本。\n\n"
    },
    {
      "title": "sSMTP 的範例",
      "level": 4,
      "content": "sSMTP 是一個只發送郵件的模擬器，它可以將郵件從本機發送到 smtp 伺服器上。雖然目前還沒有活躍的維護者，但它仍然是迄今為止將郵件傳輸到配置好的郵件中心最簡單的方法。它不需要執行守護進程，只需在一個配置文件中編輯三行即可（如果你的主機可以透過 mailhub 轉未經認證的郵件）。\n\n安裝 ssmtpAUR，它會從 /usr/bin/sendmail 建立一個軟連結到 /usr/bin/ssmtp。然後你必須編輯 /etc/ssmtp/ssmtp.conf。詳情請參閱 sSMTP。建立一個軟連結到 /usr/bin/sendmail 可以確保像 S-nail （或任何提供/usr/bin/mail 的程式）都可以不需修改便能正常工作。\n\n重啟 cronie ，以確保它偵測到你現在已經安裝了 /usr/bin/sendmail 。\n\n"
    },
    {
      "title": "msmtp 的範例",
      "level": 4,
      "content": "安裝 msmtp-mta，它會建立一個指向 /usr/bin/msmtp 而位於 /usr/bin/sendmail 的符號連結。重新啟動 cronie 以確保它能夠辨識新的 sendmail 命令。你需要給 msmtp 一個媒界，方可把你的用戶轉成電郵地址。\n\n然後把 MAILTO 加到你的 crontab﹕\n\n```\nMAILTO=your@email.com\n```\n\n或者 建立 /etc/msmtprc 再加上：\n\n```\naliases /etc/aliases\n```\n\n然後建立 /etc/aliases：\n\n```\nyour_username: your@email.com\n# Optional:\ndefault: your@email.com\n```\n\n接着 更改 cronie 守護行程的設定。你可以把 ExecStart 命令更改為：\n\n```\nExecStart=/usr/bin/crond -n -m '/usr/bin/msmtp -t'\n```\n\n"
    },
    {
      "title": "esmtp 的範例",
      "level": 4,
      "content": "安裝 esmtpAUR 和 procmailAUR。\n\n安裝後可設定路由如下：\n\n```\n/etc/esmtprc\n```\n\n```\nidentity myself@myisp.com\n       hostname mail.myisp.com:25\n       username \"myself\"\n       password \"secret\"\n       starttls enabled\n       default\nmda \"/usr/bin/procmail -d %T\"\n```\n\nProcmail 需要超級使用者權限方可於 delivery mode 中執行，但如果你會以超級使用者的身份來執行 cronjobs，這並不會引起問題。\n\n建立一個名為 message.txt ，內容為 \"test message\" 的檔案，以便測試，確認所有東西都正常運作。\n\n在同一個目錄裡執行：\n\n```\n$ sendmail user_name < message.txt\n```\n\n以及：\n\n```\n$ cat /var/spool/mail/user_name\n```\n\n你應該能夠看見 \"test message\" 與發送日期及時間。\n\n所有錯誤訊息將會被重新導向到 /var/spool/mail/user_name。\n\n權限的問題令到建立及傳送郵件到超級使用者變得非常困難。（例﹕su -c \"\"）你可以如下要求 esmtp 去發送超級使用者全部的郵件到一個平凡的用家﹕\n\n```\n/etc/esmtprc\n```\n\n```\nforce_mda=\"user-name\"\n```\n\nNote: 執行以下命令以確保它有正確的權限：\n\n執行以下命令以確保它有正確的權限：\n\n```\n$ chmod 710 ~/.esmtprc\n```\n\n"
    },
    {
      "title": "opensmtpd 的範例",
      "level": 4,
      "content": "安裝 opensmtpd。\n\n編輯 /etc/smtpd/smtpd.conf。以下的設定容許局部性發送：\n\n```\nlisten on localhost\naction \"local\" mbox alias <aliases>\nmatch for local action \"local\"\n```\n\n你可以繼續去測試一下。首先，啟動 smtpd.service 單元。接着執行：\n\n```\n$ echo test | sendmail user\n```\n\n用家們 可於任何能夠處理 mbox 格式的 讀者 去檢查他的郵件，或者看一看檔案 /var/spool/mail/user。如果所有東西都在預期之內，你可以為將來開機而 啟用 opensmtpd 單元。\n\n這可以避免把局部性的 cron 通知發送到一個遠端侍服器。可惜，這個方法需要多一個守護行程。\n\n- 於撰寫此頁之時，Arch 的 opensmtpd 套件不會於 /var/spool/smtpd 建立全部所需的目錄，但是其守護行程將會警告關於所需的擁有者和權限。你可根據那個警告的建議去建立它們。\n- 即使那個建議的設定不會允許遠端接通，用 iptables 或類似的程式去阻止端口 25 以加多一層安全性還是一個好的保險操施。\n\n"
    },
    {
      "title": "Long cron job",
      "level": 4,
      "content": "Suppose this program is invoked by cron :\n\n```\n#!/bin/sh\necho \"I had a recoverable error!\"\nsleep 1h\n```\n\nWhat happens is this:\n\n1. cron runs the script\n1. as soon as cron sees some output, it runs your MTA, and provides it with the headers. It leaves the pipe open, because the job has not finished and there might be more output.\n1. the MTA opens the connection to postfix and leaves that connection open while it waits for the rest of the body.\n1. postfix closes the idle connection after less than an hour and you get an error like this :\n\n```\nsmtpmsg='421 … Error: timeout exceeded' errormsg='the server did not accept the mail'\n```\n\nTo solve this problem you can use the command chronic or sponge from moreutils. From their respective man page:\n\nChronic too buffers the command output before opening its standard output.\n\n"
    },
    {
      "title": "Crontab format",
      "level": 2,
      "content": "The basic format for a crontab is:\n\n```\nminute hour day_of_month month day_of_week command\n```\n\n- minute values can be from 0 to 59.\n- hour values can be from 0 to 23.\n- day_of_month values can be from 1 to 31.\n- month values can be from 1 to 12.\n- day_of_week values can be from 0 to 6, with 0 denoting Sunday.\n\nSpaces are used to separate fields. To fine-tune your schedule you may also use one of the following symbols:\n\nTable content:\nSymbol | Description\n* | Wildcard, specifies every possible time interval\n, | List multiple values separated by a comma.\n- | Specify a range between two numbers, separated by a hyphen\n/ | Specify a periodicity/frequency using a slash\n\nFor example, the line:\n\n```\n*/5 9-16 * 1-5,9-12 1-5 ~/bin/i_love_cron.sh\n```\n\nwill execute the script i_love_cron.sh at five minute intervals from 9 AM to 4:55 PM on weekdays except during the summer months (June, July, and August).\n\nIn addition, crontab has some special keywords:\n\n```\n@reboot at startup \n@yearly once a year\n@annually ( == @yearly)\n@monthly once a month\n@weekly once a week\n@daily once a day\n@midnight ( == @daily)\n@hourly once an hour\n```\n\nFor example:\n\n```\n@reboot ~/bin/i_love_cron.sh\n```\n\nWill execute the script i_love_cron.sh at startup.\n\nSee more at: https://www.adminschoice.com/crontab-quick-reference\n\n"
    },
    {
      "title": "Basic commands",
      "level": 2,
      "content": "Crontabs should never be edited directly; instead, users should use the crontab program to work with their crontabs. To be granted access to this command, user must be a member of the users group (see the gpasswd command).\n\nTo view their crontabs, users should issue the command:\n\n```\n$ crontab -l\n```\n\nTo edit their crontabs, they may use:\n\n```\n$ crontab -e\n```\n\nTo remove their crontabs, they should use:\n\n```\n$ crontab -r\n```\n\nIf a user has a saved crontab and would like to completely overwrite their old crontab, they should use:\n\n```\n$ crontab saved_crontab_filename\n```\n\nTo overwrite a crontab from the command line (Wikipedia:stdin), use\n\n```\n$ crontab -\n```\n\nTo edit somebody else's crontab, issue the following command as root:\n\n```\n# crontab -u username -e\n```\n\nThis same format (appending -u username to a command) works for listing and deleting crontabs as well.\n\n"
    },
    {
      "title": "Examples",
      "level": 2,
      "content": "The entry:\n\n```\n01 * * * * /bin/echo Hello, world!\n```\n\nruns the command /bin/echo Hello, world! on the first minute of every hour of every day of every month (i.e. at 12:01, 1:01, 2:01, etc.).\n\nSimilarly:\n\n```\n*/5 * * jan mon-fri /bin/echo Hello, world!\n```\n\nruns the same job every five minutes on weekdays during the month of January (i.e. at 12:00, 12:05, 12:10, etc.).\n\nThe line (as noted in \"man 5 crontab\"):\n\n```\n*0,*5 9-16 * 1-5,9-12 1-5 /home/user/bin/i_love_cron.sh\n```\n\nwill execute the script i_love_cron.sh at five minute intervals from 9 AM to 5 PM (excluding 5 PM itself) every weekday (Mon-Fri) of every month except during the summer (June, July, and August).\n\nPeriodical settings can also be entered as in this crontab template:\n\n```\n# Chronological table of program loadings                                       \n# Edit with \"crontab\" for proper functionality, \"man 5 crontab\" for formatting\n# User: johndoe\n\n# mm  hh  DD  MM  W /path/progam [--option]...  ( W = weekday: 0-6 [Sun=0] )\n  21  01  *   *   * /usr/bin/systemctl hibernate\n  @weekly           $HOME/.local/bin/trash-empty\n```\n\nHere are some self-explanatory crontab syntax examples:\n\n```\n30 4 echo \"It is now 4:30 am.\"\n0 22 echo \"It is now 10 pm.\"\n30 15 25 12 echo \"It is 3:30pm on Christmas Day.\"\n30 3 * * * echo \"Remind me that it's 3:30am every day.\"\n0 * * * * echo \"It is the start of a new hour.\"\n0 6 1,15 * * echo \"At 6am on the 1st and 15th of every month.\"\n0 6 * * 2,3,5 echo \"At 6am on Tuesday, Wednesday and Thursdays.\"\n59 23 * * 1-5 echo \"Just before midnight on weekdays.\"\n0 */2 * * * echo \"Every two hours.\"\n0 20 * * 4 echo \"8pm on a Thursday.\"\n0 20 * * Thu echo \"8pm on a Thursday.\"\n*/15 9-17 * * 2-5 echo \"Every 15 minutes from 9am-5pm on weekdays.\"\n@yearly echo \"Happy New Year!\"\n```\n\n"
    },
    {
      "title": "Default editor",
      "level": 2,
      "content": "To use an alternate default editor, define the EDITOR environment variable in a shell initialization script as described in Environment variables.\n\nAs a regular user, su will need to be used instead of sudo for the environment variable to be pulled correctly:\n\n```\n$ su -c \"crontab -e\"\n```\n\nTo have an alias to this printf is required to carry the arbitrary string because su launches in a new shell:\n\n```\nalias scron=\"su -c $(printf \"%q \" \"crontab -e\")\"\n```\n\n"
    },
    {
      "title": "Running X.org server-based applications",
      "level": 2,
      "content": "Cron does not run under the X.org server therefore it cannot know the environmental variable necessary to be able to start an X.org server application so they will have to be defined. One can use a program like xuserrun-gitAUR to do it:\n\n```\n17 02 * ... /usr/bin/xuserrun /usr/bin/xclock\n```\n\nOr they can be defined manually (echo $DISPLAY will give the current DISPLAY value):\n\n```\n17 02 * ... env DISPLAY=:0 /usr/bin/xclock\n```\n\nIf running notify-send for desktop notifications in cron, notify-send is sending values to dbus. So it needs to tell dbus to connect to the right bus. The address can be found by examining DBUS_SESSION_BUS_ADDRESS environment variable and setting it to the same value. Therefore:\n\n```\n17 02 * ... env DBUS_SESSION_BUS_ADDRESS=your-address notify-send 'Foo bar'\n```\n\nIf done through say SSH, permission will need be given:\n\n```\n# xhost +si:localuser:$(whoami)\n```\n\n"
    },
    {
      "title": "Asynchronous job processing",
      "level": 2,
      "content": "If you regularly turn off your computer but do not want to miss jobs, there are some solutions available (easiest to hardest):\n\n"
    },
    {
      "title": "Cronie",
      "level": 3,
      "content": "cronie comes with anacron included. The project homepage says:\n\nCronie contains the standard UNIX daemon crond that runs specified programs at scheduled times and related tools. It is based on the original cron and has security and configuration enhancements like the ability to use pam and SELinux.\n\n"
    },
    {
      "title": "Dcron",
      "level": 3,
      "content": "Vanilla dcronAUR supports asynchronous job processing. Just put it with @hourly, @daily, @weekly or @monthly with a jobname, like this:\n\n```\n@hourly         ID=greatest_ever_job      echo This job is very useful.\n```\n\n"
    },
    {
      "title": "Cronwhip",
      "level": 3,
      "content": "cronwhipAUR is a script to automatically run missed cron jobs; it works with the former default cron implementation, dcron. See also the forum thread.\n\n"
    },
    {
      "title": "Anacron",
      "level": 3,
      "content": "Anacron is a full replacement for dcron which processes jobs asynchronously.\n\nIt is provided by cronie. The configuration file is /etc/anacrontab. Information on the format can be found in the anacrontab(5) man page. Running anacron -T will test /etc/anacrontab for validity.\n\n"
    },
    {
      "title": "Fcron",
      "level": 3,
      "content": "Like anacron, fcron assumes the computer is not always running and, unlike anacron, it can schedule events at intervals shorter than a single day which may be useful for systems which suspend/hibernate regularly (such as a laptop). Like cronwhip, fcron can run jobs that should have been run during the computer's downtime.\n\nWhen replacing cronie with fcron be aware the spool directory is /var/spool/fcron and the fcrontab command is used instead of crontab to edit the user crontabs. These crontabs are stored in a binary format with the text version next to them as foo.orig in the spool directory. Any scripts which manually edit user crontabs may need to be adjusted due to this difference in behavior.\n\nA quick scriptlet which may aide in converting traditional user crontabs to fcron format:\n\n```\ncd /var/spool/cron && (\n for ctab in *; do\n  fcrontab ${ctab} -u ${ctab}\n done\n)\n```\n\nSee also the forum thread.\n\n"
    },
    {
      "title": "Ensuring exclusivity",
      "level": 2,
      "content": "If you run potentially long-running jobs (e.g., a backup might all of a sudden run for a long time, because of many changes or a particular slow network connection), then flock (util-linux) can ensure that the cron job will not start a second time.\n\n```\n5,35 * * * * /usr/bin/flock -n /tmp/lock.backup /root/make-backup.sh\n```\n\n"
    },
    {
      "title": "Cronie",
      "level": 2,
      "content": "The relevant file hierarchy for cronie is the following:\n\n```\n/etc/\n     |----- cron.d/\n              | ----- 0hourly\n     |----- cron.minutely/\n     |----- cron.hourly/\n              | ----- 0anacron\n     |----- anacrontab\n     |----- cron.daily/\n     |----- cron.monthly/\n     |----- cron.weekly/\n     |----- crontab\n     |----- cron.deny\n```\n\nCronie provides both cron and anacron functionalities: cron runs jobs at regular time intervals (down to a granularity of one minute) as long as the system is available at the specified time, while anacron executes commands at intervals specified in days. Unlike cron, it does not assume that the system is running continuously. Whenever the system is up, anacron checks if there are any jobs that should have been run and handles them accordingly.\n\nA cron job can be defined in a crontab-like file in the /etc/cron.d directory or added within the /etc/crontab file. Note the latter is not present by default but is used if it exists. As instructed by /etc/cron.d/0hourly, any executable file in /etc/cron.hourly will be run every hour (by default at minute 1 of the hour). Files in /etc/cron.minutely are executed every minute if instructed accordingly in /etc/cron.d/0hourly. The executables are typically shell scripts, symlinks to executable files can also be used. The /etc/cron.deny file includes the list of users not allowed to use crontab, without this file, only users listed in /etc/cron.allow can use it.\n\nAnacron works similarly, by executing the files in the /etc/cron.daily, /etc/cron.weekly and /etc/cron.monthly directories, placed there depending on the desired job frequency. The cron job /etc/cron.hourly/0anacron makes sure that anacron is run once daily to perform its pending tasks.\n\n- Cronie uses run-parts to carry out scripts in the different directories. The filenames should not include any dot (.) since run-parts in its default mode will silently ignore them (see run-parts(8)). The names must consist only of upper and lower-case letters, digits, underscores and minus-hyphens.\n- The output of systemctl status cronie might show a message such as CAN'T OPEN (/etc/crontab): No such file or directory. However, this can be ignored since cronie does not require one.\n- Cronie is particular about the permissions for /etc/cron.d/0hourly. None of the tasks in /etc/cron.d/{hourly,weekly,daily} ... etc will be run (including the anacron launcher) if /etc/cron.d/0hourly is damaged or has improper permissions. pacman -Qkk cronie can show if you have any such issues.\n\n```\n0 1 5 10 * /path/to/script.sh >/dev/null 2>&1\n```\n\n"
    },
    {
      "title": "Dcron",
      "level": 2,
      "content": "The cron daemon parses a configuration file known as crontab. Each user on the system can maintain a separate crontab file to schedule commands individually. The root user's crontab is used to schedule system-wide tasks (though users may opt to use /etc/crontab or the /etc/cron.d directory, depending on which cron implementation they choose).\n\n```\n/var/spool/cron/root\n```\n\n```\n# Run command at a scheduled time\n# Edit this 'crontab -e' for error checking, man 1 crontab for acceptable format\n\n# <@freq>                       <tags and command>\n@hourly         ID=sys-hourly   /usr/sbin/run-cron /etc/cron.hourly\n@daily          ID=sys-daily    /usr/sbin/run-cron /etc/cron.daily\n@weekly         ID=sys-weekly   /usr/sbin/run-cron /etc/cron.weekly\n@monthly        ID=sys-monthly  /usr/sbin/run-cron /etc/cron.monthly\n\n# mm  hh  DD  MM  W /path/command (or tags) # W = week: 0-6, Sun=0\n  21  01  *   *   * /usr/bin/systemctl suspend\n```\n\nThese lines exemplify one of the formats that crontab entries can have, namely whitespace-separated fields specifying:\n\n1. @period\n1. ID=jobname (this tag is specific to dcron)\n1. command\n\nThe other standard format for crontab entries is:\n\n1. minute\n1. hour\n1. day\n1. month\n1. day of week\n1. command\n\nThe crontab files themselves are usually stored as /var/spool/cron/username. For example, root's crontab is found at /var/spool/cron/root\n\nSee the crontab man page for further information and configuration examples.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo Linux Cron Guide\n- crontab.guru - online editor for cronjob expressions\n\n"
    }
  ]
}