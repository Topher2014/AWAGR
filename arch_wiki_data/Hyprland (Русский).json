{
  "title": "Hyprland (Русский)",
  "url": "https://wiki.archlinux.org/title/Hyprland_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **Эта статья или раздел нуждается в переводе** Эта статья или раздел нуждается в переводе\n\nЭта статья или раздел нуждается в переводе\n\nСсылки по теме\n\n- Оконный менеджер\n- Wayland (Русский)\n\nHyprland — это независимый тайловый Wayland-композитор, написанный на C++. Из особенностей Hyprland следует отметить динамическое расположение окон, наличие окон, сгруппированных во вкладки, легко читаемый код на C++ и собственный рендеринг, позволяющий использовать анимации, округлять окна и включать размытие окон. Общие сведения о настройке и пользовании подробно описаны на сайте Hyprland wiki.\n\n"
    },
    {
      "title": "Установка",
      "level": 2,
      "content": "Вы можете использовать один из следующих пакетов, чтобы установить Hyprland:\n\n- hyprland - стабильная версия.\n- hyprland-gitAUR - последняя версия.\n\nНачиная с #6608, Hyprland использует aquamarine в качестве собственной библиотеки рендеринга. До этого использовалась версия wlroots, которая развивалась по принципу wlroots-gitAUR.\n\n- Пользователи видеокарт NVIDIA должны убедиться в том, что они следуют советам последней версии Hyprland Wiki прежде чем пытаться запустить Hyprland. Несоблюдение советов может привести к многочисленным ошибкам, включая невозможность входа в систему, мерцание окон и высокую нагрузку на процессор.\n- Использование видеокарт NVIDIA с видеодрайвером версией ниже 555 может привести к проблемам из-за отсутствия Explicit Sync. Большинство пользователей не сталкивается с ошибками, но они присутствуют и их много.\n- Также убедитесь, что пакет Polkit установлен,так как его отсутствие может привести к невозможности запуска Hyprland. (logind missing permissions)\n\n"
    },
    {
      "title": "Настройка",
      "level": 2,
      "content": "Настройка осуществляется через единственный конфигурационный файл, hyprland.conf, также поддерживается разбиение на несколько файлов и включение их в hyprland.conf. По умолчанию используется файл /usr/share/hyprland/hyprland.conf, а после первого входа в систему - ~/.config/hypr/hyprland.conf.\n\nhyprland.conf содержит директивы для настройки устройств (клавиатуры, мыши, трекпада, монитора и прочих), а также настройки анимации, оформления и т.д. Вы можете задать привязку клавиш, правила работы с окнами и выполнение команд.\n\nКонфигурация автоматически перезагружается каждый раз, когда вы сохраняете файл. Вы также можете использовать hyprctl reload для такого же эффекта. Для некоторых настроек (в частности, настроек ввода) может потребоваться перезапуск сессии Hyprland.\n\nНастройки также можно изменить мгновенно с помощью hyprctl, но они не будут сохранены.\n\n"
    },
    {
      "title": "Раскладка",
      "level": 4,
      "content": "По умолчание Hyprland будет использовать US Qwerty, вы можете изменить это следующим образом:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Русская + английская раскладка\ninput {\n    ...\n    kb_layout = us, ru\n    ...\n    }\n```\n\nПросмотреть все доступные варианты вы можете на странице Hyprland Wiki.\n\n"
    },
    {
      "title": "Задержка и скорость",
      "level": 4,
      "content": "Если пользователи Xorg привыкли к тому, что этот параметр задаётся на уровне сервера, то в Wayland каждый композитор обрабатывает его самостоятельно:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Repeat rate and delay\ninput {\n    ...\n    repeat_rate = 25\n    repeat_delay = 600\n    ...\n    }\n```\n\n"
    },
    {
      "title": "Подсветка клавиатуры",
      "level": 4,
      "content": "Использование регуляторов яркости клавиатуры в Hyprland возможно. Установите brightnessctl и добавьте соответствующие привязки (замените keyboard_brightness_* на SUPER, FX или XF86KbdBrightness в зависимости от того, как ваше оборудование отображает подсветку клавиатуры):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Подсветка клавиатуры\nbind = , keyboard_brightness_up_shortcut, exec, brightnessctl -d *::kbd_backlight set +33%\nbind = , keyboard_brightness_down_shortcut, exec, brightnessctl -d *::kbd_backlight set 33%-\n```\n\nТакже можно включить уведомления на экране, который будут появляться при внесении изменений.\n\n"
    },
    {
      "title": "Привязка мультимедии",
      "level": 4,
      "content": "Использование привязки команд к клавишам в Hyprland возможно с помощью XF86Audio keysyms и приложений pavucontrol или pamixer и playerctl.\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Управление громкостью и мультимедия\nbind = , XF86AudioRaiseVolume, exec, pamixer -i 5\nbind = , XF86AudioLowerVolume, exec, pamixer -d 5\nbind = , XF86AudioMicMute, exec, pamixer --default-source -m\nbind = , XF86AudioMute, exec, pamixer -t\nbind = , XF86AudioPlay, exec, playerctl play-pause\nbind = , XF86AudioPause, exec, playerctl play-pause\nbind = , XF86AudioNext, exec, playerctl next\nbind = , XF86AudioPrev, exec, playerctl previous\n```\n\nТакже можно включить уведомления на экране, который будут появляться при внесении изменений.\n\n"
    },
    {
      "title": "Настройка жестов",
      "level": 3,
      "content": "Будучи композитором Wayland, Hyprland имеет полную поддержку жестов, хотя по умолчанию они отключены. Чтобы включить их, внесите следующие изменения в конфигурационный файл:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Включить жесты\ngestures {\n    workspace_swipe = true\n    workspace_swipe_fingers = 3\n}\n```\n\nПросмотреть все доступные варианты вы можете на странице Hyprland Wiki.\n\n"
    },
    {
      "title": "Демонстрация экрана",
      "level": 4,
      "content": "Смотрите демонстрация экрана\n\nБудучи совместимым с wlroots композитором, Hyprland может использовать xdg-desktop-portal-wlr для включения захвата экрана в ряде приложении посредством xdg-desktop-portal.\n\nHyprland также взаимодействует с xdg-desktop-portal-hyprland, который поддерживает демонстрацию экрана (включая демонстрацию области и демонстрацию окна), общие сочетания клавиш, и имеет утилиту для палитры. Использование портала дополнительно документировано в Hyprland wiki[устаревшая ссылка 2024-11-05 ⓘ].\n\nСтоит отметить, что xdg-desktop-portal-hyprland не включает в себя средство выбора файлов, для которого пользователи могут дополнительно установить xdg-desktop-portal-gtk.\n\n"
    },
    {
      "title": "Установка разрешении экрана",
      "level": 4,
      "content": "Hyprland пытается обнаружить разрешение вашего экрана автоматически, однако в некоторых случаях оно выдаёт сбой и по умолчанию перейдёт в режим отказоустойчивости, как правило, если имеется несколько экранов или если у вас гибридный ноутбук. Если на вашем экране всё огромное, то вам необходимо настроить монитор и разрешение по умолчанию.\n\nСначала найдите монитор по умолчанию, используя hyprctl:\n\n```\n$ hyprctl monitors\n```\n\n```\nMonitor eDP-1 (ID 0):\n        1920x1080@144.003006 at 0x0\n        description: Chimei Innolux Corporation 0x153C (eDP-1)\n        ...\n```\n\nПосле чего добавьте ваш монитор в конфигурацию:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\n# Подробности монитора\nmonitor=eDP-1,1920x1080@144,0x0,1\n...\n```\n\n0x0 это смещение позиции, используемое для многоэкранных настроек, и наконец 1 это коэффициент масштабирования экрана.\n\nОбратитесь к странице про настройку мониторов Hyprland Wiki за дальнейшей инфромацией.\n\n"
    },
    {
      "title": "Подсветка экрана",
      "level": 4,
      "content": "Установите brightnessctl, после чего добавьте следующие комбинации клавиш:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Яркость экрана\nbind = , XF86MonBrightnessUp, exec, brightnessctl s +5%\nbind = , XF86MonBrightnessDown, exec, brightnessctl s 5%-\n```\n\nТакже можно использовать экранные уведомления, которые срабатывают при внесении изменений.\n\n"
    },
    {
      "title": "Universal Wayland Session Manager",
      "level": 4,
      "content": "Uwsm желателен для запуска Hyprland на дистрибутивах на основе systemd, в том числе arch linux. Он оборачивает Hyprland и соответствующие приложения в systemd-сервисы, позволяя управлять ими через systemctl.\n\nВы можете запустить Hyprland через uwsm в TTY следующим скриптом в своем ~/.profile\n\n```\nif uwsm check may-start && uwsm select; then\n  exec systemd-cat -t uwsm_start uwsm start default\nfi\n```\n\n```\nif uwsm check may-start; then\n  exec uwsm start hyprland.desktop\nfi\n```\n\nили через экранный менеджер с помощью hyprland-uwsm.desktop или hyprland (uwsm-managed) в своем экранном менеджере.\n\nNote: **не стоит использовать exit диспатчер или выключать процесс Hyprland вручную, так как это будет мешать стандартному процессу выхода из системы** \n\n- не стоит использовать exit диспатчер или выключать процесс Hyprland вручную, так как это будет мешать стандартному процессу выхода из системы. Вместо этого используйте uwsm stop или loginctl terminate-user \"\" Чтобы выключить Hyprland и пользовательскую сессию. Например:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\nbind = $mainMod, M, exec, uwsm stop\n```\n\n- не помещайте переменные окружения в hyprland.conf, вместо этого используйте uwsm файлы ~/.config/uwsm/env для переменных всех окружений запускающихся через uwsm (GTK, Qt, xcursor, ...) и ~/.config/uwsm/env-hyprland для переменных тоолько под Hyprland (например HYPR* и AQ_* переменные). Формат файлов следующий: export KEY=VALUE на каждой строке без комментариев. Если вы используете несколько видеокарт, рекомендуется помещать AQ_DRM_DEVICES внутрь env-hyprland чтобы избежать конфликты с другими композиторами.\n\n"
    },
    {
      "title": "Terminal",
      "level": 4,
      "content": "Вы можете запустить Hyprland через TTY с помощью команды\n\n```\n$ Hyprland\n```\n\n"
    },
    {
      "title": "Display managers",
      "level": 4,
      "content": "Хотя запуск с помощью экранного менеджера официально не поддерживается, у некоторх пользователей получается запустить Hyprland с помощью GDM, SDDM и других. Hyprland Wiki Содержит список совместимых экранных менеджеров. Пакет hyprland содержит запись для экранного менеджера, и все Hyprland пакеты в AUR создают её автоматически.\n\nОба метода создают идентичный результат, с поправкой в несколько переменных окружения и служб\n\n"
    },
    {
      "title": "Auto login",
      "level": 3,
      "content": "Пользователь может войти автоматически с помощью экранного менеджера или адаптируя метод из Xinit#Autostart X at login.\n\n"
    },
    {
      "title": "hyprctl and IPC",
      "level": 3,
      "content": "hyprctl is a command line utility that comes installed with Hyprland to communicate with the display server. It allows you to dispatch commands to the server (equivalent to commands in the configuration file, but with a slightly different syntax), set keywords, send queries and request information. See the full documentation.\n\nHyprland also exposes 2 UNIX Sockets for controlling and getting information about Hyprland via code or command-line utilities. These sockets broadcast events on focus change (windows, workspaces, monitors), creation of windows/workspace, and so on.\n\nBoth hyprctl and the IPC sockets can be effectively used in scripts to control Hyprland for complex tasks.\n\n"
    },
    {
      "title": "exec versus exec-once",
      "level": 3,
      "content": "When starting applications it is important to use the correct type of dispatcher, using exec incorrectly can result in applications being started multiple times taking up system resources and in the worst cases, causing a race condition that can crash your system.\n\nNote: **each time a change to the file is saved** \n\n"
    },
    {
      "title": "Setting environment variables",
      "level": 3,
      "content": "It is possible to set environment variables directly in hyprland.conf through the env keyword, which has a different syntax than the env UNIX command used by shells.\n\nThe differences are explained on the upstream Wiki.\n\n"
    },
    {
      "title": "Hypr-Ecosystem",
      "level": 2,
      "content": "The Hyprland development team are building an ecosystem of applications tailored to be specifically used with Hyprland, these tools will include dispatchers allowing for them to be controlled with hyprctl rather than relying on scripts.\n\nCurrently the ecosystem consists of:\n\n"
    },
    {
      "title": "Hyprpaper",
      "level": 3,
      "content": "Hyprpaper is a wallpaper utility, it can be installed with the hyprpaper package.\n\n"
    },
    {
      "title": "Hyprpicker",
      "level": 3,
      "content": "Hyprpicker is a utility to grab a colour from your desktop, it can be installed with the hyprpicker package.\n\n"
    },
    {
      "title": "Hypridle",
      "level": 3,
      "content": "Hypridle is an idle management daemon, it can be installed with the hypridle package.\n\n"
    },
    {
      "title": "Hyprlock",
      "level": 3,
      "content": "Hyprlock is a screen lock manager, it can be installed with the hyprlock package.\n\n"
    },
    {
      "title": "Hyprcursor",
      "level": 3,
      "content": "Hyprcursor is a new format for handling screen cursors that offers many improvements over the traditional way, it can be installed with the hyprcursor package,\n\n"
    },
    {
      "title": "Hyprcursor themes",
      "level": 4,
      "content": "Cursor themes can be installed from the AUR, for example:\n\n- sweet-cursors-hyprcursor-gitAUR\n- nordzy-hyprcursorsAUR\n- xcursor-pro-hyprcursorAUR\n- hyprcursor-dracula-kde-gitAUR\n\nInstructions for porting existing themes to Hyprcursor are available on the upstream GitHub repository.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "- For all below sections there will usually be more than one way of achieving a similar result, everything provided here is a basic example.\n- For a comprehensive list of alternatives refer to List of applications, a Hyprland specific list can be found on the upstream Wiki.\n\n"
    },
    {
      "title": "File manager",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application if graphical file management is desired. Using thunar as an example, we simply need to assign it a keybind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, E, exec, thunar\n...\n```\n\n"
    },
    {
      "title": "Application launcher",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to launch applications. Using wofi as an example, we simply need to assign it a keybind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, F, exec, wofi --show drun\n...\n```\n\n"
    },
    {
      "title": "Idle",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external idle management daemon. The most common setup is swayidle and swaylock. You can lock your screen manually using a bind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, L, exec, swaylock -f -c 000000\n...\n```\n\n"
    },
    {
      "title": "Automatic screen locking and suspend",
      "level": 4,
      "content": "Create the following script:\n\n```\n~/.config/hypr/scripts/sleep.sh\n```\n\n```\nswayidle -w timeout 300 'swaylock -f -c 000000' \\\n            timeout 600 'systemctl suspend' \\\n            before-sleep 'swaylock -f -c 000000' &\n```\n\n- You can adjust the timeout periods by editing the numerical values, in seconds. 300 is 5 minutes, 600 is 10 minutes etc.\n- The script must be executable.\n\nThen call it:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = ~/.config/hypr/scripts/sleep.sh\n...\n```\n\n"
    },
    {
      "title": "Turning off the screen using DPMS after a timeout period",
      "level": 4,
      "content": "Hyprland has a built in dispatcher to handle DPMS requests however using it as a direct keybind is not recommended, doing so will result in you not being able to turn the screen back on and will require you to reboot.\n\nEdit the script from above and change it to read:\n\n```\n~/.config/hypr/scripts/sleep.sh\n```\n\n```\nswayidle -w timeout 300 'swaylock -f -c 000000' \\\n            timeout 600 'hyprctl dispatch dpms off' \\\n            resume 'hyprctl dispatch dpms on' \\\n            timeout 900 'systemctl suspend' \\\n            before-sleep 'swaylock -f -c 000000' &\n```\n\nThe above setup will result in your monitor powering off while you are doing things like playing a game, watching a video or listening to music where you might not touch the system for longer than the timeout period.\n\nTo fix this you can either use Hyprlands built in Window Rules V2 function which has a idleinhibit rule or you can install one of either idlehack-gitAUR or sway-audio-idle-inhibit-gitAUR. The former uses D-Bus to prevent Swayidle requests whenever Firefox or Chromium are playing audio/video. The latter prevents Swayidle requests whenever any application is playing audio.\n\nFor programs that use org.freedesktop.ScreenSaver.inhibit to pause the screensaver, you can install wscreensaver-bridge-gitAUR[ссылка недействительна: package not found] to implement it for Hyprland (or any Wayland compositor that support the idle-inhibit protocol).\n\n"
    },
    {
      "title": "Status bar",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to display a status bar. Using waybar as an example, we simply need to call it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = waybar -c ~/.config/waybar/waybar.conf\n...\n```\n\n"
    },
    {
      "title": "Workspace overview",
      "level": 4,
      "content": "waybar has a built in, fully customisable module that supports Hyprland workspace switching natively.\n\nSee the waybar Wiki [1] for details.\n\n"
    },
    {
      "title": "Polkit authentication",
      "level": 3,
      "content": "Polkit authentication requires the use of an external authentication agent. Hyprland recommends using polkit-kde-agent but any should work.\n\nCall it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = /usr/lib/polkit-kde-authentication-agent-1\n...\n```\n\n"
    },
    {
      "title": "Desktop wallpaper",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to manage desktop wallpapers. Using swww as an example, we simply need to call it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = swww-daemon\nexec-once = swww img path/to/image\n...\n```\n\n"
    },
    {
      "title": "Using a script to change wallpaper every X minutes",
      "level": 4,
      "content": "Create the following script and make sure its executable:\n\n```\n~/.config/hypr/scripts/swww-random\n```\n\n```\n#!/bin/bash\n\n# This script will randomly go through the files of a directory, setting it\n# up as the wallpaper at regular intervals\n#\n# NOTE: this script uses bash (not POSIX shell) for the RANDOM variable\n\nif [[ $# -lt 1 ]] || [[ ! -d $1   ]]; then\n\techo \"Usage:\n\t$0 <dir containing images>\"\n\texit 1\nfi\n\n# Edit below to control the images transition\nexport SWWW_TRANSITION_FPS=144\nexport SWWW_TRANSITION_STEP=2\nexport SWWW_TRANSITION_TYPE=random\n\n# This controls (in seconds) when to switch to the next image\nINTERVAL=300\n\nwhile true; do\n\tfind \"$1\" \\\n\t\t| while read -r img; do\n\t\t\techo \"$((RANDOM % 1000)):$img\"\n\t\tdone \\\n\t\t| sort -n | cut -d':' -f2- \\\n\t\t| while read -r img; do\n            if [[ \"$img\" != \"$1\" ]]; then\n\t\t\t    swww img \"$img\"\n\t\t\t    sleep $INTERVAL\n            fi \n\t\tdone\ndone\n```\n\nNext create a new folder to store background images, something like ~/.config/hypr/backgrounds should work fine, and populate it with any images you want.\n\nFinally call the script:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = swww-daemon\nexec-once = ~/.config/hypr/scripts/swww-random ~/.config/hypr/background\n...\n```\n\n"
    },
    {
      "title": "On screen notifications",
      "level": 3,
      "content": "On screen notifications for actions like brightness and volume changes are possible by using external notification daemons. This is a very complex topic and covering it completely is beyond the scope of this page. Rather, this section will focus on mako so go ahead and install it.\n\nSee Desktop notifications for further instructions and Desktop notifications#Standalone for a list of alternatives.\n\n- All scripts offered here are examples and will very likely need to be adjusted for your setup.\n- All scripts in this section must be executable.\n\n"
    },
    {
      "title": "Mako",
      "level": 4,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nMako is a lightweight notification daemon, you can read mako(5) for details. Its configuration file is ~/.config/mako/config, icons used for OSD are stored at ~/.config/mako/icons/ and should be in PNG format.\n\nFor the rest of this section all the images used by the scripts are available from this GitHub folder.\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/kbbacklight\n```\n\n```\n#!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get brightness\nget_backlight() {\n\tLIGHT=\"$(cat /sys/class/leds/*::kbd_backlight/brightness)\"\n\techo \"${LIGHT}\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=\"$(cat /sys/class/leds/*::kbd_backlight/brightness)\"\n\n\tif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"1\") ]]; then\n\t\ticon=\"$iDIR/brightness-20.png\"\n\telif [[ (\"$current\" -ge \"1\") && (\"$current\" -le \"2\") ]]; then\n\t\ticon=\"$iDIR/brightness-60.png\"\n\telif [[ (\"$current\" -ge \"2\") && (\"$current\" -le \"3\") ]]; then\n\t\ticon=\"$iDIR/brightness-100.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"Keyboard Brightness : $(brightnessctl -d '*::kbd_backlight' g)\"\n}\n\n# Increase brightness\ninc_backlight() {\n\tbrightnessctl -d *::kbd_backlight set 33%+ && get_icon && notify_user\n}\n\n# Decrease brightness\ndec_backlight() {\n\tbrightnessctl -d *::kbd_backlight set 33%- && get_icon && notify_user\n}\n\n# Zero brightness\nzero_backlight() {\n\tbrightnessctl -d *::kbd_backlight s 0%\n}\n\n# Full brightness\nfull_backlight() {\n\tbrightnessctl -d *::kbd_backlight s 100%\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tbrightnessctl -d '*::kbd_backlight' g\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_backlight\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_backlight\nelif [[ \"$1\" == \"--zero\" ]]; then\n\tzero_backlight\nelif [[ \"$1\" == \"--full\" ]]; then\n\tfull_backlight\n\nelse\n\tget_backlight\nfi\n```\n\nThen add a new bind, or edit any existing one:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Keyboard brightness\nbind = keyboard_brightness_up_shortcut, exec, ~/.config/hypr/scripts/kbbacklight --inc\nbind = keyboard_brightness_down_shortcut, exec, ~/.config/hypr/scripts/kbbacklight --dec\n```\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/volume\n```\n\n```\n#!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get Volume\nget_volume() {\n\tvolume=$(pamixer --get-volume)\n\techo \"$volume\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=$(get_volume)\n\tif [[ \"$current\" -eq \"0\" ]]; then\n\t\techo \"$iDIR/volume-mute.png\"\n\telif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"30\") ]]; then\n\t\techo \"$iDIR/volume-low.png\"\n\telif [[ (\"$current\" -ge \"30\") && (\"$current\" -le \"60\") ]]; then\n\t\techo \"$iDIR/volume-mid.png\"\n\telif [[ (\"$current\" -ge \"60\") && (\"$current\" -le \"100\") ]]; then\n\t\techo \"$iDIR/volume-high.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_icon)\" \"Volume : $(get_volume) %\"\n}\n\n# Increase Volume\ninc_volume() {\n\tpamixer -i 5 && notify_user\n}\n\n# Decrease Volume\ndec_volume() {\n\tpamixer -d 5 && notify_user\n}\n\n# Toggle Mute\ntoggle_mute() {\n\tif [ \"$(pamixer --get-mute)\" == \"false\" ]; then\n\t\tpamixer -m && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/volume-mute.png\" \"Volume Switched OFF\"\n\telif [ \"$(pamixer --get-mute)\" == \"true\" ]; then\n\t\tpamixer -u && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_icon)\" \"Volume Switched ON\"\n\tfi\n}\n\n# Toggle Mic\ntoggle_mic() {\n\tif [ \"$(pamixer --default-source --get-mute)\" == \"false\" ]; then\n\t\tpamixer --default-source -m && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/microphone-mute.png\" \"Microphone Switched OFF\"\n\telif [ \"$(pamixer --default-source --get-mute)\" == \"true\" ]; then\n\t\tpamixer -u --default-source u && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/microphone.png\" \"Microphone Switched ON\"\n\tfi\n}\n# Get icons\nget_mic_icon() {\n\tcurrent=$(pamixer --default-source --get-volume)\n\tif [[ \"$current\" -eq \"0\" ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"30\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"30\") && (\"$current\" -le \"60\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"60\") && (\"$current\" -le \"100\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\tfi\n}\n# Notify\nnotify_mic_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_mic_icon)\" \"Mic-Level : $(pamixer --default-source --get-volume) %\"\n}\n\n# Increase MIC Volume\ninc_mic_volume() {\n\tpamixer --default-source -i 5 && notify_mic_user\n}\n\n# Decrease MIC Volume\ndec_mic_volume() {\n\tpamixer --default-source -d 5 && notify_mic_user\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tget_volume\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_volume\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_volume\nelif [[ \"$1\" == \"--toggle\" ]]; then\n\ttoggle_mute\nelif [[ \"$1\" == \"--toggle-mic\" ]]; then\n\ttoggle_mic\nelif [[ \"$1\" == \"--get-icon\" ]]; then\n\tget_icon\nelif [[ \"$1\" == \"--get-mic-icon\" ]]; then\n\tget_mic_icon\nelif [[ \"$1\" == \"--mic-inc\" ]]; then\n\tinc_mic_volume\nelif [[ \"$1\" == \"--mic-dec\" ]]; then\n\tdec_mic_volume\nelse\n\tget_volume\nfi\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Volume\nbind = , XF86AudioRaiseVolume, exec, ~/.config/hypr/scripts/volume --inc \nbind = , XF86AudioLowerVolume, exec, ~/.config/hypr/scripts/volume --dec \nbind = , XF86AudioMicMute, exec, ~/.config/hypr/scripts/volume --toggle-mic \nbind = , XF86AudioMute, exec, ~/.config/hypr/scripts/volume --toggle\n```\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/backlight\n```\n\n```\n!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get brightness\nget_backlight() {\n\tLIGHT=$(printf \"%.0f\\n\" $(brightnessctl g))\n\techo \"${LIGHT}\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=\"$(get_backlight)\"\n\tif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"19200\") ]]; then\n\t\ticon=\"$iDIR/brightness-20.png\"\n\telif [[ (\"$current\" -ge \"19200\") && (\"$current\" -le \"38400\") ]]; then\n\t\ticon=\"$iDIR/brightness-40.png\"\n\telif [[ (\"$current\" -ge \"38400\") && (\"$current\" -le \"57600\") ]]; then\n\t\ticon=\"$iDIR/brightness-60.png\"\n\telif [[ (\"$current\" -ge \"57600\") && (\"$current\" -le \"76800\") ]]; then\n\t\ticon=\"$iDIR/brightness-80.png\"\n\telif [[ (\"$current\" -ge \"76800\") && (\"$current\" -le \"96000\") ]]; then\n\t\ticon=\"$iDIR/brightness-100.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"Brightness : $(get_backlight)\"\n}\n\n# Increase brightness\ninc_backlight() {\n\tbrightnessctl s +5% && get_icon && notify_user\n}\n\n# Decrease brightness\ndec_backlight() {\n\tbrightnessctl s 5%- && get_icon && notify_user\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tget_backlight\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_backlight\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_backlight\nelse\n\tget_backlight\nfi\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Screen brightness\nbind = , XF86MonBrightnessUp, exec, ~/.config/hypr/scripts/backlight --inc \nbind = , XF86MonBrightnessDown, exec, ~/.config/hypr/scripts/backlight --dec\n```\n\nTo run this script, you need a command-line JSON processor gojqAUR.\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/lang\n```\n\n```\n#!/usr/bin/env bash\n\nicon=\"$HOME/.config/mako/icons/language.png\"\n\n# Get language\nget_lang() {\n\tlang=$(hyprctl devices -j | gojq -r '.keyboards[] | select(.name == \"at-translated-set-2-keyboard\") | .active_keymap' | cut -c 1-2 | tr 'A-Z' 'a-z')\n\tcase $lang in\n\t\ten)\n\t\t\tlang=\"English language\"\n\t\t\t;;\n\t\tru)\n\t\t\tlang=\"Русский язык\"\n\t\t\t;;\n\t\tuk)\n\t\t\tlang=\"Українська мова\"\n\t\t\t;;\n\tesac\n\techo $lang\n}\n\n# Notify\nnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"$(get_lang)\"\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\ndevice:at-translated-set-2-keyboard {\n    kb_layout = us,ru,ua\n    kb_variant = lang\n    kb_options = grp:win_space_toggle\n}\n\n# Language\nbind = SUPER, SPACE, exec, ~/.config/hypr/scripts/lang\n```\n\n"
    },
    {
      "title": "Power control",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application for power control. Using nwg-bar as an example, we simply need to bind it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, ESCAPE, exec, nwg-bar\n...\n```\n\n"
    },
    {
      "title": "Clipboard",
      "level": 3,
      "content": "Wayland clipboard behaviour deletes data when closing the application we copied it from. Other desktop environments work around this by using dedicated clipboard managers and on Hyprland there are multiple compatible choices. See the upstream Wiki for more information.\n\nThis section will cover cliphist as it supports copying images as well as text, start by adding the following:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = wl-paste --type text --watch cliphist store \nexec-once = wl-paste --type image --watch cliphist store\n...\n```\n\nThen create a bind to call the history in your chosen application launcher:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, V, exec, cliphist list | wofi --dmenu | cliphist decode | wl-copy\n...\n```\n\nNow pressing Super+v will open up a wofi window with a clipboard history list.\n\n"
    },
    {
      "title": "Enable/disable devices",
      "level": 3,
      "content": "To enable/disable devices (e.g. touchpad), first use\n\n```\n$ hyprctl devices\n```\n\nto get the name of your device.\n\nPut these lines of code into your configuration file (replace <device_name> with the name of your device queried above) to turn the device on/off:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\ndevice:<device_name> {\n  enabled = {true/false}\n}\n```\n\nTo dynamically switch the device on/off use hyprctl:\n\n```\n$ hyprctl keyword \"device:<device_name>:enabled\" {true|false}\n```\n\nYou can also create a keybinding, e.g.:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = $mainMod, t, exec, hyprctl keyword \"device:pixa3854:00-093a:0274-touchpad:enabled\" false\nbind = $mainMod Shift, t, exec, hyprctl keyword \"device:pixa3854:00-093a:0274-touchpad:enabled\" true\n...\n```\n\n"
    },
    {
      "title": "xdg-desktop-portal-hyprland is using a lot of CPU",
      "level": 3,
      "content": "This is a known bug [2] that should be resolved in the latest Git build. You can work around it by calling the nuclear script[устаревшая ссылка 2024-11-05 ⓘ] from the Hyprland wiki in your hyprland.conf file.\n\n"
    },
    {
      "title": "Native (wayland) electron apps flickering on NVIDIA",
      "level": 3,
      "content": "It is a widespread issue among NVIDIA users on Hyprland [3], [4] because of lack of support for explicit sync in Hyprland [5]. Recommended temporary fix is using X11 (XWayland) with the problematic apps by passing them --ozone-platform-hint=x11, or setting env = ELECTRON_OZONE_PLATFORM_HINT,x11 in ~/.config/hypr/hyprland.conf to force all electron apps to run using XWayland.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Hyprland Website\n- The official documentation\n- Hyprland Github Page\n- Community-maintained list of tools, plugins and extensions\n- SolDoesTech Github Repo - Notification scripts creator\n\n"
    }
  ]
}