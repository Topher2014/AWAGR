{
  "title": "Despejos de núcleo",
  "url": "https://wiki.archlinux.org/title/Despejos_de_n%C3%BAcleo",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Um despejo de núcleo (core dump) é um arquivo que contém o espaço de endereço de um processo (memória) quando o processo termina inesperadamente. Despejos de núcleo podem ser produzidos sob demanda (como por um depurador), ou automaticamente após o encerramento. Despejos de núcleos são acionados pelo kernel em resposta a travamentos do programa e podem ser passados para um programa auxiliar (como systemd-coredump(8)) para processamento posterior. Um despejo de núcleo não é normalmente usado por um usuário médio, mas pode ser repassado aos desenvolvedores mediante solicitação, onde pode ser inestimável como um instantâneo post-mortem do estado do programa no momento da falha, especialmente se a falha for difícil de reproduzir de forma confiável.\n\n"
    },
    {
      "title": "Desabilitando automaticamente despejos de núcleo",
      "level": 2,
      "content": "Os usuários podem desejar desativar os despejos de núcleo automáticos por uma série de razões:\n\n- Desempenho: gerar despejos de núcleo para processos com muita memória pode desperdiçar recursos do sistema e atrasar a limpeza da memória.\n- Espaço em disco: os despejos de núcleo de processos com muita memória podem consumir espaço em disco igual, senão maior, que a área de cobertura da memória do processo se não for compactado.\n- Segurança: despejos de núcleo, embora normalmente legíveis apenas pelo root, podem conter dados confidenciais (como senhas ou chaves criptográficas), que são gravados no disco após um travamento.\n\n"
    },
    {
      "title": "Usando sysctl",
      "level": 3,
      "content": "sysctl pode ser usado para definir o kernel.core_pattern para nada para desabilitar o tratamento de despejo de núcleo. Crie este arquivo[1]:\n\n```\n/etc/sysctl.d/50-coredump.conf\n```\n\n```\nkernel.core_pattern=|/bin/false\n```\n\nPara aplicar a configuração imediatamente, use sysctl:\n\n```\n# sysctl -p /etc/sysctl.d/50-coredump.conf\n```\n\n"
    },
    {
      "title": "Usando systemd",
      "level": 3,
      "content": "O comportamento padrão do systemd é gerar despejos de núcleo para todos os processos em /var/lib/systemd/coredump. Este comportamento pode ser substituído criando um trecho de código de configuração no diretório /etc/systemd/coredump.conf.d/ com o seguinte conteúdo (coredump.conf(5) § DESCRIPTION, [2]):\n\n```\n/etc/systemd/coredump.conf.d/custom.conf\n```\n\n```\n[Coredump]\nStorage=none\n```\n\nEm seguida, recarregue a configuração do systemd.\n\n```\n# systemctl daemon-reload\n```\n\nEste método sozinho geralmente é suficiente para desabilitar os despejos de núcleo do espaço do usuário, contanto que nenhum outro programa habilite os despejos de núcleo automáticos no sistema, mas o despejo de núcleo ainda é gerado na memória e na execução de systemd-coredump.\n\n"
    },
    {
      "title": "Usando limites do PAM",
      "level": 3,
      "content": "O tamanho máximo de despejos de núcleo para usuários autenticados via PAM é imposto por limits.conf. Definir como zero desabilita os despejos com núcleo inteiramente. [3]\n\n```\n/etc/security/limits.conf\n```\n\n```\n* hard core 0\n```\n\n"
    },
    {
      "title": "Usando ulimit",
      "level": 3,
      "content": "Shells de linha de comando como bash ou zsh fornecem um comando embutido ulimit que pode ser usado para relatar ou definir limites de recursos do shell e os processos iniciados pelo shell. Veja bash(1) § SHELL BUILTIN COMMANDS ou zshbuiltins(1) para detalhes.\n\nPara desabilitar despejos de núcleo na shell atual:\n\n```\n$ ulimit -c 0\n```\n\n"
    },
    {
      "title": "Fazendo um despejo de núcleo",
      "level": 2,
      "content": "Para gerar um despejo de núcleo de um processo arbitrário, primeiro instale o pacote gdb. Em seguida, encontre o PID do processo em execução, por exemplo com pgrep:\n\n```\n$ pgrep -f firefox\n```\n\n```\n2071 firefox\n```\n\nAnexe ao processo:\n\n```\n$ gdb -p 2071\n```\n\nEntão, no prompt (gdb):\n\n```\n(gdb) generate-core-file\nSaved corefile core.2071\n(gdb) quit\n```\n\nAgora, você tem um arquivo de despejo de núcleo chamado core.2071.\n\n"
    },
    {
      "title": "Aonde eles vão?",
      "level": 3,
      "content": "O sysctl kernel.core_pattern decide aonde os despejos de núcleo automáticos vão. Por padrão, despejos de núcleo são enviados para systemd-coredump que pode ser configurado em /etc/systemd/coredump.conf. Por padrão, todos os despejos de núcleo são armazenados em /var/lib/systemd/coredump (por causa de Storage=external) e eles são compactados com lz4 (por causa de Compress=yes). Adicionalmente, vários limites de tamanho para o armazenamento podem ser configurados.\n\nPara obter um despejo de núcleo do journal, veja coredumpctl(1).\n\n"
    },
    {
      "title": "Examinando um despejo de núcleo",
      "level": 2,
      "content": "Use coredumpctl para localizar um despejo correspondente:\n\n```\n# coredumpctl list\n```\n\nVocê precisa identificar exclusivamente o despejo relevante. Isso é possível especificando um PID, nome do executável, caminho para o executável ou um predicado journalctl (consulte coredumpctl(1) e journalctl(1) para detalhes) Para ver detalhes dos despejo de núcleo:\n\n```\n# coredumpctl info correspondência\n```\n\nPreste atenção à linha \"Signal\", que ajuda a identificar a causa do travamento. Para uma análise mais profunda, você pode examinar o backtrace usando gdb:\n\n```\n# coredumpctl gdb correspondência\n```\n\nQuando gdb é iniciado, use o comando bt para imprimir o backtrace:\n\n```\n(gdb) bt\n```\n\nVeja Depuração - Obtendo Rastros se símbolos de depuração forem solicitados, mas não encontrados.\n\n"
    },
    {
      "title": "Limpeza de arquivos de despejo de núcleo",
      "level": 2,
      "content": "Os arquivos de despejo de núcleo armazenados em /var/lib/systemd/coredump/ serão limpados automaticamente por systemd-tmpfiles --clean, que é acionado diariamente com systemd-tmpfiles-clean.timer. Despejos de núcleo são configurados para persistir por pelo menos 3 dias, veja systemd-tmpfiles --cat-config.\n\n"
    },
    {
      "title": "Veja também",
      "level": 2,
      "content": "- american fuzzy lop - Uma ferramenta para testes automatizados do kernel e de programas\n- Filesystem fuzzing - Artigo da LWN sobre teste de sistemas de arquivos em busca de bugs\n\n"
    }
  ]
}