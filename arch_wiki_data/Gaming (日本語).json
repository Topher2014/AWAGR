{
  "title": "Gaming (日本語)",
  "url": "https://wiki.archlinux.org/title/Gaming_(%E6%97%A5%E6%9C%AC%E8%AA%9E)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "関連記事\n\n- ゲーム一覧\n- ビデオゲームプラットフォームエミュレーター\n- Xorg\n- ゲームパッド\n- Wine\n\nLinux は長らく「非公式」のゲーミングプラットフォームと見なされてきました。ほとんどのゲーミング関連組織にとって、Linux へのサポートと Linux のターゲットユーザーは最優先事項ではありません。しかし、2021年以降、この状況に変化が現れ始めました。Valve などの大企業、CodeWeavers グループ、そしてコミュニティが、Linux エコシステムに多くの改善を行い、Linux が真にゲーム用として利用可能なプラットフォームになることが可能になりました。さらに、Linux 上でもゲームをコンパイルし実行できるようにするためにクロスプラットフォームのレンダリングエンジンに移行するインディーゲーム開発者が増えつつあります。\n\nゲームプレイに関して言えば、ユーザーの考えの大部分は、Microsoft Windows プラットフォーム専用に開発された人気のある AAA ゲームに向けられることがよくあります。これは理解できますが、Windows が唯一プレイ可能な環境であるわけではありません。このページのさらに下にある #ゲーム環境 と #ゲームの取得 章を見てください。これらの章では、他のプラットフォーム上でゲームを実行するためのソフトウェアが挙げられています。\n\nしかし、Microsoft Windows 向けに書かれたゲームを Linux で動作させることに執着している場合は、別の考え方、ツール、およびアプローチが必要で、内部についての理解と機能の代替が必要になることがあります。以下の #ゲームの技術的情報 を読んでください。\n\n"
    },
    {
      "title": "目次",
      "level": 2,
      "content": "- 1 ゲームの技術的情報\n- 2 ゲームの一般的な依存関係 2.1 必須 (広く使用されている) 2.2 任意 (しかし、よく使われている) 2.3 稀 (あまり一般的でない)\n- 3 マシン要件 3.1 ドライバー 3.2 マシンと代替品への依存性\n- 4 ゲーム環境\n- 5 ゲームの互換性 5.1 vm.max_map_count を増やす\n- 6 ゲームの取得\n- 7 ゲームの設定 7.1 マルチスクリーン環境 7.2 キーボード操作 7.3 別の X サーバーでゲームを起動する 7.4 マウス検出の調整 7.5 OpenAL とバイノーラル音声 7.6 PulseAudio の調整 7.6.1 Realtime 優先度と負の nice レベルを有効にする 7.6.2 高品質なリミックスを使ってサウンドを良くする 7.6.3 ハードウェアバッファを Pulse のバッファリングに合わせる\n- 8 リモートプレイ\n- 9 パフォーマンスを向上させる 9.1 clock_gettime のスループットを改善する 9.2 カーネルパラメータを調整して応答時間を安定化させる 9.2.1 設定の変更を永続化させる 9.3 共有オブジェクトを即座に読み込んで初回の遅延を減らす 9.4 ユーティリティ 9.4.1 Gamemode 9.4.2 Gamescope 9.5 ACO コンパイラ 9.6 DRI の遅延を軽減する 9.7 スケジューリングポリシーによってフレームレートやレスポンスを改善する 9.7.1 ポリシー 9.7.2 Nice レベル 9.7.3 コアアフィニティ 9.7.4 一般的なケース 9.7.5 Optimus やその他の便利なプログラム\n- 10 周辺機器 10.1 マウス 10.2 LED\n- 11 参照\n\n- 2.1 必須 (広く使用されている)\n- 2.2 任意 (しかし、よく使われている)\n- 2.3 稀 (あまり一般的でない)\n\n- 3.1 ドライバー\n- 3.2 マシンと代替品への依存性\n\n- 5.1 vm.max_map_count を増やす\n\n- 7.1 マルチスクリーン環境\n- 7.2 キーボード操作\n- 7.3 別の X サーバーでゲームを起動する\n- 7.4 マウス検出の調整\n- 7.5 OpenAL とバイノーラル音声\n- 7.6 PulseAudio の調整 7.6.1 Realtime 優先度と負の nice レベルを有効にする 7.6.2 高品質なリミックスを使ってサウンドを良くする 7.6.3 ハードウェアバッファを Pulse のバッファリングに合わせる\n\n- 7.6.1 Realtime 優先度と負の nice レベルを有効にする\n- 7.6.2 高品質なリミックスを使ってサウンドを良くする\n- 7.6.3 ハードウェアバッファを Pulse のバッファリングに合わせる\n\n- 9.1 clock_gettime のスループットを改善する\n- 9.2 カーネルパラメータを調整して応答時間を安定化させる 9.2.1 設定の変更を永続化させる\n- 9.3 共有オブジェクトを即座に読み込んで初回の遅延を減らす\n- 9.4 ユーティリティ 9.4.1 Gamemode 9.4.2 Gamescope\n- 9.5 ACO コンパイラ\n- 9.6 DRI の遅延を軽減する\n- 9.7 スケジューリングポリシーによってフレームレートやレスポンスを改善する 9.7.1 ポリシー 9.7.2 Nice レベル 9.7.3 コアアフィニティ 9.7.4 一般的なケース 9.7.5 Optimus やその他の便利なプログラム\n\n- 9.2.1 設定の変更を永続化させる\n\n- 9.4.1 Gamemode\n- 9.4.2 Gamescope\n\n- 9.7.1 ポリシー\n- 9.7.2 Nice レベル\n- 9.7.3 コアアフィニティ\n- 9.7.4 一般的なケース\n- 9.7.5 Optimus やその他の便利なプログラム\n\n- 10.1 マウス\n- 10.2 LED\n\n"
    },
    {
      "title": "ゲームの技術的情報",
      "level": 2,
      "content": "Windows 用に開発された AAA ゲームを Linux 上でプレイしようとすると、最終的に3つの複雑な問題が立ち塞がります:\n\nグラフィックス SDK は、グラフィックの呼び出しを基底のグラフィックドライバに転送し、グラフィックドライバは GPU ハードウェアと対話します。\n\nDirectX をメインの SDK として使用しているゲームは数多くあります。一方、Linux は OpenGL と Vulkan しかネイティブにサポートしていません。Linux それ自体は DirectX も前述の技術 (Visual C++、MFC、.NET) もサポートしていません。\n\n代わりに、同一の機能を提供し、最終的にはグラフィックの観点から同一の結果を達成することを試みるオープンソースの代替ソフトウェアがいくつか存在します。これらには、ブラックボックスの観点から、オリジナルの SDK 呼び出しによって行われるであろう結果を「再発明」することを試みる独自の代替実装が含まれています。人気なものとしては以下があります:\n\n- Wine (Wine Is Not an Emulator): \"ローダー VM\"、依存関係の自己記述、相互運用性などを提供します\n- Proton: Wine プロジェクトからフォークされました。Valve の Steam 用に最適化されています。\n- Mono: .NET の代替\n- MF-Media: media foundation の依存関係\n\n例えば、DirectX における頂点の読み込み、変換、シェーディングの呼び出しは、Wine の新しい .dll/.so でゼロから書き直され、その関数が水面下で何を行うかについての\"仮説\"に基づいて呼び出しを OpenGL に転送して、実質同じ結果を達成することを試みるかもしれません。これらの呼び出しは直接的には同じであり、DirectX が実行されているかのように扱われ、パフォーマスには影響しません (ただし、これらと対話する際の初期オーバーヘッドを除く)。\n\nしばしば、これらのツールは同時にシステム上のディストリビューションに組み込まれます。prefix (Wine 用語で、Windows サンドボックスを模倣するディレクトリを指す) が作成・設定された後、依存関係は prefix 内にインストールされ (\"サンドボックス\"はゲームの再配布可能ライブラリが依然として必要です)、しばしば winetricks もインストールされます。その後、まるで Windows 内であるかのように、ゲームの実行を試みます。\n\n最近では、この方法はほとんどのゲームでうまく行きます (Wine/Proton にはまだ存在しないカーネルドライバが必要なアンチチートで保護されているゲームを除いて)。ゲームが動作しない場合、通常は、互換性のないパッケージや不足している依存関係、Wine/Proton の未実装の機能が原因です。\n\nLutris は、ゲームをインストールする際に、依存関係を管理してくれるランナーとサンドボックスを提供するソフトウェアです。上記の手順が退屈または複雑と感じる場合に便利です。\n\n"
    },
    {
      "title": "ゲームの一般的な依存関係",
      "level": 2,
      "content": "Wine/Proton を使用する場合、どのようなことをしなければならないか、より深く理解するために、ゲームを実行するために必要となる一般的な依存関係を説明します。アーキテクチャについても、x86 か x64 か、できれば両方か、ということを念頭に置く必要があります。\n\nほとんどの Windows ゲームでは、以下の依存関係を prefix にインストールする必要があるでしょう。\n\n"
    },
    {
      "title": "必須 (広く使用されている)",
      "level": 3,
      "content": "- Microsoft Core フォント\n- Microsoft Visual C++ 2015 (2017 が広く使用されているので、推奨) [2005、2008、2010、2012、2013、2015、2017-2018、2019]\n- DirectX 9.0 (11.0 が広く使用されているので、推奨) [June SDK update 2010] {いくつかのコンポーネントの例を挙げると:} Direct3D Direct2D DirectShow DirectInput DirectPlay DirectSound DXGI XAudio2\n- .NET Framework (3.5 がよく使用されます)\n- OpenGL OpenAL OpenAI OpenCL\n- Vulkan\n\n- Direct3D\n- Direct2D\n- DirectShow\n- DirectInput\n- DirectPlay\n- DirectSound\n- DXGI\n- XAudio2\n\n- OpenAL\n- OpenAI\n- OpenCL\n\n"
    },
    {
      "title": "任意 (しかし、よく使われている)",
      "level": 3,
      "content": "- XNA\n- PhysX\n- Media Foundation\n- Quicktime\n- Adobe Reader 11\n- Java SRE (Minecraft などで)\n\n"
    },
    {
      "title": "稀 (あまり一般的でない)",
      "level": 3,
      "content": "- Gamespy\n- MIDI driver\n- ACDSee\n\n"
    },
    {
      "title": "マシン要件",
      "level": 2,
      "content": "ゲームが必要とする依存関係をプレフィックスに入れるだけでは十分ではありません。カーネルそのものが、ゲームが行う呼び出しに対応する代替が必要です。すでに述べたように、ドライバと代替品が利用可能です。\n\n"
    },
    {
      "title": "ドライバー",
      "level": 3,
      "content": "- AMD ドライバー: AMDGPU を参照。\n- Intel ドライバー: Intel graphics を参照。\n- NVIDIA ドライバー: NVIDIA を参照。\n\n"
    },
    {
      "title": "マシンと代替品への依存性",
      "level": 3,
      "content": "- Wine\n- wine-gecko\n- wine-mono\n- Vulkan\n- OpenGL\n- Proton 再配布可能パッケージ (オプションですが、役立つ場合があります)\n- wine-ge-customAUR または TKG (オプション。失敗しないかぎり) : 特定のゲームのパッチを含む、特別にコンパイルされた wine バージョン。\n\n"
    },
    {
      "title": "ゲーム環境",
      "level": 2,
      "content": "Wine/Proton 以外にもゲームをプレイする方法はあります。Linux でゲームをプレイするための環境は様々あり、これらの環境では Windows と同じくらい (あるいはそれ以上) のゲームが存在します:\n\n- ネイティブ – Linux プラットフォーム向けのビルドが存在し、OpenGL や Vulkan グラフィックス API のサポートのあるゲーム。\n- エミュレータ – 他のアーキテクチャやシステム用に設計されたソフトウェアを実行する際に必要です。ほとんどのゲームは ROM をエミュレータに読み込ませれば特に設定せずとも動き、問題が発生することは稀です。エミュレータのリストは ビデオゲームプラットフォームエミュレーター を参照してください。\n- Java - Write once, run everywhere (一度書けば、どこでも動く) なプラットフォームです。Linux でも動く人気なゲームとしては、Minecraft、RuneScape、Wurm Online、Puzzle Pirates があります。\n- ウェブ – ウェブブラウザ内で動くゲームです。 HTML5 ゲームは canvas と WebGL の技術を使用し、最近のブラウザ全てで動作可能です。 Flash ベースのゲーム – プレイするにはプラグインをインストールする必要があります。\n- Wine – Windows 互換レイヤーです。Unix ライクなオペレーティングシステム上で Windows アプリケーション (だけでなく多くのゲームも) を動かせるようにします。Wine#DXVK を使用すれば、ランタイムで DirectX から Vulkan への変換もサポートし、DirectX しかサポートしていないゲームでパフォーマンスを向上させることができます。\n- 仮想マシン – ゲームと互換性のあるオペレーティングシステム (Windows など) をインストールするために使用できます。VirtualBox には優れた 3D サポートがあります。これに加えて、互換性のあるハードウェアを使用している場合は、Windows KVM ゲストへの VGA パススルー (キーワードは \"virtual function I/O\" (VFIO)) や OVMF による PCI パススルーも可能です。\n- Proton/DXVK – プロプライエタリな steam プラットフォームで使用するために設計された、Wine のフォークです。Wine よりも優れたゲームへのサポートを可能にします。詳細は Steam#Proton Steam-Play を参照してください。\n\n- HTML5 ゲームは canvas と WebGL の技術を使用し、最近のブラウザ全てで動作可能です。\n- Flash ベースのゲーム – プレイするにはプラグインをインストールする必要があります。\n\n"
    },
    {
      "title": "vm.max_map_count を増やす",
      "level": 3,
      "content": "Arch Linuxでは、 vm.max_map_countは1048576となっていますが、一部のゲームにおいては小さすぎる可能性があります [1]。なので、以下のような sysctl 設定ファイルを作成してサイズを永続的に大きくしておきましょう:\n\n```\n/etc/sysctl.d/80-gamecompatibility.conf\n```\n\n```\nvm.max_map_count = 2147483642\n```\n\n2147483642 (MAX_INT - 5) は SteamOS でのデフォルト値です。Fedora では、1048576 が安全な値であるとされています [2]。\n\n再起動せずに変更を適用するには、以下を実行してください:\n\n```\n# sysctl --system\n```\n\n"
    },
    {
      "title": "ゲームの取得",
      "level": 2,
      "content": "Linux で利用できるゲームであったとしても、それがネイティブに動作するとは限りません。Wine や Proton と一緒に事前にパッケージングされていることもあります。\n\n公式リポジトリや AUR にある Arch 用にパッケージングされたゲームのリストは、ゲーム一覧 を見てください。\n\n- Athenaeum — Steam の代替自由ソフトウェア。\n\n- Flathub — Flatpak の中央リポジトリ。ゲームセクションはまだ小さいですが、大きくなりつつあります。\n\n- GOG.com — DRM の無いゲームストア。\n\n- Heroic Games Launcher — GOG と Legendary の GUI。Epic Games Launcher のオープンソースな代替ソフトウェア。\n\n- itch.io — インディーゲームストア。\n\n- Legendary — Epic Games Launcher のフリーでオープンソースな代替ソフトウェア。\n\n- Lutris — Linux 用のオープンなゲーミングプラットフォーム。GOG、Steam、Battle.net、Origin、Uplay、その他多くのソースからゲームを取得できます。Lutris は、様々なゲームランナーを使用しており、完全にカスタマイズ可能な設定オプションを使用してゲームを起動することができます。\n\n- Play.it — ネイティブパッケージのビルドを自動化します。Wine、DOSBox、ScummVM のゲームもサポートしています。\n\n- Rare — Legendary のもう一つの GUI。PyQt5 をベースとしています。\n\n- Steam — Valve によって開発されている、デジタル配信及びコミュニケーションのためのプラットフォーム。\n\nWine のラッパーに関しては、Wine#サードパーティ製アプリケーション を参照してください。\n\n"
    },
    {
      "title": "ゲームの設定",
      "level": 2,
      "content": "特定のゲームや、ゲームのタイプによっては実行するのに特別な設定を必要としたり、または設定されていることが前提になっていることがあります。大抵のゲームは、何も設定をしなくても Arch Linux で動作し、コンパイル時の最適化によって、他のディストリビューションよりもパフォーマンスが出ることもあります。しかしながら、特別な環境を使っている場合、希望通りにゲームをスムーズに実行するために多少の設定やスクリプトが必要になるでしょう。\n\n"
    },
    {
      "title": "マルチスクリーン環境",
      "level": 3,
      "content": "マルチスクリーン環境ではフルスクリーンのゲームで問題が発生することがあります。そのようなときは、別の X サーバーを実行するのが一つの解決方法になりえます。他の方法は NVIDIA の記事を見てみて下さい。\n\n"
    },
    {
      "title": "キーボード操作",
      "level": 3,
      "content": "多くのゲームはキーボードの入力を横取りするため、ウィンドウの切り替え (alt-tab) ができなくなることがあります。\n\n一部の SDL のゲーム (例: Guacamelee) では Ctrl-g を押すことでキーボードの占有を無効にすることが可能です。\n\n"
    },
    {
      "title": "別の X サーバーでゲームを起動する",
      "level": 3,
      "content": "上記のような場合だと、別の X サーバーを実行するのが必要もしくは望ましいかもしれません。もう一つの X サーバーを実行することには複数の利点が存在します。より良いパフォーマンス、Ctrl+Alt+F7/Ctrl+Alt+F8 を使ってゲームを\"最小化\"することができる、ゲームがグラフィックドライバーと問題を起こしてもメインの X サーバーはクラッシュしないなどです。新しい X サーバーは ALSA へのリモートアクセスログインと同じく、ユーザーは音声を聞くために audio グループに入っている必要があります。\n\n別の X サーバーを起動するには次のようにします (例として Xonotic を使っています):\n\n```\n$ xinit /usr/bin/xonotic-glx -- :1 vt$XDG_VTNR\n```\n\nさらに、別の X 設定ファイルを使うことでカスタマイズすることもできます:\n\n```\n$ xinit /usr/bin/xonotic-glx -- :1 -xf86config xorg-game.conf vt$XDG_VTNR\n```\n\n別の xorg.conf を使う理由としては、メインの設定で NVIDIA の Twinview を使って Xonotic のような 3D ゲームをマルチスクリーンの中央、全ての画面にまたがって、レンダリングしている場合などがあります。これが望ましくない場合は、セカンドスクリーンを無効にした設定を使って二番目の X を起動するのが良いでしょう。注意点として、この X 設定ファイルの場所は /etc/X11 ディレクトリからの相対パスとなります。\n\nOpenbox を利用してホームディレクトリや /usr/local/bin でゲームを起動するスクリプトは以下のようになります:\n\n```\n~/game.sh\n```\n\n```\nif [ $# -ge 1 ]; then\n        game=\"$(which $1)\"\n        openbox=\"$(which openbox)\"\n        tmpgame=\"/tmp/tmpgame.sh\"\n        DISPLAY=:1.0\n        echo -e \"${openbox} &\\n${game}\" > ${tmpgame}\n        echo \"starting ${game}\"\n        xinit ${tmpgame} -- :1 -xf86config xorg-game.conf || exit 1\nelse\n        echo \"not a valid argument\"\nfi\n```\n\nファイルを実行可能にしたら、次のようにしてスクリプトを使うことが可能です:\n\n```\n$ ~/game.sh xonotic-glx\n```\n\n"
    },
    {
      "title": "マウス検出の調整",
      "level": 3,
      "content": "マウスの素早い操作が鍵を握るゲームの場合、マウスのポーリングレートを調整することで精度を上げられます。\n\n"
    },
    {
      "title": "OpenAL とバイノーラル音声",
      "level": 3,
      "content": "OpenAL を使っているゲームでは、ヘッドフォンを使用している場合、OpenAL の HRTF フィルターを使ってより良いポジショナルオーディオを得ることができます。有効にするには、以下のファイルを作成してください:\n\n```\n~/.alsoftrc\n```\n\n```\nhrtf = true\n```\n\nまたは、AUR から openal-hrtfAUR をインストールして、/etc/openal/alsoftrc.conf のオプションを編集して下さい。\n\nSource エンジンのゲームの場合、HRTF を有効にするにはゲーム内設定の `dsp_slow_cpu` を `1` に設定します。設定しなかった場合は代わりに自前の処理がゲームによって有効にされます。また、ネイティブランタイムを使うように Steam を設定するか、または openal.so のネイティブランタイムのコピーをローカルコピーにリンクさせる必要があります。完全性のために、以下のオプションを使って下さい:\n\n```\ndsp_slow_cpu 1 # Disable in-game spatialiazation\nsnd_spatialize_roundrobin 1 # Disable spatialization 1.0*100% of sounds\ndsp_enhance_stereo 0 # Disable DSP sound effects. You may want to leave this on, if you find it does not interfere with your perception of the sound effects.\nsnd_pitchquality 1 # Use high quality sounds\n```\n\n"
    },
    {
      "title": "PulseAudio の調整",
      "level": 3,
      "content": "PulseAudio を使っている場合、最適な動作をさせるためにデフォルト設定から変更することができる部分がいくつかあります。\n\n"
    },
    {
      "title": "Realtime 優先度と負の nice レベルを有効にする",
      "level": 4,
      "content": "PulseAudio はオーディオデーモンとしてリアルタイムの優先度で実行されるようにビルドされます。しかしながら、システムがロックアップする可能性があるというセキュリティ上のリスクのため、デフォルトでは標準のスレッドと同じようにスケジューリングされます。これを変更するには、まずユーザーを audio グループに追加してください。そして、/etc/pulse/daemon.conf の以下の行をアンコメント・編集してください:\n\n```\n/etc/pulse/daemon.conf\n```\n\n```\nhigh-priority = yes\nnice-level = -11\n\nrealtime-scheduling = yes\nrealtime-priority = 5\n```\n\n編集したら pulseaudio を再起動します。\n\n"
    },
    {
      "title": "高品質なリミックスを使ってサウンドを良くする",
      "level": 4,
      "content": "Arch の PulseAudio ではリミックスチャンネルにデフォルトで speex-float-0 を使っていますが、これはやや低品質なリミックスとされています。あなたのシステムに負担を増やす余裕がある場合は、以下の設定をすることでサウンドを良くすることが可能です:\n\n```\nresample-method = speex-float-10\n```\n\n"
    },
    {
      "title": "ハードウェアバッファを Pulse のバッファリングに合わせる",
      "level": 4,
      "content": "バッファをあわせることで音の途切れを減らし、ほんの僅かですがパフォーマンスを向上させることができます。詳しくは ここ を見て下さい。\n\n"
    },
    {
      "title": "リモートプレイ",
      "level": 2,
      "content": "クラウドゲームは、クライアント側のハードウェア要件が低いため、近年大きな人気を集めています。クラウドゲームにおいて唯一重要なことは、最低速度が 5 から 10 Mbit/s (ビデオ品質やフレームレートに依ります) の安定したインターネット接続です (イーサネットケーブル接続か 5 GHz WiFi を推奨)。\n\nネットワーク経由でのゲームパッドの使用を通常サポートしていないサービスで、ネットワーク経由でゲームパッドを使用する方法については、ゲームパッド#ネットワークを介して Gamepad を使う を見てください。\n\nTable content:\nサービス | インストーラ | ブラウザクライアントでの利用 | 自身のホストを使う | ホストの貸出 | フルデスクトップサポート | コントローラサポート | 備考\nDixper | – | Yes | Windows のみ | ? | ? | ? | –\nReemo | reemod-binAUR | Chromium ベースブラウザのみ | Yes | Yes | Yes | Windows のみ | ウェブサイトのダウンロードセクションにある公式インストールスクリプトでソフトウェアをインストールすることもできます。\nXbox Cloud | xbox-cloud-gamingAUR | Yes | No | No | No | Yes | XCloud を使用するには Game Pass Ultimate が必要です。\nGeForce Now | – | Yes | No | No | Yes | Yes | このサービスを使用するには、Steam、Epic Client、あるいは GOG 上のゲームが必要です。\nMoonlight | moonlight-qtAUR | No | Yes | No | Yes | Yes | これは単なるクライアントです。ホストマシンは GeForce Experience (Windows のみ) か Sunshine (マルチプラットフォーム) を使用しなければなりません。\nParsec | parsec-binAUR | Yes (実験的) | Windows のみ | No | Yes | Yes | クラウドホスティングはもはや利用できなくなっています[リンク切れ 2023-05-06]。\nVDI Stream Client | vdi-stream-clientAUR | No | Windows のみ | No | Yes | No | 3D GPU アクセラレーションと組み込みの USB リダイレクトをサポートしている VDI クライアント。\nPlaykey | playkey-linuxAUR | ? | ? | ? | ? | ? | –\nPlayStation Now | Wine か Steam の Proton で動作します。 | No | No | – | No | Yes | PC 上で PS4、PS3、PS2 のゲームをプレイできます。あるいは、エミュレータを使うという手もあります。\nPlayStation Remote Play | chiakiAUR | No | Yes | – | Yes | Yes | PS4 や PS5 のゲームを PC でプレイできます。\nRainway | 2019 Q3 に登場予定。 | Yes | Windows のみ | No | Yes | ? | –\nShadow | 安定版: shadow-techAUR ベータ版: shadow-betaAUR | No | No | Yes | Yes | Yes | コントローラサポートは USB over IP に依存しています。現在、AVC のみのサポートとなっており、HEVC はサポートされていません。\nSteam Remote Play | steam に含まれています | No | Yes | No | No | Yes | –\nStadia | – | Yes | No | No | Yes | Yes | サービスは2023年1月18日に終了します。\nVortex[リンク切れ 2024-01-29] | – | Yes | No | – | No | ? | –\nVNC | tigervnc or x11vnc | No | Yes | No | Yes | No | 汎用のリモートデスクトッププロトコル。LAN 経由でゲームする場合には、レイテンシは十分に低いはずです。ゲームパッドのサポートについては ゲームパッド#ネットワークを介して Gamepad を使う を見てください。\nxrdp | xrdpAUR | No | Yes | No | Yes | No | もう一つの汎用リモートデスクトッププロトコル。グラフィカルアクセラレーションを設定すれば、OpenGL 及び Vulkan の両方がサポートされます。LAN 経由でゲームをする場合におすすめです。ゲームパッドのサポートについては ゲームパッド#ネットワークを介して Gamepad を使う を見てください。\nX11 フォワーディング | openssh | No | Yes | No | No | No | VirtualGL による SSH 経由での X フォワーディングは OpenGL をサポートしており、全てではありませんが一部のゲームで動作します。ゲームパッドのサポートについては ゲームパッド#ネットワークを介して Gamepad を使う を見てください。\nBoosteroid | boosteroidAUR | Yes | No | No | Yes | Yes | このサービスを使用するにはデジタル配信プラットフォーム (Steam、EGS、Origin など) 上のゲームが必要です。全てのゲームが利用できるわけではありません。ゲームの完全なリストを見るにはサインアップ (無料) する必要があります。デジタル配信プラットフォーム上であなたが所有しているゲームを起動するには、サブスクリプションを購入する必要があります。\nBlacknut | blacknut-appimageAUR または Blacknut AppImage | Yes | No | No | Yes | Yes | このサービスを使用するにはサブスクリプションが必要です。全てのゲームが利用できるわけではありません。\n\n"
    },
    {
      "title": "パフォーマンスを向上させる",
      "level": 2,
      "content": "メインの記事 (パフォーマンスの向上) も参照してください。Wine プログラムに関しては、Wine#パフォーマンス を見てください。素晴らしいゲーミング体験のためには、低遅延、(変動のない) 安定した応答時間、十分なスループット (FPS) が必要です。 小さな変動のある源が複数存在すると、それらが時々重なり合って、顕著なカクつきを生み出してしまうでしょう。ゆえに、ほとんどの場合、スループットを少し下げて、応答時間の安定性を増やすことが推奨されます。\n\n"
    },
    {
      "title": "clock_gettime のスループットを改善する",
      "level": 3,
      "content": "ユーザ空間のプログラム (特にゲーム) は、現在の時刻を取得する clock_gettime(2) をたくさん呼び出して、ゲームの物理演算や fps の計算などを行います。時間の使用頻度は以下を実行することで確認できます:\n\n```\n# perf top\n```\n\nread_hept (または acpi_pm_read) のオーバーヘッドを見てください。\n\nあなたが非常に正確なタイマーを必要としていないならば、hpet (high precision event timer) や acpi_pm (ACPI Power Management Timer) から、より高速な TSC (time stamp counter) タイマーに切り替えることができます。TSC を利用可能にし有効化するには、以下のカーネルパラメータを追加してください:\n\n```\ntsc=reliable clocksource=tsc\n```\n\nその後、再起動し、以下を実行して clocksource を確認してください:\n\n```\n# cat /sys/devices/system/clocksource/clocksource*/current_clocksource\n```\n\n以下を実行すれば、現在利用可能なタイマーすべてを確認できます:\n\n```\n# cat /sys/devices/system/clocksource/clocksource*/available_clocksource\n```\n\nこのコマンドで表示されたタイマー名を current_clocksource に echo する (つまり、書き込む) ことで、タイマーを変更することができます。Zen 3 システムにおける [4] のベンチマークでは、hpet や acpi_pm と比べて tsc のスループットのほうが約50倍良くなっています。\n\n"
    },
    {
      "title": "カーネルパラメータを調整して応答時間を安定化させる",
      "level": 3,
      "content": "リアルタイムカーネルにはデフォルトでいくつかのメリット (リアルタイムカーネルの記事を参照) がありますが、CPU のスループットが犠牲になり、また割り込み処理が遅延する可能性もあります。ちなみに、リアルタイムカーネルは nvidia-open-dkms とは互換性がなく、デフォルトのプロセススケジューリングタイプである SCHED_NORMAL (SCHED_OTHER とも呼ばれる) のプロセスのスケジューラは変更しません。以下のようにカーネルパラメータを変更すると、リアルタイムカーネルおよび他のカーネル (デフォルトの linux カーネルなど) の応答時間をさらに安定化させます:\n\n(Transparent) Hugepage の割り当てに対する proactive compaction は、割り当ての平均時間を減少させますが、最大時の時間を減らすとは限りません。Proactive compaction は、カーネルのドキュメントによると応答時間の揺れを生じさせるので (内部での動作)、無効化してください:\n\n```\n# echo 0 > /proc/sys/vm/compaction_proactiveness\n```\n\nメモリの断片化が発生した場合にページブロック1つ (x86_64 では 2MB) だけをデフラグするようにするために、watermark boost factor を減らしてください。こうすることで、メモリの断片化の発生後、アプリケーションのデータがプロセッサキャッシュの最終レベルに残りやすくなります。\n\n```\n# echo 1 > /proc/sys/vm/watermark_boost_factor\n```\n\nRAM の空き領域が十分にある場合、メモリアロケーション時に応答時間が悪化することを防ぐために、minimum free Kilobytes の値を増やしてください: [6][7]。この値を 1024 KB 以下、もしくはシステムメモリの 5% より大きい値に設定しないでください。1GB を予約するには:\n\n```\n# echo 1048576 > /proc/sys/vm/min_free_kbytes\n```\n\nRAM の空き領域が十分にある場合、アロケーション時に応答時間が増加する可能性をさらに減らすために、watermark scale factor を増やしてください (説明: [8][9])。Watermark の位置を RAM の 5% に設定するには:\n\n```\n# echo 500 > /proc/sys/vm/watermark_scale_factor\n```\n\nシステムの空きメモリ領域が不足していない限りスワップを防ぐために (スワップはページをロックするので、レイテンシを増加させ、ディスク IO を使用します)、swappiness を減らしてください:\n\n```\n# echo 10 > /proc/sys/vm/swappiness\n```\n\nMulti-Gen Least Recently Used (MGLRU) を有効化してください (小さなパフォーマンスコストでロック競合の可能性を減らします [10]):\n\n```\n# echo 5 > /sys/kernel/mm/lru_gen/enabled\n```\n\nZone reclaim を無効化してください (zone reclaim はメモリページをロック・移動するので、レイテンシのスパイクを発生させます):\n\n```\n# echo 0 > /proc/sys/vm/zone_reclaim_mode\n```\n\nパフォーマンスコストの観点から Transparent HugePages (THP) を無効化してください。デフラグメンテーションが無効化されている場合でも、THP はレイテンシのスパイクを発生させるかもしれません。[11][12] madvise と advise を使用することで、アプリケーションが明示的に要求した場合に限り有効化します:\n\n```\n# echo madvise > /sys/kernel/mm/transparent_hugepage/enabled\n# echo advise > /sys/kernel/mm/transparent_hugepage/shmem_enabled\n# echo never > /sys/kernel/mm/transparent_hugepage/defrag\n```\n\nあなたのゲームが TCMalloc を使用する場合 (例: Dota2、CS:GO)、パフォーマンスが大幅に低下してしまうので、THP を無効化することは推奨されません。[13]\n\n適切なスループットを維持しつつ、ページロック取得のレイテンシの最大値を減らします [14][15][16]:\n\n```\n# echo 1 > /proc/sys/vm/page_lock_unfairness\n```\n\nスケジューラの設定を調整します。以下のスケジューラの設定は cfs-zen-tweaksAUR と衝突するので、それぞれの設定に対してプロバイダを1つだけ選んでください。デフォルトでは、linux カーネルのスケジューラはレイテンシではなくスループットに対して最適化されています。以下のお手製の設定はそれを変更し、異なるゲームにおいてテストされ、顕著な改善が確認されています。これらの設定はあなたのユースケースに対しては最適ではないかもしれません。必要に応じてこれらの設定を変更することを検討してください [17][18][19]:\n\n```\n# echo 0 > /proc/sys/kernel/sched_child_runs_first\n# echo 1 > /proc/sys/kernel/sched_autogroup_enabled\n# echo 3000 > /proc/sys/kernel/sched_cfs_bandwidth_slice_us\n# echo 3000000 > /sys/kernel/debug/sched/base_slice_ns\n# echo 500000 > /sys/kernel/debug/sched/migration_cost_ns\n# echo 8 > /sys/kernel/debug/sched/nr_migrate\n```\n\n"
    },
    {
      "title": "設定の変更を永続化させる",
      "level": 4,
      "content": "通常、カーネルパラメータを永続的に変更するには、sysctl の設定ファイルを作成したり、ブートローダーの設定を変更したりすることが推奨されます。しかし、上記の設定の変更は procfs (/proc、sysctl を含む) と sysfs (/sys) の両方に渡っているので、最も便利な方法は systemd-tmpfiles を使用することです:\n\n```\n/etc/tmpfiles.d/consistent-response-time-for-gaming.conf\n```\n\n```\n#    Path                  Mode UID  GID  Age Argument # default value as of linux 6.6\nw /proc/sys/vm/compaction_proactiveness - - - - 0 # 20\nw /proc/sys/vm/watermark_boost_factor - - - - 1 # 15000\nw /proc/sys/vm/min_free_kbytes - - - - 1048576 # 67584\nw /proc/sys/vm/watermark_scale_factor - - - - 500 # 10\nw /proc/sys/vm/swappiness - - - - 10 # 60\nw /sys/kernel/mm/lru_gen/enabled - - - - 5 # 7\nw /proc/sys/vm/zone_reclaim_mode - - - - 0 # 0 \nw /sys/kernel/mm/transparent_hugepage/enabled - - - - madvise # always\nw /sys/kernel/mm/transparent_hugepage/shmem_enabled - - - - advise # never\nw /sys/kernel/mm/transparent_hugepage/defrag - - - - never # madvise\nw /proc/sys/vm/page_lock_unfairness - - - - 1 # 5\nw /proc/sys/kernel/sched_child_runs_first - - - - 0 # 0\nw /proc/sys/kernel/sched_autogroup_enabled - - - - 1 # 1\nw /proc/sys/kernel/sched_cfs_bandwidth_slice_us - - - - 3000 # 5000\nw /sys/kernel/debug/sched/base_slice_ns  - - - - 3000000 # 3000000\nw /sys/kernel/debug/sched/migration_cost_ns - - - - 500000 # 500000\nw /sys/kernel/debug/sched/nr_migrate - - - - 8 # 32\n```\n\nその後、再起動し、値が正しく反映されていることを確認してください。\n\n"
    },
    {
      "title": "共有オブジェクトを即座に読み込んで初回の遅延を減らす",
      "level": 3,
      "content": "使用するゲームに対して以下の環境変数を設定してください:\n\n```\nLD_BIND_NOW=1\n```\n\nこれにより、プログラムコードを実行時に読み込む必要性がなくなり (ld.so(8) を参照)、関数が初めて呼ばれたときの遅延をなくします。システム上に実際には存在せず決して呼ばれないライブラリにリンクしている startplasma-x11 などのプログラムに対してこの変数を設定しないでください。この場合、プログラムは起動時に存在しない共有オブジェクトにリンクしようとして失敗するので、問題の特定は簡単です。ほとんどのゲームはこの変数を有効化した状態で問題なく起動するはずです。\n\n"
    },
    {
      "title": "Gamemode",
      "level": 4,
      "content": "Gamemode は、ゲームがホスト OS に最適化のセットを一時的に適用するように要求できるようにする、Linux 用のデーモン/ライブラリの組です。これによりゲームのパフォーマンスを向上できます。\n\n"
    },
    {
      "title": "Gamescope",
      "level": 4,
      "content": "Gamescope は、Valve によって開発されているマイクロコンポジタです。Steam Deck で使用されています。このプロジェクトの目的は、ゲーミング向けに調整され、多くのゲーム中心の機能をサポートする独立したコンポジタを提供することです。\n\n"
    },
    {
      "title": "ACO コンパイラ",
      "level": 3,
      "content": "AMDGPU#ACO コンパイラ を参照。\n\n"
    },
    {
      "title": "DRI の遅延を軽減する",
      "level": 3,
      "content": "Direct Rendering Infrastructure (DRI) の設定ファイルは、Mesa と Nouveau を含むすべての DRI ドライバに適用されます。/etc/drirc を編集することで DRI の設定をシステム全体に対して変更することができますし、$HOME/.drirc を編集すればユーザ単位で変更できます。これらのファイルが存在しない場合、まず作成する必要があります。両方のファイルは同じ構文を使用します。オプションに関するドキュメントは https://dri.freedesktop.org/wiki/ConfigurationOptions/ で見られます。vblank との同期を無効化することで入力の遅延を減らすには、以下を追加してください:\n\n```\n<driconf>\n   <device>\n       <application name=\"Default\">\n           <option name=\"vblank_mode\" value=\"0\" />\n       </application>\n   </device>\n</driconf>\n```\n\n"
    },
    {
      "title": "スケジューリングポリシーによってフレームレートやレスポンスを改善する",
      "level": 3,
      "content": "カーネルがタスクを優先順位付けできるように適切なスケジューリングポリシーを与えれば、ほとんどのゲームにおいて利益を得られます。これらのポリシーは、理想的にはアプリケーション自体によってスレッドごとに設定されるべきです。\n\nアプリケーション自体がスケジューリングポリシーを実装していない場合、schedtool というアプリケーションとそれに関連するデーモンの schedtooldAUR を使えば、これらのタスクの多くを自動的に処理できます。\n\nどのプログラムがどのポリシーを使用するかを編集するには、/etc/schedtoold.conf を編集し、プログラム名の後に必要な schedtool 引数を追加してください。\n\n"
    },
    {
      "title": "ポリシー",
      "level": 4,
      "content": "SCHED_ISO (-pf や -ck カーネルで使用されている BFS/MuQSSPDS スケジューラでのみ実装されています) は、プロセスが CPU の最大80%まで使用できるようになるだけでなく、できるかぎり遅延とスタッタリングを減らすことにつながります。全てではなくとも多くのゲームで効果が得られます:\n\n```\nbit.trip.runner -I\n```\n\nSCHED_FIFO は、より良く機能する代替を提供します。あなたのアプリケーションが SCHED_FIFO でよりスムーズに動作するかを確認してみるべきでしょう。スムーズに動作する場合は、SCHED_FIFO を代わりに使用すべきです。とはいえ、SCHED_FIFO はシステムのリソースを枯渇させるリスクがあるので、注意してください。以下のよな -I が使用されるケースでこれを使用します:\n\n```\nbit.trip.runner -F -p 15\n```\n\n"
    },
    {
      "title": "Nice レベル",
      "level": 4,
      "content": "次に、先に処理させる必要があるタスクを昇順に nice レベルを設定します。ゲームなど、マルチメディアのタスクは基本的に nice レベルを -4 にすることが推奨されています:\n\n```\nbit.trip.runner -n -4\n```\n\n"
    },
    {
      "title": "コアアフィニティ",
      "level": 4,
      "content": "ドライバーがマルチスレッドするべきか、あるいはプログラムがマルチスレッドするべきかは、開発において多少の混乱が存在します。ドライバとプログラムの両方に同時にマルチスレッドさせてしまうと、フレームレートの低下などの大幅なパフォーマンスの劣化が発生し、クラッシュのリスクを増加させてしまいます。最近のゲームや、GLSL を無効にしないで実行される Wine プログラムなどがこの例に含まれます。単一のコアを選択して、ドライバーだけがプロセスを管理できるようにするには、-a 0x# フラグを使います。# はコアの番号に置き換えて下さい。例えば、1番目のコアを使うには:\n\n```\nbit.trip.runner -a 0x1\n```\n\nCPU にはハイパースレッディングによって 2 または 4 のコアしか存在しないのに 4 あるいは 8 もコアがあるように認識されることがあります。その場合、仮想コア 0101 (1 と 3) を使うには:\n\n```\nbit.trip.runner -a 0x5\n```\n\n"
    },
    {
      "title": "一般的なケース",
      "level": 4,
      "content": "高いフレームレートと低遅延を必要とするほとんどのゲームでは、上記のフラグを全て使うのが一番良い結果になります。ただし、アフィニティはプログラムごとに確認してください。ほとんどのネイティブゲームは正しい使い方を理解しています。一般的なケースのフラグ例:\n\n```\nbit.trip.runner -I -n -4\nAmnesia.bin64 -I -n -4\nhl2.exe -I -n -4 -a 0x1 #GLSL が有効化された状態の Wine\n```\n\n"
    },
    {
      "title": "Optimus やその他の便利なプログラム",
      "level": 4,
      "content": "一般的に、ゲームが動作するのに必要なプロセスはゲーム自体のプロセスよりも上のレベルに renice されるべきです。奇妙なことに、Wine には reverse scheduling という既知の問題が存在し、重要なプロセスに nice レベルが高く設定されることがあります。そこで、スケジューリングポリシーを設定すると動作が改善します。Wineserver も CPU 全体を消費することはあまりなく、必要なときは優先度を高くする必要があるので、無条件で SCHED_FIFO を設定したほうが良いでしょう。\n\n```\noptirun -I -n -5\nwineserver -F -p 20 -n 19\nsteam.exe -I -n -5\n```\n\n"
    },
    {
      "title": "マウス",
      "level": 3,
      "content": "マウスのアクセラレーションを設定して、マウスをより正確にコントロールできるようにすると良いかもしれません。\n\nマウスに4つ以上のボタンが付いている場合、マウスボタン を参照すると良いかもしれません。\n\nゲーミングマウス (特に Logitech と Steelseries) を使用している場合、piper を使ってマウスのマウスのポーリングレート、DPI、LED などを設定すると良いかもしれません。piper によってサポートされているデバイスの完全なリストはこのページを見てください。logitech デバイスだけの場合は solaar も使えます。\n\n"
    },
    {
      "title": "LED",
      "level": 3,
      "content": "openrgb を使ってマザーボードや RAM の点灯を変更できます。現在サポートされているデバイスのリストは、[20] を見てください。\n\n"
    },
    {
      "title": "参照",
      "level": 2,
      "content": "- linux_gaming - reddit.com 上の Linux ゲーミングに関するフォーラム。サブページ: Wiki、FAQ。\n- Linux Gaming Guide - Linux ゲーミングのエクスペリエンスの最適化に関するテクニック集。\n- are we anti cheat yet - アンチチートを使用するゲームとそのゲームの Gnu/Linux 及び Wine/Proton における互換性の、コミュニティによる包括的なリスト。\n- proton db - コミュニティによる Linux 互換性レポート集\n\n"
    }
  ]
}