{
  "title": "Google Authenticator (Español)",
  "url": "https://wiki.archlinux.org/title/Google_Authenticator_(Espa%C3%B1ol)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **2020-12-11** \n\nArtículos relacionados\n\n- OATH\n- pam_oath\n\nGoogle Authenticator proporciona un procedimiento de autenticación de dos pasos que utiliza códigos de acceso de un solo uso (OTP). La aplicación generadora de OTP está disponible para iOS, Android y Blackberry. El mecanismo de autenticación se integra en el sistema PAM de Linux. Esta guía muestra la instalación y configuración de este mecanismo.\n\nPara la operación inversa (generar códigos compatibles con Google Authenticator en Linux), véase #Generación de código a continuación.\n\n"
    },
    {
      "title": "Instalación",
      "level": 2,
      "content": "Instale el paquete libpam-google-authenticator, que proporciona el programa cliente google-authenticator y el módulo PAM pam_google_authenticator.so. La versión de desarrollo también está disponible con google-authenticator-libpam-gitAUR.\n\n"
    },
    {
      "title": "Configurando PAM",
      "level": 2,
      "content": "Por lo general, se requiere una autenticación de dos pasos solo para el inicio de sesión remoto. El archivo de configuración de PAM correspondiente es /etc/pam.d/sshd. En caso de que desee utilizar Google Authenticator globalmente, tendría que cambiar /etc/pam.d/system-auth, sin embargo, en este caso, proceda con extrema precaución para no bloquearse. En esta guía, procedemos con la edición de /etc/pam.d/sshd que se realiza de forma más segura (pero no necesariamente) en una sesión local.\n\nPara introducir la contraseña de Unix y su OTP, añada pam_google_authenticator.so por encima de las líneas system-remote-login en /etc/pam.d/sshd:\n\n```\nauth            required        pam_google_authenticator.so\n auth            include         system-remote-login\n account         include         system-remote-login\n password        include         system-remote-login\n session         include         system-remote-login\n```\n\nEsto le solicitará la OTP antes de su contraseña de Unix. Cambiar el orden de los dos módulos invertirá este orden.\n\nPara permitir el inicio de sesión con OTP o su contraseña de Unix, utilice:\n\n```\nauth            sufficient      pam_google_authenticator.so\n```\n\nActivar la autenticación desafío-respuesta (challenge-response) en /etc/ssh/sshd_config:\n\n```\nChallengeResponseAuthentication yes\n```\n\nFinalmente, reinicie el servicio sshd.\n\n"
    },
    {
      "title": "Solicitar OTP solo cuando se conecte desde fuera de su red local",
      "level": 3,
      "content": "A veces, solo queremos activar la capacidad 2FA solo cuando nos conectamos desde fuera de nuestra red local. Para lograr esto, cree un archivo (por ejemplo, /etc/security/access-local.conf) y añada las redes desde las que desea omitir el 2FA:\n\n```\n# Permitir solo desde el rango de IP local\n+ : ALL : 192.168.20.0/24\n# Red adicional: VPN en el túnel IP (en caso de que tenga uno)\n+ : ALL : 10.8.0.0/24\n+ : ALL : LOCAL\n- : ALL : ALL\n```\n\nLuego edite su /etc/pam.d/sshd y añada la línea:\n\n```\n#%PAM-1.0\n#auth     required  pam_securetty.so     #disable remote root\nauth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\nauth      required  pam_google_authenticator.so\nauth      include   system-remote-login\naccount   include   system-remote-login\npassword  include   system-remote-login\nsession   include   system-remote-login\n```\n\n"
    },
    {
      "title": "Generar un archivo de clave secreta",
      "level": 2,
      "content": "Todo usuario que quiera usar la autenticación de dos pasos necesita generar un archivo de clave secreta en su carpeta de inicio. Esto se puede hacer muy fácilmente utilizando google-authenticator:\n\n```\n$ google-authenticator\n   Do you want authentication tokens to be time-based (y/n) y\n   <Here you will see generated QR code>\n   Your new secret key is: ZVZG5UZU4D7MY4DH\n   Your verification code is 269371\n   Your emergency scratch codes are:\n     70058954\n     97277505\n     99684896\n     56514332\n     82717798\n   \n   Do you want me to update your \"/home/username/.google_authenticator\" file (y/n) y\n   \n   Do you want to disallow multiple uses of the same authentication\n   token? This restricts you to one login about every 30s, but it increases\n   your chances to notice or even prevent man-in-the-middle attacks (y/n) y\n   \n   By default, tokens are good for 30 seconds and in order to compensate for\n   possible time-skew between the client and the server, we allow an extra\n   token before and after the current time. If you experience problems with poor\n   time synchronization, you can increase the window from its default\n   size of 1:30min to about 4min. Do you want to do so (y/n) n\n   \n   If the computer that you are logging into is not hardened against brute-force\n   login attempts, you can enable rate-limiting for the authentication module.\n   By default, this limits attackers to no more than 3 login attempts every 30s.\n   Do you want to enable rate-limiting (y/n) y\n```\n\nSe recomienda guardar los códigos de emergencia de manera segura (imprimirlos y guardarlos en un lugar seguro) ya que son su única forma de iniciar sesión (a través de SSH) cuando pierda su teléfono móvil (es decir, su generador de OTP). También se almacenan en ~/.google_authenticator, por lo que puede buscarlos en cualquier momento siempre y cuando haya iniciado sesión.\n\n"
    },
    {
      "title": "Configurando su generador de OTP",
      "level": 2,
      "content": "Instale una aplicación generadora en su teléfono móvil (por ejemplo):\n\n- FreeOTP para Android/iOS.\n- Google Authenticator para Android/iOS.\n\nEn la aplicación móvil, cree una nueva cuenta y, o bien escanee el código QR de la URL que le indicaron al generar el archivo de clave secreta, o introduzca manualmente la clave secreta (en el ejemplo anterior 'ZVZG5UZU4D7MY4DH').\n\nAhora debería ver un nuevo token de código de acceso que se genera cada 30 segundos en su teléfono.\n\n"
    },
    {
      "title": "Probando",
      "level": 2,
      "content": "Conecte por SSH a su host desde otra máquina y/o desde otra ventana de terminal:\n\n```\n$ ssh hostname\n login as: <usuario>\n Verification code: <generado/emergencia>\n Password: <contraseña>\n $\n```\n\n"
    },
    {
      "title": "Ubicación de almacenamiento",
      "level": 2,
      "content": "Si desea cambiar la ruta de almacenamiento de los archivos de clave secreta, puede utilizar la opción --secret:\n\n```\n$ google-authenticator --secret=\"/RUTA_CARPETA/USUARIO\"\n```\n\nEntonces, no olvide cambiar la ruta de ubicación de PAM, en /etc/pam.d/sshd:\n\n```\n/etc/pam.d/sshd\n```\n\n```\nauth required pam_google_authenticator.so user=root secret=/RUTA_CARPETA/${USER}\n```\n\nuser=root se utiliza para forzar a PAM a buscar el archivo utilizando un superusuario.\n\nAdemás, tenga cuidado con los permisos del archivo de clave secreta. De hecho, el archivo debe ser solo legible por el propietario (chmod: 400). Aquí, el propietario es el superusuario (root).\n\n```\n$ chown root.root /RUTA_ARCHIVO/ARCHIVOS_CLAVE_SECRETA\n  chmod 400 /RUTA_ARCHIVO/ARCHIVOS_CLAVE_SECRETA\n```\n\n"
    },
    {
      "title": "Inicios de sesión del escritorio",
      "level": 2,
      "content": "El complemento PAM de Google Authenticator también se puede utilizar para inicios de sesión de consola y con GDM. Simplemente añada lo siguiente a /etc/pam.d/login o al archivo /etc/pam.d/gdm-password:\n\n```\nauth required pam_google_authenticator.so\n```\n\n"
    },
    {
      "title": "Generación de código",
      "level": 2,
      "content": "Si tiene Google Authenticator configurado con otros sistemas, perder su dispositivo puede impedirle iniciar sesión en estos. Tener formas adicionales de generar los códigos puede ser útil.\n\n"
    },
    {
      "title": "Gestores de código",
      "level": 3,
      "content": "Una script que permite la visualización, generación, almacenamiento y gestión de códigos de autenticación de Google está disponible en AUR (gashellAUR). Alternativamente, también está auther (auther-gitAUR).\n\n"
    },
    {
      "title": "KeePassXC",
      "level": 3,
      "content": "El gestor de contraseñas GUI keepassxc permite asociar a sus entradas códigos de Google Authenticator, y luego puede generar códigos OTP y exportar sus claves vía código QR.\n\n"
    },
    {
      "title": "Línea de órdenes",
      "level": 3,
      "content": "La forma más fácil de generar códigos es con oath-tool. Está disponible en el paquete oath-toolkit, y se puede utilizar de la siguiente manera:\n\n```\noathtool --totp -b ABC123\n```\n\nDonde ABC123 es la clave secreta.\n\nEn la mayoría de los sistemas Android con acceso de usuario suficiente, la base de datos de Google Authenticator se puede copiar del dispositivo y acceder directamente, ya que es una base de datos sqlite3. Este script de shell leerá una base de datos de Google Authenticator y generará códigos en vivo para cada clave encontrada:\n\n```\ngoogle-authenticator.sh\n```\n\n```\n#!/bin/sh\n\n# Esta es la ruta al archivo de la aplicación Google Authenticator. Se suele ubicar\n# en /data bajo Android. Cópielo en su PC en un lugar seguro y especifique la\n# ruta aquí.\nDB=\"/ruta/a/com.google.android.apps.authenticator/databases/databases\"\n\nsqlite3 \"$DB\" 'SELECT email,secret FROM accounts;' | while read A\ndo\n        NAME=`echo \"$A\" | cut -d '|' -f 1`\n        KEY=`echo \"$A\" | cut -d '|' -f 2`\n        CODE=`oathtool --totp -b \"$KEY\"`\n        echo -e \"\\e[1;32m$CODE\\e[0m - \\e[1;33m$NAME\\e[0m\"\ndone\n```\n\n"
    }
  ]
}